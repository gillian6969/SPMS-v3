{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Chart date filter state - initialize early to avoid undefined errors\n    const chartFilters = ref({\n      attendance: {\n        period: 'month'\n      },\n      assessmentType: {\n        period: 'month'\n      },\n      performanceTrend: {\n        period: 'month'\n      },\n      assessmentTypePerformance: {\n        period: 'month'\n      }\n    });\n\n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n\n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n\n          // Save available years\n          availableYears.value = uniqueYears.sort();\n\n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n\n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n\n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n\n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n\n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to apply date filter for a specific chart\n    const applyChartDateFilter = async (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n\n      // Update the filter period\n      chartFilters.value[chartType].period = period;\n\n      // Calculate date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n\n      // Fetch and update the specific chart\n      await fetchChartData(chartType, startDate, endDate);\n    };\n\n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare query parameters\n        const params = {\n          teacherId,\n          startDate,\n          endDate\n        };\n\n        // Add filters if selected\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        console.log(`Fetching ${chartType} data with params:`, params);\n        let endpoint;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n\n        // Use try-catch to handle potential 404 errors\n        try {\n          const response = await axios.get(`http://localhost:8000/api/${endpoint}`, {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          console.log(`${chartType} data received:`, response.data);\n\n          // Store raw data for export\n          chartData.value[chartType] = response.data;\n\n          // Update the specific chart\n          switch (chartType) {\n            case 'attendance':\n              if (response.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = response.data;\n                const formattedData = {\n                  attendanceDistribution: [attendanceStats.present || 0, attendanceStats.late || 0, attendanceStats.absent || 0]\n                };\n                updatePerformanceChart(formattedData);\n              }\n              break;\n            case 'assessmentType':\n              if (response.data && response.data.assessmentTypes) {\n                const assessmentData = [];\n                Object.keys(response.data.assessmentTypes).forEach(type => {\n                  const typeData = response.data.assessmentTypes[type];\n                  if (typeData) {\n                    let avgScore = 0;\n                    if (typeData.scoreCount && typeData.scoreCount > 0) {\n                      avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                    }\n                    assessmentData.push({\n                      type: type,\n                      averageScore: avgScore,\n                      count: typeData.count || 0\n                    });\n                  }\n                });\n                updateAssessmentTypeChart({\n                  assessmentData\n                });\n              }\n              break;\n            case 'performanceTrend':\n              if (response.data) {\n                // Create performance trends data\n                const performanceTrends = Array.isArray(response.data) ? response.data.filter(a => a.date) // Only include assessments with dates\n                .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n                .map(assessment => {\n                  // Calculate average score for this assessment\n                  let averageScore = 0;\n                  let scoreArray = [];\n                  if (assessment.scores) {\n                    if (Array.isArray(assessment.scores)) {\n                      scoreArray = assessment.scores;\n                    } else if (typeof assessment.scores === 'object') {\n                      scoreArray = Object.values(assessment.scores);\n                    }\n                    const validScores = scoreArray.filter(score => typeof score === 'number');\n                    if (validScores.length > 0) {\n                      const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                      averageScore = totalScore / validScores.length;\n                    }\n                  }\n                  return {\n                    date: assessment.date,\n                    score: averageScore,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  };\n                }) : [];\n                updatePerformanceTrendChart(performanceTrends);\n              }\n              break;\n            case 'assessmentTypePerformance':\n              if (response.data) {\n                // Create performance trends data for assessment type performance\n                const performanceTrends = Array.isArray(response.data) ? response.data.filter(a => a.date) // Only include assessments with dates\n                .map(assessment => ({\n                  date: assessment.date,\n                  score: assessment.averageScore || 0,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                })) : [];\n                updateAssessmentTypePerformanceChart({\n                  performanceTrends\n                });\n              }\n              break;\n          }\n        } catch (error) {\n          console.error(`Error calling API for ${endpoint}:`, error);\n          // If API call fails, use empty data\n          if (chartType === 'attendance') {\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          } else if (chartType === 'assessmentType') {\n            updateAssessmentTypeChart({\n              assessmentData: []\n            });\n          } else if (chartType === 'performanceTrend') {\n            updatePerformanceTrendChart([]);\n          } else if (chartType === 'assessmentTypePerformance') {\n            updateAssessmentTypePerformanceChart({\n              performanceTrends: []\n            });\n          }\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n      }\n    };\n\n    // Function to generate and download chart data\n    const generateChartData = async (chartType, exportType = 'excel') => {\n      try {\n        console.log(`Generating ${exportType} for ${chartType} chart`);\n\n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n\n            // Format attendance data for export\n            if (chartData.value[chartType]) {\n              // Use chartData instead of data\n              const stats = chartData.value[chartType];\n              dataToExport = [{\n                'Status': 'Present',\n                'Count': stats.present || 0\n              }, {\n                'Status': 'Late',\n                'Count': stats.late || 0\n              }, {\n                'Status': 'Absent',\n                'Count': stats.absent || 0\n              }];\n            } else if (data.value?.attendanceDistribution) {\n              // Fallback to data.value if needed\n              dataToExport = [{\n                'Status': 'Present',\n                'Count': data.value.attendanceDistribution[0] || 0\n              }, {\n                'Status': 'Late',\n                'Count': data.value.attendanceDistribution[1] || 0\n              }, {\n                'Status': 'Absent',\n                'Count': data.value.attendanceDistribution[2] || 0\n              }];\n            }\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n\n            // Format assessment type data for export\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n\n            // Format performance trend data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData.filter(assessment => assessment.date).map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment': assessment.name || assessment.title || '',\n                  'Type': assessment.type || '',\n                  'Average Score': assessment.averageScore || 0\n                }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n\n            // Format assessment type performance data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData.filter(assessment => assessment.date && assessment.type).map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment Type': assessment.type || '',\n                  'Assessment Name': assessment.name || assessment.title || '',\n                  'Average Score': assessment.averageScore || 0\n                }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment Type': trend.type || '',\n                'Assessment Name': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n\n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          return;\n        }\n        if (exportType === 'excel') {\n          // Create and download Excel file\n          const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n          const workbook = XLSX.utils.book_new();\n          XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n          const excelBuffer = XLSX.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array'\n          });\n          const excelData = new Blob([excelBuffer], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          });\n          saveAs(excelData, `${fileName}.xlsx`);\n          console.log(`Excel data exported for ${chartType}`);\n        } else if (exportType === 'pdf') {\n          // Create and download PDF file\n          const doc = new jsPDF();\n\n          // Add title\n          let title = '';\n          switch (chartType) {\n            case 'attendance':\n              title = 'Attendance Distribution';\n              break;\n            case 'assessmentType':\n              title = 'Assessment Performance Analysis';\n              break;\n            case 'performanceTrend':\n              title = 'Performance Trends Over Time';\n              break;\n            case 'assessmentTypePerformance':\n              title = 'Performance by Assessment Type';\n              break;\n          }\n          doc.setFontSize(16);\n          doc.text(title, 14, 16);\n\n          // Add filters used\n          let filterText = 'Filters: ';\n          if (selectedYear.value) filterText += `Year: ${selectedYear.value}, `;\n          if (selectedSection.value) filterText += `Section: ${selectedSection.value}, `;\n          if (selectedSubject.value) filterText += `Subject: ${selectedSubject.value}, `;\n\n          // Add date filter\n          filterText += `Period: ${chartFilters.value[chartType].period}`;\n          doc.setFontSize(10);\n          doc.text(filterText, 14, 24);\n\n          // Add date of generation\n          doc.text(`Generated on: ${moment().format('MMMM D, YYYY')}`, 14, 30);\n\n          // Extract column headers from data\n          const columns = Object.keys(dataToExport[0]).map(key => ({\n            header: key,\n            dataKey: key\n          }));\n\n          // Add table\n          doc.autoTable({\n            startY: 35,\n            head: [columns.map(col => col.header)],\n            body: dataToExport.map(item => columns.map(col => item[col.dataKey])),\n            styles: {\n              fontSize: 10\n            },\n            headStyles: {\n              fillColor: [0, 51, 102]\n            },\n            alternateRowStyles: {\n              fillColor: [240, 244, 248]\n            }\n          });\n\n          // Save PDF\n          doc.save(`${fileName}.pdf`);\n          console.log(`PDF data exported for ${chartType}`);\n        }\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n      }\n    };\n\n    // Enhanced fetchDashboardData function\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n\n        // Prepare query parameters\n        const params = {};\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        console.log('Fetching dashboard data with params:', params);\n\n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n\n        // Store complete data for reference\n        data.value = response.data;\n\n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = response.data.totalStudents > 0 || response.data.totalSections > 0 || Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0) || Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0;\n\n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n\n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n\n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n\n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [attendanceStats.present || 0, attendanceStats.late || 0, attendanceStats.absent || 0];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n\n        // Fetch assessment data separately\n        await fetchAssessmentData();\n\n        // After updating the charts, apply the default filter (month) to each chart\n        // This ensures the charts' data is consistent with the filter state\n        const endDate = moment().format('YYYY-MM-DD');\n        const startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        await Promise.all([fetchChartData('attendance', startDate, endDate), fetchChartData('assessmentType', startDate, endDate), fetchChartData('performanceTrend', startDate, endDate), fetchChartData('assessmentTypePerformance', startDate, endDate)]);\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) ? data.attendanceDistribution.slice(0, 3) : [0, 0, 0];\n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for late\n            'rgba(239, 68, 68, 0.8)' // Red for absent\n            ],\n            borderColor: ['rgb(15, 140, 80)',\n            // Darker borders for contrast\n            'rgb(220, 160, 20)', 'rgb(220, 50, 50)'],\n            borderWidth: 1,\n            hoverOffset: 15\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n\n      // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n\n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n\n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      console.log('Processed assessment chart data:', processedData);\n\n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: processedData.scores,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Quiz\n            'rgba(59, 130, 246, 0.8)',\n            // Blue for Activity\n            'rgba(251, 191, 36, 0.8)' // Yellow for Performance Task\n            ].slice(0, processedData.types.length),\n            borderColor: ['rgb(15, 140, 80)', 'rgb(45, 110, 220)', 'rgb(220, 160, 20)'].slice(0, processedData.types.length),\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        console.log('Fetching assessment data with params:', params);\n\n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({\n          assessmentData: []\n        });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = data => {\n      if (data) {\n        console.log('Assessment data received:', data);\n\n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            },\n            'Activity': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            },\n            'Performance Task': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            }\n          };\n\n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n\n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n\n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 ? (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0;\n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n\n          // Create performance trends data\n          const performanceTrends = data.filter(a => a.date) // Only include assessments with dates\n          .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n          .map(assessment => {\n            // Calculate average score for this assessment\n            let averageScore = 0;\n            let scoreArray = [];\n            if (assessment.scores) {\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (typeof assessment.scores === 'object') {\n                scoreArray = Object.values(assessment.scores);\n              }\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              if (validScores.length > 0) {\n                const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                averageScore = totalScore / validScores.length;\n              }\n            }\n            return {\n              date: assessment.date,\n              score: averageScore,\n              name: assessment.name || assessment.title || assessment.type,\n              type: assessment.type\n            };\n          });\n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initEmptyCharts();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n\n      // Add default chart filter periods\n      Object.keys(chartFilters.value).forEach(chartType => {\n        chartFilters.value[chartType].period = 'month';\n      });\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","saveAs","XLSX","jsPDF","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","chartFilters","attendance","period","assessmentType","performanceTrend","assessmentTypePerformance","chartData","availableYears","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","data","value","attendanceDistribution","some","val","hasPerformanceData","Array","isArray","performanceTrends","length","assessmentTypes","Object","values","type","count","hasAssessmentData","assessmentTypeDistribution","hasActivity","loading","userName","firstName","lastName","trim","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueYears","Set","map","record","filter","Boolean","sort","filteredRecords","section","subject","uniqueSections","uniqueSubjects","warn","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initEmptyCharts","updatePerformanceChart","updateAssessmentTypeChart","assessmentData","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","applyChartDateFilter","chartType","endDate","startDate","subtract","fetchChartData","endpoint","Error","response","attendanceStats","formattedData","present","late","absent","keys","forEach","typeData","avgScore","scoreCount","totalScore","toFixed","a","date","b","Date","assessment","scoreArray","scores","validScores","score","reduce","sum","title","generateChartData","exportType","dataToExport","fileName","stats","rawData","trend","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","excelData","Blob","doc","setFontSize","text","filterText","columns","key","header","dataKey","autoTable","startY","head","col","body","item","styles","fontSize","headStyles","fillColor","alternateRowStyles","save","hasValidData","hasOwnProperty","scoreValue","parseFloat","isNaN","attendanceResponse","err","fetchAssessmentData","Promise","all","ctx","getContext","existingChart","getChart","destroy","attendanceData","slice","totalAttendance","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","display","position","padding","font","size","tooltip","callbacks","label","context","raw","total","percentage","titleFont","weight","bodyFont","cornerRadius","layout","top","right","bottom","left","processedData","types","counts","availableTypes","find","borderRadius","barPercentage","scales","y","beginAtZero","max","grid","color","ticks","x","dataset","afterLabel","dataIndex","validData","d","Number","tension","fill","pointRadius","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","trendsByType","Quiz","Activity","allDates","flat","entries","index","colors","point","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore","assessmentResponse","processAssessmentResponse"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('attendance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('attendance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('attendance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('attendance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAttendanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentType', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('assessmentType')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAssessmentData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('performanceTrend', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('performanceTrend')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('assessmentTypePerformance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { saveAs } from 'file-saver'\nimport * as XLSX from 'xlsx'\nimport jsPDF from 'jspdf'\nimport 'jspdf-autotable'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Chart date filter state - initialize early to avoid undefined errors\n    const chartFilters = ref({\n      attendance: { period: 'month' },\n      assessmentType: { period: 'month' },\n      performanceTrend: { period: 'month' },\n      assessmentTypePerformance: { period: 'month' }\n    });\n    \n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n            \n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n      \n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to apply date filter for a specific chart\n    const applyChartDateFilter = async (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n      \n      // Update the filter period\n      chartFilters.value[chartType].period = period;\n      \n      // Calculate date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      \n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n      \n      // Fetch and update the specific chart\n      await fetchChartData(chartType, startDate, endDate);\n    };\n    \n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          startDate,\n          endDate\n        };\n        \n        // Add filters if selected\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        \n        console.log(`Fetching ${chartType} data with params:`, params);\n        \n        let endpoint;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Use try-catch to handle potential 404 errors\n        try {\n          const response = await axios.get(`http://localhost:8000/api/${endpoint}`, {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          console.log(`${chartType} data received:`, response.data);\n          \n          // Store raw data for export\n          chartData.value[chartType] = response.data;\n          \n          // Update the specific chart\n          switch (chartType) {\n            case 'attendance':\n              if (response.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = response.data;\n                const formattedData = {\n                  attendanceDistribution: [\n                    attendanceStats.present || 0,\n                    attendanceStats.late || 0,\n                    attendanceStats.absent || 0\n                  ]\n                };\n                updatePerformanceChart(formattedData);\n              }\n              break;\n            case 'assessmentType':\n              if (response.data && response.data.assessmentTypes) {\n                const assessmentData = [];\n                \n                Object.keys(response.data.assessmentTypes).forEach(type => {\n                  const typeData = response.data.assessmentTypes[type];\n                  if (typeData) {\n                    let avgScore = 0;\n                    if (typeData.scoreCount && typeData.scoreCount > 0) {\n                      avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                    }\n                    \n                    assessmentData.push({\n                      type: type,\n                      averageScore: avgScore,\n                      count: typeData.count || 0\n                    });\n                  }\n                });\n                \n                updateAssessmentTypeChart({ assessmentData });\n              }\n              break;\n            case 'performanceTrend':\n              if (response.data) {\n                // Create performance trends data\n                const performanceTrends = Array.isArray(response.data) ? response.data\n                  .filter(a => a.date) // Only include assessments with dates\n                  .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n                  .map(assessment => {\n                    // Calculate average score for this assessment\n                    let averageScore = 0;\n                    let scoreArray = [];\n                    \n                    if (assessment.scores) {\n                      if (Array.isArray(assessment.scores)) {\n                        scoreArray = assessment.scores;\n                      } else if (typeof assessment.scores === 'object') {\n                        scoreArray = Object.values(assessment.scores);\n                      }\n                      \n                      const validScores = scoreArray.filter(score => typeof score === 'number');\n                      if (validScores.length > 0) {\n                        const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                        averageScore = totalScore / validScores.length;\n                      }\n                    }\n                    \n                    return {\n                      date: assessment.date,\n                      score: averageScore,\n                      name: assessment.name || assessment.title || assessment.type,\n                      type: assessment.type\n                    };\n                  }) : [];\n                \n                updatePerformanceTrendChart(performanceTrends);\n              }\n              break;\n            case 'assessmentTypePerformance':\n              if (response.data) {\n                // Create performance trends data for assessment type performance\n                const performanceTrends = Array.isArray(response.data) ? response.data\n                  .filter(a => a.date) // Only include assessments with dates\n                  .map(assessment => ({\n                    date: assessment.date,\n                    score: assessment.averageScore || 0,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  })) : [];\n                \n                updateAssessmentTypePerformanceChart({\n                  performanceTrends\n                });\n              }\n              break;\n          }\n        } catch (error) {\n          console.error(`Error calling API for ${endpoint}:`, error);\n          // If API call fails, use empty data\n          if (chartType === 'attendance') {\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          } else if (chartType === 'assessmentType') {\n            updateAssessmentTypeChart({ assessmentData: [] });\n          } else if (chartType === 'performanceTrend') {\n            updatePerformanceTrendChart([]);\n          } else if (chartType === 'assessmentTypePerformance') {\n            updateAssessmentTypePerformanceChart({ performanceTrends: [] });\n          }\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n      }\n    };\n    \n    // Function to generate and download chart data\n    const generateChartData = async (chartType, exportType = 'excel') => {\n      try {\n        console.log(`Generating ${exportType} for ${chartType} chart`);\n        \n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        \n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format attendance data for export\n            if (chartData.value[chartType]) {\n              // Use chartData instead of data\n              const stats = chartData.value[chartType];\n              dataToExport = [\n                {\n                  'Status': 'Present',\n                  'Count': stats.present || 0\n                },\n                {\n                  'Status': 'Late',\n                  'Count': stats.late || 0\n                },\n                {\n                  'Status': 'Absent',\n                  'Count': stats.absent || 0\n                }\n              ];\n            } else if (data.value?.attendanceDistribution) {\n              // Fallback to data.value if needed\n              dataToExport = [\n                {\n                  'Status': 'Present',\n                  'Count': data.value.attendanceDistribution[0] || 0\n                },\n                {\n                  'Status': 'Late',\n                  'Count': data.value.attendanceDistribution[1] || 0\n                },\n                {\n                  'Status': 'Absent',\n                  'Count': data.value.attendanceDistribution[2] || 0\n                }\n              ];\n            }\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type data for export\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format performance trend data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData\n                  .filter(assessment => assessment.date)\n                  .map(assessment => ({\n                    'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                    'Assessment': assessment.name || assessment.title || '',\n                    'Type': assessment.type || '',\n                    'Average Score': assessment.averageScore || 0\n                  }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type performance data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData\n                  .filter(assessment => assessment.date && assessment.type)\n                  .map(assessment => ({\n                    'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                    'Assessment Type': assessment.type || '',\n                    'Assessment Name': assessment.name || assessment.title || '',\n                    'Average Score': assessment.averageScore || 0\n                  }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment Type': trend.type || '',\n                'Assessment Name': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          return;\n        }\n        \n        if (exportType === 'excel') {\n          // Create and download Excel file\n          const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n          const workbook = XLSX.utils.book_new();\n          XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n          const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n          const excelData = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n          saveAs(excelData, `${fileName}.xlsx`);\n          \n          console.log(`Excel data exported for ${chartType}`);\n        } else if (exportType === 'pdf') {\n          // Create and download PDF file\n          const doc = new jsPDF();\n          \n          // Add title\n          let title = '';\n          switch (chartType) {\n            case 'attendance':\n              title = 'Attendance Distribution';\n              break;\n            case 'assessmentType':\n              title = 'Assessment Performance Analysis';\n              break;\n            case 'performanceTrend':\n              title = 'Performance Trends Over Time';\n              break;\n            case 'assessmentTypePerformance':\n              title = 'Performance by Assessment Type';\n              break;\n          }\n          \n          doc.setFontSize(16);\n          doc.text(title, 14, 16);\n          \n          // Add filters used\n          let filterText = 'Filters: ';\n          if (selectedYear.value) filterText += `Year: ${selectedYear.value}, `;\n          if (selectedSection.value) filterText += `Section: ${selectedSection.value}, `;\n          if (selectedSubject.value) filterText += `Subject: ${selectedSubject.value}, `;\n          \n          // Add date filter\n          filterText += `Period: ${chartFilters.value[chartType].period}`;\n          \n          doc.setFontSize(10);\n          doc.text(filterText, 14, 24);\n          \n          // Add date of generation\n          doc.text(`Generated on: ${moment().format('MMMM D, YYYY')}`, 14, 30);\n          \n          // Extract column headers from data\n          const columns = Object.keys(dataToExport[0]).map(key => ({ \n            header: key, \n            dataKey: key \n          }));\n          \n          // Add table\n          doc.autoTable({\n            startY: 35,\n            head: [columns.map(col => col.header)],\n            body: dataToExport.map(item => columns.map(col => item[col.dataKey])),\n            styles: { fontSize: 10 },\n            headStyles: { fillColor: [0, 51, 102] },\n            alternateRowStyles: { fillColor: [240, 244, 248] }\n          });\n          \n          // Save PDF\n          doc.save(`${fileName}.pdf`);\n          \n          console.log(`PDF data exported for ${chartType}`);\n        }\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n      }\n    };\n\n    // Enhanced fetchDashboardData function\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = \n          (response.data.totalStudents > 0) || \n          (response.data.totalSections > 0) || \n          (Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0)) ||\n          (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [\n                attendanceStats.present || 0,\n                attendanceStats.late || 0,\n                attendanceStats.absent || 0\n              ];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Fetch assessment data separately\n        await fetchAssessmentData();\n        \n        // After updating the charts, apply the default filter (month) to each chart\n        // This ensures the charts' data is consistent with the filter state\n        const endDate = moment().format('YYYY-MM-DD');\n        const startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        \n        await Promise.all([\n          fetchChartData('attendance', startDate, endDate),\n          fetchChartData('assessmentType', startDate, endDate),\n          fetchChartData('performanceTrend', startDate, endDate),\n          fetchChartData('assessmentTypePerformance', startDate, endDate)\n        ]);\n        \n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n      \n      // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n      \n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n      \n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      \n      console.log('Processed assessment chart data:', processedData);\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: processedData.scores,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ].slice(0, processedData.types.length),\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ].slice(0, processedData.types.length),\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        \n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching assessment data with params:', params);\n        \n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({ assessmentData: [] });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = (data) => {\n      if (data) {\n        console.log('Assessment data received:', data);\n        \n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          \n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Activity': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Performance Task': { count: 0, totalScore: 0, scoreCount: 0 }\n          };\n          \n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n              \n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n          \n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 \n              ? (typeData.totalScore / typeData.scoreCount).toFixed(1) \n              : 0;\n            \n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n          \n          // Create performance trends data\n          const performanceTrends = data\n            .filter(a => a.date) // Only include assessments with dates\n            .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n            .map(assessment => {\n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: assessment.date,\n                score: averageScore,\n                name: assessment.name || assessment.title || assessment.type,\n                type: assessment.type\n              };\n            });\n          \n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initEmptyCharts();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n      \n      // Add default chart filter periods\n      Object.keys(chartFilters.value).forEach(chartType => {\n        chartFilters.value[chartType].period = 'month';\n      });\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Chart Filters */\n.chart-filters {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n\n.date-filter-group {\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.date-filter-group .btn {\n  border-radius: 0;\n  font-size: 0.8rem;\n  padding: 0.3rem 0.75rem;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  background-color: white;\n  transition: all 0.2s ease;\n}\n\n.date-filter-group .btn:first-child {\n  border-radius: 8px 0 0 8px;\n}\n\n.date-filter-group .btn:last-child {\n  border-radius: 0 8px 8px 0;\n}\n\n.date-filter-group .btn.btn-primary {\n  background-color: #003366;\n  color: white;\n  border-color: #003366;\n}\n\n.date-filter-group .btn.btn-outline-primary:hover {\n  background-color: #f8fafc;\n  color: #003366;\n  border-color: #003366;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":";;;;;;;;;;;;;;;AA+SA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAO,QAAS,KAAI;AAC9D,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,KAAI,MAAO,eAAc;AAChC,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,QAAO;AAC1B,SAASC,MAAK,QAAS,YAAW;AAClC,OAAO,KAAKC,IAAG,MAAO,MAAK;AAC3B,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAO,iBAAgB;AAEvB,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIT,QAAQ,CAAC;IACvB,MAAMU,gBAAe,GAAIf,GAAG,CAAC,IAAI;IACjC,MAAMgB,eAAc,GAAIhB,GAAG,CAAC,IAAI;IAChC,MAAMiB,mBAAkB,GAAIjB,GAAG,CAAC,IAAI;IACpC,MAAMkB,qBAAoB,GAAIlB,GAAG,CAAC,IAAI;IACtC,MAAMmB,8BAA6B,GAAInB,GAAG,CAAC,IAAI;;IAE/C;IACA,MAAMoB,aAAY,GAAIpB,GAAG,CAAC,CAAC;IAC3B,MAAMqB,aAAY,GAAIrB,GAAG,CAAC,CAAC;IAC3B,MAAMsB,aAAY,GAAItB,GAAG,CAAC,CAAC;IAC3B,MAAMuB,YAAW,GAAIvB,GAAG,CAAC,CAAC;IAC1B,MAAMwB,gBAAe,GAAIxB,GAAG,CAAC,EAAE;IAC/B,MAAMyB,QAAO,GAAIzB,GAAG,CAAC,EAAE;IACvB,MAAM0B,QAAO,GAAI1B,GAAG,CAAC,EAAE;;IAEvB;IACA,MAAM2B,YAAW,GAAI3B,GAAG,CAAC4B,YAAY,CAACC,OAAO,CAAC,cAAc,KAAK,EAAE;IACnE,MAAMC,eAAc,GAAI9B,GAAG,CAAC4B,YAAY,CAACC,OAAO,CAAC,iBAAiB,KAAK,EAAE;IACzE,MAAME,eAAc,GAAI/B,GAAG,CAAC4B,YAAY,CAACC,OAAO,CAAC,iBAAiB,KAAK,EAAE;IACzE,MAAMG,iBAAgB,GAAIhC,GAAG,CAAC,EAAE;IAChC,MAAMiC,eAAc,GAAIjC,GAAG,CAAC,EAAE;IAC9B,MAAMkC,KAAI,GAAIhC,QAAQ,CAAC,MAAMM,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC;;IAE1D;IACA,MAAMC,YAAW,GAAIpC,GAAG,CAAC;MACvBqC,UAAU,EAAE;QAAEC,MAAM,EAAE;MAAQ,CAAC;MAC/BC,cAAc,EAAE;QAAED,MAAM,EAAE;MAAQ,CAAC;MACnCE,gBAAgB,EAAE;QAAEF,MAAM,EAAE;MAAQ,CAAC;MACrCG,yBAAyB,EAAE;QAAEH,MAAM,EAAE;MAAQ;IAC/C,CAAC,CAAC;;IAEF;IACA,MAAMI,SAAQ,GAAI1C,GAAG,CAAC;MACpBqC,UAAU,EAAE,EAAE;MACdE,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE,EAAE;MACpBC,yBAAyB,EAAE;IAC7B,CAAC,CAAC;;IAEF;IACA,MAAME,cAAa,GAAI3C,GAAG,CAAC,EAAE,CAAC;;IAE9B;IACA,MAAM4C,YAAW,GAAIA,CAAA,KAAM;MACzB,MAAMC,IAAG,GAAI/B,KAAK,CAACgC,KAAK,CAACC,IAAI,CAACF,IAAG;MACjC,IAAI,CAACA,IAAG,IAAK,CAACA,IAAI,CAACG,GAAG,EAAE;QACtBC,OAAO,CAACC,KAAK,CAAC,8BAA8B;QAC5C,OAAO,IAAG;MACZ;MACA,OAAOL,IAAI,CAACG,GAAE;IAChB;;IAEA;IACA,MAAMG,iBAAgB,GAAIjD,QAAQ,CAAC,MAAM;MACvC,IAAIkD,IAAI,CAACC,KAAI,IAAKD,IAAI,CAACC,KAAK,CAACC,sBAAsB,EAAE;QACnD,OAAOF,IAAI,CAACC,KAAK,CAACC,sBAAsB,CAACC,IAAI,CAACC,GAAE,IAAKA,GAAE,GAAI,CAAC,CAAC;MAC/D;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,MAAMC,kBAAiB,GAAIvD,QAAQ,CAAC,MAAM;MACxC;MACA,IAAIkD,IAAI,CAACC,KAAK,EAAE;QACd;QACA,IAAI,OAAOD,IAAI,CAACC,KAAK,CAAC9B,YAAW,KAAM,QAAO,IAAK6B,IAAI,CAACC,KAAK,CAAC9B,YAAW,GAAI,CAAC,EAAE;UAC9E,OAAO,IAAI;QACb;;QAEA;QACA,IAAImC,KAAK,CAACC,OAAO,CAACP,IAAI,CAACC,KAAK,CAACO,iBAAiB,KAAKR,IAAI,CAACC,KAAK,CAACO,iBAAiB,CAACC,MAAK,GAAI,CAAC,EAAE;UAC1F,OAAO,IAAI;QACb;;QAEA;QACA,IAAIT,IAAI,CAACC,KAAK,CAACS,eAAe,EAAE;UAC9B,MAAMA,eAAc,GAAIC,MAAM,CAACC,MAAM,CAACZ,IAAI,CAACC,KAAK,CAACS,eAAe,CAAC;UACjE,OAAOA,eAAe,CAACP,IAAI,CAACU,IAAG,IAAKA,IAAI,CAACC,KAAI,GAAI,CAAC,CAAC;QACrD;MACF;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,MAAMC,iBAAgB,GAAIjE,QAAQ,CAAC,MAAM;MACvC,IAAIkD,IAAI,CAACC,KAAK,EAAE;QACd;QACA,IAAID,IAAI,CAACC,KAAK,CAACS,eAAe,EAAE;UAC9B,MAAMA,eAAc,GAAIC,MAAM,CAACC,MAAM,CAACZ,IAAI,CAACC,KAAK,CAACS,eAAe,CAAC;UACjE,OAAOA,eAAe,CAACP,IAAI,CAACU,IAAG,IAAKA,IAAI,CAACC,KAAI,GAAI,CAAC,CAAC;QACrD;;QAEA;QACA,IAAId,IAAI,CAACC,KAAK,CAACe,0BAA0B,EAAE;UACzC,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,MAAMC,WAAU,GAAInE,QAAQ,CAAC,MAAMsB,gBAAgB,CAAC6B,KAAK,CAACQ,MAAK,GAAI,CAAC;;IAEpE;IACA,MAAMT,IAAG,GAAIpD,GAAG,CAAC;MACfsD,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACjCQ,eAAe,EAAE,CAAC,CAAC;MACnBF,iBAAiB,EAAE;IACrB,CAAC,CAAC;;IAEF;IACA,MAAMU,OAAM,GAAItE,GAAG,CAAC,KAAK,CAAC;IAE1B,MAAMuE,QAAO,GAAIrE,QAAQ,CAAC,MAAM;MAC9B,MAAM2C,IAAG,GAAI/B,KAAK,CAACgC,KAAK,CAACC,IAAI,CAACF,IAAI;MAClC,OAAOA,IAAG,GAAIA,IAAI,CAACjC,IAAG,IAAK,GAAGiC,IAAI,CAAC2B,SAAQ,IAAK,EAAE,IAAI3B,IAAI,CAAC4B,QAAO,IAAK,EAAE,EAAE,CAACC,IAAI,CAAC,KAAK,SAAQ,GAAI,SAAS;IAC7G,CAAC,CAAC;IAEF,MAAMC,+BAA8B,GAAI,MAAAA,CAAOC,IAAG,GAAI,EAAE,KAAK;MAC3D,IAAI;QACF,MAAMC,SAAQ,GAAIjC,YAAY,CAAC;QAC/B,IAAI,CAACiC,SAAS,EAAE;QAEhB,MAAMC,KAAI,GAAIhE,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAI;QACnC7B,OAAO,CAAC8B,GAAG,CAAC,qCAAqC,EAAE;UAAEF,SAAS;UAAED;QAAK,CAAC;;QAEtE;QACA,MAAMI,eAAc,GAAI,MAAMzE,KAAK,CAAC0E,GAAG,CAAC,iDAAiD,EAAE;UACzFC,MAAM,EAAE;YACNL;UACF,CAAC;UACDM,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUL,KAAK;UAAG;QAChD,CAAC;QAED,IAAIE,eAAe,CAAC5B,IAAG,IAAKM,KAAK,CAACC,OAAO,CAACqB,eAAe,CAAC5B,IAAI,CAAC,EAAE;UAC/D;UACA,MAAMgC,WAAU,GAAI,CAAC,GAAG,IAAIC,GAAG,CAACL,eAAe,CAAC5B,IAAI,CAACkC,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,CAACC,OAAO,CAAC;UACjGxC,OAAO,CAAC8B,GAAG,CAAC,yBAAyB,EAAEK,WAAW,CAAC;;UAEnD;UACAzC,cAAc,CAACU,KAAI,GAAI+B,WAAW,CAACM,IAAI,CAAC,CAAC;;UAEzC;UACA,IAAId,IAAI,EAAE;YACR,MAAMe,eAAc,GAAIX,eAAe,CAAC5B,IAAI,CAACoC,MAAM,CAACD,MAAK,IAAKA,MAAM,CAACX,IAAG,KAAMA,IAAI,CAAC;YACnFnD,QAAQ,CAAC4B,KAAI,GAAI,CAAC,GAAG,IAAIgC,GAAG,CAACM,eAAe,CAACL,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC,CAACJ,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,CAAC;YACnGhE,QAAQ,CAAC2B,KAAI,GAAI,CAAC,GAAG,IAAIgC,GAAG,CAACM,eAAe,CAACL,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,CAACL,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,CAAC;UACrG,OAAO;YACL,MAAMI,cAAa,GAAI,CAAC,GAAG,IAAIT,GAAG,CAACL,eAAe,CAAC5B,IAAI,CAACkC,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC,CAACJ,MAAM,CAACC,OAAO,CAAC;YACvG,MAAMM,cAAa,GAAI,CAAC,GAAG,IAAIV,GAAG,CAACL,eAAe,CAAC5B,IAAI,CAACkC,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,CAACL,MAAM,CAACC,OAAO,CAAC;YACvGhE,QAAQ,CAAC4B,KAAI,GAAIyC,cAAc,CAACJ,IAAI,CAAC,CAAC;YACtChE,QAAQ,CAAC2B,KAAI,GAAI0C,cAAc,CAACL,IAAI,CAAC,CAAC;UACxC;;UAEA;UACA,IAAI,CAAC/D,YAAY,CAAC0B,KAAI,IAAK+B,WAAW,CAACvB,MAAK,GAAI,CAAC,EAAE;YACjDlC,YAAY,CAAC0B,KAAI,GAAI+B,WAAW,CAAC,CAAC,CAAC;;YAEnC;YACA,MAAMO,eAAc,GAAIX,eAAe,CAAC5B,IAAI,CAACoC,MAAM,CAACD,MAAK,IAAKA,MAAM,CAACX,IAAG,KAAMQ,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7F3D,QAAQ,CAAC4B,KAAI,GAAI,CAAC,GAAG,IAAIgC,GAAG,CAACM,eAAe,CAACL,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC,CAACJ,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,CAAC;YACnGhE,QAAQ,CAAC2B,KAAI,GAAI,CAAC,GAAG,IAAIgC,GAAG,CAACM,eAAe,CAACL,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,CAACL,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,CAAC;UACrG;UAEAzC,OAAO,CAAC8B,GAAG,CAAC,+BAA+B,EAAE;YAC3CpC,cAAc,EAAEA,cAAc,CAACU,KAAK;YACpC5B,QAAQ,EAAEA,QAAQ,CAAC4B,KAAK;YACxB3B,QAAQ,EAAEA,QAAQ,CAAC2B;UACrB,CAAC,CAAC;QACJ,OAAO;UACLJ,OAAO,CAAC+C,IAAI,CAAC,sDAAsD,CAAC;UACpE;UACArD,cAAc,CAACU,KAAI,GAAI,EAAE;UACzB5B,QAAQ,CAAC4B,KAAI,GAAI,EAAE;UACnB3B,QAAQ,CAAC2B,KAAI,GAAI,EAAE;QACrB;MACF,EAAE,OAAOH,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEA,KAAK;QACpEzB,QAAQ,CAAC4B,KAAI,GAAI,EAAC;QAClB3B,QAAQ,CAAC2B,KAAI,GAAI,EAAC;MACpB;IACF;IAEA,MAAM4C,gBAAe,GAAI,MAAAA,CAAA,KAAY;MACnC;MACAnE,eAAe,CAACuB,KAAI,GAAI,EAAE;MAC1BtB,eAAe,CAACsB,KAAI,GAAI,EAAE;;MAE1B;MACA,IAAI1B,YAAY,CAAC0B,KAAK,EAAE;QACtB,MAAMsB,+BAA+B,CAAChD,YAAY,CAAC0B,KAAK,CAAC;MAC3D,OAAO;QACL;QACA,MAAMsB,+BAA+B,CAAC,CAAC;MACzC;;MAEA;MACA,MAAMuB,kBAAkB,CAAC,CAAC;IAC5B;IAEA,MAAMC,gBAAe,GAAIA,CAAA,KAAM;MAC7B,MAAMC,OAAM,GAAI,EAAC;MACjB,IAAIzE,YAAY,CAAC0B,KAAK,EAAE+C,OAAO,CAACC,IAAI,CAAC1E,YAAY,CAAC0B,KAAI,GAAI,OAAO;MACjE,IAAIvB,eAAe,CAACuB,KAAK,EAAE+C,OAAO,CAACC,IAAI,CAACvE,eAAe,CAACuB,KAAK;MAC7D,IAAItB,eAAe,CAACsB,KAAK,EAAE+C,OAAO,CAACC,IAAI,CAACtE,eAAe,CAACsB,KAAK;MAC7D,OAAO+C,OAAO,CAACvC,MAAK,GAAI,IAAIuC,OAAO,CAACE,IAAI,CAAC,KAAK,IAAI,aAAY;IAChE;;IAEA;IACA,MAAMC,eAAc,GAAIA,CAAA,KAAM;MAC5BC,sBAAsB,CAAC;QACrBlD,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MAClC,CAAC,CAAC;MAEFmD,yBAAyB,CAAC;QACxBC,cAAc,EAAE;MAClB,CAAC,CAAC;MAEFC,2BAA2B,CAAC,EAAE,CAAC;MAE/BC,oCAAoC,CAAC;QACnChD,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMiD,oBAAmB,GAAI,MAAAA,CAAOC,SAAS,EAAExE,MAAM,KAAK;MACxDW,OAAO,CAAC8B,GAAG,CAAC,YAAYzC,MAAM,cAAcwE,SAAS,QAAQ,CAAC;;MAE9D;MACA1E,YAAY,CAACiB,KAAK,CAACyD,SAAS,CAAC,CAACxE,MAAK,GAAIA,MAAM;;MAE7C;MACA,MAAMyE,OAAM,GAAIvG,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC;MAC7C,IAAI6E,SAAS;MAEb,QAAQ1E,MAAM;QACZ,KAAK,KAAK;UACR0E,SAAQ,GAAIxG,MAAM,CAAC,CAAC,CAACyG,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC9E,MAAM,CAAC,YAAY,CAAC;UAC7D;QACF,KAAK,MAAM;UACT6E,SAAQ,GAAIxG,MAAM,CAAC,CAAC,CAACyG,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC9E,MAAM,CAAC,YAAY,CAAC;UAC7D;QACF,KAAK,OAAO;QACZ;UACE6E,SAAQ,GAAIxG,MAAM,CAAC,CAAC,CAACyG,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC9E,MAAM,CAAC,YAAY,CAAC;UAC9D;MACJ;;MAEA;MACA,MAAM+E,cAAc,CAACJ,SAAS,EAAEE,SAAS,EAAED,OAAO,CAAC;IACrD,CAAC;;IAED;IACA,MAAMG,cAAa,GAAI,MAAAA,CAAOJ,SAAS,EAAEE,SAAS,EAAED,OAAO,KAAK;MAC9D,IAAI;QACF,MAAMlC,SAAQ,GAAIjC,YAAY,CAAC,CAAC;QAChC,IAAI,CAACiC,SAAS,EAAE;;QAEhB;QACA,MAAMK,MAAK,GAAI;UACbL,SAAS;UACTmC,SAAS;UACTD;QACF,CAAC;;QAED;QACA,IAAIpF,YAAY,CAAC0B,KAAK,EAAE6B,MAAM,CAACN,IAAG,GAAIjD,YAAY,CAAC0B,KAAK;QACxD,IAAIvB,eAAe,CAACuB,KAAK,EAAE6B,MAAM,CAACU,OAAM,GAAI9D,eAAe,CAACuB,KAAK;QACjE,IAAItB,eAAe,CAACsB,KAAK,EAAE6B,MAAM,CAACW,OAAM,GAAI9D,eAAe,CAACsB,KAAK;QAEjEJ,OAAO,CAAC8B,GAAG,CAAC,YAAY+B,SAAS,oBAAoB,EAAE5B,MAAM,CAAC;QAE9D,IAAIiC,QAAQ;QACZ,QAAQL,SAAS;UACf,KAAK,YAAY;YACfK,QAAO,GAAI,kBAAkB;YAC7B;UACF,KAAK,gBAAgB;UACrB,KAAK,kBAAkB;UACvB,KAAK,2BAA2B;YAC9BA,QAAO,GAAI,mBAAmB;YAC9B;UACF;YACE,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,SAAS,EAAE,CAAC;QACvD;;QAEA;QACA,IAAI;UACF,MAAMO,QAAO,GAAI,MAAM9G,KAAK,CAAC0E,GAAG,CAAC,6BAA6BkC,QAAQ,EAAE,EAAE;YACxEjC,MAAM;YACNC,OAAO,EAAE;cACP,eAAe,EAAE,UAAUrE,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAK;YACnD;UACF,CAAC,CAAC;UAEF7B,OAAO,CAAC8B,GAAG,CAAC,GAAG+B,SAAS,iBAAiB,EAAEO,QAAQ,CAACjE,IAAI,CAAC;;UAEzD;UACAV,SAAS,CAACW,KAAK,CAACyD,SAAS,IAAIO,QAAQ,CAACjE,IAAI;;UAE1C;UACA,QAAQ0D,SAAS;YACf,KAAK,YAAY;cACf,IAAIO,QAAQ,CAACjE,IAAI,EAAE;gBACjB;gBACA,MAAMkE,eAAc,GAAID,QAAQ,CAACjE,IAAI;gBACrC,MAAMmE,aAAY,GAAI;kBACpBjE,sBAAsB,EAAE,CACtBgE,eAAe,CAACE,OAAM,IAAK,CAAC,EAC5BF,eAAe,CAACG,IAAG,IAAK,CAAC,EACzBH,eAAe,CAACI,MAAK,IAAK;gBAE9B,CAAC;gBACDlB,sBAAsB,CAACe,aAAa,CAAC;cACvC;cACA;YACF,KAAK,gBAAgB;cACnB,IAAIF,QAAQ,CAACjE,IAAG,IAAKiE,QAAQ,CAACjE,IAAI,CAACU,eAAe,EAAE;gBAClD,MAAM4C,cAAa,GAAI,EAAE;gBAEzB3C,MAAM,CAAC4D,IAAI,CAACN,QAAQ,CAACjE,IAAI,CAACU,eAAe,CAAC,CAAC8D,OAAO,CAAC3D,IAAG,IAAK;kBACzD,MAAM4D,QAAO,GAAIR,QAAQ,CAACjE,IAAI,CAACU,eAAe,CAACG,IAAI,CAAC;kBACpD,IAAI4D,QAAQ,EAAE;oBACZ,IAAIC,QAAO,GAAI,CAAC;oBAChB,IAAID,QAAQ,CAACE,UAAS,IAAKF,QAAQ,CAACE,UAAS,GAAI,CAAC,EAAE;sBAClDD,QAAO,GAAI,CAACD,QAAQ,CAACG,UAAS,GAAIH,QAAQ,CAACE,UAAU,EAAEE,OAAO,CAAC,CAAC,CAAC;oBACnE;oBAEAvB,cAAc,CAACL,IAAI,CAAC;sBAClBpC,IAAI,EAAEA,IAAI;sBACV1C,YAAY,EAAEuG,QAAQ;sBACtB5D,KAAK,EAAE2D,QAAQ,CAAC3D,KAAI,IAAK;oBAC3B,CAAC,CAAC;kBACJ;gBACF,CAAC,CAAC;gBAEFuC,yBAAyB,CAAC;kBAAEC;gBAAe,CAAC,CAAC;cAC/C;cACA;YACF,KAAK,kBAAkB;cACrB,IAAIW,QAAQ,CAACjE,IAAI,EAAE;gBACjB;gBACA,MAAMQ,iBAAgB,GAAIF,KAAK,CAACC,OAAO,CAAC0D,QAAQ,CAACjE,IAAI,IAAIiE,QAAQ,CAACjE,IAAG,CAClEoC,MAAM,CAAC0C,CAAA,IAAKA,CAAC,CAACC,IAAI,EAAE;gBAAA,CACpBzC,IAAI,CAAC,CAACwC,CAAC,EAAEE,CAAC,KAAK,IAAIC,IAAI,CAACH,CAAC,CAACC,IAAI,IAAI,IAAIE,IAAI,CAACD,CAAC,CAACD,IAAI,CAAC,EAAE;gBAAA,CACpD7C,GAAG,CAACgD,UAAS,IAAK;kBACjB;kBACA,IAAI/G,YAAW,GAAI,CAAC;kBACpB,IAAIgH,UAAS,GAAI,EAAE;kBAEnB,IAAID,UAAU,CAACE,MAAM,EAAE;oBACrB,IAAI9E,KAAK,CAACC,OAAO,CAAC2E,UAAU,CAACE,MAAM,CAAC,EAAE;sBACpCD,UAAS,GAAID,UAAU,CAACE,MAAM;oBAChC,OAAO,IAAI,OAAOF,UAAU,CAACE,MAAK,KAAM,QAAQ,EAAE;sBAChDD,UAAS,GAAIxE,MAAM,CAACC,MAAM,CAACsE,UAAU,CAACE,MAAM,CAAC;oBAC/C;oBAEA,MAAMC,WAAU,GAAIF,UAAU,CAAC/C,MAAM,CAACkD,KAAI,IAAK,OAAOA,KAAI,KAAM,QAAQ,CAAC;oBACzE,IAAID,WAAW,CAAC5E,MAAK,GAAI,CAAC,EAAE;sBAC1B,MAAMmE,UAAS,GAAIS,WAAW,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEF,KAAK,KAAKE,GAAE,GAAIF,KAAK,EAAE,CAAC,CAAC;sBACrEnH,YAAW,GAAIyG,UAAS,GAAIS,WAAW,CAAC5E,MAAM;oBAChD;kBACF;kBAEA,OAAO;oBACLsE,IAAI,EAAEG,UAAU,CAACH,IAAI;oBACrBO,KAAK,EAAEnH,YAAY;oBACnBX,IAAI,EAAE0H,UAAU,CAAC1H,IAAG,IAAK0H,UAAU,CAACO,KAAI,IAAKP,UAAU,CAACrE,IAAI;oBAC5DA,IAAI,EAAEqE,UAAU,CAACrE;kBACnB,CAAC;gBACH,CAAC,IAAI,EAAE;gBAET0C,2BAA2B,CAAC/C,iBAAiB,CAAC;cAChD;cACA;YACF,KAAK,2BAA2B;cAC9B,IAAIyD,QAAQ,CAACjE,IAAI,EAAE;gBACjB;gBACA,MAAMQ,iBAAgB,GAAIF,KAAK,CAACC,OAAO,CAAC0D,QAAQ,CAACjE,IAAI,IAAIiE,QAAQ,CAACjE,IAAG,CAClEoC,MAAM,CAAC0C,CAAA,IAAKA,CAAC,CAACC,IAAI,EAAE;gBAAA,CACpB7C,GAAG,CAACgD,UAAS,KAAM;kBAClBH,IAAI,EAAEG,UAAU,CAACH,IAAI;kBACrBO,KAAK,EAAEJ,UAAU,CAAC/G,YAAW,IAAK,CAAC;kBACnCX,IAAI,EAAE0H,UAAU,CAAC1H,IAAG,IAAK0H,UAAU,CAACO,KAAI,IAAKP,UAAU,CAACrE,IAAI;kBAC5DA,IAAI,EAAEqE,UAAU,CAACrE;gBACnB,CAAC,CAAC,IAAI,EAAE;gBAEV2C,oCAAoC,CAAC;kBACnChD;gBACF,CAAC,CAAC;cACJ;cACA;UACJ;QACF,EAAE,OAAOV,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,yBAAyBiE,QAAQ,GAAG,EAAEjE,KAAK,CAAC;UAC1D;UACA,IAAI4D,SAAQ,KAAM,YAAY,EAAE;YAC9BN,sBAAsB,CAAC;cACrBlD,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;YAClC,CAAC,CAAC;UACJ,OAAO,IAAIwD,SAAQ,KAAM,gBAAgB,EAAE;YACzCL,yBAAyB,CAAC;cAAEC,cAAc,EAAE;YAAG,CAAC,CAAC;UACnD,OAAO,IAAII,SAAQ,KAAM,kBAAkB,EAAE;YAC3CH,2BAA2B,CAAC,EAAE,CAAC;UACjC,OAAO,IAAIG,SAAQ,KAAM,2BAA2B,EAAE;YACpDF,oCAAoC,CAAC;cAAEhD,iBAAiB,EAAE;YAAG,CAAC,CAAC;UACjE;QACF;MACF,EAAE,OAAOV,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,kBAAkB4D,SAAS,QAAQ,EAAE5D,KAAK,CAAC;MAC3D;IACF,CAAC;;IAED;IACA,MAAM4F,iBAAgB,GAAI,MAAAA,CAAOhC,SAAS,EAAEiC,UAAS,GAAI,OAAO,KAAK;MACnE,IAAI;QACF9F,OAAO,CAAC8B,GAAG,CAAC,cAAcgE,UAAU,QAAQjC,SAAS,QAAQ,CAAC;;QAE9D;QACA,IAAIkC,YAAW,GAAI,EAAE;QACrB,IAAIC,QAAO,GAAI,EAAE;QAEjB,QAAQnC,SAAS;UACf,KAAK,YAAY;YACfmC,QAAO,GAAI,mBAAmBzI,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC,EAAE;;YAE7D;YACA,IAAIO,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,EAAE;cAC9B;cACA,MAAMoC,KAAI,GAAIxG,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC;cACxCkC,YAAW,GAAI,CACb;gBACE,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAEE,KAAK,CAAC1B,OAAM,IAAK;cAC5B,CAAC,EACD;gBACE,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE0B,KAAK,CAACzB,IAAG,IAAK;cACzB,CAAC,EACD;gBACE,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAEyB,KAAK,CAACxB,MAAK,IAAK;cAC3B,EACD;YACH,OAAO,IAAItE,IAAI,CAACC,KAAK,EAAEC,sBAAsB,EAAE;cAC7C;cACA0F,YAAW,GAAI,CACb;gBACE,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE5F,IAAI,CAACC,KAAK,CAACC,sBAAsB,CAAC,CAAC,KAAK;cACnD,CAAC,EACD;gBACE,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAEF,IAAI,CAACC,KAAK,CAACC,sBAAsB,CAAC,CAAC,KAAK;cACnD,CAAC,EACD;gBACE,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAEF,IAAI,CAACC,KAAK,CAACC,sBAAsB,CAAC,CAAC,KAAK;cACnD,EACD;YACH;YACA;UACF,KAAK,gBAAgB;YACnB2F,QAAO,GAAI,oBAAoBzI,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC,EAAE;;YAE9D;YACA,IAAIO,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,EAAEhD,eAAe,EAAE;cAC/C;cACA,MAAMA,eAAc,GAAIpB,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,CAAChD,eAAe;cAClEC,MAAM,CAAC4D,IAAI,CAAC7D,eAAe,CAAC,CAAC8D,OAAO,CAAC3D,IAAG,IAAK;gBAC3C,MAAM4D,QAAO,GAAI/D,eAAe,CAACG,IAAI,CAAC;gBACtC,IAAI4D,QAAQ,EAAE;kBACZmB,YAAY,CAAC3C,IAAI,CAAC;oBAChB,iBAAiB,EAAEpC,IAAI;oBACvB,eAAe,EAAE4D,QAAQ,CAACtG,YAAW,IAAK,CAAC;oBAC3C,OAAO,EAAEsG,QAAQ,CAAC3D,KAAI,IAAK;kBAC7B,CAAC,CAAC;gBACJ;cACF,CAAC,CAAC;YACJ,OAAO,IAAId,IAAI,CAACC,KAAK,EAAES,eAAe,EAAE;cACtC;cACAC,MAAM,CAAC4D,IAAI,CAACvE,IAAI,CAACC,KAAK,CAACS,eAAe,CAAC,CAAC8D,OAAO,CAAC3D,IAAG,IAAK;gBACtD,MAAM4D,QAAO,GAAIzE,IAAI,CAACC,KAAK,CAACS,eAAe,CAACG,IAAI,CAAC;gBACjD,IAAI4D,QAAQ,EAAE;kBACZmB,YAAY,CAAC3C,IAAI,CAAC;oBAChB,iBAAiB,EAAEpC,IAAI;oBACvB,eAAe,EAAE4D,QAAQ,CAACtG,YAAW,IAAK,CAAC;oBAC3C,OAAO,EAAEsG,QAAQ,CAAC3D,KAAI,IAAK;kBAC7B,CAAC,CAAC;gBACJ;cACF,CAAC,CAAC;YACJ;YACA;UACF,KAAK,kBAAkB;YACrB+E,QAAO,GAAI,sBAAsBzI,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC,EAAE;;YAEhE;YACA,IAAIO,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,EAAEqC,OAAO,EAAE;cACvC;cACA,MAAMA,OAAM,GAAIzG,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,CAACqC,OAAO;cAClD,IAAIzF,KAAK,CAACC,OAAO,CAACwF,OAAO,CAAC,EAAE;gBAC1BH,YAAW,GAAIG,OAAM,CAClB3D,MAAM,CAAC8C,UAAS,IAAKA,UAAU,CAACH,IAAI,EACpC7C,GAAG,CAACgD,UAAS,KAAM;kBAClB,MAAM,EAAE9H,MAAM,CAAC8H,UAAU,CAACH,IAAI,CAAC,CAAChG,MAAM,CAAC,YAAY,CAAC;kBACpD,YAAY,EAAEmG,UAAU,CAAC1H,IAAG,IAAK0H,UAAU,CAACO,KAAI,IAAK,EAAE;kBACvD,MAAM,EAAEP,UAAU,CAACrE,IAAG,IAAK,EAAE;kBAC7B,eAAe,EAAEqE,UAAU,CAAC/G,YAAW,IAAK;gBAC9C,CAAC,CAAC,CAAC;cACP;YACF,OAAO,IAAI6B,IAAI,CAACC,KAAK,EAAEO,iBAAiB,EAAE;cACxC;cACAoF,YAAW,GAAI5F,IAAI,CAACC,KAAK,CAACO,iBAAiB,CAAC0B,GAAG,CAAC8D,KAAI,KAAM;gBACxD,MAAM,EAAE5I,MAAM,CAAC4I,KAAK,CAACjB,IAAI,CAAC,CAAChG,MAAM,CAAC,YAAY,CAAC;gBAC/C,YAAY,EAAEiH,KAAK,CAACxI,IAAG,IAAKwI,KAAK,CAACP,KAAI,IAAK,EAAE;gBAC7C,eAAe,EAAEO,KAAK,CAACV,KAAI,IAAKU,KAAK,CAAC7H,YAAW,IAAK;cACxD,CAAC,CAAC,CAAC;YACL;YACA;UACF,KAAK,2BAA2B;YAC9B0H,QAAO,GAAI,0BAA0BzI,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC,EAAE;;YAEpE;YACA,IAAIO,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,EAAEqC,OAAO,EAAE;cACvC;cACA,MAAMA,OAAM,GAAIzG,SAAS,CAACW,KAAK,CAACyD,SAAS,CAAC,CAACqC,OAAO;cAClD,IAAIzF,KAAK,CAACC,OAAO,CAACwF,OAAO,CAAC,EAAE;gBAC1BH,YAAW,GAAIG,OAAM,CAClB3D,MAAM,CAAC8C,UAAS,IAAKA,UAAU,CAACH,IAAG,IAAKG,UAAU,CAACrE,IAAI,EACvDqB,GAAG,CAACgD,UAAS,KAAM;kBAClB,MAAM,EAAE9H,MAAM,CAAC8H,UAAU,CAACH,IAAI,CAAC,CAAChG,MAAM,CAAC,YAAY,CAAC;kBACpD,iBAAiB,EAAEmG,UAAU,CAACrE,IAAG,IAAK,EAAE;kBACxC,iBAAiB,EAAEqE,UAAU,CAAC1H,IAAG,IAAK0H,UAAU,CAACO,KAAI,IAAK,EAAE;kBAC5D,eAAe,EAAEP,UAAU,CAAC/G,YAAW,IAAK;gBAC9C,CAAC,CAAC,CAAC;cACP;YACF,OAAO,IAAI6B,IAAI,CAACC,KAAK,EAAEO,iBAAiB,EAAE;cACxC;cACAoF,YAAW,GAAI5F,IAAI,CAACC,KAAK,CAACO,iBAAiB,CAAC0B,GAAG,CAAC8D,KAAI,KAAM;gBACxD,MAAM,EAAE5I,MAAM,CAAC4I,KAAK,CAACjB,IAAI,CAAC,CAAChG,MAAM,CAAC,YAAY,CAAC;gBAC/C,iBAAiB,EAAEiH,KAAK,CAACnF,IAAG,IAAK,EAAE;gBACnC,iBAAiB,EAAEmF,KAAK,CAACxI,IAAG,IAAKwI,KAAK,CAACP,KAAI,IAAK,EAAE;gBAClD,eAAe,EAAEO,KAAK,CAACV,KAAI,IAAKU,KAAK,CAAC7H,YAAW,IAAK;cACxD,CAAC,CAAC,CAAC;YACL;YACA;UACF;YACE,MAAM,IAAI6F,KAAK,CAAC,uBAAuBN,SAAS,EAAE,CAAC;QACvD;;QAEA;QACA,IAAIkC,YAAY,CAACnF,MAAK,KAAM,CAAC,EAAE;UAC7BZ,OAAO,CAAC+C,IAAI,CAAC,yBAAyBc,SAAS,EAAE,CAAC;UAClD;QACF;QAEA,IAAIiC,UAAS,KAAM,OAAO,EAAE;UAC1B;UACA,MAAMM,SAAQ,GAAI3I,IAAI,CAAC4I,KAAK,CAACC,aAAa,CAACP,YAAY,CAAC;UACxD,MAAMQ,QAAO,GAAI9I,IAAI,CAAC4I,KAAK,CAACG,QAAQ,CAAC,CAAC;UACtC/I,IAAI,CAAC4I,KAAK,CAACI,iBAAiB,CAACF,QAAQ,EAAEH,SAAS,EAAE,MAAM,CAAC;UACzD,MAAMM,WAAU,GAAIjJ,IAAI,CAACkJ,KAAK,CAACJ,QAAQ,EAAE;YAAEK,QAAQ,EAAE,MAAM;YAAE5F,IAAI,EAAE;UAAQ,CAAC,CAAC;UAC7E,MAAM6F,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAACJ,WAAW,CAAC,EAAE;YAAE1F,IAAI,EAAE;UAAoE,CAAC,CAAC;UACxHxD,MAAM,CAACqJ,SAAS,EAAE,GAAGb,QAAQ,OAAO,CAAC;UAErChG,OAAO,CAAC8B,GAAG,CAAC,2BAA2B+B,SAAS,EAAE,CAAC;QACrD,OAAO,IAAIiC,UAAS,KAAM,KAAK,EAAE;UAC/B;UACA,MAAMiB,GAAE,GAAI,IAAIrJ,KAAK,CAAC,CAAC;;UAEvB;UACA,IAAIkI,KAAI,GAAI,EAAE;UACd,QAAQ/B,SAAS;YACf,KAAK,YAAY;cACf+B,KAAI,GAAI,yBAAyB;cACjC;YACF,KAAK,gBAAgB;cACnBA,KAAI,GAAI,iCAAiC;cACzC;YACF,KAAK,kBAAkB;cACrBA,KAAI,GAAI,8BAA8B;cACtC;YACF,KAAK,2BAA2B;cAC9BA,KAAI,GAAI,gCAAgC;cACxC;UACJ;UAEAmB,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;UACnBD,GAAG,CAACE,IAAI,CAACrB,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;;UAEvB;UACA,IAAIsB,UAAS,GAAI,WAAW;UAC5B,IAAIxI,YAAY,CAAC0B,KAAK,EAAE8G,UAAS,IAAK,SAASxI,YAAY,CAAC0B,KAAK,IAAI;UACrE,IAAIvB,eAAe,CAACuB,KAAK,EAAE8G,UAAS,IAAK,YAAYrI,eAAe,CAACuB,KAAK,IAAI;UAC9E,IAAItB,eAAe,CAACsB,KAAK,EAAE8G,UAAS,IAAK,YAAYpI,eAAe,CAACsB,KAAK,IAAI;;UAE9E;UACA8G,UAAS,IAAK,WAAW/H,YAAY,CAACiB,KAAK,CAACyD,SAAS,CAAC,CAACxE,MAAM,EAAE;UAE/D0H,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;UACnBD,GAAG,CAACE,IAAI,CAACC,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC;;UAE5B;UACAH,GAAG,CAACE,IAAI,CAAC,iBAAiB1J,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;UAEpE;UACA,MAAMiI,OAAM,GAAIrG,MAAM,CAAC4D,IAAI,CAACqB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC1D,GAAG,CAAC+E,GAAE,KAAM;YACvDC,MAAM,EAAED,GAAG;YACXE,OAAO,EAAEF;UACX,CAAC,CAAC,CAAC;;UAEH;UACAL,GAAG,CAACQ,SAAS,CAAC;YACZC,MAAM,EAAE,EAAE;YACVC,IAAI,EAAE,CAACN,OAAO,CAAC9E,GAAG,CAACqF,GAAE,IAAKA,GAAG,CAACL,MAAM,CAAC,CAAC;YACtCM,IAAI,EAAE5B,YAAY,CAAC1D,GAAG,CAACuF,IAAG,IAAKT,OAAO,CAAC9E,GAAG,CAACqF,GAAE,IAAKE,IAAI,CAACF,GAAG,CAACJ,OAAO,CAAC,CAAC,CAAC;YACrEO,MAAM,EAAE;cAAEC,QAAQ,EAAE;YAAG,CAAC;YACxBC,UAAU,EAAE;cAAEC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG;YAAE,CAAC;YACvCC,kBAAkB,EAAE;cAAED,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;YAAE;UACnD,CAAC,CAAC;;UAEF;UACAjB,GAAG,CAACmB,IAAI,CAAC,GAAGlC,QAAQ,MAAM,CAAC;UAE3BhG,OAAO,CAAC8B,GAAG,CAAC,yBAAyB+B,SAAS,EAAE,CAAC;QACnD;MACF,EAAE,OAAO5D,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB4D,SAAS,QAAQ,EAAE5D,KAAK,CAAC;MAC7D;IACF,CAAC;;IAED;IACA,MAAMgD,kBAAiB,GAAI,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF5B,OAAO,CAACjB,KAAI,GAAI,IAAI;QACpB,MAAMwB,SAAQ,GAAI/D,KAAK,CAACgC,KAAK,CAACC,IAAI,CAACF,IAAI,CAACG,GAAG;QAE3C,IAAI,CAAC6B,SAAS,EAAE;UACd5B,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;UACzCoB,OAAO,CAACjB,KAAI,GAAI,KAAK;UACrB;QACF;;QAEA;QACA,MAAM6B,MAAK,GAAI,CAAC,CAAC;QAEjB,IAAIvD,YAAY,CAAC0B,KAAK,EAAE6B,MAAM,CAACN,IAAG,GAAIjD,YAAY,CAAC0B,KAAK;QACxD,IAAIvB,eAAe,CAACuB,KAAK,EAAE6B,MAAM,CAACU,OAAM,GAAI9D,eAAe,CAACuB,KAAK;QACjE,IAAItB,eAAe,CAACsB,KAAK,EAAE6B,MAAM,CAACW,OAAM,GAAI9D,eAAe,CAACsB,KAAK;QACjE,IAAIrB,iBAAiB,CAACqB,KAAK,EAAE6B,MAAM,CAAC8B,SAAQ,GAAIhF,iBAAiB,CAACqB,KAAK;QACvE,IAAIpB,eAAe,CAACoB,KAAK,EAAE6B,MAAM,CAAC6B,OAAM,GAAI9E,eAAe,CAACoB,KAAK;QAEjEJ,OAAO,CAAC8B,GAAG,CAAC,sCAAsC,EAAEG,MAAM,CAAC;;QAE3D;QACA,MAAMmC,QAAO,GAAI,MAAM9G,KAAK,CAAC0E,GAAG,CAAC,+CAA+CJ,SAAS,QAAQ,EAAE;UACjGK,MAAM;UACNC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUrE,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAK;UACnD;QACF,CAAC,CAAC;QAEF7B,OAAO,CAAC8B,GAAG,CAAC,0BAA0B,EAAEsC,QAAQ,CAACjE,IAAI,CAAC;;QAEtD;QACAA,IAAI,CAACC,KAAI,GAAIgE,QAAQ,CAACjE,IAAI;;QAE1B;QACA,MAAMgI,YAAW,GACd/D,QAAQ,CAACjE,IAAI,CAAChC,aAAY,GAAI,CAAC,IAC/BiG,QAAQ,CAACjE,IAAI,CAAC/B,aAAY,GAAI,CAAC,IAC/BqC,KAAK,CAACC,OAAO,CAAC0D,QAAQ,CAACjE,IAAI,CAACE,sBAAsB,KAAK+D,QAAQ,CAACjE,IAAI,CAACE,sBAAsB,CAACC,IAAI,CAACC,GAAE,IAAKA,GAAE,GAAI,CAAC,CAAC,IAChHE,KAAK,CAACC,OAAO,CAAC0D,QAAQ,CAACjE,IAAI,CAACQ,iBAAiB,KAAKyD,QAAQ,CAACjE,IAAI,CAACQ,iBAAiB,CAACC,MAAK,GAAI,CAAE;;QAEhG;QACA,IAAI,CAACuH,YAAW,KAAMzJ,YAAY,CAAC0B,KAAI,IAAKvB,eAAe,CAACuB,KAAI,IAAKtB,eAAe,CAACsB,KAAK,CAAC,EAAE;UAC3FJ,OAAO,CAAC+C,IAAI,CAAC,wCAAwC,CAAC;QACxD;;QAEA;QACA5E,aAAa,CAACiC,KAAI,GAAIgE,QAAQ,CAACjE,IAAI,CAAChC,aAAY,IAAK,CAAC;QACtDC,aAAa,CAACgC,KAAI,GAAIgE,QAAQ,CAACjE,IAAI,CAAC/B,aAAY,IAAK,CAAC;QACtDC,aAAa,CAAC+B,KAAI,GAAIgE,QAAQ,CAACjE,IAAI,CAAC9B,aAAY,IAAK,CAAC;;QAEtD;QACA2B,OAAO,CAAC8B,GAAG,CAAC,yBAAyB,EAAEsC,QAAQ,CAACjE,IAAI,CAAC7B,YAAY,CAAC;QAClE0B,OAAO,CAAC8B,GAAG,CAAC,qBAAqB,EAAE,OAAOsC,QAAQ,CAACjE,IAAI,CAAC7B,YAAY,CAAC;;QAErE;QACA,IAAI8F,QAAQ,CAACjE,IAAI,CAACiI,cAAc,CAAC,cAAc,CAAC,EAAE;UAChD,MAAMC,UAAS,GAAIC,UAAU,CAAClE,QAAQ,CAACjE,IAAI,CAAC7B,YAAY,CAAC;UACzD0B,OAAO,CAAC8B,GAAG,CAAC,qBAAqB,EAAEuG,UAAU,CAAC;UAC9C/J,YAAY,CAAC8B,KAAI,GAAImI,KAAK,CAACF,UAAU,IAAI,KAAI,GAAIA,UAAU,CAACrD,OAAO,CAAC,CAAC,CAAC;UACtEhF,OAAO,CAAC8B,GAAG,CAAC,4BAA4B,EAAExD,YAAY,CAAC8B,KAAK,CAAC;QAC/D,OAAO;UACL9B,YAAY,CAAC8B,KAAI,GAAI,KAAK;QAC5B;;QAEA;QACA7B,gBAAgB,CAAC6B,KAAI,GAAIgE,QAAQ,CAACjE,IAAI,CAAC5B,gBAAe,IAAK,EAAE;;QAE7D;QACA,IAAI6F,QAAQ,CAACjE,IAAI,CAACE,sBAAqB,IAAKI,KAAK,CAACC,OAAO,CAAC0D,QAAQ,CAACjE,IAAI,CAACE,sBAAsB,CAAC,EAAE;UAC/FkD,sBAAsB,CAACa,QAAQ,CAACjE,IAAI,CAAC;QACvC,OAAO;UACL;UACA,IAAI;YACF,MAAMqI,kBAAiB,GAAI,MAAMlL,KAAK,CAAC0E,GAAG,CAAC,4CAA4C,EAAE;cACvFC,MAAM,EAAE;gBACNL,SAAS;gBACTD,IAAI,EAAEjD,YAAY,CAAC0B,KAAK;gBACxBuC,OAAO,EAAE9D,eAAe,CAACuB,KAAK;gBAC9BwC,OAAO,EAAE9D,eAAe,CAACsB,KAAK;gBAC9B2D,SAAS,EAAEhF,iBAAiB,CAACqB,KAAI,IAAK7C,MAAM,CAAC,CAAC,CAACyG,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC9E,MAAM,CAAC,YAAY,CAAC;gBACxF4E,OAAO,EAAE9E,eAAe,CAACoB,KAAI,IAAK7C,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY;cAChE,CAAC;cACDgD,OAAO,EAAE;gBACP,eAAe,EAAE,UAAUrE,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAK;cACnD;YACF,CAAC,CAAC;YAEF,IAAI2G,kBAAkB,CAACrI,IAAI,EAAE;cAC3B;cACA,MAAMkE,eAAc,GAAImE,kBAAkB,CAACrI,IAAI;cAC/CiE,QAAQ,CAACjE,IAAI,CAACE,sBAAqB,GAAI,CACrCgE,eAAe,CAACE,OAAM,IAAK,CAAC,EAC5BF,eAAe,CAACG,IAAG,IAAK,CAAC,EACzBH,eAAe,CAACI,MAAK,IAAK,EAC3B;cACDtE,IAAI,CAACC,KAAI,GAAIgE,QAAQ,CAACjE,IAAI;cAC1BoD,sBAAsB,CAACa,QAAQ,CAACjE,IAAI,CAAC;YACvC;UACF,EAAE,OAAOsI,GAAG,EAAE;YACZzI,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEwI,GAAG,CAAC;YACrDlF,sBAAsB,CAAC;cACrBlD,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;YAClC,CAAC,CAAC;UACJ;QACF;;QAEA;QACA,MAAMqI,mBAAmB,CAAC,CAAC;;QAE3B;QACA;QACA,MAAM5E,OAAM,GAAIvG,MAAM,CAAC,CAAC,CAAC2B,MAAM,CAAC,YAAY,CAAC;QAC7C,MAAM6E,SAAQ,GAAIxG,MAAM,CAAC,CAAC,CAACyG,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC9E,MAAM,CAAC,YAAY,CAAC;QAEpE,MAAMyJ,OAAO,CAACC,GAAG,CAAC,CAChB3E,cAAc,CAAC,YAAY,EAAEF,SAAS,EAAED,OAAO,CAAC,EAChDG,cAAc,CAAC,gBAAgB,EAAEF,SAAS,EAAED,OAAO,CAAC,EACpDG,cAAc,CAAC,kBAAkB,EAAEF,SAAS,EAAED,OAAO,CAAC,EACtDG,cAAc,CAAC,2BAA2B,EAAEF,SAAS,EAAED,OAAO,EAC/D,CAAC;QAEFzC,OAAO,CAACjB,KAAI,GAAI,KAAK;MACvB,EAAE,OAAOH,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD;QACAqD,eAAe,CAAC,CAAC;QACjBjC,OAAO,CAACjB,KAAI,GAAI,KAAK;MACvB;IACF,CAAC;IAED,MAAMmD,sBAAqB,GAAKpD,IAAI,IAAK;MACvC,IAAI,CAACrC,gBAAgB,CAACsC,KAAK,EAAE;MAE7B,MAAMyI,GAAE,GAAI/K,gBAAgB,CAACsC,KAAK,CAAC0I,UAAU,CAAC,IAAI,CAAC;MACnD,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAI1L,KAAK,CAAC2L,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA;MACA,MAAMC,cAAa,GAAIzI,KAAK,CAACC,OAAO,CAACP,IAAI,CAACE,sBAAsB,IAC5DF,IAAI,CAACE,sBAAsB,CAAC8I,KAAK,CAAC,CAAC,EAAE,CAAC,IACtC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAEbnJ,OAAO,CAAC8B,GAAG,CAAC,+BAA+B,EAAEoH,cAAc,CAAC;;MAE5D;MACA,MAAME,eAAc,GAAIF,cAAc,CAACxD,MAAM,CAAC,CAACT,CAAC,EAAEE,CAAC,KAAKF,CAAA,IAAKE,CAAA,IAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;MAExE;MACA,IAAI9H,KAAK,CAACwL,GAAG,EAAE;QACb7H,IAAI,EAAE,UAAU;QAChBb,IAAI,EAAE;UACJkJ,MAAM,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;UACrCC,QAAQ,EAAE,CACR;YACEnJ,IAAI,EAAE+I,cAAc;YACpBK,eAAe,EAAE,CACf,yBAAyB;YAAG;YAC5B,yBAAyB;YAAG;YAC5B,wBAAwB,CAAI;YAAA,CAC7B;YACDC,WAAW,EAAE,CACX,kBAAkB;YAAU;YAC5B,mBAAmB,EACnB,kBAAkB,CACnB;YACDC,WAAW,EAAE,CAAC;YACdC,WAAW,EAAE;UACf;QAEJ,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE,IAAI;cACbC,QAAQ,EAAE,QAAQ;cAClBb,MAAM,EAAE;gBACNc,OAAO,EAAE,EAAE;gBACXC,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF;YACF,CAAC;YACDC,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTC,KAAK,EAAGC,OAAO,IAAK;kBAClB,MAAMrK,KAAI,GAAIqK,OAAO,CAACC,GAAE,IAAK,CAAC;kBAC9B,MAAMC,KAAI,GAAIzB,cAAc,CAACxD,MAAM,CAAC,CAACT,CAAC,EAAEE,CAAC,KAAKF,CAAA,IAAKE,CAAA,IAAK,CAAC,CAAC,EAAE,CAAC,CAAC;kBAC9D,MAAMyF,UAAS,GAAID,KAAI,GAAI,IAAI,CAAEvK,KAAI,GAAIuK,KAAK,GAAI,GAAG,EAAE3F,OAAO,CAAC,CAAC,IAAI,CAAC;kBACrE,OAAO,GAAGyF,OAAO,CAACD,KAAK,KAAKpK,KAAK,KAAKwK,UAAU,IAAI;gBACtD;cACF,CAAC;cACDC,SAAS,EAAE;gBACTC,MAAM,EAAE,MAAM;gBACdT,IAAI,EAAE;cACR,CAAC;cACDU,QAAQ,EAAE;gBACRV,IAAI,EAAE;cACR,CAAC;cACDd,eAAe,EAAE,oBAAoB;cACrCY,OAAO,EAAE,EAAE;cACXa,YAAY,EAAE;YAChB;UACF,CAAC;UACDC,MAAM,EAAE;YACNd,OAAO,EAAE;cACPe,GAAG,EAAE,EAAE;cACPC,KAAK,EAAE,EAAE;cACTC,MAAM,EAAE,EAAE;cACVC,IAAI,EAAE;YACR;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAM7H,yBAAwB,GAAKrD,IAAI,IAAK;MAC1C,IAAI,CAACnC,mBAAmB,CAACoC,KAAK,EAAE;MAEhC,MAAMyI,GAAE,GAAI7K,mBAAmB,CAACoC,KAAK,CAAC0I,UAAU,CAAC,IAAI,CAAC;MACtD,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAI1L,KAAK,CAAC2L,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMpI,eAAc,GAAI,CAAC,MAAM,EAAE,UAAU,EAAE,kBAAkB,CAAC;;MAEhE;MACA,IAAI,CAACV,IAAI,CAACsD,cAAa,IAAK,CAAChD,KAAK,CAACC,OAAO,CAACP,IAAI,CAACsD,cAAc,KAAKtD,IAAI,CAACsD,cAAc,CAAC7C,MAAK,KAAM,CAAC,EAAE;QACnG;QACA;QACAZ,OAAO,CAAC8B,GAAG,CAAC,uDAAuD,CAAC;QACpE;MACF;;MAEA;MACA,MAAMwJ,aAAY,GAAI;QACpBC,KAAK,EAAE,EAAE;QACThG,MAAM,EAAE,EAAE;QACViG,MAAM,EAAE;MACV,CAAC;;MAED;MACA,MAAMC,cAAa,GAAI,CAAC,GAAG,IAAIrJ,GAAG,CAACjC,IAAI,CAACsD,cAAc,CAACpB,GAAG,CAACuF,IAAG,IAAKA,IAAI,CAAC5G,IAAI,CAAC,CAAC,CAAC;;MAE/E;MACAyK,cAAc,CAAC9G,OAAO,CAAC3D,IAAG,IAAK;QAC7B,MAAM4D,QAAO,GAAIzE,IAAI,CAACsD,cAAc,CAACiI,IAAI,CAACzG,CAAA,IAAKA,CAAC,CAACjE,IAAG,KAAMA,IAAI,CAAC;QAC/D,IAAI4D,QAAQ,EAAE;UACZ0G,aAAa,CAACC,KAAK,CAACnI,IAAI,CAACpC,IAAI,CAAC;UAC9BsK,aAAa,CAAC/F,MAAM,CAACnC,IAAI,CAACkF,UAAU,CAAC1D,QAAQ,CAACtG,YAAY,KAAK,CAAC,CAAC;UACjEgN,aAAa,CAACE,MAAM,CAACpI,IAAI,CAACwB,QAAQ,CAAC3D,KAAI,IAAK,CAAC,CAAC;QAChD;MACF,CAAC,CAAC;MAEFjB,OAAO,CAAC8B,GAAG,CAAC,kCAAkC,EAAEwJ,aAAa,CAAC;;MAE9D;MACA,IAAIjO,KAAK,CAACwL,GAAG,EAAE;QACb7H,IAAI,EAAE,KAAK;QACXb,IAAI,EAAE;UACJkJ,MAAM,EAAEiC,aAAa,CAACC,KAAK;UAC3BjC,QAAQ,EAAE,CACR;YACEkB,KAAK,EAAE,mBAAmB;YAC1BrK,IAAI,EAAEmL,aAAa,CAAC/F,MAAM;YAC1BgE,eAAe,EAAE,CACf,yBAAyB;YAAG;YAC5B,yBAAyB;YAAG;YAC5B,yBAAyB,CAAG;YAAA,CAC7B,CAACJ,KAAK,CAAC,CAAC,EAAEmC,aAAa,CAACC,KAAK,CAAC3K,MAAM,CAAC;YACtC4I,WAAW,EAAE,CACX,kBAAkB,EAClB,mBAAmB,EACnB,mBAAmB,CACpB,CAACL,KAAK,CAAC,CAAC,EAAEmC,aAAa,CAACC,KAAK,CAAC3K,MAAM,CAAC;YACtC6I,WAAW,EAAE,CAAC;YACdkC,YAAY,EAAE,CAAC;YACfC,aAAa,EAAE;UACjB;QAEJ,CAAC;QACDjC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BgC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE,GAAG;cACRC,IAAI,EAAE;gBACJC,KAAK,EAAE;cACT,CAAC;cACDtG,KAAK,EAAE;gBACLqE,OAAO,EAAE,IAAI;gBACbhD,IAAI,EAAE,mBAAmB;gBACzBmD,IAAI,EAAE;kBACJC,IAAI,EAAE,EAAE;kBACRS,MAAM,EAAE;gBACV;cACF,CAAC;cACDqB,KAAK,EAAE;gBACL/B,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF;YACF,CAAC;YACD+B,CAAC,EAAE;cACDH,IAAI,EAAE;gBACJhC,OAAO,EAAE;cACX;YACF;UACF,CAAC;UACDF,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE;YACX,CAAC;YACDK,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTC,KAAK,EAAGC,OAAO,IAAK;kBAClB,MAAMD,KAAI,GAAIC,OAAO,CAAC4B,OAAO,CAAC7B,KAAI,IAAK,EAAE;kBACzC,MAAMpK,KAAI,GAAIqK,OAAO,CAACC,GAAE,IAAK,CAAC;kBAC9B,OAAO,GAAGF,KAAK,KAAKpK,KAAK,GAAG;gBAC9B,CAAC;gBACDkM,UAAU,EAAG7B,OAAO,IAAK;kBACvB,MAAMzJ,IAAG,GAAIsK,aAAa,CAACC,KAAK,CAACd,OAAO,CAAC8B,SAAS,CAAC;kBACnD,MAAMtL,KAAI,GAAIqK,aAAa,CAACE,MAAM,CAACf,OAAO,CAAC8B,SAAS,KAAK,CAAC;kBAC1D,OAAO,SAASvL,IAAI,MAAMC,KAAK,EAAE;gBACnC;cACF,CAAC;cACD4J,SAAS,EAAE;gBACTR,IAAI,EAAE,EAAE;gBACRS,MAAM,EAAE;cACV,CAAC;cACDC,QAAQ,EAAE;gBACRV,IAAI,EAAE;cACR,CAAC;cACDF,OAAO,EAAE;YACX;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMzG,2BAA0B,GAAKvD,IAAI,IAAK;MAC5C,IAAI,CAAClC,qBAAqB,CAACmC,KAAK,EAAE;QAChCJ,OAAO,CAAC+C,IAAI,CAAC,6CAA6C,CAAC;QAC3D;MACF;MAEA,MAAM8F,GAAE,GAAI5K,qBAAqB,CAACmC,KAAK,CAAC0I,UAAU,CAAC,IAAI,CAAC;MACxD,IAAI,CAACD,GAAG,EAAE;QACR7I,OAAO,CAAC+C,IAAI,CAAC,sDAAsD,CAAC;QACpE;MACF;MAEA,MAAMgG,aAAY,GAAI1L,KAAK,CAAC2L,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAE;QACjBA,aAAa,CAACE,OAAO,CAAC,CAAC;MACzB;;MAEA;MACA,MAAMuD,SAAQ,GAAI/L,KAAK,CAACC,OAAO,CAACP,IAAI,IAAIA,IAAG,GAAI,EAAE;MACjDH,OAAO,CAAC8B,GAAG,CAAC,6CAA6C,EAAE0K,SAAS,CAAC;MAErE,IAAInP,KAAK,CAACwL,GAAG,EAAE;QACb7H,IAAI,EAAE,MAAM;QACZb,IAAI,EAAE;UACJkJ,MAAM,EAAEmD,SAAS,CAACnK,GAAG,CAACoK,CAAA,IAAKlP,MAAM,CAACkP,CAAC,CAACvH,IAAI,CAAC,CAAChG,MAAM,CAAC,aAAa,CAAC,CAAC;UAChEoK,QAAQ,EAAE,CAAC;YACTkB,KAAK,EAAE,eAAe;YACtBrK,IAAI,EAAEqM,SAAS,CAACnK,GAAG,CAACoK,CAAA,IAAKC,MAAM,CAACD,CAAC,CAAChH,KAAK,KAAK,CAAC,CAAC;YAC9C+D,WAAW,EAAE,SAAS;YACtBD,eAAe,EAAE,wBAAwB;YACzCoD,OAAO,EAAE,GAAG;YACZC,IAAI,EAAE,IAAI;YACVC,WAAW,EAAE,CAAC;YACdC,gBAAgB,EAAE;UACpB,CAAC;QACH,CAAC;QACDnD,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BE,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE;YACX,CAAC;YACDK,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTC,KAAK,EAAGC,OAAO,IAAK;kBAClB,MAAMsC,SAAQ,GAAIP,SAAS,CAAC/B,OAAO,CAAC8B,SAAS,CAAC;kBAC9C,OAAO,GAAGQ,SAAS,CAACpP,IAAI,KAAK,CAAC8M,OAAO,CAACC,GAAE,IAAK,CAAC,EAAE1F,OAAO,CAAC,CAAC,CAAC,GAAG;gBAC/D;cACF;YACF;UACF,CAAC;UACD6G,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE,GAAG;cACRG,KAAK,EAAE;gBACLa,QAAQ,EAAE,EAAE;gBACZ5C,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF,CAAC;cACDzE,KAAK,EAAE;gBACLqE,OAAO,EAAE,IAAI;gBACbhD,IAAI,EAAE,mBAAmB;gBACzBmD,IAAI,EAAE;kBACJC,IAAI,EAAE,EAAE;kBACRS,MAAM,EAAE;gBACV;cACF;YACF,CAAC;YACDsB,CAAC,EAAE;cACDD,KAAK,EAAE;gBACL/B,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR,CAAC;gBACD4C,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACf;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMvJ,oCAAmC,GAAKxD,IAAI,IAAK;MACrD,IAAI,CAACjC,8BAA8B,CAACkC,KAAK,EAAE;MAE3C,MAAMyI,GAAE,GAAI3K,8BAA8B,CAACkC,KAAK,CAAC0I,UAAU,CAAC,IAAI,CAAC;MACjE,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAI1L,KAAK,CAAC2L,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMkE,YAAW,GAAI;QACnBC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZ,kBAAkB,EAAE;MACtB,CAAC;;MAED;MACA,IAAI5M,KAAK,CAACC,OAAO,CAACP,IAAI,CAACQ,iBAAiB,CAAC,EAAE;QACzCR,IAAI,CAACQ,iBAAiB,CAACgE,OAAO,CAACwB,KAAI,IAAK;UACtC,MAAMnF,IAAG,GAAImF,KAAK,CAACnF,IAAG,IAAKmF,KAAK,CAACxI,IAAI;UACrC,IAAIqD,IAAG,IAAKmM,YAAY,EAAE;YACxBA,YAAY,CAACnM,IAAI,CAAC,CAACoC,IAAI,CAAC;cACtB8B,IAAI,EAAE,IAAIE,IAAI,CAACe,KAAK,CAACjB,IAAI,CAAC;cAC1BO,KAAK,EAAE6C,UAAU,CAACnC,KAAK,CAACV,KAAK,KAAK;YACpC,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ;;MAEA;MACA3E,MAAM,CAAC4D,IAAI,CAACyI,YAAY,CAAC,CAACxI,OAAO,CAAC3D,IAAG,IAAK;QACxCmM,YAAY,CAACnM,IAAI,CAAC,CAACyB,IAAI,CAAC,CAACwC,CAAC,EAAEE,CAAC,KAAKF,CAAC,CAACC,IAAG,GAAIC,CAAC,CAACD,IAAI,CAAC;MACpD,CAAC,CAAC;;MAEF;MACA,MAAMoI,QAAO,GAAI,CAAC,GAAG,IAAIlL,GAAG,CAC1BtB,MAAM,CAACC,MAAM,CAACoM,YAAY,EACvBI,IAAI,CAAC,EACLlL,GAAG,CAACuF,IAAG,IAAKA,IAAI,CAAC1C,IAAI,CAC1B,CAAC,CAAC,CAACzC,IAAI,CAAC,CAACwC,CAAC,EAAEE,CAAC,KAAKF,CAAA,GAAIE,CAAC,CAAC;;MAExB;MACA,MAAMmE,QAAO,GAAIxI,MAAM,CAAC0M,OAAO,CAACL,YAAY,CAAC,CAAC9K,GAAG,CAAC,CAAC,CAACrB,IAAI,EAAEb,IAAI,CAAC,EAAEsN,KAAK,KAAK;QACzE,MAAMC,MAAK,GAAI,CACb,mBAAmB;QAAI;QACvB,mBAAmB;QAAI;QACvB,mBAAkB,CAAK;QAAA,CACxB;QACD,MAAMxB,KAAI,GAAIwB,MAAM,CAACD,KAAK,CAAC;QAE3B,OAAO;UACLjD,KAAK,EAAExJ,IAAI;UACXb,IAAI,EAAEmN,QAAQ,CAACjL,GAAG,CAAC6C,IAAG,IAAK;YACzB,MAAMyI,KAAI,GAAIxN,IAAI,CAACuL,IAAI,CAACe,CAAA,IAAKA,CAAC,CAACvH,IAAI,CAAC0I,OAAO,CAAC,MAAM1I,IAAI,CAAC0I,OAAO,CAAC,CAAC,CAAC;YACjE,OAAOD,KAAI,GAAIA,KAAK,CAAClI,KAAI,GAAI,IAAI;UACnC,CAAC,CAAC;UACF+D,WAAW,EAAE0C,KAAK;UAClB3C,eAAe,EAAE2C,KAAK,CAAC2B,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC;UACpEjB,IAAI,EAAE,IAAI;UACVD,OAAO,EAAE,GAAG;UACZE,WAAW,EAAE,CAAC;UACdC,gBAAgB,EAAE,CAAC;UACnBgB,QAAQ,EAAE,IAAG,CAAE;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAIzQ,KAAK,CAACwL,GAAG,EAAE;QACb7H,IAAI,EAAE,MAAM;QACZb,IAAI,EAAE;UACJkJ,MAAM,EAAEiE,QAAQ,CAACjL,GAAG,CAAC6C,IAAG,IAAK3H,MAAM,CAAC2H,IAAI,CAAC,CAAChG,MAAM,CAAC,aAAa,CAAC,CAAC;UAChEoK;QACF,CAAC;QACDK,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BkE,WAAW,EAAE;YACXC,SAAS,EAAE,KAAK;YAChBC,IAAI,EAAE;UACR,CAAC;UACDlE,OAAO,EAAE;YACPC,MAAM,EAAE;cACNE,QAAQ,EAAE;YACZ,CAAC;YACDI,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTC,KAAK,EAAGC,OAAO,IAAK;kBAClB,MAAMrK,KAAI,GAAIqK,OAAO,CAACC,GAAE,KAAM,IAAG,GAAID,OAAO,CAACC,GAAG,CAAC1F,OAAO,CAAC,CAAC,IAAI,KAAK;kBACnE,OAAO,GAAGyF,OAAO,CAAC4B,OAAO,CAAC7B,KAAK,KAAKpK,KAAK,GAAG;gBAC9C;cACF;YACF;UACF,CAAC;UACDyL,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE,GAAG;cACRpG,KAAK,EAAE;gBACLqE,OAAO,EAAE,IAAI;gBACbhD,IAAI,EAAE;cACR;YACF,CAAC;YACDmF,CAAC,EAAE;cACDD,KAAK,EAAE;gBACLc,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACf;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMgB,UAAS,GAAKhJ,IAAI,IAAK;MAC3B,OAAO3H,MAAM,CAAC2H,IAAI,CAAC,CAAChG,MAAM,CAAC,aAAa;IAC1C;IAEA,MAAMiP,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B;MACA,IAAIzP,YAAY,CAAC0B,KAAK,EAAE;QACtBzB,YAAY,CAACyP,OAAO,CAAC,cAAc,EAAE1P,YAAY,CAAC0B,KAAK;MACzD,OAAO;QACLzB,YAAY,CAAC0P,UAAU,CAAC,cAAc;MACxC;MAEA,IAAIxP,eAAe,CAACuB,KAAK,EAAE;QACzBzB,YAAY,CAACyP,OAAO,CAAC,iBAAiB,EAAEvP,eAAe,CAACuB,KAAK;MAC/D,OAAO;QACLzB,YAAY,CAAC0P,UAAU,CAAC,iBAAiB;MAC3C;MAEA,IAAIvP,eAAe,CAACsB,KAAK,EAAE;QACzBzB,YAAY,CAACyP,OAAO,CAAC,iBAAiB,EAAEtP,eAAe,CAACsB,KAAK;MAC/D,OAAO;QACLzB,YAAY,CAAC0P,UAAU,CAAC,iBAAiB;MAC3C;MAEA,MAAMpL,kBAAkB,CAAC;IAC3B;;IAEA;IACA/F,KAAK,CAACwB,YAAY,EAAEsE,gBAAgB;IACpC9F,KAAK,CAAC,CAAC2B,eAAe,EAAEC,eAAe,CAAC,EAAEqP,YAAY;IACtDjR,KAAK,CAAC,CAAC6B,iBAAiB,EAAEC,eAAe,CAAC,EAAE,MAAM;MAChD,IAAID,iBAAiB,CAACqB,KAAI,IAAKpB,eAAe,CAACoB,KAAK,EAAE;QACpD;QACA,MAAMkO,KAAI,GAAI/Q,MAAM,CAACwB,iBAAiB,CAACqB,KAAK,CAAC;QAC7C,MAAMmO,GAAE,GAAIhR,MAAM,CAACyB,eAAe,CAACoB,KAAK,CAAC;QAEzC,IAAImO,GAAG,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;UACvBtP,eAAe,CAACoB,KAAI,GAAIrB,iBAAiB,CAACqB,KAAK;QACjD;QAEA6C,kBAAkB,CAAC,CAAC;MACtB;IACF,CAAC;IAED,MAAMyF,mBAAkB,GAAI,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAM9G,SAAQ,GAAIjC,YAAY,CAAC,CAAC;QAChC,IAAI,CAACiC,SAAS,EAAE;;QAEhB;QACA,MAAMK,MAAK,GAAI;UACbL,SAAS;UACTD,IAAI,EAAEjD,YAAY,CAAC0B,KAAI,IAAK,EAAE;UAC9BuC,OAAO,EAAE9D,eAAe,CAACuB,KAAI,IAAK,EAAE;UACpCwC,OAAO,EAAE9D,eAAe,CAACsB,KAAI,IAAK;QACpC,CAAC;QAED,IAAIrB,iBAAiB,CAACqB,KAAK,EAAE6B,MAAM,CAAC8B,SAAQ,GAAIhF,iBAAiB,CAACqB,KAAK;QACvE,IAAIpB,eAAe,CAACoB,KAAK,EAAE6B,MAAM,CAAC6B,OAAM,GAAI9E,eAAe,CAACoB,KAAK;QAEjEJ,OAAO,CAAC8B,GAAG,CAAC,uCAAuC,EAAEG,MAAM,CAAC;;QAE5D;QACA,IAAI;UACF,MAAMwM,kBAAiB,GAAI,MAAMnR,KAAK,CAAC0E,GAAG,CAAC,6CAA6C,EAAE;YACxFC,MAAM;YACNC,OAAO,EAAE;cACP,eAAe,EAAE,UAAUrE,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAK;YACnD;UACF,CAAC,CAAC;UAEF6M,yBAAyB,CAACD,kBAAkB,CAACtO,IAAI,CAAC;QACpD,EAAE,OAAOF,KAAK,EAAE;UACd;UACAD,OAAO,CAAC8B,GAAG,CAAC,uCAAuC,CAAC;UACpD,MAAM2M,kBAAiB,GAAI,MAAMnR,KAAK,CAAC0E,GAAG,CAAC,uCAAuC,EAAE;YAClFC,MAAM;YACNC,OAAO,EAAE;cACP,eAAe,EAAE,UAAUrE,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAK;YACnD;UACF,CAAC,CAAC;UAEF6M,yBAAyB,CAACD,kBAAkB,CAACtO,IAAI,CAAC;QACpD;MACF,EAAE,OAAOF,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;QACAuD,yBAAyB,CAAC;UAAEC,cAAc,EAAE;QAAG,CAAC,CAAC;QACjDC,2BAA2B,CAAC,EAAE,CAAC;QAC/BC,oCAAoC,CAAC;UACnChD,iBAAiB,EAAE;QACrB,CAAC,CAAC;MACJ;IACF,CAAC;;IAED;IACA,MAAM+N,yBAAwB,GAAKvO,IAAI,IAAK;MAC1C,IAAIA,IAAI,EAAE;QACRH,OAAO,CAAC8B,GAAG,CAAC,2BAA2B,EAAE3B,IAAI,CAAC;;QAE9C;QACA,IAAIA,IAAI,CAACU,eAAe,EAAE;UACxB,MAAM4C,cAAa,GAAI,EAAE;UAEzB3C,MAAM,CAAC4D,IAAI,CAACvE,IAAI,CAACU,eAAe,CAAC,CAAC8D,OAAO,CAAC3D,IAAG,IAAK;YAChD,MAAM4D,QAAO,GAAIzE,IAAI,CAACU,eAAe,CAACG,IAAI,CAAC;YAC3C,IAAI4D,QAAQ,EAAE;cACZ,IAAIC,QAAO,GAAI,CAAC;cAChB,IAAID,QAAQ,CAACE,UAAS,IAAKF,QAAQ,CAACE,UAAS,GAAI,CAAC,EAAE;gBAClDD,QAAO,GAAI,CAACD,QAAQ,CAACG,UAAS,GAAIH,QAAQ,CAACE,UAAU,EAAEE,OAAO,CAAC,CAAC,CAAC;cACnE;cAEAvB,cAAc,CAACL,IAAI,CAAC;gBAClBpC,IAAI,EAAEA,IAAI;gBACV1C,YAAY,EAAEuG,QAAQ;gBACtB5D,KAAK,EAAE2D,QAAQ,CAAC3D,KAAI,IAAK;cAC3B,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;UAEFuC,yBAAyB,CAAC;YAAEC;UAAe,CAAC,CAAC;QAC/C,OAAO,IAAIhD,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;UAC9B;UACA,MAAMU,eAAc,GAAI;YACtB,MAAM,EAAE;cAAEI,KAAK,EAAE,CAAC;cAAE8D,UAAU,EAAE,CAAC;cAAED,UAAU,EAAE;YAAE,CAAC;YAClD,UAAU,EAAE;cAAE7D,KAAK,EAAE,CAAC;cAAE8D,UAAU,EAAE,CAAC;cAAED,UAAU,EAAE;YAAE,CAAC;YACtD,kBAAkB,EAAE;cAAE7D,KAAK,EAAE,CAAC;cAAE8D,UAAU,EAAE,CAAC;cAAED,UAAU,EAAE;YAAE;UAC/D,CAAC;;UAED;UACA3E,IAAI,CAACwE,OAAO,CAACU,UAAS,IAAK;YACzB,MAAMrE,IAAG,GAAIqE,UAAU,CAACrE,IAAG,IAAK,OAAO;YACvC,IAAIH,eAAe,CAACG,IAAI,CAAC,EAAE;cACzBH,eAAe,CAACG,IAAI,CAAC,CAACC,KAAK,EAAE;;cAE7B;cACA,IAAIoE,UAAU,CAACE,MAAM,EAAE;gBACrB;gBACA,IAAID,UAAS,GAAI,EAAE;gBACnB,IAAI7E,KAAK,CAACC,OAAO,CAAC2E,UAAU,CAACE,MAAM,CAAC,EAAE;kBACpCD,UAAS,GAAID,UAAU,CAACE,MAAM;gBAChC,OAAO,IAAI,OAAOF,UAAU,CAACE,MAAK,KAAM,QAAQ,EAAE;kBAChDD,UAAS,GAAIxE,MAAM,CAACC,MAAM,CAACsE,UAAU,CAACE,MAAM,CAAC;gBAC/C;gBAEAD,UAAU,CAACX,OAAO,CAACc,KAAI,IAAK;kBAC1B,IAAI,OAAOA,KAAI,KAAM,QAAQ,EAAE;oBAC7B5E,eAAe,CAACG,IAAI,CAAC,CAAC+D,UAAS,IAAKU,KAAK;oBACzC5E,eAAe,CAACG,IAAI,CAAC,CAAC8D,UAAU,EAAE;kBACpC;gBACF,CAAC,CAAC;cACJ;YACF;UACF,CAAC,CAAC;;UAEF;UACA,MAAMrB,cAAa,GAAI3C,MAAM,CAAC4D,IAAI,CAAC7D,eAAe,CAAC,CAACwB,GAAG,CAACrB,IAAG,IAAK;YAC9D,MAAM4D,QAAO,GAAI/D,eAAe,CAACG,IAAI,CAAC;YACtC,MAAM1C,YAAW,GAAIsG,QAAQ,CAACE,UAAS,GAAI,IACvC,CAACF,QAAQ,CAACG,UAAS,GAAIH,QAAQ,CAACE,UAAU,EAAEE,OAAO,CAAC,CAAC,IACrD,CAAC;YAEL,OAAO;cACLhE,IAAI;cACJ1C,YAAY;cACZ2C,KAAK,EAAE2D,QAAQ,CAAC3D;YAClB,CAAC;UACH,CAAC,CAAC;UAEFuC,yBAAyB,CAAC;YAAEC;UAAe,CAAC,CAAC;;UAE7C;UACA,MAAM9C,iBAAgB,GAAIR,IAAG,CAC1BoC,MAAM,CAAC0C,CAAA,IAAKA,CAAC,CAACC,IAAI,EAAE;UAAA,CACpBzC,IAAI,CAAC,CAACwC,CAAC,EAAEE,CAAC,KAAK,IAAIC,IAAI,CAACH,CAAC,CAACC,IAAI,IAAI,IAAIE,IAAI,CAACD,CAAC,CAACD,IAAI,CAAC,EAAE;UAAA,CACpD7C,GAAG,CAACgD,UAAS,IAAK;YACjB;YACA,IAAI/G,YAAW,GAAI,CAAC;YACpB,IAAIgH,UAAS,GAAI,EAAE;YAEnB,IAAID,UAAU,CAACE,MAAM,EAAE;cACrB,IAAI9E,KAAK,CAACC,OAAO,CAAC2E,UAAU,CAACE,MAAM,CAAC,EAAE;gBACpCD,UAAS,GAAID,UAAU,CAACE,MAAM;cAChC,OAAO,IAAI,OAAOF,UAAU,CAACE,MAAK,KAAM,QAAQ,EAAE;gBAChDD,UAAS,GAAIxE,MAAM,CAACC,MAAM,CAACsE,UAAU,CAACE,MAAM,CAAC;cAC/C;cAEA,MAAMC,WAAU,GAAIF,UAAU,CAAC/C,MAAM,CAACkD,KAAI,IAAK,OAAOA,KAAI,KAAM,QAAQ,CAAC;cACzE,IAAID,WAAW,CAAC5E,MAAK,GAAI,CAAC,EAAE;gBAC1B,MAAMmE,UAAS,GAAIS,WAAW,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEF,KAAK,KAAKE,GAAE,GAAIF,KAAK,EAAE,CAAC,CAAC;gBACrEnH,YAAW,GAAIyG,UAAS,GAAIS,WAAW,CAAC5E,MAAM;cAChD;YACF;YAEA,OAAO;cACLsE,IAAI,EAAEG,UAAU,CAACH,IAAI;cACrBO,KAAK,EAAEnH,YAAY;cACnBX,IAAI,EAAE0H,UAAU,CAAC1H,IAAG,IAAK0H,UAAU,CAACO,KAAI,IAAKP,UAAU,CAACrE,IAAI;cAC5DA,IAAI,EAAEqE,UAAU,CAACrE;YACnB,CAAC;UACH,CAAC,CAAC;UAEJ0C,2BAA2B,CAAC/C,iBAAiB,CAAC;UAC9CgD,oCAAoC,CAAC;YACnChD;UACF,CAAC,CAAC;QACJ;MACF;IACF,CAAC;IAED3D,SAAS,CAAC,YAAY;MACpB,IAAIa,KAAK,CAACgC,KAAK,CAACC,IAAI,CAACF,IAAI,EAAEG,GAAE,IAAKlC,KAAK,CAACgC,KAAK,CAACC,IAAI,CAAC+B,KAAK,EAAE;QACxD7B,OAAO,CAAC8B,GAAG,CAAC,oCAAoC,CAAC;;QAEjD;QACA,MAAM3E,QAAQ,CAAC,CAAC;QAEhB,IAAI;UACF;UACA6C,OAAO,CAAC8B,GAAG,CAAC,8BAA8B,CAAC;UAE3CwB,eAAe,CAAC,CAAC;UAEjBtD,OAAO,CAAC8B,GAAG,CAAC,0BAA0B,CAAC;;UAEvC;UACA,MAAMJ,+BAA+B,CAAChD,YAAY,CAAC0B,KAAK,CAAC;UACzDJ,OAAO,CAAC8B,GAAG,CAAC,+BAA+B,CAAC;;UAE5C;UACA,MAAMmB,kBAAkB,CAAC,CAAC;UAC1BjD,OAAO,CAAC8B,GAAG,CAAC,8BAA8B,CAAC;QAC7C,EAAE,OAAO7B,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF,OAAO;QACLD,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC5C;;MAEA;MACAa,MAAM,CAAC4D,IAAI,CAACvF,YAAY,CAACiB,KAAK,CAAC,CAACuE,OAAO,CAACd,SAAQ,IAAK;QACnD1E,YAAY,CAACiB,KAAK,CAACyD,SAAS,CAAC,CAACxE,MAAK,GAAI,OAAO;MAChD,CAAC,CAAC;IACJ,CAAC;IAED,OAAO;MACLlB,aAAa;MACbC,aAAa;MACbC,aAAa;MACbC,YAAY;MACZR,gBAAgB;MAChBS,gBAAgB;MAChBC,QAAQ;MACRC,QAAQ;MACRC,YAAY;MACZG,eAAe;MACfC,eAAe;MACfoB,iBAAiB;MACjBM,kBAAkB;MAClBU,iBAAiB;MACjBE,WAAW;MACX8M,UAAU;MACVhL,gBAAgB;MAChBF,gBAAgB;MAChBmL,YAAY;MACZnQ,mBAAmB;MACnBC,qBAAqB;MACrBC,8BAA8B;MAC9Ba,iBAAiB;MACjBC,eAAe;MACfC,KAAK;MACLoC,OAAO;MACP3B,cAAc;MACd4B,QAAQ;MACRnC,YAAY;MACZyE,oBAAoB;MACpBiC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"student-survey-stat\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-center py-4\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"text-center py-4\"\n};\nconst _hoisted_4 = {\n  key: 2\n};\nconst _hoisted_5 = {\n  ref: \"surveyChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"mt-2\"\n  }, \"Loading student survey data...\", -1 /* HOISTED */)]))) : $setup.noData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[1] || (_cache[1] = [_createElementVNode(\"i\", {\n    class: \"fas fa-exclamation-circle fa-3x text-muted mb-3\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"h5\", null, \"No Survey Data Available\", -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"text-muted\"\n  }, \"No survey data found for this student.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"canvas\", _hoisted_5, null, 512 /* NEED_PATCH */)]))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","$setup","loading","_hoisted_2","_cache","_createElementVNode","role","noData","_hoisted_3","_hoisted_4","_hoisted_5"],"sources":["D:\\au_dev\\client\\src\\components\\StudentSurveyStat.vue"],"sourcesContent":["<template>\r\n  <div class=\"student-survey-stat\">\r\n    <div v-if=\"loading\" class=\"text-center py-4\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <p class=\"mt-2\">Loading student survey data...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"noData\" class=\"text-center py-4\">\r\n      <i class=\"fas fa-exclamation-circle fa-3x text-muted mb-3\"></i>\r\n      <h5>No Survey Data Available</h5>\r\n      <p class=\"text-muted\">No survey data found for this student.</p>\r\n    </div>\r\n    \r\n    <div v-else>\r\n      <canvas ref=\"surveyChart\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch, defineProps } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport Chart from 'chart.js/auto';\r\nimport axios from 'axios';\r\n\r\nconst props = defineProps({\r\n  _id: {\r\n    type: String,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst store = useStore();\r\nconst loading = ref(true);\r\nconst noData = ref(false);\r\nconst surveyChart = ref(null);\r\nconst surveyData = ref(null);\r\n\r\n// Fetch student survey data\r\nconst fetchSurveyData = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const token = store.state.auth.token;\r\n    \r\n    // Get survey data for the specified student\r\n    const response = await axios.get(`http://localhost:8000/api/survey/student/${props._id}`, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    \r\n    console.log('Student survey data:', response.data);\r\n    \r\n    if (response.data) {\r\n      surveyData.value = response.data;\r\n      noData.value = false;\r\n      renderSurveyChart();\r\n    } else {\r\n      noData.value = true;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching student survey data:', error);\r\n    \r\n    // Create sample data if API fails\r\n    createSampleData();\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// Create sample data if the API fails\r\nconst createSampleData = () => {\r\n  console.log('Creating sample survey data');\r\n  \r\n  // Sample survey stats\r\n  surveyData.value = {\r\n    surveyStats: [\r\n      { type: 'Academic', average: 7.2 },\r\n      { type: 'Financial', average: 5.8 },\r\n      { type: 'Personal', average: 3.5 },\r\n      { type: 'Health', average: 2.1 },\r\n      { type: 'Social', average: 4.6 }\r\n    ]\r\n  };\r\n  \r\n  noData.value = false;\r\n  renderSurveyChart();\r\n};\r\n\r\n// Render the radar chart\r\nconst renderSurveyChart = () => {\r\n  if (!surveyChart.value) return;\r\n  \r\n  const ctx = surveyChart.value.getContext('2d');\r\n  if (!ctx) return;\r\n  \r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) existingChart.destroy();\r\n  \r\n  // Extract data from survey stats\r\n  let labels = [];\r\n  let data = [];\r\n  \r\n  if (surveyData.value?.surveyStats && Array.isArray(surveyData.value.surveyStats)) {\r\n    surveyData.value.surveyStats.forEach(stat => {\r\n      if (stat.type && !isNaN(stat.average)) {\r\n        labels.push(stat.type);\r\n        data.push(stat.average);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // If no valid data, use default values\r\n  if (labels.length === 0) {\r\n    labels = ['Academic', 'Financial', 'Personal', 'Health', 'Social'];\r\n    data = [0, 0, 0, 0, 0];\r\n  }\r\n  \r\n  // Calculate background color based on severity\r\n  const backgroundColors = data.map(value => {\r\n    if (value >= 7) return 'rgba(220, 53, 69, 0.2)';  // High (red)\r\n    if (value >= 5) return 'rgba(255, 193, 7, 0.2)';  // Medium (yellow)\r\n    if (value >= 3) return 'rgba(13, 110, 253, 0.2)'; // Low (blue)\r\n    return 'rgba(25, 135, 84, 0.2)';                 // Minimal (green)\r\n  });\r\n  \r\n  // Calculate border color based on severity\r\n  const borderColors = data.map(value => {\r\n    if (value >= 7) return 'rgba(220, 53, 69, 1)';  // High (red)\r\n    if (value >= 5) return 'rgba(255, 193, 7, 1)';  // Medium (yellow)\r\n    if (value >= 3) return 'rgba(13, 110, 253, 1)'; // Low (blue)\r\n    return 'rgba(25, 135, 84, 1)';                 // Minimal (green)\r\n  });\r\n  \r\n  // Create chart\r\n  new Chart(ctx, {\r\n    type: 'radar',\r\n    data: {\r\n      labels: labels,\r\n      datasets: [{\r\n        label: 'Problem Severity',\r\n        data: data,\r\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n        borderColor: 'rgba(54, 162, 235, 1)',\r\n        borderWidth: 2,\r\n        pointBackgroundColor: borderColors,\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: borderColors,\r\n        pointRadius: 4,\r\n        pointHoverRadius: 6\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        r: {\r\n          beginAtZero: true,\r\n          max: 10,\r\n          ticks: {\r\n            stepSize: 2,\r\n            display: false\r\n          },\r\n          pointLabels: {\r\n            font: {\r\n              size: 12,\r\n              weight: 'bold'\r\n            }\r\n          },\r\n          grid: {\r\n            circular: true\r\n          }\r\n        }\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => {\r\n              const value = context.raw;\r\n              let severity = 'Minimal';\r\n              if (value >= 7) severity = 'High';\r\n              else if (value >= 5) severity = 'Medium';\r\n              else if (value >= 3) severity = 'Low';\r\n              \r\n              return `Severity: ${value.toFixed(1)} (${severity})`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// Watch for ID changes\r\nwatch(() => props._id, () => {\r\n  if (props._id) {\r\n    fetchSurveyData();\r\n  }\r\n});\r\n\r\n// Initialize component\r\nonMounted(() => {\r\n  if (props._id) {\r\n    fetchSurveyData();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.student-survey-stat {\r\n  min-height: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\ncanvas {\r\n  max-height: 250px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;EADlCC,GAAA;EAEwBD,KAAK,EAAC;;;EAF9BC,GAAA;EAS4BD,KAAK,EAAC;;;EATlCC,GAAA;AAAA;;EAgBcC,GAAG,EAAC;AAAa;;uBAf7BC,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBOC,MAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAKM,OALNI,UAKM,EAAAC,MAAA,QAAAA,MAAA,OAJJC,mBAAA,CAEM;IAFDT,KAAK,EAAC,6BAA6B;IAACU,IAAI,EAAC;MAC5CD,mBAAA,CAA+C;IAAzCT,KAAK,EAAC;EAAiB,GAAC,YAAU,E,qBAE1CS,mBAAA,CAAkD;IAA/CT,KAAK,EAAC;EAAM,GAAC,gCAA8B,oB,MAGhCK,MAAA,CAAAM,MAAM,I,cAAtBR,mBAAA,CAIM,OAJNS,UAIM,EAAAJ,MAAA,QAAAA,MAAA,OAHJC,mBAAA,CAA+D;IAA5DT,KAAK,EAAC;EAAiD,4BAC1DS,mBAAA,CAAiC,YAA7B,0BAAwB,qBAC5BA,mBAAA,CAAgE;IAA7DT,KAAK,EAAC;EAAY,GAAC,wCAAsC,oB,qBAG9DG,mBAAA,CAEM,OAjBVU,UAAA,GAgBMJ,mBAAA,CAAmC,UAAnCK,UAAmC,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport AllSurveyStat from '../components/AllSurveyStat.vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  __name: 'SSPDashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const quizzesChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const failingStudents = ref(0);\n    const completedSurveys = ref(0);\n    const averageScore = ref(0);\n    const assessmentCompletion = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n    const quizzesGrades = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasPerformanceData = computed(() => averageScore.value > 0);\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0);\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        // Get dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/stats`, {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n        if (response.data) {\n          // Update stats\n          totalStudents.value = response.data.totalStudents || 0;\n          totalSections.value = response.data.totalSections || 0;\n          totalSubjects.value = response.data.totalSubjects || 0;\n          averageScore.value = response.data.averageScore || 0;\n          assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n          recentActivities.value = response.data.recentActivities || [];\n        }\n\n        // Get failing students count directly from failing students list\n        try {\n          const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n\n          // Get completed surveys to exclude those students\n          const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          const completedSurveyIds = new Set();\n          if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n            completedSurveysResponse.data.forEach(survey => {\n              completedSurveyIds.add(survey.studentId);\n            });\n          }\n\n          // Count completed surveys\n          completedSurveys.value = completedSurveysResponse.data?.length || 0;\n\n          // Filter out students who have completed surveys\n          const failingStudentList = failingListResponse.data?.list || [];\n          if (Array.isArray(failingStudentList)) {\n            const filteredCount = failingStudentList.filter(student => !completedSurveyIds.has(student.info._id)).length;\n            failingStudents.value = filteredCount;\n          } else {\n            failingStudents.value = 0;\n          }\n        } catch (error) {\n          console.error('Error fetching failing students:', error);\n          failingStudents.value = 0;\n          completedSurveys.value = 0;\n        }\n\n        // Log data before updating charts\n        console.log('Performance Distribution:', response.data.performanceDistribution);\n        console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n        console.log('Performance Trends:', response.data.performanceTrends);\n        console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n        // Update charts with new data\n        if (Array.isArray(response.data.performanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n        }\n        if (response.data.assessmentTypeDistribution) {\n          updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n        } else {\n          console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n          updateAssessmentTypeChart([{\n            type: 'Quiz',\n            percentage: 0\n          }, {\n            type: 'Activity',\n            percentage: 0\n          }, {\n            type: 'Performance Task',\n            percentage: 0\n          }]);\n        }\n        if (Array.isArray(response.data.performanceTrends)) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n        } else {\n          console.warn('Invalid performance trends data:', response.data.performanceTrends);\n          updatePerformanceTrendChart([]);\n        }\n        if (response.data.assessmentCompletion?.byType) {\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Reset data on error\n        totalStudents.value = 0;\n        totalSections.value = 0;\n        totalSubjects.value = 0;\n        failingStudents.value = 0;\n        completedSurveys.value = 0;\n        averageScore.value = 0;\n        assessmentCompletion.value = 0;\n        recentActivities.value = [];\n\n        // Update charts with empty data\n        updatePerformanceChart({\n          performanceDistribution: [0, 0, 0, 0, 0]\n        });\n        updateAssessmentTypeChart([{\n          type: 'Quiz',\n          percentage: 0\n        }, {\n          type: 'Activity',\n          percentage: 0\n        }, {\n          type: 'Performance Task',\n          percentage: 0\n        }]);\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          assessmentCompletion: {\n            byType: {\n              quiz: 0,\n              activity: 0,\n              performancetask: 0\n            }\n          }\n        });\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process performance distribution data\n      const performanceData = Array.isArray(data.performanceDistribution) ? data.performanceDistribution : [0, 0, 0, 0, 0];\n      console.log('Performance distribution data:', performanceData);\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n          datasets: [{\n            label: 'Number of Students',\n            data: performanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for highest\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow\n            'rgba(251, 146, 60, 0.8)',\n            // Orange\n            'rgba(239, 68, 68, 0.8)' // Red for lowest\n            ],\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${value} students (${percentage}%)`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1\n              },\n              title: {\n                display: true,\n                text: 'Number of Students'\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the assessment type distribution data\n      const labels = data.labels || [];\n      const datasets = data.datasets || [];\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets.map((dataset, index) => ({\n            label: dataset.type,\n            data: dataset.data,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)' // Yellow\n            ][index],\n            borderWidth: 1\n          }))\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Assessments'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.dataset.label}: ${context.raw || 0} assessments`\n              }\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n          updateAssessmentTypeChart([{\n            type: 'Quiz',\n            percentage: 0\n          }, {\n            type: 'Activity',\n            percentage: 0\n          }, {\n            type: 'Performance Task',\n            percentage: 0\n          }]);\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n\n          // Fetch Grades\n          const grades = await axios.get('http://localhost:8000/api/dashboard/failing/analytics');\n          const quizzes = grades.data.filter(a => a.type === 'Quiz') || [];\n          const activity = grades.data.filter(a => a.type === 'Activity') || [];\n          const performanceTask = grades.data.filter(a => a.type === 'Performance Task') || [];\n          quizzes[0].data.map(datas => {\n            // console.log(datas.scores);\n            let temp = 0;\n            let counter = 0;\n            Object.entries(datas.scores).forEach(([id, score]) => {\n              if (score <= 50) {\n                temp = temp + score;\n                counter++;\n              }\n            });\n            quizzesGrades.value.push({\n              average: Number((temp / counter).toFixed(2)) || 0,\n              subject: datas.subject\n            });\n          });\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    const __returned__ = {\n      store,\n      performanceChart,\n      attendanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      quizzesChart,\n      assessmentTypePerformanceChart,\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      failingStudents,\n      completedSurveys,\n      averageScore,\n      assessmentCompletion,\n      recentActivities,\n      sections,\n      subjects,\n      quizzesGrades,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      getTeacherId,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      fetchTeacherSectionsAndSubjects,\n      handleYearChange,\n      getFilterDisplay,\n      fetchDashboardData,\n      updatePerformanceChart,\n      updateAssessmentTypeChart,\n      updatePerformanceTrendChart,\n      updateAssessmentTypePerformanceChart,\n      formatDate,\n      applyFilters,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      nextTick,\n      AllSurveyStat,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get axios() {\n        return axios;\n      },\n      get moment() {\n        return moment;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","AllSurveyStat","useStore","Chart","axios","moment","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","quizzesChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","failingStudents","completedSurveys","averageScore","assessmentCompletion","recentActivities","sections","subjects","quizzesGrades","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","getTeacherId","user","state","auth","_id","console","error","hasPerformanceData","value","hasAssessmentData","hasActivity","length","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","startDate","endDate","response","overall","failingListResponse","completedSurveysResponse","completedSurveyIds","Array","isArray","forEach","survey","add","studentId","failingStudentList","list","filteredCount","filter","student","has","info","performanceDistribution","assessmentTypeDistribution","performanceTrends","byType","updatePerformanceChart","warn","updateAssessmentTypeChart","type","percentage","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","quiz","activity","performancetask","ctx","getContext","existingChart","getChart","destroy","performanceData","labels","datasets","label","backgroundColor","borderWidth","borderRadius","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","raw","total","reduce","a","b","toFixed","scales","y","beginAtZero","ticks","stepSize","title","text","dataset","index","x","stacked","maxRotation","minRotation","position","validData","d","date","Number","score","borderColor","tension","fill","pointRadius","pointHoverRadius","dataPoint","dataIndex","name","max","font","size","weight","trendsByType","Quiz","Activity","trend","Date","parseFloat","Object","keys","allDates","values","flat","item","entries","colors","color","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore","grades","quizzes","performanceTask","datas","temp","counter","scores","id","average"],"sources":["D:/au_dev/client/src/views/SSPDashboard.vue"],"sourcesContent":["<script setup>\r\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\r\nimport AllSurveyStat from '../components/AllSurveyStat.vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\nconst store = useStore()\r\nconst performanceChart = ref(null)\r\nconst attendanceChart = ref(null)\r\nconst assessmentTypeChart = ref(null)\r\nconst performanceTrendChart = ref(null)\r\nconst quizzesChart = ref(null)\r\nconst assessmentTypePerformanceChart = ref(null)\r\n\r\n// Data refs\r\nconst totalStudents = ref(0)\r\nconst totalSections = ref(0)\r\nconst totalSubjects = ref(0)\r\nconst failingStudents = ref(0)\r\nconst completedSurveys = ref(0)\r\nconst averageScore = ref(0)\r\nconst assessmentCompletion = ref(0)\r\nconst recentActivities = ref([])\r\nconst sections = ref([])\r\nconst subjects = ref([])\r\nconst quizzesGrades = ref([]);\r\n\r\n// Filter refs\r\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\r\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\r\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\r\nconst selectedStartDate = ref('')\r\nconst selectedEndDate = ref('')\r\nconst today = computed(() => moment().format('YYYY-MM-DD'))\r\n\r\n// Get teacher ID from store\r\nconst getTeacherId = () => {\r\n  const user = store.state.auth.user\r\n  if (!user || !user._id) {\r\n    console.error('No teacher ID found in store')\r\n    return null\r\n  }\r\n  return user._id\r\n}\r\n\r\n// Computed properties for data availability\r\nconst hasPerformanceData = computed(() => averageScore.value > 0)\r\nconst hasAssessmentData = computed(() => assessmentCompletion.value > 0)\r\nconst hasActivity = computed(() => recentActivities.value.length > 0)\r\n\r\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\r\n  try {\r\n    const teacherId = getTeacherId()\r\n    if (!teacherId) return\r\n\r\n    const token = store.state.auth.token\r\n    console.log('Fetching sections and subjects for:', { teacherId, year })\r\n\r\n    // First get all class records to extract sections\r\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\r\n      params: { \r\n        teacherId,\r\n        year \r\n      },\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n\r\n    if (recordsResponse.data) {\r\n      // Extract unique sections and subjects\r\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\r\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\r\n      \r\n      sections.value = uniqueSections.sort()\r\n      subjects.value = uniqueSubjects.sort()\r\n      \r\n      console.log('Loaded sections and subjects:', {\r\n        sections: sections.value,\r\n        subjects: subjects.value\r\n      })\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching teacher sections and subjects:', error)\r\n    sections.value = []\r\n    subjects.value = []\r\n  }\r\n}\r\n\r\nconst handleYearChange = async () => {\r\n  selectedSection.value = ''\r\n  selectedSubject.value = ''\r\n  if (selectedYear.value) {\r\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\r\n  } else {\r\n    sections.value = []\r\n    subjects.value = []\r\n  }\r\n  await fetchDashboardData()\r\n}\r\n\r\nconst getFilterDisplay = () => {\r\n  const filters = []\r\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\r\n  if (selectedSection.value) filters.push(selectedSection.value)\r\n  if (selectedSubject.value) filters.push(selectedSubject.value)\r\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\r\n}\r\n\r\nconst fetchDashboardData = async () => {\r\n  try {\r\n    const teacherId = getTeacherId();\r\n    if (!teacherId) {\r\n      console.error('No teacher ID found');\r\n      return;\r\n    }\r\n\r\n    const token = store.state.auth.token;\r\n    if (!token) {\r\n      console.error('No auth token found');\r\n      return;\r\n    }\r\n\r\n    console.log('Fetching dashboard data with params:', {\r\n      teacherId,\r\n      year: selectedYear.value,\r\n      section: selectedSection.value,\r\n      subject: selectedSubject.value,\r\n      startDate: selectedStartDate.value,\r\n      endDate: selectedEndDate.value\r\n    });\r\n\r\n    // Get dashboard stats\r\n    const response = await axios.get(`http://localhost:8000/api/dashboard/stats`, {\r\n      params: {\r\n        year: selectedYear.value,\r\n        section: selectedSection.value,\r\n        subject: selectedSubject.value,\r\n        startDate: selectedStartDate.value,\r\n        endDate: selectedEndDate.value\r\n      },\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    });\r\n\r\n    console.log('Dashboard data received:', response.data);\r\n\r\n    if (response.data) {\r\n      // Update stats\r\n      totalStudents.value = response.data.totalStudents || 0;\r\n      totalSections.value = response.data.totalSections || 0;\r\n      totalSubjects.value = response.data.totalSubjects || 0;\r\n      averageScore.value = response.data.averageScore || 0;\r\n      assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\r\n      recentActivities.value = response.data.recentActivities || [];\r\n    }\r\n    \r\n    // Get failing students count directly from failing students list\r\n    try {\r\n      const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      \r\n      // Get completed surveys to exclude those students\r\n      const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n      \r\n      const completedSurveyIds = new Set();\r\n      if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\r\n        completedSurveysResponse.data.forEach(survey => {\r\n          completedSurveyIds.add(survey.studentId);\r\n        });\r\n      }\r\n      \r\n      // Count completed surveys\r\n      completedSurveys.value = completedSurveysResponse.data?.length || 0;\r\n      \r\n      // Filter out students who have completed surveys\r\n      const failingStudentList = failingListResponse.data?.list || [];\r\n      if (Array.isArray(failingStudentList)) {\r\n        const filteredCount = failingStudentList.filter(student => \r\n          !completedSurveyIds.has(student.info._id)\r\n        ).length;\r\n        \r\n        failingStudents.value = filteredCount;\r\n      } else {\r\n        failingStudents.value = 0;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching failing students:', error);\r\n      failingStudents.value = 0;\r\n      completedSurveys.value = 0;\r\n    }\r\n\r\n    // Log data before updating charts\r\n    console.log('Performance Distribution:', response.data.performanceDistribution);\r\n    console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\r\n    console.log('Performance Trends:', response.data.performanceTrends);\r\n    console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\r\n\r\n    // Update charts with new data\r\n    if (Array.isArray(response.data.performanceDistribution)) {\r\n      updatePerformanceChart(response.data);\r\n    } else {\r\n      console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\r\n      updatePerformanceChart({\r\n        performanceDistribution: [0, 0, 0, 0, 0]\r\n      });\r\n    }\r\n\r\n    if (response.data.assessmentTypeDistribution){\r\n      updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\r\n    } else {\r\n      console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\r\n      updateAssessmentTypeChart([\r\n        { type: 'Quiz', percentage: 0 },\r\n        { type: 'Activity', percentage: 0 },\r\n        { type: 'Performance Task', percentage: 0 }\r\n      ]);\r\n    }\r\n\r\n    if (Array.isArray(response.data.performanceTrends)) {\r\n      updatePerformanceTrendChart(response.data.performanceTrends);\r\n    } else {\r\n      console.warn('Invalid performance trends data:', response.data.performanceTrends);\r\n      updatePerformanceTrendChart([]);\r\n    }\r\n\r\n    if (response.data.assessmentCompletion?.byType) {\r\n      updateAssessmentTypePerformanceChart(response.data);\r\n    } else {\r\n      console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\r\n      updateAssessmentTypePerformanceChart({\r\n        assessmentCompletion: {\r\n          byType: {\r\n            quiz: 0,\r\n            activity: 0,\r\n            performancetask: 0\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching dashboard data:', error);\r\n    if (error.response) {\r\n      console.error('Error response:', error.response.data);\r\n    }\r\n    \r\n    // Reset data on error\r\n    totalStudents.value = 0;\r\n    totalSections.value = 0;\r\n    totalSubjects.value = 0;\r\n    failingStudents.value = 0;\r\n    completedSurveys.value = 0;\r\n    averageScore.value = 0;\r\n    assessmentCompletion.value = 0;\r\n    recentActivities.value = [];\r\n    \r\n    // Update charts with empty data\r\n    updatePerformanceChart({\r\n      performanceDistribution: [0, 0, 0, 0, 0]\r\n    });\r\n    updateAssessmentTypeChart([\r\n      { type: 'Quiz', percentage: 0 },\r\n      { type: 'Activity', percentage: 0 },\r\n      { type: 'Performance Task', percentage: 0 }\r\n    ]);\r\n    updatePerformanceTrendChart([]);\r\n    updateAssessmentTypePerformanceChart({\r\n      assessmentCompletion: {\r\n        byType: {\r\n          quiz: 0,\r\n          activity: 0,\r\n          performancetask: 0\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst updatePerformanceChart = (data) => {\r\n  if (!performanceChart.value) return;\r\n  \r\n  const ctx = performanceChart.value.getContext('2d');\r\n  if (!ctx) return;\r\n\r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) existingChart.destroy();\r\n\r\n  // Process performance distribution data\r\n  const performanceData = Array.isArray(data.performanceDistribution) \r\n    ? data.performanceDistribution \r\n    : [0, 0, 0, 0, 0];\r\n  \r\n  console.log('Performance distribution data:', performanceData);\r\n\r\n  new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\r\n      datasets: [{\r\n        label: 'Number of Students',\r\n        data: performanceData,\r\n        backgroundColor: [\r\n          'rgba(52, 211, 153, 0.8)',  // Green for highest\r\n          'rgba(59, 130, 246, 0.8)',  // Blue\r\n          'rgba(251, 191, 36, 0.8)',  // Yellow\r\n          'rgba(251, 146, 60, 0.8)',  // Orange\r\n          'rgba(239, 68, 68, 0.8)'    // Red for lowest\r\n        ],\r\n        borderWidth: 1,\r\n        borderRadius: 5\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => {\r\n              const value = context.raw || 0;\r\n              const total = performanceData.reduce((a, b) => a + (b || 0), 0);\r\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\r\n              return `${value} students (${percentage}%)`;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          ticks: {\r\n            stepSize: 1\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Number of Students'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst updateAssessmentTypeChart = (data) => {\r\n  if (!assessmentTypeChart.value) return;\r\n  \r\n  const ctx = assessmentTypeChart.value.getContext('2d');\r\n  if (!ctx) return;\r\n\r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) existingChart.destroy();\r\n\r\n  // Process the assessment type distribution data\r\n  const labels = data.labels || [];\r\n  const datasets = data.datasets || [];\r\n  \r\n  new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: labels,\r\n      datasets: datasets.map((dataset, index) => ({\r\n        label: dataset.type,\r\n        data: dataset.data,\r\n        backgroundColor: [\r\n          'rgba(52, 211, 153, 0.8)',  // Green\r\n          'rgba(59, 130, 246, 0.8)',  // Blue\r\n          'rgba(251, 191, 36, 0.8)'   // Yellow\r\n        ][index],\r\n        borderWidth: 1\r\n      }))\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          stacked: true,\r\n          ticks: {\r\n            maxRotation: 45,\r\n            minRotation: 45\r\n          }\r\n        },\r\n        y: {\r\n          stacked: true,\r\n          beginAtZero: true,\r\n          title: {\r\n            display: true,\r\n            text: 'Number of Assessments'\r\n          }\r\n        }\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          position: 'top'\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => `${context.dataset.label}: ${context.raw || 0} assessments`\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst updatePerformanceTrendChart = (data) => {\r\n  if (!performanceTrendChart.value) {\r\n    console.warn('Performance trend chart reference not found');\r\n    return;\r\n  }\r\n  \r\n  const ctx = performanceTrendChart.value.getContext('2d');\r\n  if (!ctx) {\r\n    console.warn('Could not get 2d context for performance trend chart');\r\n    return;\r\n  }\r\n\r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) {\r\n    existingChart.destroy();\r\n  }\r\n\r\n  // Ensure data is valid\r\n  const validData = Array.isArray(data) ? data : [];\r\n  console.log('Creating performance trend chart with data:', validData);\r\n\r\n  new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\r\n      datasets: [{\r\n        label: 'Average Score',\r\n        data: validData.map(d => Number(d.score) || 0),\r\n        borderColor: '#4CAF50',\r\n        backgroundColor: 'rgba(76, 175, 80, 0.1)',\r\n        tension: 0.4,\r\n        fill: true,\r\n        pointRadius: 4,\r\n        pointHoverRadius: 6\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => {\r\n              const dataPoint = validData[context.dataIndex];\r\n              return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 100,\r\n          ticks: {\r\n            stepSize: 20,\r\n            font: {\r\n              size: 12\r\n            }\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Average Score (%)',\r\n            font: {\r\n              size: 14,\r\n              weight: 'bold'\r\n            }\r\n          }\r\n        },\r\n        x: {\r\n          ticks: {\r\n            font: {\r\n              size: 12\r\n            },\r\n            maxRotation: 45,\r\n            minRotation: 45\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst updateAssessmentTypePerformanceChart = (data) => {\r\n  if (!assessmentTypePerformanceChart.value) return;\r\n  \r\n  const ctx = assessmentTypePerformanceChart.value.getContext('2d');\r\n  if (!ctx) return;\r\n\r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) existingChart.destroy();\r\n\r\n  // Process the performance trends data by assessment type\r\n  const trendsByType = {\r\n    Quiz: [],\r\n    Activity: [],\r\n    'Performance Task': []\r\n  };\r\n\r\n  // Process performance trends data\r\n  if (Array.isArray(data.performanceTrends)) {\r\n    data.performanceTrends.forEach(trend => {\r\n      const type = trend.type || trend.name;\r\n      if (type in trendsByType) {\r\n        trendsByType[type].push({\r\n          date: new Date(trend.date),\r\n          score: parseFloat(trend.score) || 0\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Sort data points by date for each type\r\n  Object.keys(trendsByType).forEach(type => {\r\n    trendsByType[type].sort((a, b) => a.date - b.date);\r\n  });\r\n\r\n  // Get unique dates across all types\r\n  const allDates = [...new Set(\r\n    Object.values(trendsByType)\r\n      .flat()\r\n      .map(item => item.date)\r\n  )].sort((a, b) => a - b);\r\n\r\n  // Create datasets\r\n  const datasets = Object.entries(trendsByType).map(([type, data], index) => {\r\n    const colors = [\r\n      'rgb(52, 211, 153)',   // Green for Quiz\r\n      'rgb(59, 130, 246)',   // Blue for Activity\r\n      'rgb(251, 191, 36)'    // Yellow for Performance Task\r\n    ];\r\n    const color = colors[index];\r\n\r\n    return {\r\n      label: type,\r\n      data: allDates.map(date => {\r\n        const point = data.find(d => d.date.getTime() === date.getTime());\r\n        return point ? point.score : null;\r\n      }),\r\n      borderColor: color,\r\n      backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\r\n      fill: true,\r\n      tension: 0.4,\r\n      pointRadius: 4,\r\n      pointHoverRadius: 6,\r\n      spanGaps: true // This will connect points even if there are null values\r\n    };\r\n  });\r\n\r\n  new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\r\n      datasets\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      interaction: {\r\n        intersect: false,\r\n        mode: 'index'\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          position: 'top'\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => {\r\n              const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\r\n              return `${context.dataset.label}: ${value}%`;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 100,\r\n          title: {\r\n            display: true,\r\n            text: 'Score (%)'\r\n          }\r\n        },\r\n        x: {\r\n          ticks: {\r\n            maxRotation: 45,\r\n            minRotation: 45\r\n        }\r\n      }\r\n    }\r\n}\r\n  });\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  return moment(date).format('MMM D, YYYY')\r\n}\r\n\r\nconst applyFilters = async () => {\r\n  // Save selected values to localStorage\r\n  if (selectedYear.value) {\r\n    localStorage.setItem('selectedYear', selectedYear.value)\r\n  } else {\r\n    localStorage.removeItem('selectedYear')\r\n  }\r\n\r\n  if (selectedSection.value) {\r\n    localStorage.setItem('selectedSection', selectedSection.value)\r\n  } else {\r\n    localStorage.removeItem('selectedSection')\r\n  }\r\n\r\n  if (selectedSubject.value) {\r\n    localStorage.setItem('selectedSubject', selectedSubject.value)\r\n  } else {\r\n    localStorage.removeItem('selectedSubject')\r\n  }\r\n\r\n  await fetchDashboardData()\r\n}\r\n\r\n// Watch for filter changes\r\nwatch(selectedYear, handleYearChange)\r\nwatch([selectedSection, selectedSubject], applyFilters)\r\nwatch([selectedStartDate, selectedEndDate], () => {\r\n  if (selectedStartDate.value && selectedEndDate.value) {\r\n    // Validate date range\r\n    const start = moment(selectedStartDate.value);\r\n    const end = moment(selectedEndDate.value);\r\n    \r\n    if (end.isBefore(start)) {\r\n      selectedEndDate.value = selectedStartDate.value;\r\n    }\r\n    \r\n    fetchDashboardData();\r\n  }\r\n})\r\n\r\nonMounted(async () => {\r\n  if (store.state.auth.user?._id && store.state.auth.token) {\r\n    console.log('Component mounted, initializing...');\r\n    \r\n    // Wait for the next tick to ensure DOM elements are rendered\r\n    await nextTick();\r\n    \r\n    try {\r\n      // Initialize empty charts first\r\n      console.log('Initializing empty charts...');\r\n      \r\n      updatePerformanceChart({\r\n        performanceDistribution: [0, 0, 0, 0, 0]\r\n      });\r\n      updateAssessmentTypeChart([\r\n        { type: 'Quiz', percentage: 0 },\r\n        { type: 'Activity', percentage: 0 },\r\n        { type: 'Performance Task', percentage: 0 }\r\n      ]);\r\n      updatePerformanceTrendChart([]);\r\n      updateAssessmentTypePerformanceChart({\r\n        assessmentCompletion: {\r\n          byType: {\r\n            quiz: 0,\r\n            activity: 0,\r\n            performancetask: 0\r\n          }\r\n        }\r\n      });\r\n      \r\n      console.log('Empty charts initialized');\r\n      \r\n      // Fetch sections and subjects\r\n      await fetchTeacherSectionsAndSubjects(selectedYear.value);\r\n      console.log('Sections and subjects fetched');\r\n      \r\n      // Fetch actual dashboard data\r\n      await fetchDashboardData();\r\n      console.log('Initial data fetch completed');\r\n\r\n      // Fetch Grades\r\n      const grades = await axios.get('http://localhost:8000/api/dashboard/failing/analytics',);\r\n      const quizzes = grades.data.filter(a => a.type === 'Quiz') || [];\r\n      \r\n      const activity = grades.data.filter(a => a.type === 'Activity') || [];\r\n      const performanceTask = grades.data.filter(a => a.type === 'Performance Task') || [];\r\n\r\n      quizzes[0].data.map((datas) => {\r\n        // console.log(datas.scores);\r\n        let temp = 0\r\n        let counter = 0;\r\n        Object.entries(datas.scores).forEach(([id, score]) => {\r\n          if(score <= 50){\r\n            temp = temp + score;\r\n            counter++;\r\n          }\r\n        })\r\n        quizzesGrades.value.push({average : Number((temp / counter).toFixed(2)) || 0, subject : datas.subject});\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error during initialization:', error);\r\n    }\r\n  } else {\r\n    console.error('No user ID or token found');\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n    <div class=\"dashboard\">\r\n        <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n            <h2 class=\"dashboard-title\"></h2>\r\n\r\n            <!-- Combined Filter Dropdown -->\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i class=\"fas fa-filter me-2\"></i>\r\n                    {{ getFilterDisplay() }}\r\n                </button>\r\n                <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\r\n                    <h6 class=\"dropdown-header\">Filter Options</h6>\r\n                    <div class=\"mb-3\">\r\n                        <label class=\"form-label\">Academic Year</label>\r\n                        <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n                            <option value=\"\">All Years</option>\r\n                            <option value=\"1st\">1st Year</option>\r\n                            <option value=\"2nd\">2nd Year</option>\r\n                            <option value=\"3rd\">3rd Year</option>\r\n                            <option value=\"4th\">4th Year</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                        <label class=\"form-label\">Section</label>\r\n                        <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\r\n                            <option value=\"\">All Sections</option>\r\n                            <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                        <label class=\"form-label\">Subject</label>\r\n                        <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\r\n                            <option value=\"\">All Subjects</option>\r\n                            <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                        <label class=\"form-label\">Date Range</label>\r\n                        <div class=\"d-flex gap-2\">\r\n                            <div class=\"flex-grow-1\">\r\n                                <label class=\"small text-muted\">From</label>\r\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedStartDate\"\r\n                                    :max=\"today\">\r\n                            </div>\r\n                            <div class=\"flex-grow-1\">\r\n                                <label class=\"small text-muted\">To</label>\r\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedEndDate\"\r\n                                    :max=\"today\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Cards -->\r\n        <div class=\"row g-4\">\r\n            <!-- Failing Students Card -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"dashboard-card\">\r\n                    <div class=\"icon-container\">\r\n                        <i class=\"fas fa-exclamation-triangle\"></i>\r\n                    </div>\r\n                    <div class=\"card-info\">\r\n                        <h3 class=\"stat-title\">Failing Students</h3>\r\n                        <div class=\"stat-value\">{{ failingStudents }}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Completed Surveys Card -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"dashboard-card\">\r\n                    <div class=\"icon-container\">\r\n                        <i class=\"fas fa-clipboard-check\"></i>\r\n                    </div>\r\n                    <div class=\"card-info\">\r\n                        <h3 class=\"stat-title\">Completed Surveys</h3>\r\n                        <div class=\"stat-value\">{{ completedSurveys }}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Survey Stats -->\r\n        <div class=\"row mt-4\">\r\n            <div class=\"col-12\">\r\n                <div class=\"chart-card\">\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">\r\n                            <i class=\"fas fa-poll me-2\"></i>\r\n                            Survey Statistics\r\n                        </h5>\r\n                        <AllSurveyStat />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 2rem;\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.dashboard-title {\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  letter-spacing: -0.5px;\r\n}\r\n\r\n.dashboard-card {\r\n  background: #fff;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.25rem;\r\n  height: 100%;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.dashboard-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.icon-container {\r\n  width: 52px;\r\n  height: 52px;\r\n  border-radius: 12px;\r\n  background-color: #003366;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.dashboard-card:hover .icon-container {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.icon-container i {\r\n  color: white;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.card-info {\r\n  flex: 1;\r\n}\r\n\r\n.stat-title {\r\n  font-size: 0.875rem;\r\n  color: #64748b;\r\n  margin: 0 0 0.5rem 0;\r\n  font-weight: 600;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  line-height: 1.2;\r\n}\r\n\r\n.no-data {\r\n  color: #94a3b8;\r\n  font-style: italic;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  height: 300px;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  height: 100%;\r\n  padding: 1.5rem;\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.125rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  margin-bottom: 1.5rem;\r\n  letter-spacing: -0.3px;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #94a3b8;\r\n  font-style: italic;\r\n  text-align: center;\r\n  width: 100%;\r\n    padding: 1rem;\r\n}\r\n\r\n.btn-filter {\r\n  background-color: white;\r\n  border: 1px solid #e2e8f0;\r\n  padding: 0.75rem 1.25rem;\r\n  font-size: 0.9rem;\r\n  color: #1e293b;\r\n  min-width: 220px;\r\n  text-align: left;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-filter:hover {\r\n  background-color: #f8fafc;\r\n  border-color: #003366;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.filter-menu {\r\n  width: 320px;\r\n  padding: 1.25rem;\r\n  border: none;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  border-radius: 12px;\r\n}\r\n\r\n.dropdown-header {\r\n  color: #003366;\r\n  font-weight: 700;\r\n  padding: 0;\r\n  margin-bottom: 1.25rem;\r\n  font-size: 1rem;\r\n}\r\n\r\n.form-label {\r\n  font-weight: 600;\r\n  color: #475569;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.form-select, .form-control {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.625rem;\r\n  font-size: 0.9rem;\r\n  color: #1e293b;\r\n  background-color: #fff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.form-select:hover, .form-control:hover {\r\n  border-color: #003366;\r\n}\r\n\r\n.form-select:focus, .form-control:focus {\r\n  border-color: #003366;\r\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\r\n}\r\n\r\n.form-select:disabled {\r\n  background-color: #f1f5f9;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.dropdown-divider {\r\n  margin: 1.25rem 0;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.table {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  color: #475569;\r\n  border-bottom-width: 1px;\r\n  padding: 1rem;\r\n  font-size: 0.875rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.table td {\r\n  padding: 1rem;\r\n  color: #1e293b;\r\n  vertical-align: middle;\r\n  font-size: 0.9rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.table tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .dashboard-card {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .filter-menu {\r\n    width: 100%;\r\n    max-width: 320px;\r\n  }\r\n\r\n  .btn-filter {\r\n    min-width: auto;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment-timezone';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n\n    // Chart references\n    const performanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Filter states\n    const selectedYear = ref('');\n    const selectedSection = ref('');\n    const selectedSubject = ref('');\n    const selectedStartDate = ref(moment().subtract(30, 'days').format('YYYY-MM-DD'));\n    const selectedEndDate = ref(moment().format('YYYY-MM-DD'));\n\n    // Data states\n    const sections = ref([]);\n    const subjects = ref([]);\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const averageAttendance = ref(0);\n    const assessmentCompletion = ref(0);\n    const recentActivities = ref([]);\n    const performanceData = ref(null);\n    const assessmentData = ref(null);\n\n    // Computed properties\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n    const hasPerformanceData = computed(() => performanceData.value && performanceData.value.length > 0);\n    const hasAttendanceData = computed(() => averageAttendance.value > 0);\n    const hasAssessmentData = computed(() => assessmentData.value && assessmentData.value.length > 0);\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Fetch available years and sections\n    const fetchAvailableYearsAndSections = async () => {\n      try {\n        const teacherId = store.state.auth.user?._id;\n        const response = await api.get('/teacher-class-records/available-years-sections', {\n          params: {\n            teacherId\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        if (response.data) {\n          sections.value = response.data.sections || [];\n          subjects.value = response.data.subjects || [];\n          totalSections.value = sections.value.length;\n          totalSubjects.value = subjects.value.length;\n        }\n      } catch (error) {\n        console.error('Error fetching available years and sections:', error);\n      }\n    };\n\n    // Fetch total students\n    const fetchTotalStudents = async () => {\n      try {\n        const teacherId = store.state.auth.user?._id;\n        const params = {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value\n        };\n        const response = await api.get('/teacher-class-records/total-students', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        totalStudents.value = response.data.total || 0;\n      } catch (error) {\n        console.error('Error fetching total students:', error);\n        totalStudents.value = 0;\n      }\n    };\n\n    // Fetch performance data\n    const fetchPerformanceData = async () => {\n      try {\n        const teacherId = store.state.auth.user?._id;\n        const params = {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        };\n        const response = await api.get('/class-records/performance-data', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        performanceData.value = response.data;\n        averageScore.value = response.data.averageScore || 0;\n\n        // Update performance charts\n        nextTick(() => {\n          updatePerformanceChart();\n          updatePerformanceTrendChart();\n        });\n      } catch (error) {\n        console.error('Error fetching performance data:', error);\n        performanceData.value = null;\n        averageScore.value = 0;\n      }\n    };\n\n    // Fetch attendance data\n    const fetchAttendanceData = async () => {\n      try {\n        const teacherId = store.state.auth.user?._id;\n        const params = {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        };\n        const response = await api.get('/attendance/statistics', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        averageAttendance.value = response.data.averageAttendance || 0;\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n        averageAttendance.value = 0;\n      }\n    };\n\n    // Fetch assessment data\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = store.state.auth.user?._id;\n        const params = {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        };\n        const response = await api.get('/class-records/assessment-data', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        assessmentData.value = response.data;\n        assessmentCompletion.value = response.data.completionRate || 0;\n\n        // Update assessment charts\n        nextTick(() => {\n          updateAssessmentTypeChart();\n          updateAssessmentTypePerformanceChart();\n        });\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        assessmentData.value = null;\n        assessmentCompletion.value = 0;\n      }\n    };\n\n    // Fetch recent activities\n    const fetchRecentActivities = async () => {\n      try {\n        const teacherId = store.state.auth.user?._id;\n        const params = {\n          teacherId,\n          limit: 10\n        };\n        const response = await api.get('/activities/recent', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        recentActivities.value = response.data || [];\n      } catch (error) {\n        console.error('Error fetching recent activities:', error);\n        recentActivities.value = [];\n      }\n    };\n\n    // Update performance chart\n    const updatePerformanceChart = () => {\n      const ctx = document.getElementById('performanceChart')?.getContext('2d');\n      if (!ctx || !performanceData.value) return;\n      if (performanceChart.value) {\n        performanceChart.value.destroy();\n      }\n      const gradeRanges = [{\n        min: 95,\n        max: 100,\n        label: '95-100'\n      }, {\n        min: 90,\n        max: 94.99,\n        label: '90-94'\n      }, {\n        min: 85,\n        max: 89.99,\n        label: '85-89'\n      }, {\n        min: 80,\n        max: 84.99,\n        label: '80-84'\n      }, {\n        min: 75,\n        max: 79.99,\n        label: '75-79'\n      }, {\n        min: 0,\n        max: 74.99,\n        label: 'Below 75'\n      }];\n      const data = gradeRanges.map(range => {\n        return performanceData.value.scores.filter(score => score >= range.min && score <= range.max).length;\n      });\n      performanceChart.value = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: gradeRanges.map(r => r.label),\n          datasets: [{\n            label: 'Number of Students',\n            data: data,\n            backgroundColor: ['#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF5722'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.parsed.y} student(s)`\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Update performance trend chart\n    const updatePerformanceTrendChart = () => {\n      const ctx = document.getElementById('performanceTrendChart')?.getContext('2d');\n      if (!ctx || !performanceData.value?.trends) return;\n      if (performanceTrendChart.value) {\n        performanceTrendChart.value.destroy();\n      }\n      const trends = performanceData.value.trends;\n      performanceTrendChart.value = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: trends.map(t => moment(t.date).format('MMM D')),\n          datasets: [{\n            label: 'Class Average',\n            data: trends.map(t => t.average),\n            borderColor: '#2196F3',\n            tension: 0.4,\n            fill: false\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              min: 0,\n              max: 100,\n              ticks: {\n                callback: value => `${value}%`\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: context => `Average: ${context.parsed.y}%`\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Update assessment type chart\n    const updateAssessmentTypeChart = () => {\n      const ctx = document.getElementById('assessmentTypeChart')?.getContext('2d');\n      if (!ctx || !assessmentData.value?.types) return;\n      if (assessmentTypeChart.value) {\n        assessmentTypeChart.value.destroy();\n      }\n      const types = assessmentData.value.types;\n      assessmentTypeChart.value = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: types.map(t => t.name),\n          datasets: [{\n            data: types.map(t => t.count),\n            backgroundColor: ['#2196F3', '#4CAF50', '#FFC107', '#9C27B0', '#FF5722']\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'right'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.label}: ${context.parsed} assessments`\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Update assessment type performance chart\n    const updateAssessmentTypePerformanceChart = () => {\n      const ctx = document.getElementById('assessmentTypePerformanceChart')?.getContext('2d');\n      if (!ctx || !assessmentData.value?.typePerformance) return;\n      if (assessmentTypePerformanceChart.value) {\n        assessmentTypePerformanceChart.value.destroy();\n      }\n      const performance = assessmentData.value.typePerformance;\n      assessmentTypePerformanceChart.value = new Chart(ctx, {\n        type: 'radar',\n        data: {\n          labels: performance.map(p => p.type),\n          datasets: [{\n            label: 'Average Score',\n            data: performance.map(p => p.average),\n            backgroundColor: 'rgba(33, 150, 243, 0.2)',\n            borderColor: '#2196F3',\n            pointBackgroundColor: '#2196F3'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            r: {\n              min: 0,\n              max: 100,\n              ticks: {\n                stepSize: 20\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: context => `Average: ${context.parsed.r}%`\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Handle year change\n    const handleYearChange = () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n    };\n\n    // Format date\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const parts = [];\n      if (selectedYear.value) parts.push(selectedYear.value);\n      if (selectedSection.value) parts.push(selectedSection.value);\n      if (selectedSubject.value) parts.push(selectedSubject.value);\n      return parts.length > 0 ? parts.join(' | ') : 'All Classes';\n    };\n\n    // Apply filters\n    const applyFilters = async () => {\n      await Promise.all([fetchTotalStudents(), fetchPerformanceData(), fetchAttendanceData(), fetchAssessmentData()]);\n    };\n\n    // Watch for filter changes\n    watch([selectedYear, selectedSection, selectedSubject], () => {\n      applyFilters();\n    });\n\n    // Initialize dashboard\n    onMounted(async () => {\n      await fetchAvailableYearsAndSections();\n      await Promise.all([fetchTotalStudents(), fetchPerformanceData(), fetchAttendanceData(), fetchAssessmentData(), fetchRecentActivities()]);\n\n      // Set up auto-refresh every 5 minutes\n      setInterval(() => {\n        applyFilters();\n        fetchRecentActivities();\n      }, 300000);\n    });\n    return {\n      // States\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      sections,\n      subjects,\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      averageAttendance,\n      assessmentCompletion,\n      recentActivities,\n      // Computed\n      today,\n      hasPerformanceData,\n      hasAttendanceData,\n      hasAssessmentData,\n      hasActivity,\n      // Methods\n      handleYearChange,\n      formatDate,\n      getFilterDisplay,\n      applyFilters\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","api","create","baseURL","headers","name","setup","store","performanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","selectedYear","selectedSection","selectedSubject","selectedStartDate","subtract","format","selectedEndDate","sections","subjects","totalStudents","totalSections","totalSubjects","averageScore","averageAttendance","assessmentCompletion","recentActivities","performanceData","assessmentData","today","hasPerformanceData","value","length","hasAttendanceData","hasAssessmentData","hasActivity","fetchAvailableYearsAndSections","teacherId","state","auth","user","_id","response","get","params","token","data","error","console","fetchTotalStudents","year","section","subject","total","fetchPerformanceData","startDate","endDate","updatePerformanceChart","updatePerformanceTrendChart","fetchAttendanceData","fetchAssessmentData","completionRate","updateAssessmentTypeChart","updateAssessmentTypePerformanceChart","fetchRecentActivities","limit","ctx","document","getElementById","getContext","destroy","gradeRanges","min","max","label","map","range","scores","filter","score","type","labels","r","datasets","backgroundColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","ticks","stepSize","plugins","legend","display","tooltip","callbacks","context","parsed","trends","t","date","average","borderColor","tension","fill","callback","types","count","position","typePerformance","performance","p","pointBackgroundColor","handleYearChange","formatDate","getFilterDisplay","parts","push","join","applyFilters","Promise","all","setInterval"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <h2 class=\"dashboard-title\"></h2>\r\n      \r\n      <!-- Combined Filter Dropdown -->\r\n      <div class=\"dropdown\">\r\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n          <i class=\"fas fa-filter me-2\"></i>\r\n          {{ getFilterDisplay() }}\r\n        </button>\r\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\r\n          <h6 class=\"dropdown-header\">Filter Options</h6>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Academic Year</label>\r\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n              <option value=\"\">All Years</option>\r\n              <option value=\"1st\">1st Year</option>\r\n              <option value=\"2nd\">2nd Year</option>\r\n              <option value=\"3rd\">3rd Year</option>\r\n              <option value=\"4th\">4th Year</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Section</label>\r\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\r\n              <option value=\"\">All Sections</option>\r\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Subject</label>\r\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\r\n              <option value=\"\">All Subjects</option>\r\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Date Range</label>\r\n            <div class=\"d-flex gap-2\">\r\n              <div class=\"flex-grow-1\">\r\n                <label class=\"small text-muted\">From</label>\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"form-control form-control-sm\" \r\n                  v-model=\"selectedStartDate\"\r\n                  :max=\"today\"\r\n                >\r\n              </div>\r\n              <div class=\"flex-grow-1\">\r\n                <label class=\"small text-muted\">To</label>\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"form-control form-control-sm\" \r\n                  v-model=\"selectedEndDate\"\r\n                  :max=\"today\"\r\n                >\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"dropdown-divider\"></div>\r\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Analytics Cards -->\r\n    <div class=\"row g-4\">\r\n      <!-- Total Students Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-user-graduate\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Total Students</h3>\r\n            <div class=\"stat-value\">{{ totalStudents }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total Sections Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-chalkboard\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Active Sections</h3>\r\n            <div class=\"stat-value\">{{ totalSections }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total Subjects Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-book\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">My Subjects</h3>\r\n            <div class=\"stat-value\">{{ totalSubjects }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Average Score Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-chart-line\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Class Average</h3>\r\n            <div class=\"stat-value\" v-if=\"hasPerformanceData\">{{ averageScore }}%</div>\r\n            <div class=\"no-data\" v-else>No data available</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Secondary Stats Row -->\r\n    <div class=\"row mt-4\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"dashboard-card h-100\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-clock\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Average Attendance</h3>\r\n            <div class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</div>\r\n            <div class=\"no-data\" v-else>No attendance data available</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <div class=\"dashboard-card h-100\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-tasks\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Assessment Completion</h3>\r\n            <div class=\"stat-value\" v-if=\"hasAssessmentData\">{{ assessmentCompletion }}%</div>\r\n            <div class=\"no-data\" v-else>No assessment data available</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Row -->\r\n    <div class=\"row mb-4\">\r\n      <!-- Performance Distribution Chart -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Grade Distribution</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"performanceChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Assessment Type Distribution -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Assessment Type Distribution</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"assessmentTypeChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No assessment data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Performance Trend Chart -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Performance Trends</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"performanceTrendChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Assessment Type Performance -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Performance by Assessment Type</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Recent Activity -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">Recent Activity</h5>\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Activity</th>\r\n                <th>Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-if=\"!hasActivity\">\r\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\r\n              </tr>\r\n              <tr v-for=\"activity in recentActivities\" :key=\"activity.id\">\r\n                <td>{{ formatDate(activity.date) }}</td>\r\n                <td>{{ activity.type }}</td>\r\n                <td>{{ activity.details }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\nimport moment from 'moment-timezone'\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default {\r\n  name: 'TeacherDashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    \r\n    // Chart references\r\n    const performanceChart = ref(null)\r\n    const assessmentTypeChart = ref(null)\r\n    const performanceTrendChart = ref(null)\r\n    const assessmentTypePerformanceChart = ref(null)\r\n    \r\n    // Filter states\r\n    const selectedYear = ref('')\r\n    const selectedSection = ref('')\r\n    const selectedSubject = ref('')\r\n    const selectedStartDate = ref(moment().subtract(30, 'days').format('YYYY-MM-DD'))\r\n    const selectedEndDate = ref(moment().format('YYYY-MM-DD'))\r\n    \r\n    // Data states\r\n    const sections = ref([])\r\n    const subjects = ref([])\r\n    const totalStudents = ref(0)\r\n    const totalSections = ref(0)\r\n    const totalSubjects = ref(0)\r\n    const averageScore = ref(0)\r\n    const averageAttendance = ref(0)\r\n    const assessmentCompletion = ref(0)\r\n    const recentActivities = ref([])\r\n    const performanceData = ref(null)\r\n    const assessmentData = ref(null)\r\n    \r\n    // Computed properties\r\n    const today = computed(() => moment().format('YYYY-MM-DD'))\r\n    const hasPerformanceData = computed(() => performanceData.value && performanceData.value.length > 0)\r\n    const hasAttendanceData = computed(() => averageAttendance.value > 0)\r\n    const hasAssessmentData = computed(() => assessmentData.value && assessmentData.value.length > 0)\r\n    const hasActivity = computed(() => recentActivities.value.length > 0)\r\n\r\n    // Fetch available years and sections\r\n    const fetchAvailableYearsAndSections = async () => {\r\n      try {\r\n        const teacherId = store.state.auth.user?._id\r\n        const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n\r\n        if (response.data) {\r\n          sections.value = response.data.sections || []\r\n          subjects.value = response.data.subjects || []\r\n          totalSections.value = sections.value.length\r\n          totalSubjects.value = subjects.value.length\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching available years and sections:', error)\r\n      }\r\n    }\r\n\r\n    // Fetch total students\r\n    const fetchTotalStudents = async () => {\r\n      try {\r\n        const teacherId = store.state.auth.user?._id\r\n        const params = {\r\n          teacherId,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value\r\n        }\r\n\r\n        const response = await api.get('/teacher-class-records/total-students', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n\r\n        totalStudents.value = response.data.total || 0\r\n      } catch (error) {\r\n        console.error('Error fetching total students:', error)\r\n        totalStudents.value = 0\r\n      }\r\n    }\r\n\r\n    // Fetch performance data\r\n    const fetchPerformanceData = async () => {\r\n      try {\r\n        const teacherId = store.state.auth.user?._id\r\n        const params = {\r\n          teacherId,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          startDate: selectedStartDate.value,\r\n          endDate: selectedEndDate.value\r\n        }\r\n\r\n        const response = await api.get('/class-records/performance-data', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n\r\n        performanceData.value = response.data\r\n        averageScore.value = response.data.averageScore || 0\r\n        \r\n        // Update performance charts\r\n        nextTick(() => {\r\n          updatePerformanceChart()\r\n          updatePerformanceTrendChart()\r\n        })\r\n      } catch (error) {\r\n        console.error('Error fetching performance data:', error)\r\n        performanceData.value = null\r\n        averageScore.value = 0\r\n      }\r\n    }\r\n\r\n    // Fetch attendance data\r\n    const fetchAttendanceData = async () => {\r\n      try {\r\n        const teacherId = store.state.auth.user?._id\r\n        const params = {\r\n          teacherId,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          startDate: selectedStartDate.value,\r\n          endDate: selectedEndDate.value\r\n        }\r\n\r\n        const response = await api.get('/attendance/statistics', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n\r\n        averageAttendance.value = response.data.averageAttendance || 0\r\n      } catch (error) {\r\n        console.error('Error fetching attendance data:', error)\r\n        averageAttendance.value = 0\r\n      }\r\n    }\r\n\r\n    // Fetch assessment data\r\n    const fetchAssessmentData = async () => {\r\n      try {\r\n        const teacherId = store.state.auth.user?._id\r\n        const params = {\r\n          teacherId,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          startDate: selectedStartDate.value,\r\n          endDate: selectedEndDate.value\r\n        }\r\n\r\n        const response = await api.get('/class-records/assessment-data', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n\r\n        assessmentData.value = response.data\r\n        assessmentCompletion.value = response.data.completionRate || 0\r\n        \r\n        // Update assessment charts\r\n        nextTick(() => {\r\n          updateAssessmentTypeChart()\r\n          updateAssessmentTypePerformanceChart()\r\n        })\r\n      } catch (error) {\r\n        console.error('Error fetching assessment data:', error)\r\n        assessmentData.value = null\r\n        assessmentCompletion.value = 0\r\n      }\r\n    }\r\n\r\n    // Fetch recent activities\r\n    const fetchRecentActivities = async () => {\r\n      try {\r\n        const teacherId = store.state.auth.user?._id\r\n        const params = {\r\n          teacherId,\r\n          limit: 10\r\n        }\r\n\r\n        const response = await api.get('/activities/recent', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n\r\n        recentActivities.value = response.data || []\r\n      } catch (error) {\r\n        console.error('Error fetching recent activities:', error)\r\n        recentActivities.value = []\r\n      }\r\n    }\r\n\r\n    // Update performance chart\r\n    const updatePerformanceChart = () => {\r\n      const ctx = document.getElementById('performanceChart')?.getContext('2d')\r\n      if (!ctx || !performanceData.value) return\r\n\r\n      if (performanceChart.value) {\r\n        performanceChart.value.destroy()\r\n      }\r\n\r\n      const gradeRanges = [\r\n        { min: 95, max: 100, label: '95-100' },\r\n        { min: 90, max: 94.99, label: '90-94' },\r\n        { min: 85, max: 89.99, label: '85-89' },\r\n        { min: 80, max: 84.99, label: '80-84' },\r\n        { min: 75, max: 79.99, label: '75-79' },\r\n        { min: 0, max: 74.99, label: 'Below 75' }\r\n      ]\r\n\r\n      const data = gradeRanges.map(range => {\r\n        return performanceData.value.scores.filter(score => \r\n          score >= range.min && score <= range.max\r\n        ).length\r\n      })\r\n\r\n      performanceChart.value = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: gradeRanges.map(r => r.label),\r\n          datasets: [{\r\n            label: 'Number of Students',\r\n            data: data,\r\n            backgroundColor: [\r\n              '#4CAF50',\r\n              '#8BC34A',\r\n              '#CDDC39',\r\n              '#FFEB3B',\r\n              '#FFC107',\r\n              '#FF5722'\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              ticks: {\r\n                stepSize: 1\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => `${context.parsed.y} student(s)`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    // Update performance trend chart\r\n    const updatePerformanceTrendChart = () => {\r\n      const ctx = document.getElementById('performanceTrendChart')?.getContext('2d')\r\n      if (!ctx || !performanceData.value?.trends) return\r\n\r\n      if (performanceTrendChart.value) {\r\n        performanceTrendChart.value.destroy()\r\n      }\r\n\r\n      const trends = performanceData.value.trends\r\n      performanceTrendChart.value = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: trends.map(t => moment(t.date).format('MMM D')),\r\n          datasets: [{\r\n            label: 'Class Average',\r\n            data: trends.map(t => t.average),\r\n            borderColor: '#2196F3',\r\n            tension: 0.4,\r\n            fill: false\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              min: 0,\r\n              max: 100,\r\n              ticks: {\r\n                callback: value => `${value}%`\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => `Average: ${context.parsed.y}%`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    // Update assessment type chart\r\n    const updateAssessmentTypeChart = () => {\r\n      const ctx = document.getElementById('assessmentTypeChart')?.getContext('2d')\r\n      if (!ctx || !assessmentData.value?.types) return\r\n\r\n      if (assessmentTypeChart.value) {\r\n        assessmentTypeChart.value.destroy()\r\n      }\r\n\r\n      const types = assessmentData.value.types\r\n      assessmentTypeChart.value = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: types.map(t => t.name),\r\n          datasets: [{\r\n            data: types.map(t => t.count),\r\n            backgroundColor: [\r\n              '#2196F3',\r\n              '#4CAF50',\r\n              '#FFC107',\r\n              '#9C27B0',\r\n              '#FF5722'\r\n            ]\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              position: 'right'\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => `${context.label}: ${context.parsed} assessments`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    // Update assessment type performance chart\r\n    const updateAssessmentTypePerformanceChart = () => {\r\n      const ctx = document.getElementById('assessmentTypePerformanceChart')?.getContext('2d')\r\n      if (!ctx || !assessmentData.value?.typePerformance) return\r\n\r\n      if (assessmentTypePerformanceChart.value) {\r\n        assessmentTypePerformanceChart.value.destroy()\r\n      }\r\n\r\n      const performance = assessmentData.value.typePerformance\r\n      assessmentTypePerformanceChart.value = new Chart(ctx, {\r\n        type: 'radar',\r\n        data: {\r\n          labels: performance.map(p => p.type),\r\n          datasets: [{\r\n            label: 'Average Score',\r\n            data: performance.map(p => p.average),\r\n            backgroundColor: 'rgba(33, 150, 243, 0.2)',\r\n            borderColor: '#2196F3',\r\n            pointBackgroundColor: '#2196F3'\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            r: {\r\n              min: 0,\r\n              max: 100,\r\n              ticks: {\r\n                stepSize: 20\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => `Average: ${context.parsed.r}%`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    // Handle year change\r\n    const handleYearChange = () => {\r\n      selectedSection.value = ''\r\n      selectedSubject.value = ''\r\n    }\r\n\r\n    // Format date\r\n    const formatDate = (date) => {\r\n      return moment(date).format('MMM D, YYYY')\r\n    }\r\n\r\n    // Get filter display text\r\n    const getFilterDisplay = () => {\r\n      const parts = []\r\n      if (selectedYear.value) parts.push(selectedYear.value)\r\n      if (selectedSection.value) parts.push(selectedSection.value)\r\n      if (selectedSubject.value) parts.push(selectedSubject.value)\r\n      return parts.length > 0 ? parts.join(' | ') : 'All Classes'\r\n    }\r\n\r\n    // Apply filters\r\n    const applyFilters = async () => {\r\n      await Promise.all([\r\n        fetchTotalStudents(),\r\n        fetchPerformanceData(),\r\n        fetchAttendanceData(),\r\n        fetchAssessmentData()\r\n      ])\r\n    }\r\n\r\n    // Watch for filter changes\r\n    watch([selectedYear, selectedSection, selectedSubject], () => {\r\n      applyFilters()\r\n    })\r\n\r\n    // Initialize dashboard\r\n    onMounted(async () => {\r\n      await fetchAvailableYearsAndSections()\r\n      await Promise.all([\r\n        fetchTotalStudents(),\r\n        fetchPerformanceData(),\r\n        fetchAttendanceData(),\r\n        fetchAssessmentData(),\r\n        fetchRecentActivities()\r\n      ])\r\n\r\n      // Set up auto-refresh every 5 minutes\r\n      setInterval(() => {\r\n        applyFilters()\r\n        fetchRecentActivities()\r\n      }, 300000)\r\n    })\r\n\r\n    return {\r\n      // States\r\n      selectedYear,\r\n      selectedSection,\r\n      selectedSubject,\r\n      selectedStartDate,\r\n      selectedEndDate,\r\n      sections,\r\n      subjects,\r\n      totalStudents,\r\n      totalSections,\r\n      totalSubjects,\r\n      averageScore,\r\n      averageAttendance,\r\n      assessmentCompletion,\r\n      recentActivities,\r\n      \r\n      // Computed\r\n      today,\r\n      hasPerformanceData,\r\n      hasAttendanceData,\r\n      hasAssessmentData,\r\n      hasActivity,\r\n      \r\n      // Methods\r\n      handleYearChange,\r\n      formatDate,\r\n      getFilterDisplay,\r\n      applyFilters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 2rem;\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.dashboard-title {\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  letter-spacing: -0.5px;\r\n}\r\n\r\n.dashboard-card {\r\n  background: #fff;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.25rem;\r\n  height: 100%;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.dashboard-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.icon-container {\r\n  width: 52px;\r\n  height: 52px;\r\n  border-radius: 12px;\r\n  background-color: #003366;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.dashboard-card:hover .icon-container {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.icon-container i {\r\n  color: white;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.card-info {\r\n  flex: 1;\r\n}\r\n\r\n.stat-title {\r\n  font-size: 0.875rem;\r\n  color: #64748b;\r\n  margin: 0 0 0.5rem 0;\r\n  font-weight: 600;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  line-height: 1.2;\r\n}\r\n\r\n.no-data {\r\n  color: #94a3b8;\r\n  font-style: italic;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  height: 300px;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  height: 100%;\r\n  padding: 1.5rem;\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.125rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  margin-bottom: 1.5rem;\r\n  letter-spacing: -0.3px;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #94a3b8;\r\n  font-style: italic;\r\n  text-align: center;\r\n  width: 100%;\r\n    padding: 1rem;\r\n}\r\n\r\n.btn-filter {\r\n  background-color: white;\r\n  border: 1px solid #e2e8f0;\r\n  padding: 0.75rem 1.25rem;\r\n  font-size: 0.9rem;\r\n  color: #1e293b;\r\n  min-width: 220px;\r\n  text-align: left;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-filter:hover {\r\n  background-color: #f8fafc;\r\n  border-color: #003366;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.filter-menu {\r\n  width: 320px;\r\n  padding: 1.25rem;\r\n  border: none;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  border-radius: 12px;\r\n}\r\n\r\n.dropdown-header {\r\n  color: #003366;\r\n  font-weight: 700;\r\n  padding: 0;\r\n  margin-bottom: 1.25rem;\r\n  font-size: 1rem;\r\n}\r\n\r\n.form-label {\r\n  font-weight: 600;\r\n  color: #475569;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.form-select, .form-control {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.625rem;\r\n  font-size: 0.9rem;\r\n  color: #1e293b;\r\n  background-color: #fff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.form-select:hover, .form-control:hover {\r\n  border-color: #003366;\r\n}\r\n\r\n.form-select:focus, .form-control:focus {\r\n  border-color: #003366;\r\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\r\n}\r\n\r\n.form-select:disabled {\r\n  background-color: #f1f5f9;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.dropdown-divider {\r\n  margin: 1.25rem 0;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.table {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  color: #475569;\r\n  border-bottom-width: 1px;\r\n  padding: 1rem;\r\n  font-size: 0.875rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.table td {\r\n  padding: 1rem;\r\n  color: #1e293b;\r\n  vertical-align: middle;\r\n  font-size: 0.9rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.table tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .dashboard-card {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .filter-menu {\r\n    width: 100%;\r\n    max-width: 320px;\r\n  }\r\n\r\n  .btn-filter {\r\n    min-width: auto;\r\n    width: 100%;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
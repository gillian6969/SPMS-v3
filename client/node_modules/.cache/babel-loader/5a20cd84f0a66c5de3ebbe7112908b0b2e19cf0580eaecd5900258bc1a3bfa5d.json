{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nexport default {\n  __name: 'StudentSurveyStat',\n  props: {\n    _id: {\n      type: String,\n      required: true\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const store = useStore();\n    const loading = ref(true);\n    const noData = ref(false);\n    const surveyChart = ref(null);\n    const surveyData = ref(null);\n\n    // Fetch student survey data\n    const fetchSurveyData = async () => {\n      try {\n        loading.value = true;\n        const token = store.state.auth.token;\n\n        // Get survey data for the specified student\n        const response = await axios.get(`http://localhost:8000/api/survey/student/${props._id}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('Student survey data from API:', response.data);\n        if (response.data && response.data.surveyStats && response.data.surveyStats.length > 0) {\n          surveyData.value = response.data;\n          noData.value = false;\n          renderSurveyChart();\n        } else {\n          console.log('No survey data found for student, creating sample data');\n          createSampleData();\n        }\n      } catch (error) {\n        console.error('Error fetching student survey data:', error);\n        // Create sample data if API fails\n        createSampleData();\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Create sample data if the API fails\n    const createSampleData = () => {\n      console.log('Creating sample survey data');\n\n      // Sample survey stats\n      surveyData.value = {\n        surveyStats: [{\n          type: 'Academic',\n          average: 7.2\n        }, {\n          type: 'Financial',\n          average: 5.8\n        }, {\n          type: 'Personal',\n          average: 3.5\n        }, {\n          type: 'Health',\n          average: 2.1\n        }, {\n          type: 'Social',\n          average: 4.6\n        }]\n      };\n      noData.value = false;\n      renderSurveyChart();\n    };\n\n    // Render the bar chart\n    const renderSurveyChart = () => {\n      if (!surveyChart.value) return;\n      const ctx = surveyChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Extract data from survey stats\n      let labels = [];\n      let data = [];\n      if (surveyData.value?.surveyStats && Array.isArray(surveyData.value.surveyStats)) {\n        surveyData.value.surveyStats.forEach(stat => {\n          if (stat.type && !isNaN(stat.average)) {\n            labels.push(stat.type);\n            data.push(stat.average);\n          }\n        });\n      }\n\n      // If no valid data, use sample data\n      if (labels.length === 0) {\n        labels = ['Academic', 'Financial', 'Personal', 'Health', 'Social'];\n        data = [7.2, 5.8, 3.5, 2.1, 4.6];\n      }\n\n      // Calculate colors based on severity\n      const backgroundColors = data.map(value => {\n        if (value >= 7) return 'rgba(220, 53, 69, 0.7)'; // High (red)\n        if (value >= 5) return 'rgba(255, 193, 7, 0.7)'; // Medium (yellow)\n        if (value >= 3) return 'rgba(13, 110, 253, 0.7)'; // Low (blue)\n        return 'rgba(25, 135, 84, 0.7)'; // Minimal (green)\n      });\n\n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Problem Severity',\n            data: data,\n            backgroundColor: backgroundColors,\n            borderColor: backgroundColors.map(color => color.replace('0.7', '1')),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          indexAxis: 'y',\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 10,\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              callbacks: {\n                title: context => {\n                  return context[0].label + ' Problems';\n                },\n                label: context => {\n                  const value = context.raw;\n                  let severity = 'Minimal';\n                  if (value >= 7) severity = 'High';else if (value >= 5) severity = 'Medium';else if (value >= 3) severity = 'Low';\n                  return `Severity: ${value.toFixed(1)} (${severity})`;\n                }\n              }\n            }\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              max: 10,\n              title: {\n                display: true,\n                text: 'Severity Score (0-10)'\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Watch for ID changes\n    watch(() => props._id, () => {\n      if (props._id) {\n        fetchSurveyData();\n      }\n    });\n\n    // Initialize component\n    onMounted(() => {\n      if (props._id) {\n        fetchSurveyData();\n      }\n    });\n    const __returned__ = {\n      props,\n      store,\n      loading,\n      noData,\n      surveyChart,\n      surveyData,\n      fetchSurveyData,\n      createSampleData,\n      renderSurveyChart,\n      ref,\n      onMounted,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","useStore","Chart","axios","props","__props","store","loading","noData","surveyChart","surveyData","fetchSurveyData","value","token","state","auth","response","get","_id","headers","console","log","data","surveyStats","length","renderSurveyChart","createSampleData","error","type","average","ctx","getContext","existingChart","getChart","destroy","labels","Array","isArray","forEach","stat","isNaN","push","backgroundColors","map","datasets","label","backgroundColor","borderColor","color","replace","borderWidth","options","responsive","maintainAspectRatio","indexAxis","plugins","legend","display","tooltip","padding","titleFont","size","weight","bodyFont","callbacks","title","context","raw","severity","toFixed","scales","x","beginAtZero","max","text"],"sources":["D:/au_dev/client/src/components/StudentSurveyStat.vue"],"sourcesContent":["<template>\n  <div class=\"student-survey-stat\">\n    <div v-if=\"loading\" class=\"text-center py-4\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <p class=\"mt-2\">Loading student survey data...</p>\n    </div>\n    \n    <div v-else-if=\"noData\" class=\"text-center py-4\">\n      <i class=\"fas fa-exclamation-circle fa-3x text-muted mb-3\"></i>\n      <h5>No Survey Data Available</h5>\n      <p class=\"text-muted\">No survey data found for this student.</p>\n    </div>\n    \n    <div v-else class=\"bg-white p-3 rounded\">\n      <canvas ref=\"surveyChart\"></canvas>\n    </div>\n    </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, watch, defineProps } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\n\nconst props = defineProps({\n  _id: {\n    type: String,\n    required: true\n  }\n});\n\nconst store = useStore();\nconst loading = ref(true);\nconst noData = ref(false);\nconst surveyChart = ref(null);\nconst surveyData = ref(null);\n\n// Fetch student survey data\nconst fetchSurveyData = async () => {\n  try {\n    loading.value = true;\n    const token = store.state.auth.token;\n    \n    // Get survey data for the specified student\n    const response = await axios.get(`http://localhost:8000/api/survey/student/${props._id}`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n    \n    console.log('Student survey data from API:', response.data);\n    \n    if (response.data && response.data.surveyStats && response.data.surveyStats.length > 0) {\n      surveyData.value = response.data;\n      noData.value = false;\n      renderSurveyChart();\n    } else {\n      console.log('No survey data found for student, creating sample data');\n      createSampleData();\n    }\n  } catch (error) {\n    console.error('Error fetching student survey data:', error);\n    // Create sample data if API fails\n    createSampleData();\n  } finally {\n    loading.value = false;\n  }\n};\n\n// Create sample data if the API fails\nconst createSampleData = () => {\n  console.log('Creating sample survey data');\n  \n  // Sample survey stats\n  surveyData.value = {\n    surveyStats: [\n      { type: 'Academic', average: 7.2 },\n      { type: 'Financial', average: 5.8 },\n      { type: 'Personal', average: 3.5 },\n      { type: 'Health', average: 2.1 },\n      { type: 'Social', average: 4.6 }\n    ]\n  };\n  \n  noData.value = false;\n  renderSurveyChart();\n};\n\n// Render the bar chart\nconst renderSurveyChart = () => {\n  if (!surveyChart.value) return;\n  \n  const ctx = surveyChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  // Extract data from survey stats\n  let labels = [];\n  let data = [];\n  \n  if (surveyData.value?.surveyStats && Array.isArray(surveyData.value.surveyStats)) {\n    surveyData.value.surveyStats.forEach(stat => {\n      if (stat.type && !isNaN(stat.average)) {\n        labels.push(stat.type);\n        data.push(stat.average);\n      }\n    });\n  }\n  \n  // If no valid data, use sample data\n  if (labels.length === 0) {\n    labels = ['Academic', 'Financial', 'Personal', 'Health', 'Social'];\n    data = [7.2, 5.8, 3.5, 2.1, 4.6];\n  }\n  \n  // Calculate colors based on severity\n  const backgroundColors = data.map(value => {\n    if (value >= 7) return 'rgba(220, 53, 69, 0.7)';  // High (red)\n    if (value >= 5) return 'rgba(255, 193, 7, 0.7)';  // Medium (yellow)\n    if (value >= 3) return 'rgba(13, 110, 253, 0.7)'; // Low (blue)\n    return 'rgba(25, 135, 84, 0.7)';                 // Minimal (green)\n  });\n  \n  // Create chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Problem Severity',\n        data: data,\n        backgroundColor: backgroundColors,\n        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      indexAxis: 'y',\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          padding: 10,\n          titleFont: {\n            size: 14,\n            weight: 'bold'\n          },\n          bodyFont: {\n            size: 13\n          },\n          callbacks: {\n            title: (context) => {\n              return context[0].label + ' Problems';\n            },\n            label: (context) => {\n              const value = context.raw;\n              let severity = 'Minimal';\n              if (value >= 7) severity = 'High';\n              else if (value >= 5) severity = 'Medium';\n              else if (value >= 3) severity = 'Low';\n              \n              return `Severity: ${value.toFixed(1)} (${severity})`;\n            }\n          }\n        }\n      },\n      scales: {\n        x: {\n          beginAtZero: true,\n          max: 10,\n          title: {\n            display: true,\n            text: 'Severity Score (0-10)'\n          }\n        }\n      }\n    }\n  });\n};\n\n// Watch for ID changes\nwatch(() => props._id, () => {\n  if (props._id) {\n    fetchSurveyData();\n  }\n});\n\n// Initialize component\nonMounted(() => {\n  if (props._id) {\n    fetchSurveyData();\n  }\n});\n</script>\n\n<style scoped>\n.student-survey-stat {\n  min-height: 250px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 8px;\n}\n\ncanvas {\n  max-height: 250px;\n  margin: 0 auto;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, normalizeClass as _normalizeClass, createVNode as _createVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown\"\n};\nconst _hoisted_4 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_6 = {\n  class: \"mb-3\"\n};\nconst _hoisted_7 = {\n  class: \"mb-3\"\n};\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_15 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_16 = [\"max\"];\nconst _hoisted_17 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_18 = [\"max\"];\nconst _hoisted_19 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_20 = {\n  class: \"col-12\"\n};\nconst _hoisted_21 = {\n  class: \"date-filter-card\"\n};\nconst _hoisted_22 = {\n  class: \"card-body\"\n};\nconst _hoisted_23 = {\n  class: \"d-flex flex-wrap align-items-center\"\n};\nconst _hoisted_24 = {\n  class: \"date-filter-buttons me-3 mb-2\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"date-custom-inputs d-flex flex-wrap mb-2\"\n};\nconst _hoisted_26 = {\n  class: \"input-group me-2\",\n  style: {\n    \"max-width\": \"200px\"\n  }\n};\nconst _hoisted_27 = [\"max\"];\nconst _hoisted_28 = {\n  class: \"input-group\",\n  style: {\n    \"max-width\": \"200px\"\n  }\n};\nconst _hoisted_29 = [\"max\", \"min\"];\nconst _hoisted_30 = {\n  class: \"ms-auto mb-2\"\n};\nconst _hoisted_31 = {\n  key: 0,\n  class: \"text-muted\"\n};\nconst _hoisted_32 = {\n  class: \"row g-4\"\n};\nconst _hoisted_33 = {\n  class: \"col-md-4\"\n};\nconst _hoisted_34 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_35 = {\n  class: \"card-info\"\n};\nconst _hoisted_36 = {\n  class: \"stat-value\"\n};\nconst _hoisted_37 = {\n  class: \"col-md-4\"\n};\nconst _hoisted_38 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_39 = {\n  class: \"card-info\"\n};\nconst _hoisted_40 = {\n  class: \"stat-value\"\n};\nconst _hoisted_41 = {\n  class: \"col-md-4\"\n};\nconst _hoisted_42 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_43 = {\n  class: \"card-info\"\n};\nconst _hoisted_44 = {\n  class: \"stat-value\"\n};\nconst _hoisted_45 = {\n  class: \"row mt-4\"\n};\nconst _hoisted_46 = {\n  class: \"col-12\"\n};\nconst _hoisted_47 = {\n  class: \"chart-card\"\n};\nconst _hoisted_48 = {\n  class: \"card-body\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[23] || (_cache[23] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", _hoisted_4, [_cache[11] || (_cache[11] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[21] || (_cache[21] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: $setup.handleYearChange\n  }, _cache[12] || (_cache[12] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-1585269e>All Years</option><option value=\\\"1st\\\" data-v-1585269e>1st Year</option><option value=\\\"2nd\\\" data-v-1585269e>2nd Year</option><option value=\\\"3rd\\\" data-v-1585269e>3rd Year</option><option value=\\\"4th\\\" data-v-1585269e>4th Year</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_7, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[14] || (_cache[14] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_8), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[17] || (_cache[17] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[16] || (_cache[16] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_11), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[20] || (_cache[20] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[18] || (_cache[18] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_16), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_17, [_cache[19] || (_cache[19] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_18), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[22] || (_cache[22] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: $setup.applyFilters\n  }, \"Apply Filters\")])])]), _createCommentVNode(\" Add this after your current filters section \"), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_cache[26] || (_cache[26] = _createElementVNode(\"h5\", {\n    class: \"card-title mb-3\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar me-2\"\n  }), _createTextVNode(\" Chart Date Range \")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => $setup.setDateRange('1week')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === '1week' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Last Week \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => $setup.setDateRange('2weeks')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === '2weeks' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Last 2 Weeks \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $setup.setDateRange('1month')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === '1month' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Last Month \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $setup.setDateRange('custom')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === 'custom' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Custom \", 2 /* CLASS */)]), $setup.selectedDateRange === 'custom' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_createElementVNode(\"div\", _hoisted_26, [_cache[24] || (_cache[24] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $setup.customStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_27), [[_vModelText, $setup.customStartDate]])]), _createElementVNode(\"div\", _hoisted_28, [_cache[25] || (_cache[25] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $setup.customEndDate = $event),\n    max: $setup.today,\n    min: $setup.customStartDate\n  }, null, 8 /* PROPS */, _hoisted_29), [[_vModelText, $setup.customEndDate]])])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_30, [$setup.selectedDateRange && $setup.selectedDateRange !== 'all' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_31, \" Showing data from \" + _toDisplayString($setup.formatDateShort($setup.currentDateRange.start)) + \" to \" + _toDisplayString($setup.formatDateShort($setup.currentDateRange.end)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])])])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_32, [_createCommentVNode(\" Total SSP Advisers Card \"), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_cache[28] || (_cache[28] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard-teacher\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_35, [_cache[27] || (_cache[27] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"SSP Advisers\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_36, _toDisplayString($setup.totalSSPAdvisers), 1 /* TEXT */)])])]), _createCommentVNode(\" Failing Students Card \"), _createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_cache[30] || (_cache[30] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-exclamation-triangle\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_39, [_cache[29] || (_cache[29] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Failing Students\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_40, _toDisplayString($setup.failingStudents), 1 /* TEXT */)])])]), _createCommentVNode(\" Completed Surveys Card \"), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"div\", _hoisted_42, [_cache[32] || (_cache[32] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clipboard-check\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_43, [_cache[31] || (_cache[31] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Completed Surveys\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_44, _toDisplayString($setup.completedSurveys), 1 /* TEXT */)])])])]), _createCommentVNode(\" Survey Stats \"), _createElementVNode(\"div\", _hoisted_45, [_createElementVNode(\"div\", _hoisted_46, [_createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"div\", _hoisted_48, [_cache[33] || (_cache[33] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-poll me-2\"\n  }), _createTextVNode(\" Survey Statistics \")], -1 /* HOISTED */)), _createVNode($setup[\"AllSurveyStat\"])])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_createTextVNode","_toDisplayString","$setup","getFilterDisplay","_hoisted_5","_hoisted_6","_cache","$event","selectedYear","onChange","handleYearChange","_createStaticVNode","_hoisted_7","selectedSection","disabled","value","_Fragment","_renderList","sections","section","_hoisted_9","_hoisted_8","_hoisted_10","selectedSubject","subjects","subject","_hoisted_12","_hoisted_11","_hoisted_13","_hoisted_14","_hoisted_15","selectedStartDate","max","today","_hoisted_16","_hoisted_17","selectedEndDate","_hoisted_18","onClick","applyFilters","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","setDateRange","_normalizeClass","selectedDateRange","_hoisted_25","_hoisted_26","customStartDate","_hoisted_27","_hoisted_28","customEndDate","min","_hoisted_29","_hoisted_30","_hoisted_31","formatDateShort","currentDateRange","start","end","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","totalSSPAdvisers","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","failingStudents","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","completedSurveys","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_createVNode"],"sources":["D:\\au_dev\\client\\src\\views\\SSPHeadDashboard.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport AllSurveyStat from '../components/AllSurveyStat.vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst store = useStore()\nconst performanceChart = ref(null)\nconst attendanceChart = ref(null)\nconst assessmentTypeChart = ref(null)\nconst performanceTrendChart = ref(null)\nconst quizzesChart = ref(null)\nconst assessmentTypePerformanceChart = ref(null)\n\n// Data refs\nconst totalStudents = ref(0)\nconst totalSections = ref(0)\nconst totalSubjects = ref(0)\nconst totalSSPAdvisers = ref(0)\nconst failingStudents = ref(0)\nconst completedSurveys = ref(0)\nconst averageScore = ref(0)\nconst assessmentCompletion = ref(0)\nconst recentActivities = ref([])\nconst sections = ref([])\nconst subjects = ref([])\nconst quizzesGrades = ref([]);\n\n// Filter refs\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\nconst selectedStartDate = ref('')\nconst selectedEndDate = ref('')\nconst today = computed(() => moment().format('YYYY-MM-DD'))\n\n// Add date filter refs\nconst selectedDateRange = ref(localStorage.getItem('selectedDateRange') || 'all');\nconst customStartDate = ref('');\nconst customEndDate = ref('');\n\n// Computed property for current date range\nconst currentDateRange = computed(() => {\n  const end = moment();\n  let start = moment();\n  \n  switch (selectedDateRange.value) {\n    case '1week':\n      start = moment().subtract(1, 'weeks');\n      break;\n    case '2weeks':\n      start = moment().subtract(2, 'weeks');\n      break;\n    case '1month':\n      start = moment().subtract(1, 'month');\n      break;\n    case 'custom':\n      if (customStartDate.value && customEndDate.value) {\n        start = moment(customStartDate.value);\n        end = moment(customEndDate.value).endOf('day');\n      }\n      break;\n    case 'all':\n    default:\n      // Use all available data\n      start = moment().subtract(1, 'year');\n      break;\n  }\n  \n  return {\n    start: start.toDate(),\n    end: end.toDate(),\n    startStr: start.format('YYYY-MM-DD'),\n    endStr: end.format('YYYY-MM-DD')\n  };\n});\n\n// Get teacher ID from store\nconst getTeacherId = () => {\n  const user = store.state.auth.user\n  if (!user || !user._id) {\n    console.error('No teacher ID found in store')\n    return null\n  }\n  return user._id\n}\n\n// Computed properties for data availability\nconst hasPerformanceData = computed(() => averageScore.value > 0)\nconst hasAssessmentData = computed(() => assessmentCompletion.value > 0)\nconst hasActivity = computed(() => recentActivities.value.length > 0)\n\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\n  try {\n    const teacherId = getTeacherId()\n    if (!teacherId) return\n\n    const token = store.state.auth.token\n    console.log('Fetching sections and subjects for:', { teacherId, year })\n\n    // First get all class records to extract sections\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n      params: { \n        teacherId,\n        year \n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n\n    if (recordsResponse.data) {\n      // Extract unique sections and subjects\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n      \n      sections.value = uniqueSections.sort()\n      subjects.value = uniqueSubjects.sort()\n      \n      console.log('Loaded sections and subjects:', {\n        sections: sections.value,\n        subjects: subjects.value\n      })\n    }\n  } catch (error) {\n    console.error('Error fetching teacher sections and subjects:', error)\n    sections.value = []\n    subjects.value = []\n  }\n}\n\nconst handleYearChange = async () => {\n  selectedSection.value = ''\n  selectedSubject.value = ''\n  if (selectedYear.value) {\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\n  } else {\n    sections.value = []\n    subjects.value = []\n  }\n  await fetchDashboardData()\n}\n\nconst getFilterDisplay = () => {\n  const filters = []\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n  if (selectedSection.value) filters.push(selectedSection.value)\n  if (selectedSubject.value) filters.push(selectedSubject.value)\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n}\n\nconst fetchDashboardData = async () => {\n  try {\n    const teacherId = getTeacherId();\n    if (!teacherId) {\n      console.error('No teacher ID found');\n      return;\n    }\n\n    const token = store.state.auth.token;\n    if (!token) {\n      console.error('No auth token found');\n      return;\n    }\n\n    console.log('Fetching dashboard data with params:', {\n      teacherId,\n      year: selectedYear.value,\n      section: selectedSection.value,\n      subject: selectedSubject.value,\n      startDate: currentDateRange.value.startStr,\n      endDate: currentDateRange.value.endStr\n    });\n\n    // Get dashboard stats\n    const response = await axios.get(`http://localhost:8000/api/dashboard/stats`, {\n      params: {\n        year: selectedYear.value,\n        section: selectedSection.value,\n        subject: selectedSubject.value,\n        startDate: currentDateRange.value.startStr,\n        endDate: currentDateRange.value.endStr\n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n\n    console.log('Dashboard data received:', response.data);\n\n    if (response.data) {\n      // Update stats\n      totalStudents.value = response.data.totalStudents || 0;\n      totalSections.value = response.data.totalSections || 0;\n      totalSubjects.value = response.data.totalSubjects || 0;\n      totalSSPAdvisers.value = response.data.totalSSPAdvisers || 0;\n      averageScore.value = response.data.averageScore || 0;\n      assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n      recentActivities.value = response.data.recentActivities || [];\n    }\n    \n    // Get failing students count directly from failing students list\n    try {\n      const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      // Get completed surveys to exclude those students\n      const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      const completedSurveyIds = new Set();\n      if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n        completedSurveysResponse.data.forEach(survey => {\n          completedSurveyIds.add(survey.studentId);\n        });\n      }\n      \n      // Count completed surveys\n      completedSurveys.value = completedSurveysResponse.data?.length || 0;\n      \n      // Filter out students who have completed surveys\n      const failingStudentList = failingListResponse.data?.list || [];\n      if (Array.isArray(failingStudentList)) {\n        const filteredCount = failingStudentList.filter(student => \n          !completedSurveyIds.has(student.info._id)\n        ).length;\n        \n        failingStudents.value = filteredCount;\n      } else {\n        failingStudents.value = 0;\n      }\n    } catch (error) {\n      console.error('Error fetching failing students:', error);\n      failingStudents.value = 0;\n      completedSurveys.value = 0;\n    }\n\n    // Log data before updating charts\n    console.log('Performance Distribution:', response.data.performanceDistribution);\n    console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n    console.log('Performance Trends:', response.data.performanceTrends);\n    console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n    // Update charts with new data\n    if (Array.isArray(response.data.performanceDistribution)) {\n      updatePerformanceChart(response.data);\n    } else {\n      console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n      updatePerformanceChart({\n        performanceDistribution: [0, 0, 0, 0, 0]\n      });\n    }\n\n    if (response.data.assessmentTypeDistribution){\n      updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n    } else {\n      console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n      updateAssessmentTypeChart([\n        { type: 'Quiz', percentage: 0 },\n        { type: 'Activity', percentage: 0 },\n        { type: 'Performance Task', percentage: 0 }\n      ]);\n    }\n\n    if (Array.isArray(response.data.performanceTrends)) {\n      updatePerformanceTrendChart(response.data.performanceTrends);\n    } else {\n      console.warn('Invalid performance trends data:', response.data.performanceTrends);\n      updatePerformanceTrendChart([]);\n    }\n\n    if (response.data.assessmentCompletion?.byType) {\n      updateAssessmentTypePerformanceChart(response.data);\n    } else {\n      console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n      updateAssessmentTypePerformanceChart({\n        assessmentCompletion: {\n          byType: {\n            quiz: 0,\n            activity: 0,\n            performancetask: 0\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n    }\n    \n    // Reset data on error\n    totalStudents.value = 0;\n    totalSections.value = 0;\n    totalSubjects.value = 0;\n    totalSSPAdvisers.value = 0;\n    failingStudents.value = 0;\n    completedSurveys.value = 0;\n    averageScore.value = 0;\n    assessmentCompletion.value = 0;\n    recentActivities.value = [];\n    \n    // Update charts with empty data\n    updatePerformanceChart({\n      performanceDistribution: [0, 0, 0, 0, 0]\n    });\n    updateAssessmentTypeChart([\n      { type: 'Quiz', percentage: 0 },\n      { type: 'Activity', percentage: 0 },\n      { type: 'Performance Task', percentage: 0 }\n    ]);\n    updatePerformanceTrendChart([]);\n    updateAssessmentTypePerformanceChart({\n      assessmentCompletion: {\n        byType: {\n          quiz: 0,\n          activity: 0,\n          performancetask: 0\n        }\n      }\n    });\n  }\n}\n\nconst updatePerformanceChart = (data) => {\n  if (!performanceChart.value) return;\n  \n  const ctx = performanceChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process performance distribution data\n  const performanceData = Array.isArray(data.performanceDistribution) \n    ? data.performanceDistribution \n    : [0, 0, 0, 0, 0];\n  \n  console.log('Performance distribution data:', performanceData);\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n      datasets: [{\n        label: 'Number of Students',\n        data: performanceData,\n        backgroundColor: [\n          'rgba(52, 211, 153, 0.8)',  // Green for highest\n          'rgba(59, 130, 246, 0.8)',  // Blue\n          'rgba(251, 191, 36, 0.8)',  // Yellow\n          'rgba(251, 146, 60, 0.8)',  // Orange\n          'rgba(239, 68, 68, 0.8)'    // Red for lowest\n        ],\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top',\n          labels: {\n            usePointStyle: true,\n            padding: 15,\n            font: {\n              size: 12\n            }\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${value} students (${percentage}%)`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            stepSize: 1\n          },\n          title: {\n            display: true,\n            text: 'Number of Students'\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updateAssessmentTypeChart = (data) => {\n  if (!assessmentTypeChart.value) return;\n  \n  const ctx = assessmentTypeChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process the assessment type distribution data\n  const labels = data.labels || [];\n  const datasets = data.datasets || [];\n  \n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: datasets.map((dataset, index) => ({\n        label: dataset.type,\n        data: dataset.data,\n        backgroundColor: [\n          'rgba(52, 211, 153, 0.8)',  // Green\n          'rgba(59, 130, 246, 0.8)',  // Blue\n          'rgba(251, 191, 36, 0.8)'   // Yellow\n        ][index],\n        borderWidth: 1\n      }))\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          stacked: true,\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        },\n        y: {\n          stacked: true,\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Number of Assessments'\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top',\n          labels: {\n            usePointStyle: true,\n            padding: 15,\n            font: {\n              size: 12\n            }\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => `${context.dataset.label}: ${context.raw || 0} assessments`\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updatePerformanceTrendChart = (data) => {\n  if (!performanceTrendChart.value) {\n    console.warn('Performance trend chart reference not found');\n    return;\n  }\n  \n  const ctx = performanceTrendChart.value.getContext('2d');\n  if (!ctx) {\n    console.warn('Could not get 2d context for performance trend chart');\n    return;\n  }\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    existingChart.destroy();\n  }\n\n  // Ensure data is valid\n  const validData = Array.isArray(data) ? data : [];\n  console.log('Creating performance trend chart with data:', validData);\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n      datasets: [{\n        label: 'Average Score',\n        data: validData.map(d => Number(d.score) || 0),\n        borderColor: '#4CAF50',\n        backgroundColor: 'rgba(76, 175, 80, 0.1)',\n        tension: 0.4,\n        fill: true,\n        pointRadius: 4,\n        pointHoverRadius: 6\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top',\n          labels: {\n            usePointStyle: true,\n            padding: 15,\n            font: {\n              size: 12\n            }\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const dataPoint = validData[context.dataIndex];\n              return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          ticks: {\n            stepSize: 20,\n            font: {\n              size: 12\n            }\n          },\n          title: {\n            display: true,\n            text: 'Average Score (%)',\n            font: {\n              size: 14,\n              weight: 'bold'\n            }\n          }\n        },\n        x: {\n          ticks: {\n            font: {\n              size: 12\n            },\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updateAssessmentTypePerformanceChart = (data) => {\n  if (!assessmentTypePerformanceChart.value) return;\n  \n  const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process the performance trends data by assessment type\n  const trendsByType = {\n    Quiz: [],\n    Activity: [],\n    'Performance Task': []\n  };\n\n  // Process performance trends data\n  if (Array.isArray(data.performanceTrends)) {\n    data.performanceTrends.forEach(trend => {\n      const type = trend.type || trend.name;\n      if (type in trendsByType) {\n        trendsByType[type].push({\n          date: new Date(trend.date),\n          score: parseFloat(trend.score) || 0\n        });\n      }\n    });\n  }\n\n  // Sort data points by date for each type\n  Object.keys(trendsByType).forEach(type => {\n    trendsByType[type].sort((a, b) => a.date - b.date);\n  });\n\n  // Get unique dates across all types\n  const allDates = [...new Set(\n    Object.values(trendsByType)\n      .flat()\n      .map(item => item.date)\n  )].sort((a, b) => a - b);\n\n  // Create datasets\n  const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n    const colors = [\n      'rgb(52, 211, 153)',   // Green for Quiz\n      'rgb(59, 130, 246)',   // Blue for Activity\n      'rgb(251, 191, 36)'    // Yellow for Performance Task\n    ];\n    const color = colors[index];\n\n    return {\n      label: type,\n      data: allDates.map(date => {\n        const point = data.find(d => d.date.getTime() === date.getTime());\n        return point ? point.score : null;\n      }),\n      borderColor: color,\n      backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n      fill: true,\n      tension: 0.4,\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      spanGaps: true // This will connect points even if there are null values\n    };\n  });\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n      datasets\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        intersect: false,\n        mode: 'index'\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top',\n          labels: {\n            usePointStyle: true,\n            padding: 15,\n            font: {\n              size: 12\n            }\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n              return `${context.dataset.label}: ${value}%`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          title: {\n            display: true,\n            text: 'Score (%)'\n          }\n        },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\nconst formatDate = (date) => {\n  return moment(date).format('MMM D, YYYY')\n}\n\nconst applyFilters = async () => {\n  // Save selected values to localStorage\n  if (selectedYear.value) {\n    localStorage.setItem('selectedYear', selectedYear.value)\n  } else {\n    localStorage.removeItem('selectedYear')\n  }\n\n  if (selectedSection.value) {\n    localStorage.setItem('selectedSection', selectedSection.value)\n  } else {\n    localStorage.removeItem('selectedSection')\n  }\n\n  if (selectedSubject.value) {\n    localStorage.setItem('selectedSubject', selectedSubject.value)\n  } else {\n    localStorage.removeItem('selectedSubject')\n  }\n\n  await fetchDashboardData()\n}\n\n// Watch for filter changes\nwatch(selectedYear, handleYearChange)\nwatch([selectedSection, selectedSubject], applyFilters)\nwatch([selectedStartDate, selectedEndDate], () => {\n  if (selectedStartDate.value && selectedEndDate.value) {\n    // Validate date range\n    const start = moment(selectedStartDate.value);\n    const end = moment(selectedEndDate.value);\n    \n    if (end.isBefore(start)) {\n      selectedEndDate.value = selectedStartDate.value;\n    }\n    \n    fetchDashboardData();\n  }\n})\n\n// Set date range\nconst setDateRange = (range) => {\n  selectedDateRange.value = range;\n  localStorage.setItem('selectedDateRange', range);\n  \n  // If custom, initialize with reasonable defaults\n  if (range === 'custom' && !customStartDate.value) {\n    customStartDate.value = moment().subtract(2, 'weeks').format('YYYY-MM-DD');\n    customEndDate.value = today.value;\n  }\n  \n  // Refresh data with new date range\n  fetchDashboardData();\n};\n\n// Format date for short display\nconst formatDateShort = (date) => {\n  if (!date) return '';\n  return moment(date).format('MMM D, YYYY');\n};\n\n// Watch for changes to custom date range\nwatch([customStartDate, customEndDate], () => {\n  if (selectedDateRange.value === 'custom' && customStartDate.value && customEndDate.value) {\n    fetchDashboardData();\n  }\n});\n\nonMounted(async () => {\n  if (store.state.auth.user?._id && store.state.auth.token) {\n    console.log('Component mounted, initializing...');\n    \n    // Wait for the next tick to ensure DOM elements are rendered\n    await nextTick();\n    \n    try {\n      // Initialize empty charts first\n      console.log('Initializing empty charts...');\n      \n      updatePerformanceChart({\n        performanceDistribution: [0, 0, 0, 0, 0]\n      });\n      updateAssessmentTypeChart([\n        { type: 'Quiz', percentage: 0 },\n        { type: 'Activity', percentage: 0 },\n        { type: 'Performance Task', percentage: 0 }\n      ]);\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        assessmentCompletion: {\n          byType: {\n            quiz: 0,\n            activity: 0,\n            performancetask: 0\n          }\n        }\n      });\n      \n      console.log('Empty charts initialized');\n      \n      // Fetch sections and subjects\n      await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      console.log('Sections and subjects fetched');\n      \n      // Fetch actual dashboard data\n      await fetchDashboardData();\n      console.log('Initial data fetch completed');\n\n      // Fetch Grades\n      const grades = await axios.get('http://localhost:8000/api/dashboard/failing/analytics',);\n      const quizzes = grades.data.filter(a => a.type === 'Quiz') || [];\n      \n      const activity = grades.data.filter(a => a.type === 'Activity') || [];\n      const performanceTask = grades.data.filter(a => a.type === 'Performance Task') || [];\n\n      quizzes[0].data.map((datas) => {\n        // console.log(datas.scores);\n        let temp = 0\n        let counter = 0;\n        Object.entries(datas.scores).forEach(([id, score]) => {\n          if(score <= 50){\n            temp = temp + score;\n            counter++;\n          }\n        })\n        quizzesGrades.value.push({average : Number((temp / counter).toFixed(2)) || 0, subject : datas.subject});\n      });\n      \n    } catch (error) {\n      console.error('Error during initialization:', error);\n    }\n  } else {\n    console.error('No user ID or token found');\n  }\n})\n</script>\n\n<template>\n    <div class=\"dashboard\">\n        <div class=\"d-flex justify-content-between align-items-center mb-4\">\n            <h2 class=\"dashboard-title\"></h2>\n\n            <!-- Combined Filter Dropdown -->\n            <div class=\"dropdown\">\n                <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\"\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                    <i class=\"fas fa-filter me-2\"></i>\n                    {{ getFilterDisplay() }}\n                </button>\n                <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n                    <h6 class=\"dropdown-header\">Filter Options</h6>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Academic Year</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n                            <option value=\"\">All Years</option>\n                            <option value=\"1st\">1st Year</option>\n                            <option value=\"2nd\">2nd Year</option>\n                            <option value=\"3rd\">3rd Year</option>\n                            <option value=\"4th\">4th Year</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Section</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n                            <option value=\"\">All Sections</option>\n                            <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Subject</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n                            <option value=\"\">All Subjects</option>\n                            <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Date Range</label>\n                        <div class=\"d-flex gap-2\">\n                            <div class=\"flex-grow-1\">\n                                <label class=\"small text-muted\">From</label>\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedStartDate\"\n                                    :max=\"today\">\n                            </div>\n                            <div class=\"flex-grow-1\">\n                                <label class=\"small text-muted\">To</label>\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedEndDate\"\n                                    :max=\"today\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"dropdown-divider\"></div>\n                    <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n                </div>\n            </div>\n        </div>\n\n        <!-- Add this after your current filters section -->\n        <div class=\"row mb-4\">\n            <div class=\"col-12\">\n                <div class=\"date-filter-card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title mb-3\">\n                            <i class=\"fas fa-calendar me-2\"></i>\n                            Chart Date Range\n                        </h5>\n                        <div class=\"d-flex flex-wrap align-items-center\">\n                            <div class=\"date-filter-buttons me-3 mb-2\">\n                                <button @click=\"setDateRange('1week')\" :class=\"['btn', selectedDateRange === '1week' ? 'btn-primary' : 'btn-outline-primary']\">\n                                    Last Week\n                                </button>\n                                <button @click=\"setDateRange('2weeks')\" :class=\"['btn', selectedDateRange === '2weeks' ? 'btn-primary' : 'btn-outline-primary']\">\n                                    Last 2 Weeks\n                                </button>\n                                <button @click=\"setDateRange('1month')\" :class=\"['btn', selectedDateRange === '1month' ? 'btn-primary' : 'btn-outline-primary']\">\n                                    Last Month\n                                </button>\n                                <button @click=\"setDateRange('custom')\" :class=\"['btn', selectedDateRange === 'custom' ? 'btn-primary' : 'btn-outline-primary']\">\n                                    Custom\n                                </button>\n                            </div>\n                            <div v-if=\"selectedDateRange === 'custom'\" class=\"date-custom-inputs d-flex flex-wrap mb-2\">\n                                <div class=\"input-group me-2\" style=\"max-width: 200px;\">\n                                    <span class=\"input-group-text\">From</span>\n                                    <input type=\"date\" class=\"form-control\" v-model=\"customStartDate\" :max=\"today\">\n                                </div>\n                                <div class=\"input-group\" style=\"max-width: 200px;\">\n                                    <span class=\"input-group-text\">To</span>\n                                    <input type=\"date\" class=\"form-control\" v-model=\"customEndDate\" :max=\"today\" :min=\"customStartDate\">\n                                </div>\n                            </div>\n                            <div class=\"ms-auto mb-2\">\n                                <span class=\"text-muted\" v-if=\"selectedDateRange && selectedDateRange !== 'all'\">\n                                    Showing data from {{ formatDateShort(currentDateRange.start) }} to {{ formatDateShort(currentDateRange.end) }}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Analytics Cards -->\n        <div class=\"row g-4\">\n            <!-- Total SSP Advisers Card -->\n            <div class=\"col-md-4\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-chalkboard-teacher\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">SSP Advisers</h3>\n                        <div class=\"stat-value\">{{ totalSSPAdvisers }}</div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- Failing Students Card -->\n            <div class=\"col-md-4\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-exclamation-triangle\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">Failing Students</h3>\n                        <div class=\"stat-value\">{{ failingStudents }}</div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Completed Surveys Card -->\n            <div class=\"col-md-4\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-clipboard-check\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">Completed Surveys</h3>\n                        <div class=\"stat-value\">{{ completedSurveys }}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Survey Stats -->\n        <div class=\"row mt-4\">\n            <div class=\"col-12\">\n                <div class=\"chart-card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">\n                            <i class=\"fas fa-poll me-2\"></i>\n                            Survey Statistics\n                        </h5>\n                        <AllSurveyStat />\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 1.5rem;\n  letter-spacing: -0.3px;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n    padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Add date filter styles */\n.date-filter-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  padding: 0.25rem;\n  transition: all 0.2s ease;\n}\n\n.date-filter-buttons .btn {\n  margin-right: 0.5rem;\n  border-radius: 20px;\n  padding: 0.4rem 1rem;\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.date-custom-inputs .input-group-text {\n  background-color: #f8f9fa;\n  font-size: 0.875rem;\n  border-radius: 8px 0 0 8px;\n}\n\n.date-custom-inputs .form-control {\n  border-radius: 0 8px 8px 0;\n  font-size: 0.875rem;\n}\n</style>"],"mappings":";;EAyzBSA,KAAK,EAAC;AAAW;;EACbA,KAAK,EAAC;AAAwD;;EAI1DA,KAAK,EAAC;AAAU;;EACTA,KAAK,EAAC,gCAAgC;EAACC,IAAI,EAAC,QAAQ;EAACC,EAAE,EAAC,gBAAgB;EAC5E,gBAAc,EAAC,UAAU;EAAC,eAAa,EAAC;;;EAIvCF,KAAK,EAAC,+BAA+B;EAAC,iBAAe,EAAC;;;EAElDA,KAAK,EAAC;AAAM;;EAUZA,KAAK,EAAC;AAAM;mBAh1BrC;mBAAA;;EAu1ByBA,KAAK,EAAC;AAAM;oBAv1BrC;oBAAA;;EA81ByBA,KAAK,EAAC;AAAM;;EAERA,KAAK,EAAC;AAAc;;EAChBA,KAAK,EAAC;AAAa;oBAj2BpD;;EAs2BiCA,KAAK,EAAC;AAAa;oBAt2BpD;;EAo3BaA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAQ;;EACVA,KAAK,EAAC;AAAkB;;EACpBA,KAAK,EAAC;AAAW;;EAKbA,KAAK,EAAC;AAAqC;;EACvCA,KAAK,EAAC;AAA+B;;EA73BtEG,GAAA;EA24BuEH,KAAK,EAAC;;;EACxCA,KAAK,EAAC,kBAAkB;EAACI,KAAyB,EAAzB;IAAA;EAAA;;oBA54B9D;;EAg5BqCJ,KAAK,EAAC,aAAa;EAACI,KAAyB,EAAzB;IAAA;EAAA;;oBAh5BzD;;EAq5BiCJ,KAAK,EAAC;AAAc;;EAr5BrDG,GAAA;EAs5BsCH,KAAK,EAAC;;;EAW/BA,KAAK,EAAC;AAAS;;EAEXA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAgB;;EAIlBA,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAY;;EAM9BA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAgB;;EAIlBA,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAY;;EAM9BA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAgB;;EAIlBA,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAY;;EAOlCA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAQ;;EACVA,KAAK,EAAC;AAAY;;EACdA,KAAK,EAAC;AAAW;;uBArJtCK,mBAAA,CA+JM,OA/JNC,UA+JM,GA9JFC,mBAAA,CAuDM,OAvDNC,UAuDM,G,4BAtDFD,mBAAA,CAAiC;IAA7BP,KAAK,EAAC;EAAiB,6BAE3BS,mBAAA,8BAAiC,EACjCF,mBAAA,CAkDM,OAlDNG,UAkDM,GAjDFH,mBAAA,CAIS,UAJTI,UAIS,G,4BAFLJ,mBAAA,CAAkC;IAA/BP,KAAK,EAAC;EAAoB,6BAj0BjDY,gBAAA,CAi0BsD,GAClC,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,gBAAgB,mB,GAEvBR,mBAAA,CA2CM,OA3CNS,UA2CM,G,4BA1CFT,mBAAA,CAA+C;IAA3CP,KAAK,EAAC;EAAiB,GAAC,gBAAc,sBAC1CO,mBAAA,CASM,OATNU,UASM,G,4BARFV,mBAAA,CAA+C;IAAxCP,KAAK,EAAC;EAAY,GAAC,eAAa,sB,gBACvCO,mBAAA,CAMS;IANDP,KAAK,EAAC,kBAAkB;IAx0BxD,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAw0BkEL,MAAA,CAAAM,YAAY,GAAAD,MAAA;IAAGE,QAAM,EAAEP,MAAA,CAAAQ;kCAx0BzFC,kBAAA,yR,2DAw0BkET,MAAA,CAAAM,YAAY,E,KAQ1Db,mBAAA,CAMM,OANNiB,UAMM,G,4BALFjB,mBAAA,CAAyC;IAAlCP,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCO,mBAAA,CAGS;IAHDP,KAAK,EAAC,kBAAkB;IAl1BxD,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAk1BkEL,MAAA,CAAAW,eAAe,GAAAN,MAAA;IAAGO,QAAQ,GAAGZ,MAAA,CAAAM;kCACnEb,mBAAA,CAAsC;IAA9BoB,KAAK,EAAC;EAAE,GAAC,cAAY,uB,kBAC7BtB,mBAAA,CAA0FuB,SAAA,QAp1BtHC,WAAA,CAo1BsDf,MAAA,CAAAgB,QAAQ,EAAnBC,OAAO;yBAAtB1B,mBAAA,CAA0F;MAArDF,GAAG,EAAE4B,OAAO;MAAGJ,KAAK,EAAEI;wBAAYA,OAAO,wBAp1B1GC,UAAA;kDAAAC,UAAA,I,gBAk1BkEnB,MAAA,CAAAW,eAAe,E,KAK7DlB,mBAAA,CAMM,OANN2B,WAMM,G,4BALF3B,mBAAA,CAAyC;IAAlCP,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCO,mBAAA,CAGS;IAHDP,KAAK,EAAC,kBAAkB;IAz1BxD,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAy1BkEL,MAAA,CAAAqB,eAAe,GAAAhB,MAAA;IAAGO,QAAQ,GAAGZ,MAAA,CAAAM;kCACnEb,mBAAA,CAAsC;IAA9BoB,KAAK,EAAC;EAAE,GAAC,cAAY,uB,kBAC7BtB,mBAAA,CAA0FuB,SAAA,QA31BtHC,WAAA,CA21BsDf,MAAA,CAAAsB,QAAQ,EAAnBC,OAAO;yBAAtBhC,mBAAA,CAA0F;MAArDF,GAAG,EAAEkC,OAAO;MAAGV,KAAK,EAAEU;wBAAYA,OAAO,wBA31B1GC,WAAA;kDAAAC,WAAA,I,gBAy1BkEzB,MAAA,CAAAqB,eAAe,E,KAK7D5B,mBAAA,CAcM,OAdNiC,WAcM,G,4BAbFjC,mBAAA,CAA4C;IAArCP,KAAK,EAAC;EAAY,GAAC,YAAU,sBACpCO,mBAAA,CAWM,OAXNkC,WAWM,GAVFlC,mBAAA,CAIM,OAJNmC,WAIM,G,4BAHFnC,mBAAA,CAA4C;IAArCP,KAAK,EAAC;EAAkB,GAAC,MAAI,sB,gBACpCO,mBAAA,CACiB;IADVN,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,8BAA8B;IAn2BvF,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAm2BiGL,MAAA,CAAA6B,iBAAiB,GAAAxB,MAAA;IAC7EyB,GAAG,EAAE9B,MAAA,CAAA+B;0BAp2B1CC,WAAA,I,cAm2BiGhC,MAAA,CAAA6B,iBAAiB,E,KAGtFpC,mBAAA,CAIM,OAJNwC,WAIM,G,4BAHFxC,mBAAA,CAA0C;IAAnCP,KAAK,EAAC;EAAkB,GAAC,IAAE,sB,gBAClCO,mBAAA,CACiB;IADVN,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,8BAA8B;IAx2BvF,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAw2BiGL,MAAA,CAAAkC,eAAe,GAAA7B,MAAA;IAC3EyB,GAAG,EAAE9B,MAAA,CAAA+B;0BAz2B1CI,WAAA,I,cAw2BiGnC,MAAA,CAAAkC,eAAe,E,qCAK5FzC,mBAAA,CAAoC;IAA/BP,KAAK,EAAC;EAAkB,6BAC7BO,mBAAA,CAAkF;IAA1EP,KAAK,EAAC,uBAAuB;IAAEkD,OAAK,EAAEpC,MAAA,CAAAqC;KAAc,eAAa,E,OAKrF1C,mBAAA,iDAAoD,EACpDF,mBAAA,CA0CM,OA1CN6C,WA0CM,GAzCF7C,mBAAA,CAwCM,OAxCN8C,WAwCM,GAvCF9C,mBAAA,CAsCM,OAtCN+C,WAsCM,GArCF/C,mBAAA,CAoCM,OApCNgD,WAoCM,G,4BAnCFhD,mBAAA,CAGK;IAHDP,KAAK,EAAC;EAAiB,IACvBO,mBAAA,CAAoC;IAAjCP,KAAK,EAAC;EAAsB,IAz3B3DY,gBAAA,CAy3BgE,oBAExC,E,sBACAL,mBAAA,CA8BM,OA9BNiD,WA8BM,GA7BFjD,mBAAA,CAaM,OAbNkD,WAaM,GAZFlD,mBAAA,CAES;IAFA2C,OAAK,EAAAhC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEL,MAAA,CAAA4C,YAAY;IAAY1D,KAAK,EA93B7E2D,eAAA,SA83BuF7C,MAAA,CAAA8C,iBAAiB;KAAuD,aAE/H,kBACArD,mBAAA,CAES;IAFA2C,OAAK,EAAAhC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEL,MAAA,CAAA4C,YAAY;IAAa1D,KAAK,EAj4B9E2D,eAAA,SAi4BwF7C,MAAA,CAAA8C,iBAAiB;KAAwD,gBAEjI,kBACArD,mBAAA,CAES;IAFA2C,OAAK,EAAAhC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEL,MAAA,CAAA4C,YAAY;IAAa1D,KAAK,EAp4B9E2D,eAAA,SAo4BwF7C,MAAA,CAAA8C,iBAAiB;KAAwD,cAEjI,kBACArD,mBAAA,CAES;IAFA2C,OAAK,EAAAhC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEL,MAAA,CAAA4C,YAAY;IAAa1D,KAAK,EAv4B9E2D,eAAA,SAu4BwF7C,MAAA,CAAA8C,iBAAiB;KAAwD,UAEjI,iB,GAEO9C,MAAA,CAAA8C,iBAAiB,iB,cAA5BvD,mBAAA,CASM,OATNwD,WASM,GARFtD,mBAAA,CAGM,OAHNuD,WAGM,G,4BAFFvD,mBAAA,CAA0C;IAApCP,KAAK,EAAC;EAAkB,GAAC,MAAI,sB,gBACnCO,mBAAA,CAA+E;IAAxEN,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IA94B3E,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA84BqFL,MAAA,CAAAiD,eAAe,GAAA5C,MAAA;IAAGyB,GAAG,EAAE9B,MAAA,CAAA+B;0BA94B5GmB,WAAA,I,cA84BqFlD,MAAA,CAAAiD,eAAe,E,KAEpExD,mBAAA,CAGM,OAHN0D,WAGM,G,4BAFF1D,mBAAA,CAAwC;IAAlCP,KAAK,EAAC;EAAkB,GAAC,IAAE,sB,gBACjCO,mBAAA,CAAoG;IAA7FN,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IAl5B3E,uBAAAkB,MAAA,SAAAA,MAAA,OAAAC,MAAA,IAk5BqFL,MAAA,CAAAoD,aAAa,GAAA/C,MAAA;IAAGyB,GAAG,EAAE9B,MAAA,CAAA+B,KAAK;IAAGsB,GAAG,EAAErD,MAAA,CAAAiD;0BAl5BvHK,WAAA,I,cAk5BqFtD,MAAA,CAAAoD,aAAa,E,SAl5BlGzD,mBAAA,gBAq5B4BF,mBAAA,CAIM,OAJN8D,WAIM,GAH6BvD,MAAA,CAAA8C,iBAAiB,IAAI9C,MAAA,CAAA8C,iBAAiB,c,cAArEvD,mBAAA,CAEO,QAFPiE,WAEO,EAF0E,qBAC3D,GAAAzD,gBAAA,CAAGC,MAAA,CAAAyD,eAAe,CAACzD,MAAA,CAAA0D,gBAAgB,CAACC,KAAK,KAAI,MAAI,GAAA5D,gBAAA,CAAGC,MAAA,CAAAyD,eAAe,CAACzD,MAAA,CAAA0D,gBAAgB,CAACE,GAAG,qBAv5B9IjE,mBAAA,e,aAg6BQA,mBAAA,qBAAwB,EACxBF,mBAAA,CAuCM,OAvCNoE,WAuCM,GAtCFlE,mBAAA,6BAAgC,EAChCF,mBAAA,CAUM,OAVNqE,WAUM,GATFrE,mBAAA,CAQM,OARNsE,WAQM,G,4BAPFtE,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACvBO,mBAAA,CAAyC;IAAtCP,KAAK,EAAC;EAA2B,G,sBAExCO,mBAAA,CAGM,OAHNuE,WAGM,G,4BAFFvE,mBAAA,CAAwC;IAApCP,KAAK,EAAC;EAAY,GAAC,cAAY,sBACnCO,mBAAA,CAAoD,OAApDwE,WAAoD,EAAAlE,gBAAA,CAAzBC,MAAA,CAAAkE,gBAAgB,iB,OAKvDvE,mBAAA,2BAA8B,EAC9BF,mBAAA,CAUM,OAVN0E,WAUM,GATF1E,mBAAA,CAQM,OARN2E,WAQM,G,4BAPF3E,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACvBO,mBAAA,CAA2C;IAAxCP,KAAK,EAAC;EAA6B,G,sBAE1CO,mBAAA,CAGM,OAHN4E,WAGM,G,4BAFF5E,mBAAA,CAA4C;IAAxCP,KAAK,EAAC;EAAY,GAAC,kBAAgB,sBACvCO,mBAAA,CAAmD,OAAnD6E,WAAmD,EAAAvE,gBAAA,CAAxBC,MAAA,CAAAuE,eAAe,iB,OAKtD5E,mBAAA,4BAA+B,EAC/BF,mBAAA,CAUM,OAVN+E,WAUM,GATF/E,mBAAA,CAQM,OARNgF,WAQM,G,4BAPFhF,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACvBO,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,G,sBAErCO,mBAAA,CAGM,OAHNiF,WAGM,G,4BAFFjF,mBAAA,CAA6C;IAAzCP,KAAK,EAAC;EAAY,GAAC,mBAAiB,sBACxCO,mBAAA,CAAoD,OAApDkF,WAAoD,EAAA5E,gBAAA,CAAzBC,MAAA,CAAA4E,gBAAgB,iB,SAM3DjF,mBAAA,kBAAqB,EACrBF,mBAAA,CAYM,OAZNoF,WAYM,GAXFpF,mBAAA,CAUM,OAVNqF,WAUM,GATFrF,mBAAA,CAQM,OARNsF,WAQM,GAPFtF,mBAAA,CAMM,OANNuF,WAMM,G,4BALFvF,mBAAA,CAGK;IAHDP,KAAK,EAAC;EAAY,IAClBO,mBAAA,CAAgC;IAA7BP,KAAK,EAAC;EAAkB,IAh9BvDY,gBAAA,CAg9B4D,qBAEpC,E,sBACAmF,YAAA,CAAiBjF,MAAA,mB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
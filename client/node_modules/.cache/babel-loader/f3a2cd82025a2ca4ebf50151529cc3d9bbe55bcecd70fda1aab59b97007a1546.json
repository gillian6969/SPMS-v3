{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown\"\n};\nconst _hoisted_4 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_6 = {\n  class: \"mb-3\"\n};\nconst _hoisted_7 = {\n  class: \"mb-3\"\n};\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_15 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_16 = [\"max\"];\nconst _hoisted_17 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_18 = [\"max\"];\nconst _hoisted_19 = {\n  class: \"row g-4\"\n};\nconst _hoisted_20 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_21 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_22 = {\n  class: \"card-info\"\n};\nconst _hoisted_23 = {\n  class: \"stat-value\"\n};\nconst _hoisted_24 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_25 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_26 = {\n  class: \"card-info\"\n};\nconst _hoisted_27 = {\n  class: \"stat-value\"\n};\nconst _hoisted_28 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_29 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_30 = {\n  class: \"card-info\"\n};\nconst _hoisted_31 = {\n  class: \"stat-value\"\n};\nconst _hoisted_32 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_33 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_34 = {\n  class: \"card-info\"\n};\nconst _hoisted_35 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_36 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_37 = {\n  class: \"row mt-4\"\n};\nconst _hoisted_38 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_39 = {\n  class: \"dashboard-card h-100\"\n};\nconst _hoisted_40 = {\n  class: \"card-info\"\n};\nconst _hoisted_41 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_42 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_43 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_44 = {\n  class: \"dashboard-card h-100\"\n};\nconst _hoisted_45 = {\n  class: \"card-info\"\n};\nconst _hoisted_46 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_47 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_48 = {\n  class: \"row mb-4 mt-4\"\n};\nconst _hoisted_49 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_50 = {\n  class: \"chart-card\"\n};\nconst _hoisted_51 = {\n  class: \"card-body\"\n};\nconst _hoisted_52 = {\n  class: \"chart-container\"\n};\nconst _hoisted_53 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_54 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_55 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_56 = {\n  class: \"chart-card\"\n};\nconst _hoisted_57 = {\n  class: \"card-body\"\n};\nconst _hoisted_58 = {\n  class: \"chart-container\"\n};\nconst _hoisted_59 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_60 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_61 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_62 = {\n  class: \"chart-card\"\n};\nconst _hoisted_63 = {\n  class: \"card-body\"\n};\nconst _hoisted_64 = {\n  class: \"chart-container\"\n};\nconst _hoisted_65 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_66 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_67 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_68 = {\n  class: \"chart-card\"\n};\nconst _hoisted_69 = {\n  class: \"card-body\"\n};\nconst _hoisted_70 = {\n  class: \"chart-container\"\n};\nconst _hoisted_71 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_72 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_73 = {\n  class: \"card mb-4\"\n};\nconst _hoisted_74 = {\n  class: \"card-body\"\n};\nconst _hoisted_75 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_76 = {\n  class: \"table\"\n};\nconst _hoisted_77 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[19] || (_cache[19] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", _hoisted_4, [_cache[7] || (_cache[7] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[17] || (_cache[17] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, _cache[8] || (_cache[8] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-6900940c>All Years</option><option value=\\\"1st\\\" data-v-6900940c>1st Year</option><option value=\\\"2nd\\\" data-v-6900940c>2nd Year</option><option value=\\\"3rd\\\" data-v-6900940c>3rd Year</option><option value=\\\"4th\\\" data-v-6900940c>4th Year</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_7, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[10] || (_cache[10] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_8), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[12] || (_cache[12] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_11), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_16), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_17, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_18), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[18] || (_cache[18] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.applyFilters && _ctx.applyFilters(...args))\n  }, \"Apply Filters\")])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_19, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_cache[21] || (_cache[21] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_22, [_cache[20] || (_cache[20] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_23, _toDisplayString($setup.totalStudents), 1 /* TEXT */)])])]), _createCommentVNode(\" Total Sections Card \"), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"div\", _hoisted_25, [_cache[23] || (_cache[23] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_26, [_cache[22] || (_cache[22] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_27, _toDisplayString($setup.totalSections), 1 /* TEXT */)])])]), _createCommentVNode(\" Total Subjects Card \"), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, [_cache[25] || (_cache[25] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-book\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_30, [_cache[24] || (_cache[24] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"My Subjects\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_31, _toDisplayString($setup.totalSubjects), 1 /* TEXT */)])])]), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"div\", _hoisted_33, [_cache[27] || (_cache[27] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_34, [_cache[26] || (_cache[26] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Class Average\", -1 /* HOISTED */)), $setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_35, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_36, \"No data available\"))])])])]), _createCommentVNode(\" Secondary Stats Row \"), _createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_createElementVNode(\"div\", _hoisted_39, [_cache[29] || (_cache[29] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clock\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_40, [_cache[28] || (_cache[28] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Average Attendance\", -1 /* HOISTED */)), $setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_41, _toDisplayString($setup.formattedAttendanceRate), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_42, \"No attendance data available\"))])])]), _createElementVNode(\"div\", _hoisted_43, [_createElementVNode(\"div\", _hoisted_44, [_cache[31] || (_cache[31] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_45, [_cache[30] || (_cache[30] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Assessment Completion\", -1 /* HOISTED */)), $setup.hasAssessmentData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_46, _toDisplayString(_ctx.assessmentCompletion) + \"%\", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_47, \"No assessment data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_48, [_createCommentVNode(\" Attendance Statistics Chart \"), _createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"div\", _hoisted_50, [_createElementVNode(\"div\", _hoisted_51, [_cache[32] || (_cache[32] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clock me-2\"\n  }), _createTextVNode(\" Attendance Statistics \")], -1 /* HOISTED */)), _cache[33] || (_cache[33] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Overview of student attendance patterns\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_52, [_createElementVNode(\"canvas\", _hoisted_53, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_54, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_55, [_createElementVNode(\"div\", _hoisted_56, [_createElementVNode(\"div\", _hoisted_57, [_cache[34] || (_cache[34] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[35] || (_cache[35] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores and passing rates by assessment type\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_58, [_createElementVNode(\"canvas\", _hoisted_59, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_60, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_61, [_createElementVNode(\"div\", _hoisted_62, [_createElementVNode(\"div\", _hoisted_63, [_cache[36] || (_cache[36] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[37] || (_cache[37] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Class average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_64, [_createElementVNode(\"canvas\", _hoisted_65, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_66, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Performance \"), _createElementVNode(\"div\", _hoisted_67, [_createElementVNode(\"div\", _hoisted_68, [_createElementVNode(\"div\", _hoisted_69, [_cache[38] || (_cache[38] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[39] || (_cache[39] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_70, [_createElementVNode(\"canvas\", _hoisted_71, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_72, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])])]), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_73, [_createElementVNode(\"div\", _hoisted_74, [_cache[42] || (_cache[42] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, \"Recent Activity\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_75, [_createElementVNode(\"table\", _hoisted_76, [_cache[41] || (_cache[41] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Activity\"), _createElementVNode(\"th\", null, \"Details\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [!$setup.hasActivity ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_77, _cache[40] || (_cache[40] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, \"No recent activity\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.recentActivities, activity => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: activity.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(_ctx.formatDate(activity.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.details), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_createTextVNode","_toDisplayString","_ctx","getFilterDisplay","_hoisted_5","_hoisted_6","_cache","$event","$setup","selectedYear","onChange","args","handleYearChange","_createStaticVNode","_hoisted_7","selectedSection","disabled","value","_Fragment","_renderList","sections","section","_hoisted_9","_hoisted_8","_hoisted_10","selectedSubject","subjects","subject","_hoisted_12","_hoisted_11","_hoisted_13","_hoisted_14","_hoisted_15","selectedStartDate","max","today","_hoisted_16","_hoisted_17","selectedEndDate","_hoisted_18","onClick","applyFilters","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","totalStudents","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","totalSections","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","totalSubjects","_hoisted_32","_hoisted_33","_hoisted_34","hasPerformanceData","_hoisted_35","averageScore","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","hasAttendanceData","_hoisted_41","formattedAttendanceRate","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","hasAssessmentData","_hoisted_46","assessmentCompletion","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","hasActivity","_hoisted_77","colspan","recentActivities","activity","formatDate","date","details"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\">{{ totalStudents }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\">{{ totalSections }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\">{{ totalSubjects }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Secondary Stats Row -->\n    <div class=\"row mt-4\">\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card h-100\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-clock\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"hasAttendanceData\">{{ formattedAttendanceRate }}</div>\n            <div class=\"no-data\" v-else>No attendance data available</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card h-100\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-tasks\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Assessment Completion</h3>\n            <div class=\"stat-value\" v-if=\"hasAssessmentData\">{{ assessmentCompletion }}%</div>\n            <div class=\"no-data\" v-else>No assessment data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4 mt-4\">\n      <!-- Attendance Statistics Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-clock me-2\"></i>\n              Attendance Statistics\n            </h5>\n            <p class=\"chart-description\">Overview of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores and passing rates by assessment type</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Reactive properties\n    const totalAttendanceRecords = ref(0)\n    const attendanceRate = ref(0)\n    \n    // Data availability flags\n    const hasPerformanceData = ref(false)\n    const hasAttendanceData = ref(false)\n    const hasAssessmentData = ref(false)\n    const hasActivity = ref(false)\n    \n    // Computed properties\n    const formattedAttendanceRate = computed(() => {\n      return `${attendanceRate.value.toFixed(1)}%`\n    })\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n          \n          sections.value = uniqueSections.sort()\n          subjects.value = uniqueSubjects.sort()\n          \n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize with dummy data when no real data is available\n    const initDummyData = () => {\n      // Reset flags\n      hasPerformanceData.value = false;\n      hasAttendanceData.value = true; // Always show attendance chart with dummy data\n      hasAssessmentData.value = false;\n      hasActivity.value = false;\n      \n      // Basic stats\n      totalStudents.value = 0;\n      totalSections.value = 0;\n      totalSubjects.value = 0;\n      averageScore.value = 0;\n      \n      // Set up dummy charts\n      updatePerformanceChart({\n        attendanceStats: {\n          present: 0,\n          absent: 0,\n          late: 0,\n          excused: 0\n        }\n      });\n      \n      updatePerformanceTrendChart([]);\n      updateAssessmentTypeChart({ assessmentData: [] });\n      updateAssessmentTypePerformanceChart({});\n      \n      // Empty activities\n      recentActivities.value = [];\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data:', response.data);\n        \n        // Update basic stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.activeSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        averageScore.value = response.data.averageScore || 0;\n        \n        // Create attendance data structure if not provided by server\n        const attendanceStats = response.data.attendanceStats || {\n          present: response.data.attendancePresent || 0,\n          absent: response.data.attendanceAbsent || 0,\n          late: response.data.attendanceLate || 0,\n          excused: response.data.attendanceExcused || 0\n        };\n        \n        // Update flag for UI\n        hasPerformanceData.value = !!response.data.averageScore;\n        hasAttendanceData.value = true; // Always show attendance chart\n        hasAssessmentData.value = Array.isArray(response.data.assessmentTypeDistribution) && \n                                   response.data.assessmentTypeDistribution.length > 0;\n        hasActivity.value = Array.isArray(response.data.recentActivities) && \n                            response.data.recentActivities.length > 0;\n                            \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart\n        updatePerformanceChart({\n          attendanceStats: attendanceStats\n        });\n        \n        // Update other charts\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        if (hasAssessmentData.value) {\n          // Update assessment data for the new chart\n          updateAssessmentTypeChart({\n            assessmentData: response.data.assessmentData || response.data.assessmentTypeDistribution.map(item => ({\n              type: item.type,\n              averageScore: item.averageScore || 0,\n              count: item.count || 0\n            }))\n          });\n        } else {\n          updateAssessmentTypeChart({\n            assessmentData: [\n              { type: 'Quiz', averageScore: 0 },\n              { type: 'Activity', averageScore: 0 },\n              { type: 'Performance Task', averageScore: 0 }\n            ]\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      // Process attendance data\n      const attendanceData = data.attendanceStats || {\n        present: 0,\n        absent: 0,\n        late: 0,\n        excused: 0\n      };\n      \n      // Calculate total records\n      const totalRecords = \n        (attendanceData.present || 0) + \n        (attendanceData.absent || 0) + \n        (attendanceData.late || 0) + \n        (attendanceData.excused || 0);\n      \n      totalAttendanceRecords.value = totalRecords;\n      \n      // Calculate attendance rate (present + excused) / total * 100\n      if (totalRecords > 0) {\n        attendanceRate.value = ((attendanceData.present + attendanceData.excused) / totalRecords) * 100;\n      } else {\n        attendanceRate.value = 0;\n      }\n      \n      // Prepare chart data\n      const chartData = {\n        labels: ['Present', 'Absent', 'Late', 'Excused'],\n        datasets: [{\n          data: [\n            attendanceData.present || 0,\n            attendanceData.absent || 0,\n            attendanceData.late || 0,\n            attendanceData.excused || 0\n          ],\n          backgroundColor: [\n            'rgba(39, 174, 96, 0.7)',  // Green for present\n            'rgba(231, 76, 60, 0.7)',  // Red for absent\n            'rgba(241, 196, 15, 0.7)', // Yellow for late\n            'rgba(52, 152, 219, 0.7)'  // Blue for excused\n          ],\n          borderColor: [\n            'rgba(39, 174, 96, 1)',\n            'rgba(231, 76, 60, 1)',\n            'rgba(241, 196, 15, 1)',\n            'rgba(52, 152, 219, 1)'\n          ],\n          borderWidth: 1,\n          hoverOffset: 4\n        }]\n      };\n      \n      // Chart options\n      const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right',\n            labels: {\n              font: {\n                family: \"'Poppins', sans-serif\",\n                size: 12\n              },\n              padding: 20\n            }\n          },\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                const label = context.label || '';\n                const value = context.raw || 0;\n                const percentage = totalRecords > 0 \n                  ? ((value / totalRecords) * 100).toFixed(1) + '%' \n                  : '0%';\n                return `${label}: ${value} (${percentage})`;\n              }\n            }\n          },\n          datalabels: {\n            display: totalRecords > 0,\n            formatter: (value, ctx) => {\n              if (value === 0) return '';\n              return totalRecords > 0 \n                ? ((value / totalRecords) * 100).toFixed(0) + '%' \n                : '';\n            },\n            color: '#fff',\n            font: {\n              weight: 'bold'\n            }\n          }\n        }\n      };\n      \n      // Check if chart instance exists and destroy it\n      if (performanceChart.value) {\n        performanceChart.value.destroy();\n      }\n      \n      // Get canvas element\n      const ctx = document.getElementById('performanceDistChart');\n      \n      if (ctx) {\n        // Create new chart\n        performanceChart.value = new Chart(ctx, {\n          type: 'doughnut',\n          data: chartData,\n          options: options,\n          plugins: [ChartDataLabels]\n        });\n      } else {\n        console.error('Canvas element not found');\n      }\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Create more performance-focused data\n      // We will display average scores by assessment type, not just counts\n      \n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n          assessmentData.passRates[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        \n        // Calculate average scores and pass rates per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n            \n            // Calculate pass rate\n            const passingCount = typeAssessments.filter(a => (parseFloat(a.averageScore) || 0) >= 70).length;\n            assessmentData.passRates[type] = ((passingCount / totalCount) * 100).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n            assessmentData.passRates[type] = 0;\n          }\n        });\n      }\n      \n      // Create dual-axis chart showing both average scores and pass rates\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: 'rgba(59, 130, 246, 0.8)', // Blue\n              borderColor: 'rgb(45, 110, 220)',\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6,\n              order: 2\n            },\n            {\n              label: 'Pass Rate (%)',\n              data: assessmentTypes.map(type => assessmentData.passRates[type]),\n              backgroundColor: 'rgba(0, 0, 0, 0)', // Transparent background\n              borderColor: 'rgb(20, 170, 100)', // Green\n              borderWidth: 3,\n              type: 'line',\n              pointStyle: 'circle',\n              pointRadius: 6,\n              pointBackgroundColor: 'rgb(20, 170, 100)',\n              tension: 0.3,\n              order: 1,\n              yAxisID: 'y1'\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            y1: {\n              beginAtZero: true,\n              max: 100,\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Pass Rate (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                drawOnChartArea: false\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  size: 12\n                },\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n      \n      // Add summary section to chart to show key insights\n      const chartContainer = assessmentTypeChart.value.parentNode;\n      \n      // Create or update summary div\n      let summaryDiv = chartContainer.querySelector('.assessment-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('assessment-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n      \n      // Calculate the highest performing assessment type\n      let highestType = assessmentTypes[0];\n      let highestScore = parseFloat(assessmentData.averageScores[assessmentTypes[0]]) || 0;\n      \n      assessmentTypes.forEach(type => {\n        const score = parseFloat(assessmentData.averageScores[type]) || 0;\n        if (score > highestScore) {\n          highestScore = score;\n          highestType = type;\n        }\n      });\n      \n      // Add insightful summary\n      summaryDiv.innerHTML = `\n        <div class=\"assessment-insight\">\n          <div class=\"insight-title\">Performance Insights:</div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Highest performing assessment type:</span>\n            <span class=\"insight-value\">${highestType} (${highestScore}%)</span>\n          </div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Total assessments analyzed:</span>\n            <span class=\"insight-value\">${assessmentTypes.reduce((sum, type) => sum + (assessmentData.totalCounts[type] || 0), 0)}</span>\n          </div>\n        </div>\n      `;\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    // When mounted, load initial data\n    onMounted(async () => {\n      await fetchTeacherSectionsAndSubjects();\n      initDummyData(); // Initialize with dummy data first\n      await fetchDashboardData();\n      \n      // Set up date range filter defaults\n      if (!selectedStartDate.value) {\n        selectedStartDate.value = moment().subtract(30, 'days').format('YYYY-MM-DD');\n      }\n      if (!selectedEndDate.value) {\n        selectedEndDate.value = today.value;\n      }\n    })\n\n    // Return values for template\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      formattedAttendanceRate,\n      attendanceRate,\n      totalAttendanceRecords,\n      hasPerformanceData,\n      hasAttendanceData,\n      hasAssessmentData,\n      hasActivity,\n      performanceChart,\n      performanceTrendChart,\n      assessmentTypeChart,\n      assessmentTypePerformanceChart,\n      handleYearChange,\n      handleSearch,\n      fetchDashboardData,\n      resetFilters\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Performance Summary Styles */\n.performance-summary {\n  margin-top: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 0.75rem;\n  border: 1px solid #e2e8f0;\n}\n\n.summary-stats {\n  display: flex;\n  justify-content: space-around;\n  gap: 1rem;\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  min-width: 120px;\n}\n\n.stat-item.passing {\n  background-color: rgba(52, 211, 153, 0.15);\n  border-left: 4px solid rgb(52, 211, 153);\n}\n\n.stat-item.failing {\n  background-color: rgba(239, 68, 68, 0.15);\n  border-left: 4px solid rgb(239, 68, 68);\n}\n\n.stat-item .stat-value {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 0.25rem;\n}\n\n.stat-item.passing .stat-value {\n  color: rgb(20, 150, 80);\n}\n\n.stat-item.failing .stat-value {\n  color: rgb(220, 50, 50);\n}\n\n.stat-item .stat-label {\n  font-size: 0.8rem;\n  font-weight: 500;\n  color: #64748b;\n}\n\n/* Assessment Insights Styles */\n.assessment-summary {\n  margin-top: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n  border: 1px solid #e2e8f0;\n}\n\n.assessment-insight {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.insight-title {\n  font-weight: 700;\n  font-size: 0.9rem;\n  color: #1e293b;\n  margin-bottom: 0.25rem;\n}\n\n.insight-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n.insight-label {\n  font-size: 0.85rem;\n  color: #64748b;\n}\n\n.insight-value {\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: #003366;\n  padding: 0.25rem 0.5rem;\n  background-color: rgba(0, 51, 102, 0.1);\n  border-radius: 4px;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
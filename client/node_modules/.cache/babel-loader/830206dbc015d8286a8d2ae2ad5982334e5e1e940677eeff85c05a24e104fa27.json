{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withModifiers as _withModifiers, normalizeClass as _normalizeClass, withDirectives as _withDirectives, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, vModelRadio as _vModelRadio, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"attendance-view\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex align-items-center gap-3\"\n};\nconst _hoisted_5 = [\"disabled\"];\nconst _hoisted_6 = {\n  class: \"d-flex justify-content-between align-items-center mb-3\"\n};\nconst _hoisted_7 = {\n  class: \"card\"\n};\nconst _hoisted_8 = {\n  class: \"card-body\"\n};\nconst _hoisted_9 = {\n  class: \"table-controls d-flex justify-content-between align-items-center mb-3\"\n};\nconst _hoisted_10 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_11 = {\n  class: \"table table-hover\"\n};\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = {\n  class: \"attendance-status-container\"\n};\nconst _hoisted_14 = [\"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_15 = [\"selected\"];\nconst _hoisted_16 = [\"selected\"];\nconst _hoisted_17 = [\"selected\"];\nconst _hoisted_18 = {\n  key: 0\n};\nconst _hoisted_19 = {\n  colspan: \"4\",\n  class: \"text-center py-4\"\n};\nconst _hoisted_20 = {\n  class: \"empty-state-message\"\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"text-muted small\"\n};\nconst _hoisted_22 = {\n  class: \"pagination-controls mt-3 d-flex justify-content-between align-items-center\"\n};\nconst _hoisted_23 = {\n  class: \"pagination-info\"\n};\nconst _hoisted_24 = {\n  class: \"d-flex align-items-center\"\n};\nconst _hoisted_25 = {\n  class: \"pagination-buttons\"\n};\nconst _hoisted_26 = [\"disabled\"];\nconst _hoisted_27 = [\"disabled\"];\nconst _hoisted_28 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_29 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_30 = {\n  class: \"calendar-body\"\n};\nconst _hoisted_31 = {\n  class: \"input-group\"\n};\nconst _hoisted_32 = [\"value\", \"max\"];\nconst _hoisted_33 = {\n  class: \"quick-date-buttons mt-3\"\n};\nconst _hoisted_34 = {\n  class: \"table\"\n};\nconst _hoisted_35 = {\n  key: 0\n};\nconst _hoisted_36 = {\n  key: 2,\n  class: \"modal-wrapper\"\n};\nconst _hoisted_37 = {\n  class: \"modal-header\"\n};\nconst _hoisted_38 = {\n  class: \"modal-body\"\n};\nconst _hoisted_39 = {\n  class: \"form-group mb-3\"\n};\nconst _hoisted_40 = {\n  class: \"d-flex\"\n};\nconst _hoisted_41 = {\n  class: \"form-check me-3\"\n};\nconst _hoisted_42 = {\n  class: \"form-check\"\n};\nconst _hoisted_43 = {\n  class: \"form-group mb-3\"\n};\nconst _hoisted_44 = {\n  class: \"d-flex flex-column\"\n};\nconst _hoisted_45 = {\n  class: \"form-check mb-2\"\n};\nconst _hoisted_46 = {\n  class: \"form-check\"\n};\nconst _hoisted_47 = {\n  key: 0,\n  class: \"row g-2 mb-3\"\n};\nconst _hoisted_48 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_49 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_50 = {\n  class: \"modal-footer\"\n};\nconst _hoisted_51 = [\"disabled\"];\nconst _hoisted_52 = {\n  key: 0\n};\nconst _hoisted_53 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StudentDetailsModal = _resolveComponent(\"StudentDetailsModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Control Buttons and Date Navigation \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Any attendance-specific buttons can go here \"), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.refreshAttendance && $setup.refreshAttendance(...args)),\n    title: \"Refresh attendance data from database\"\n  }, _cache[30] || (_cache[30] = [_createElementVNode(\"i\", {\n    class: \"fas fa-sync-alt me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Refresh Attendance \")])), _createCommentVNode(\" Export Button \"), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.showExportModal = true)\n  }, _cache[31] || (_cache[31] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export \")]))]), _createCommentVNode(\" Date Navigation \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[2] || (_cache[2] = $event => $setup.navigateDate(-1))\n  }, _cache[32] || (_cache[32] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"div\", {\n    class: \"date-display\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.openCalendarPopup && $setup.openCalendarPopup(...args)),\n    role: \"button\"\n  }, _toDisplayString($setup.formatDate($setup.currentDate)), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[4] || (_cache[4] = $event => $setup.navigateDate(1)),\n    disabled: $setup.isNextDayDisabled\n  }, _cache[33] || (_cache[33] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_5)])]), _createCommentVNode(\" Add this to the template section in the controls area, before the table \"), _createElementVNode(\"div\", _hoisted_6, [_cache[35] || (_cache[35] = _createElementVNode(\"div\", {\n    class: \"d-flex align-items-center\"\n  }, [_createCommentVNode(\" Existing filter controls \")], -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[5] || (_cache[5] = $event => $setup.showExportModal = true)\n  }, _cache[34] || (_cache[34] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Export \")]))]), _createCommentVNode(\" Attendance Table \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" Table Controls \"), _createElementVNode(\"div\", _hoisted_9, [_cache[37] || (_cache[37] = _createElementVNode(\"div\", {\n    class: \"d-flex align-items-center\"\n  }, [_createCommentVNode(\" Existing search and filter controls \")], -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[6] || (_cache[6] = $event => $setup.showExportModal = true)\n  }, _cache[36] || (_cache[36] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Export \")]))]), _createCommentVNode(\" Table \"), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"table\", _hoisted_11, [_cache[41] || (_cache[41] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Student Number\"), _createElementVNode(\"th\", null, \"Last Name\"), _createElementVNode(\"th\", null, \"First Name\"), _createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.paginatedStudents, student => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: student.studentNumber,\n      class: _normalizeClass([\"clickable-row\", {\n        'status-row-present': student.currentStatus === 'present',\n        'status-row-absent': student.currentStatus === 'absent',\n        'status-row-late': student.currentStatus === 'late'\n      }]),\n      onClick: $event => $setup.viewStudentDetails(student)\n    }, [_createElementVNode(\"td\", null, _toDisplayString(student.studentNumber), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.lastName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.firstName), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_13, [_withDirectives(_createElementVNode(\"select\", {\n      class: _normalizeClass([\"form-select form-select-sm attendance-select\", {\n        'select-present': student.currentStatus === 'present',\n        'select-absent': student.currentStatus === 'absent',\n        'select-late': student.currentStatus === 'late',\n        'select-none': student.currentStatus === 'none'\n      }]),\n      \"onUpdate:modelValue\": $event => student.currentStatus = $event,\n      onChange: $event => $setup.markAttendance(student, $event.target.value),\n      onClick: _cache[7] || (_cache[7] = _withModifiers(() => {}, [\"stop\"]))\n    }, [_cache[38] || (_cache[38] = _createElementVNode(\"option\", {\n      value: \"none\"\n    }, \"Not marked\", -1 /* HOISTED */)), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'present',\n      value: \"present\"\n    }, \"Present\", 8 /* PROPS */, _hoisted_15), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'absent',\n      value: \"absent\"\n    }, \"Absent\", 8 /* PROPS */, _hoisted_16), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'late',\n      value: \"late\"\n    }, \"Late\", 8 /* PROPS */, _hoisted_17)], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_14), [[_vModelSelect, student.currentStatus]]), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"status-indicator\", {\n        'indicator-present': student.currentStatus === 'present',\n        'indicator-absent': student.currentStatus === 'absent',\n        'indicator-late': student.currentStatus === 'late',\n        'indicator-none': student.currentStatus === 'none'\n      }])\n    }, [_createElementVNode(\"i\", {\n      class: _normalizeClass([\"fas\", {\n        'fa-check-circle': student.currentStatus === 'present',\n        'fa-times-circle': student.currentStatus === 'absent',\n        'fa-exclamation-circle': student.currentStatus === 'late',\n        'fa-question-circle': student.currentStatus === 'none'\n      }])\n    }, null, 2 /* CLASS */)], 2 /* CLASS */)])])], 10 /* CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */)), $setup.paginatedStudents.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_18, [_createElementVNode(\"td\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_cache[39] || (_cache[39] = _createElementVNode(\"i\", {\n    class: \"fas fa-users text-muted mb-2\"\n  }, null, -1 /* HOISTED */)), _cache[40] || (_cache[40] = _createElementVNode(\"p\", {\n    class: \"mb-0\"\n  }, \"No students found\", -1 /* HOISTED */)), $setup.selectedYear || $setup.selectedSection || $setup.selectedSubject ? (_openBlock(), _createElementBlock(\"p\", _hoisted_21, \" Try adjusting your filters \")) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Pagination Controls \"), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, \" Showing \" + _toDisplayString($setup.paginationInfo.start) + \" to \" + _toDisplayString($setup.paginationInfo.end) + \" of \" + _toDisplayString($setup.sortedStudents.length) + \" entries \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary me-2\",\n    onClick: _cache[8] || (_cache[8] = $event => $setup.showExportModal = true)\n  }, _cache[42] || (_cache[42] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export \")])), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary me-2\",\n    onClick: _cache[9] || (_cache[9] = (...args) => $setup.previousPage && $setup.previousPage(...args)),\n    disabled: $setup.currentPage === 1\n  }, _cache[43] || (_cache[43] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Previous \")]), 8 /* PROPS */, _hoisted_26), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[10] || (_cache[10] = (...args) => $setup.nextPage && $setup.nextPage(...args)),\n    disabled: $setup.currentPage >= $setup.totalPages\n  }, _cache[44] || (_cache[44] = [_createTextVNode(\" Next \"), _createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right ms-1\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_27)])])])])]), _createCommentVNode(\" Calendar Popup \"), $setup.showCalendarPopup ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"calendar-popup\",\n    onClick: _cache[16] || (_cache[16] = _withModifiers($event => $setup.showCalendarPopup = false, [\"self\"]))\n  }, [_createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, [_cache[45] || (_cache[45] = _createElementVNode(\"h6\", {\n    class: \"mb-0\"\n  }, \"Select Date\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[11] || (_cache[11] = $event => $setup.showCalendarPopup = false)\n  })]), _createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[46] || (_cache[46] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-day\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    value: $setup.formatDateForInput($setup.currentDate),\n    max: $setup.formatDateForInput(new Date()),\n    onChange: _cache[12] || (_cache[12] = $event => {\n      $setup.setCurrentDate($event.target.value);\n      $setup.showCalendarPopup = false;\n    })\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_32)]), _createCommentVNode(\" Quick Date Buttons \"), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-outline-secondary\",\n    onClick: _cache[13] || (_cache[13] = $event => {\n      $setup.navigateDate(-7);\n      $setup.showCalendarPopup = false;\n    })\n  }, _cache[47] || (_cache[47] = [_createElementVNode(\"i\", {\n    class: \"fas fa-angle-double-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Last Week \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-outline-secondary\",\n    onClick: _cache[14] || (_cache[14] = $event => {\n      $setup.navigateDate(-1);\n      $setup.showCalendarPopup = false;\n    })\n  }, _cache[48] || (_cache[48] = [_createElementVNode(\"i\", {\n    class: \"fas fa-angle-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Yesterday \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-primary\",\n    onClick: _cache[15] || (_cache[15] = $event => {\n      $setup.setCurrentDate($setup.formatDateForInput(new Date()));\n      $setup.showCalendarPopup = false;\n    })\n  }, \" Today \")])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Student Details Modal \"), _createVNode(_component_StudentDetailsModal, {\n    show: !!$setup.selectedStudent,\n    student: $setup.selectedStudent || {},\n    \"year-level\": $setup.selectedYear,\n    section: $setup.selectedSection,\n    subject: $setup.selectedSubject,\n    title: \"Student Attendance Details\",\n    \"chart-title\": \"Attendance Overview\",\n    \"history-title\": \"Attendance History\",\n    \"chart-id\": `attendanceChart-${$setup.selectedStudent?.studentId}`,\n    \"is-class-record\": false,\n    \"onUpdate:show\": _cache[17] || (_cache[17] = value => !value && ($setup.selectedStudent = null)),\n    onClose: _cache[18] || (_cache[18] = $event => $setup.selectedStudent = null)\n  }, {\n    \"history-table\": _withCtx(() => [_createElementVNode(\"table\", _hoisted_34, [_cache[50] || (_cache[50] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [!$setup.selectedStudent?.attendanceHistory || $setup.selectedStudent.attendanceHistory.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_35, _cache[49] || (_cache[49] = [_createElementVNode(\"td\", {\n      colspan: \"2\",\n      class: \"text-center py-3 text-muted\"\n    }, [_createElementVNode(\"i\", {\n      class: \"fas fa-info-circle me-2\"\n    }), _createTextVNode(\"No attendance records found. \")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedStudent?.attendanceHistory, record => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: record.date\n      }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(record.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n        class: _normalizeClass([\"badge\", {\n          'bg-success': record.status === 'present',\n          'bg-danger': record.status === 'absent',\n          'bg-warning': record.status === 'late'\n        }])\n      }, _toDisplayString(record.status.charAt(0).toUpperCase() + record.status.slice(1)), 3 /* TEXT, CLASS */)])]);\n    }), 128 /* KEYED_FRAGMENT */))])])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\", \"student\", \"year-level\", \"section\", \"subject\", \"chart-id\"]), _createCommentVNode(\" Export Modal \"), $setup.showExportModal ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"modal-backdrop\",\n    onClick: _cache[19] || (_cache[19] = $event => $setup.showExportModal = false)\n  })) : _createCommentVNode(\"v-if\", true), $setup.showExportModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, [_createElementVNode(\"div\", {\n    class: \"modal-content\",\n    onClick: _cache[29] || (_cache[29] = _withModifiers(() => {}, [\"stop\"]))\n  }, [_createElementVNode(\"div\", _hoisted_37, [_cache[51] || (_cache[51] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Export Attendance\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[20] || (_cache[20] = $event => $setup.showExportModal = false),\n    \"aria-label\": \"Close\"\n  })]), _createElementVNode(\"div\", _hoisted_38, [_createElementVNode(\"div\", _hoisted_39, [_cache[54] || (_cache[54] = _createElementVNode(\"label\", null, \"Export Format\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"div\", _hoisted_41, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    id: \"formatCsv\",\n    value: \"csv\",\n    \"onUpdate:modelValue\": _cache[21] || (_cache[21] = $event => $setup.exportFormat = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportFormat]]), _cache[52] || (_cache[52] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"formatCsv\"\n  }, \"CSV\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_42, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    id: \"formatExcel\",\n    value: \"excel\",\n    \"onUpdate:modelValue\": _cache[22] || (_cache[22] = $event => $setup.exportFormat = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportFormat]]), _cache[53] || (_cache[53] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"formatExcel\"\n  }, \"Excel\", -1 /* HOISTED */))])])]), _createElementVNode(\"div\", _hoisted_43, [_cache[57] || (_cache[57] = _createElementVNode(\"label\", null, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_44, [_createElementVNode(\"div\", _hoisted_45, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    id: \"rangeCurrent\",\n    value: \"current\",\n    \"onUpdate:modelValue\": _cache[23] || (_cache[23] = $event => $setup.exportDateRange = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportDateRange]]), _cache[55] || (_cache[55] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"rangeCurrent\"\n  }, \"Current Date Only\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_46, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    id: \"rangeCustom\",\n    value: \"custom\",\n    \"onUpdate:modelValue\": _cache[24] || (_cache[24] = $event => $setup.exportDateRange = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportDateRange]]), _cache[56] || (_cache[56] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"rangeCustom\"\n  }, \"Custom Date Range\", -1 /* HOISTED */))])])]), $setup.exportDateRange === 'custom' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_47, [_createElementVNode(\"div\", _hoisted_48, [_cache[58] || (_cache[58] = _createElementVNode(\"label\", null, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[25] || (_cache[25] = $event => $setup.exportStartDate = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportStartDate]])]), _createElementVNode(\"div\", _hoisted_49, [_cache[59] || (_cache[59] = _createElementVNode(\"label\", null, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[26] || (_cache[26] = $event => $setup.exportEndDate = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportEndDate]])])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_50, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-outline-secondary\",\n    onClick: _cache[27] || (_cache[27] = $event => $setup.showExportModal = false)\n  }, \"Cancel\"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    onClick: _cache[28] || (_cache[28] = (...args) => $setup.handleExport && $setup.handleExport(...args)),\n    disabled: $setup.isExporting\n  }, [$setup.isExporting ? (_openBlock(), _createElementBlock(\"span\", _hoisted_52, _cache[60] || (_cache[60] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Exporting... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_53, \"Export\"))], 8 /* PROPS */, _hoisted_51)])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","colspan","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","onClick","_cache","args","$setup","refreshAttendance","title","_createTextVNode","$event","showExportModal","_hoisted_4","navigateDate","openCalendarPopup","role","formatDate","currentDate","disabled","isNextDayDisabled","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_Fragment","_renderList","paginatedStudents","student","studentNumber","_normalizeClass","currentStatus","viewStudentDetails","_toDisplayString","lastName","firstName","_hoisted_13","onChange","markAttendance","target","value","_withModifiers","selected","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_14","_hoisted_12","length","_hoisted_18","_hoisted_19","_hoisted_20","selectedYear","selectedSection","selectedSubject","_hoisted_21","_hoisted_22","_hoisted_23","paginationInfo","start","end","sortedStudents","_hoisted_24","_hoisted_25","previousPage","currentPage","_hoisted_26","nextPage","totalPages","_hoisted_27","showCalendarPopup","_hoisted_28","_hoisted_29","type","_hoisted_30","_hoisted_31","formatDateForInput","max","Date","setCurrentDate","_hoisted_32","_hoisted_33","_createVNode","_component_StudentDetailsModal","show","selectedStudent","section","subject","studentId","onClose","_withCtx","_hoisted_34","attendanceHistory","_hoisted_35","record","date","status","charAt","toUpperCase","slice","_","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","id","exportFormat","for","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","exportDateRange","_hoisted_46","_hoisted_47","_hoisted_48","exportStartDate","_hoisted_49","exportEndDate","_hoisted_50","handleExport","isExporting","_hoisted_52","_hoisted_53","_hoisted_51"],"sources":["D:\\au_dev\\client\\src\\views\\Attendance.vue"],"sourcesContent":["<template>\r\n  <div class=\"attendance-view\">\r\n    <!-- Control Buttons and Date Navigation -->\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div class=\"d-flex gap-2\">\r\n        <!-- Any attendance-specific buttons can go here -->\r\n        <button \r\n          class=\"btn btn-outline-secondary\" \r\n          @click=\"refreshAttendance\"\r\n          title=\"Refresh attendance data from database\"\r\n        >\r\n          <i class=\"fas fa-sync-alt me-2\"></i> Refresh Attendance\r\n        </button>\r\n        \r\n        <!-- Export Button -->\r\n        <button \r\n          class=\"btn btn-outline-secondary\" \r\n          @click=\"showExportModal = true\"\r\n        >\r\n          <i class=\"fas fa-file-export me-2\"></i> Export\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Date Navigation -->\r\n      <div class=\"d-flex align-items-center gap-3\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"navigateDate(-1)\">\r\n          <i class=\"fas fa-chevron-left\"></i>\r\n        </button>\r\n        <div class=\"date-display\" @click=\"openCalendarPopup\" role=\"button\">\r\n          {{ formatDate(currentDate) }}\r\n        </div>\r\n        <button \r\n          class=\"btn btn-outline-primary\" \r\n          @click=\"navigateDate(1)\"\r\n          :disabled=\"isNextDayDisabled\"\r\n        >\r\n          <i class=\"fas fa-chevron-right\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add this to the template section in the controls area, before the table -->\r\n    <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n      <div class=\"d-flex align-items-center\">\r\n        <!-- Existing filter controls -->\r\n      </div>\r\n      <button class=\"btn btn-outline-primary\" @click=\"showExportModal = true\">\r\n        <i class=\"fas fa-file-export me-2\"></i>Export\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Attendance Table -->\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <!-- Table Controls -->\r\n        <div class=\"table-controls d-flex justify-content-between align-items-center mb-3\">\r\n          <div class=\"d-flex align-items-center\">\r\n            <!-- Existing search and filter controls -->\r\n          </div>\r\n          <button class=\"btn btn-outline-primary\" @click=\"showExportModal = true\">\r\n            <i class=\"fas fa-file-export me-2\"></i>Export\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Table -->\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n            <th>Student Number</th>\r\n                <th>Last Name</th>\r\n                <th>First Name</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr \r\n                v-for=\"student in paginatedStudents\" \r\n                  :key=\"student.studentNumber\" \r\n                  class=\"clickable-row\" \r\n                  @click=\"viewStudentDetails(student)\"\r\n                  :class=\"{\r\n                    'status-row-present': student.currentStatus === 'present',\r\n                    'status-row-absent': student.currentStatus === 'absent',\r\n                    'status-row-late': student.currentStatus === 'late'\r\n                  }\"\r\n            >\r\n              <td>{{ student.studentNumber }}</td>\r\n                  <td>{{ student.lastName }}</td>\r\n                  <td>{{ student.firstName }}</td>\r\n                  <td>\r\n                    <div class=\"attendance-status-container\">\r\n                      <select \r\n                        class=\"form-select form-select-sm attendance-select\"\r\n                        :class=\"{\r\n                          'select-present': student.currentStatus === 'present',\r\n                          'select-absent': student.currentStatus === 'absent',\r\n                          'select-late': student.currentStatus === 'late',\r\n                          'select-none': student.currentStatus === 'none'\r\n                        }\"\r\n                        v-model=\"student.currentStatus\"\r\n                        @change=\"markAttendance(student, $event.target.value)\"\r\n                        @click.stop\r\n                      >\r\n                        <option value=\"none\">Not marked</option>\r\n                        <option :selected=\"student.currentStatus === 'present'\" value=\"present\">Present</option>\r\n                        <option :selected=\"student.currentStatus === 'absent'\" value=\"absent\">Absent</option>\r\n                        <option :selected=\"student.currentStatus === 'late'\" value=\"late\">Late</option>\r\n                      </select>\r\n                      <div \r\n                        class=\"status-indicator\" \r\n                        :class=\"{\r\n                          'indicator-present': student.currentStatus === 'present',\r\n                          'indicator-absent': student.currentStatus === 'absent',\r\n                          'indicator-late': student.currentStatus === 'late',\r\n                          'indicator-none': student.currentStatus === 'none'\r\n                        }\"\r\n                      >\r\n                        <i \r\n                          class=\"fas\" \r\n                          :class=\"{\r\n                            'fa-check-circle': student.currentStatus === 'present',\r\n                            'fa-times-circle': student.currentStatus === 'absent',\r\n                            'fa-exclamation-circle': student.currentStatus === 'late',\r\n                            'fa-question-circle': student.currentStatus === 'none'\r\n                          }\"\r\n                        ></i>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n              </tr>\r\n              <tr v-if=\"paginatedStudents.length === 0\">\r\n                <td colspan=\"4\" class=\"text-center py-4\">\r\n                  <div class=\"empty-state-message\">\r\n                    <i class=\"fas fa-users text-muted mb-2\"></i>\r\n                    <p class=\"mb-0\">No students found</p>\r\n                    <p class=\"text-muted small\" v-if=\"selectedYear || selectedSection || selectedSubject\">\r\n                      Try adjusting your filters\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n        \r\n        <!-- Pagination Controls -->\r\n        <div class=\"pagination-controls mt-3 d-flex justify-content-between align-items-center\">\r\n          <div class=\"pagination-info\">\r\n            Showing {{ paginationInfo.start }} to {{ paginationInfo.end }} of {{ sortedStudents.length }} entries\r\n          </div>\r\n          <div class=\"d-flex align-items-center\">\r\n            <button \r\n              class=\"btn btn-outline-primary me-2\" \r\n              @click=\"showExportModal = true\"\r\n            >\r\n              <i class=\"fas fa-file-export me-1\"></i> Export\r\n            </button>\r\n            <div class=\"pagination-buttons\">\r\n              <button \r\n                class=\"btn btn-outline-primary me-2\" \r\n                @click=\"previousPage\" \r\n                :disabled=\"currentPage === 1\"\r\n              >\r\n                <i class=\"fas fa-chevron-left me-1\"></i> Previous\r\n              </button>\r\n              <button \r\n                class=\"btn btn-outline-primary\" \r\n                @click=\"nextPage\" \r\n                :disabled=\"currentPage >= totalPages\"\r\n              >\r\n                Next <i class=\"fas fa-chevron-right ms-1\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Calendar Popup -->\r\n    <div class=\"calendar-popup\" v-if=\"showCalendarPopup\" @click.self=\"showCalendarPopup = false\">\r\n      <div class=\"calendar-container\">\r\n        <div class=\"calendar-header\">\r\n          <h6 class=\"mb-0\">Select Date</h6>\r\n          <button type=\"button\" class=\"btn-close\" @click=\"showCalendarPopup = false\"></button>\r\n        </div>\r\n        <div class=\"calendar-body\">\r\n          <div class=\"input-group\">\r\n            <span class=\"input-group-text\"><i class=\"fas fa-calendar-day\"></i></span>\r\n            <input \r\n              type=\"date\" \r\n              class=\"form-control\" \r\n              :value=\"formatDateForInput(currentDate)\"\r\n              :max=\"formatDateForInput(new Date())\"\r\n              @change=\"setCurrentDate($event.target.value); showCalendarPopup = false\"\r\n            >\r\n          </div>\r\n          \r\n          <!-- Quick Date Buttons -->\r\n          <div class=\"quick-date-buttons mt-3\">\r\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-7); showCalendarPopup = false\">\r\n              <i class=\"fas fa-angle-double-left me-1\"></i> Last Week\r\n            </button>\r\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-1); showCalendarPopup = false\">\r\n              <i class=\"fas fa-angle-left me-1\"></i> Yesterday\r\n            </button>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"setCurrentDate(formatDateForInput(new Date())); showCalendarPopup = false\">\r\n              Today\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Student Details Modal -->\r\n    <StudentDetailsModal\r\n      :show=\"!!selectedStudent\"\r\n      :student=\"selectedStudent || {}\"\r\n      :year-level=\"selectedYear\"\r\n      :section=\"selectedSection\"\r\n      :subject=\"selectedSubject\"\r\n      title=\"Student Attendance Details\"\r\n      chart-title=\"Attendance Overview\"\r\n      history-title=\"Attendance History\"\r\n      :chart-id=\"`attendanceChart-${selectedStudent?.studentId}`\"\r\n      :is-class-record=\"false\"\r\n      @update:show=\"(value) => !value && (selectedStudent = null)\"\r\n      @close=\"selectedStudent = null\"\r\n    >\r\n      <template #history-table>\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-if=\"!selectedStudent?.attendanceHistory || selectedStudent.attendanceHistory.length === 0\">\r\n              <td colspan=\"2\" class=\"text-center py-3 text-muted\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>No attendance records found.\r\n              </td>\r\n            </tr>\r\n            <tr v-for=\"record in selectedStudent?.attendanceHistory\" :key=\"record.date\">\r\n              <td>{{ formatDate(record.date) }}</td>\r\n              <td>\r\n                <span \r\n                  class=\"badge\"\r\n                  :class=\"{\r\n                    'bg-success': record.status === 'present',\r\n                    'bg-danger': record.status === 'absent',\r\n                    'bg-warning': record.status === 'late'\r\n                  }\"\r\n                >\r\n                  {{ record.status.charAt(0).toUpperCase() + record.status.slice(1) }}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </template>\r\n    </StudentDetailsModal>\r\n\r\n    <!-- Export Modal -->\r\n    <div v-if=\"showExportModal\" class=\"modal-backdrop\" @click=\"showExportModal = false\"></div>\r\n    <div v-if=\"showExportModal\" class=\"modal-wrapper\">\r\n      <div class=\"modal-content\" @click.stop>\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">Export Attendance</h5>\r\n          <button type=\"button\" class=\"btn-close\" @click=\"showExportModal = false\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group mb-3\">\r\n            <label>Export Format</label>\r\n            <div class=\"d-flex\">\r\n              <div class=\"form-check me-3\">\r\n                <input class=\"form-check-input\" type=\"radio\" id=\"formatCsv\" value=\"csv\" v-model=\"exportFormat\">\r\n                <label class=\"form-check-label\" for=\"formatCsv\">CSV</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"radio\" id=\"formatExcel\" value=\"excel\" v-model=\"exportFormat\">\r\n                <label class=\"form-check-label\" for=\"formatExcel\">Excel</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-group mb-3\">\r\n            <label>Date Range</label>\r\n            <div class=\"d-flex flex-column\">\r\n              <div class=\"form-check mb-2\">\r\n                <input class=\"form-check-input\" type=\"radio\" id=\"rangeCurrent\" value=\"current\" v-model=\"exportDateRange\">\r\n                <label class=\"form-check-label\" for=\"rangeCurrent\">Current Date Only</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"radio\" id=\"rangeCustom\" value=\"custom\" v-model=\"exportDateRange\">\r\n                <label class=\"form-check-label\" for=\"rangeCustom\">Custom Date Range</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div v-if=\"exportDateRange === 'custom'\" class=\"row g-2 mb-3\">\r\n            <div class=\"col-md-6\">\r\n              <label>Start Date</label>\r\n              <input type=\"date\" class=\"form-control\" v-model=\"exportStartDate\">\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n              <label>End Date</label>\r\n              <input type=\"date\" class=\"form-control\" v-model=\"exportEndDate\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-outline-secondary\" @click=\"showExportModal = false\">Cancel</button>\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-primary\" \r\n            @click=\"handleExport\" \r\n            :disabled=\"isExporting\"\r\n          >\r\n            <span v-if=\"isExporting\">\r\n              <i class=\"fas fa-spinner fa-spin me-2\"></i>Exporting...\r\n            </span>\r\n            <span v-else>Export</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport axios from 'axios'\r\nimport moment from 'moment-timezone'\r\nimport Chart from 'chart.js/auto'\r\nimport StudentDetailsModal from '@/components/modals/StudentDetailsModal.vue'\r\nimport ExcelJS from 'exceljs'\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport default {\r\n  name: 'Attendance',\r\n  components: {\r\n    StudentDetailsModal\r\n  },\r\n  setup() {\r\n    const store = useStore()\r\n    const route = useRoute()\r\n    const router = useRouter()\r\n    const students = ref([])\r\n    const searchQuery = ref('')\r\n    const sortField = ref('lastName')\r\n    const sortOrder = ref('asc')\r\n    const selectedStudent = ref(null)\r\n    const currentDate = ref(moment().tz('Asia/Manila').startOf('day').toDate())\r\n    const slideDirection = ref('')\r\n    let attendanceChart = null\r\n    let dateUpdateInterval = null\r\n    \r\n    // Date filter for attendance history\r\n    const historyStartDate = ref(moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD'))\r\n    const historyEndDate = ref(moment().tz('Asia/Manila').format('YYYY-MM-DD'))\r\n    const showHistoryDatePicker = ref(false)\r\n    const showCalendarPopup = ref(false)\r\n    const showExportModal = ref(false)\r\n    \r\n    // Export modal state\r\n    const exportDateRange = ref('current')\r\n    const exportStartDate = ref(moment().subtract(7, 'days').format('YYYY-MM-DD'))\r\n    const exportEndDate = ref(moment().format('YYYY-MM-DD'))\r\n    const exportFormat = ref('csv')\r\n    const isExporting = ref(false)\r\n\r\n    // Add refs for query parameters\r\n    const selectedYear = ref(route.query.year || localStorage.getItem('selectedYear') || '')\r\n    const selectedSection = ref(route.query.section || localStorage.getItem('selectedSection') || '')\r\n    const selectedSubject = ref(route.query.subject || localStorage.getItem('selectedSubject') || '')\r\n    \r\n    // Add refs for available options\r\n    const availableYears = ref([])\r\n    const availableSections = ref([])\r\n    const sectionsByYear = ref({})\r\n    const teacherSubjects = ref([])\r\n    \r\n    // Computed property for filtered sections based on selected year\r\n    const filteredSections = computed(() => {\r\n      if (!selectedYear.value) return []\r\n      return sectionsByYear.value[selectedYear.value] || []\r\n    })\r\n    \r\n    // Function to fetch available years and sections\r\n    const fetchAvailableYearsAndSections = async () => {\r\n      try {\r\n        const token = store.state.auth.token\r\n        const teacherId = store.state.auth.user?._id\r\n        \r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available')\r\n          return\r\n        }\r\n\r\n        console.log('Fetching available years and sections for teacher:', teacherId)\r\n        \r\n        // Use the teacher-specific endpoint to get only years and sections for this teacher\r\n        const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        }).catch(error => {\r\n          console.error('Error fetching teacher-specific years and sections:', error)\r\n          \r\n          // Fall back to the general endpoint if teacher-specific one fails\r\n          return api.get('/students/available-years-sections', {\r\n            headers: { 'Authorization': `Bearer ${token}` }\r\n          })\r\n        })\r\n\r\n        console.log('API Response for years and sections:', response.data)\r\n\r\n        if (response.data) {\r\n          // Set available years and sections from the response\r\n          availableYears.value = response.data.years || []\r\n          availableSections.value = response.data.sections || []\r\n          \r\n          // Use sectionsByYear from the API response\r\n          if (response.data.sectionsByYear) {\r\n            sectionsByYear.value = response.data.sectionsByYear\r\n          } else {\r\n            sectionsByYear.value = {}\r\n            \r\n            // If we have years and sections but no sectionsByYear mapping,\r\n            // create a simple mapping where each year has all sections\r\n            if (availableYears.value.length > 0 && availableSections.value.length > 0) {\r\n              availableYears.value.forEach(year => {\r\n                sectionsByYear.value[year] = [...availableSections.value]\r\n              })\r\n            }\r\n          }\r\n          \r\n          console.log('Available years:', availableYears.value)\r\n          console.log('Available sections:', availableSections.value)\r\n          console.log('Sections by year mapping:', sectionsByYear.value)\r\n          \r\n          // If no years are available, don't add default values\r\n          // This ensures teachers only see years they've added\r\n          if (availableYears.value.length === 0) {\r\n            console.log('No years found for this teacher')\r\n          }\r\n          \r\n          // If no sections are available, don't add default values\r\n          if (availableSections.value.length === 0) {\r\n            console.log('No sections found for this teacher')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch available years and sections:', error)\r\n        // Don't set default values - teacher should only see what they've added\r\n        availableYears.value = []\r\n        availableSections.value = []\r\n        sectionsByYear.value = {}\r\n      }\r\n    }\r\n    \r\n    // Function to fetch teacher subjects\r\n    const fetchTeacherSubjects = async () => {\r\n      try {\r\n        const token = store.state.auth.token\r\n        const teacherId = store.state.auth.user?._id\r\n\r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available')\r\n          return\r\n        }\r\n\r\n        // Try to fetch subjects from the teacher class records\r\n        try {\r\n          const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        })\r\n\r\n          if (response.data && response.data.subjects && response.data.subjects.length > 0) {\r\n            teacherSubjects.value = response.data.subjects\r\n            console.log('Subjects loaded from teacher class records:', teacherSubjects.value)\r\n          } else {\r\n            // If no subjects found in class records, try the user endpoint\r\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\r\n              headers: { 'Authorization': `Bearer ${token}` }\r\n            })\r\n            \r\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\r\n              teacherSubjects.value = userResponse.data.subjects\r\n              console.log('Subjects loaded from user profile:', teacherSubjects.value)\r\n            } else {\r\n              // If still no subjects, use default subjects\r\n              console.log('No subjects found, using default subjects')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to fetch teacher subjects from class records:', error)\r\n          \r\n          // Try the user endpoint as fallback\r\n          try {\r\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\r\n              headers: { 'Authorization': `Bearer ${token}` }\r\n            })\r\n            \r\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\r\n              teacherSubjects.value = userResponse.data.subjects\r\n              console.log('Subjects loaded from user profile (fallback):', teacherSubjects.value)\r\n            } else {\r\n              teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n              console.log('No subjects found in user profile, using default subjects')\r\n            }\r\n          } catch (userError) {\r\n            console.error('Failed to fetch teacher subjects from user profile:', userError)\r\n            teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n            console.log('Using default subjects due to API errors')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchTeacherSubjects:', error)\r\n        teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n      }\r\n    }\r\n    \r\n    // Function to apply filters\r\n    const applyFilters = async () => {\r\n      console.log('Applying filters:', {\r\n        year: selectedYear.value,\r\n        section: selectedSection.value,\r\n        subject: selectedSubject.value\r\n      })\r\n      \r\n      // Save selected values to localStorage\r\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\r\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\r\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\r\n      \r\n      // Update URL query parameters\r\n      router.replace({\r\n        query: {\r\n          ...route.query,\r\n          year: selectedYear.value || undefined,\r\n          section: selectedSection.value || undefined,\r\n          subject: selectedSubject.value || undefined\r\n        }\r\n      })\r\n      \r\n      // Always fetch student records when filters are applied\r\n      await fetchStudentRecords()\r\n    }\r\n    \r\n    // Function to clear filters\r\n    const clearFilters = () => {\r\n      selectedYear.value = ''\r\n      selectedSection.value = ''\r\n      selectedSubject.value = ''\r\n      localStorage.removeItem('selectedYear')\r\n      localStorage.removeItem('selectedSection')\r\n      localStorage.removeItem('selectedSubject')\r\n      \r\n      // Update URL query parameters\r\n      router.replace({\r\n        query: {}\r\n      })\r\n    }\r\n\r\n    // Function to fetch students and their attendance\r\n    const fetchStudentRecords = async () => {\r\n      try {\r\n        const token = store.state.auth.token;\r\n        const teacherId = store.state.auth.user?._id;\r\n\r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available');\r\n          return;\r\n        }\r\n\r\n        // Create a params object with the teacher ID\r\n        const params = { teacherId };\r\n        \r\n        // Add any selected filters to the params\r\n        if (selectedYear.value) params.year = selectedYear.value;\r\n        if (selectedSection.value) params.section = selectedSection.value;\r\n        if (selectedSubject.value) params.subject = selectedSubject.value;\r\n        \r\n        console.log('Fetching student records with filters:', params);\r\n        \r\n        try {\r\n          const response = await api.get('/teacher-class-records/students-for-attendance', {\r\n            params,\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n\r\n          console.log('Students API response:', response.data);\r\n\r\n          if (response.data) {\r\n            let studentList = [];\r\n            \r\n            if (Array.isArray(response.data)) {\r\n              studentList = response.data;\r\n            } else if (response.data.students && Array.isArray(response.data.students)) {\r\n              studentList = response.data.students;\r\n            }\r\n            \r\n            // Log each student's data to verify studentId is present\r\n            studentList.forEach(student => {\r\n              console.log('Student data:', {\r\n                studentId: student._id || student.studentId,\r\n                studentNumber: student.studentNumber,\r\n                name: `${student.firstName} ${student.lastName}`\r\n              });\r\n            });\r\n            \r\n            // Initialize students with 'none' status and ensure studentId is set\r\n            students.value = studentList.map(student => ({\r\n              ...student,\r\n              studentId: student._id || student.studentId, // Use _id if studentId is not present\r\n              currentStatus: 'none'\r\n            }));\r\n            \r\n            console.log(`Loaded ${students.value.length} students with IDs`);\r\n            \r\n            // Immediately fetch attendance after loading students\r\n            if (students.value.length > 0) {\r\n              await fetchAttendance();\r\n          }\r\n        }\r\n      } catch (error) {\r\n          console.error('Failed to fetch student records:', error);\r\n        students.value = [];\r\n      }\r\n      } catch (error) {\r\n        console.error('Error in fetchStudentRecords:', error);\r\n        students.value = [];\r\n      }\r\n    };\r\n\r\n    // Function to fetch attendance for current date\r\n    const fetchAttendance = async () => {\r\n      try {\r\n        // If there are no students, we can't fetch attendance\r\n        if (!students.value.length) {\r\n          console.log('fetchAttendance: No students to fetch attendance for');\r\n          return;\r\n        }\r\n\r\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\r\n        console.log('fetchAttendance: Fetching attendance data for date:', date);\r\n\r\n        // Create params object with the date and required filters\r\n        const params = {\r\n          teacherId: store.state.auth.user?._id,\r\n          date: date\r\n        };\r\n        \r\n        // Add any selected filters to the params\r\n        if (selectedYear.value) params.year = selectedYear.value;\r\n        if (selectedSection.value) params.section = selectedSection.value;\r\n        if (selectedSubject.value) params.subject = selectedSubject.value;\r\n        \r\n        console.log('Fetching attendance with params:', params);\r\n        \r\n        const response = await api.get(`/attendance/date/${date}`, {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        });\r\n\r\n        console.log('Attendance data received:', response.data);\r\n\r\n        // Create a map to store attendance by student ID\r\n        const studentMap = new Map();\r\n\r\n        if (response.data && Array.isArray(response.data)) {\r\n          console.log(`Processing ${response.data.length} attendance records`);\r\n          \r\n          // Group records by student ID to find the most recent one for each student\r\n          const recordsByStudent = {};\r\n          \r\n          response.data.forEach(record => {\r\n            if (record.studentId) {\r\n              // If we don't have this student yet, or this record is newer\r\n              if (!recordsByStudent[record.studentId] || \r\n                  (record.createdAt && \r\n                   (!recordsByStudent[record.studentId].createdAt || \r\n                    new Date(record.createdAt) > new Date(recordsByStudent[record.studentId].createdAt)))) {\r\n                recordsByStudent[record.studentId] = record;\r\n                console.log(`Found newer record for student ${record.studentId}: ${record.status} (created at ${record.createdAt})`);\r\n              }\r\n            } else {\r\n              console.log('Record missing studentId:', record);\r\n            }\r\n          });\r\n          \r\n          // Now use the most recent record for each student\r\n          Object.values(recordsByStudent).forEach(record => {\r\n            studentMap.set(String(record.studentId), record.status || 'none');\r\n            console.log(`Using most recent attendance for student ID ${record.studentId}: ${record.status || 'none'} (created at ${record.createdAt})`);\r\n          });\r\n        }\r\n\r\n        // Update students with attendance data\r\n        if (students.value && students.value.length > 0) {\r\n          // Merge attendance data into students array\r\n          // This will fix the updating of attendance data\r\n          students.value = students.value\r\n            .map(student => ({\r\n              ...student,\r\n              currentStatus: response.data.find(att => att.studentId === student.studentId)?.status\r\n            }));\r\n          // students.value = students.value.map(student => {\r\n          //   const studentIdStr = String(student.studentId);\r\n          //   const status = studentMap.get(studentIdStr);\r\n            \r\n          //   // Store the attendance status for this date\r\n          //   if (!student.attendanceByDate) {\r\n          //     student.attendanceByDate = {};\r\n          //   }\r\n            \r\n          //   if (status) {\r\n          //     student.attendanceByDate[date] = status;\r\n          //   }\r\n            \r\n          //   // Use the stored status for this date if available, otherwise use the fetched status\r\n          //   const currentStatus = status || student.currentStatus || 'none';\r\n            \r\n          //   console.log(`Setting status for student ${studentIdStr}: ${currentStatus}`);\r\n            \r\n          //   return {\r\n          //     ...student,\r\n          //     currentStatus: currentStatus\r\n          //   };\r\n          // });\r\n          \r\n          // Force a UI update\r\n          await nextTick();\r\n          students.value = [...students.value];\r\n          console.log('Updated attendance status for all students');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchAttendance:', error);\r\n      }\r\n    };\r\n\r\n    // Create attendance chart\r\n    const createPerformanceChart = () => {\r\n      if (!selectedStudent.value) return;\r\n      \r\n      // Create a unique chart ID for each student\r\n      const chartId = `attendanceChart-${selectedStudent.value.studentId}`;\r\n      const chartElement = document.getElementById('attendanceChart');\r\n      \r\n      // Set a unique ID to the chart element\r\n      if (chartElement) {\r\n        chartElement.id = chartId;\r\n      }\r\n      \r\n      const ctx = document.getElementById(chartId)?.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      // Destroy existing chart if it exists\r\n      if (attendanceChart) {\r\n        attendanceChart.destroy();\r\n        attendanceChart = null;\r\n      }\r\n\r\n      // Get the chart container\r\n      const chartContainer = document.querySelector('.chart-container');\r\n      if (!chartContainer) return;\r\n\r\n      // Check if we have valid attendance statistics and records\r\n      const stats = selectedStudent.value.attendanceStats;\r\n      const hasAttendanceRecords = selectedStudent.value.attendanceHistory && \r\n                                  selectedStudent.value.attendanceHistory.length > 0;\r\n      \r\n      if (!hasAttendanceRecords || \r\n          !stats || \r\n          (stats.presentPercentage === 0 && stats.absentPercentage === 0 && stats.latePercentage === 0)) {\r\n        // If no attendance data, display a message instead of an empty chart\r\n        chartContainer.innerHTML = '';\r\n        const noDataMessage = document.createElement('div');\r\n        noDataMessage.className = 'text-center py-5 text-muted';\r\n        noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No attendance data available for this student in the selected date range.';\r\n        chartContainer.appendChild(noDataMessage);\r\n        return;\r\n      }\r\n\r\n      // Clear the container and add canvas back\r\n      chartContainer.innerHTML = '';\r\n      const canvas = document.createElement('canvas');\r\n      canvas.id = chartId;\r\n      chartContainer.appendChild(canvas);\r\n\r\n      // Get the context from the new canvas\r\n      const newCtx = document.getElementById(chartId)?.getContext('2d');\r\n      if (!newCtx) return;\r\n\r\n      // Enhanced colors for the chart\r\n      const chartColors = {\r\n        present: {\r\n          backgroundColor: '#4CAF50',\r\n          hoverBackgroundColor: '#388E3C',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        absent: {\r\n          backgroundColor: '#F44336',\r\n          hoverBackgroundColor: '#D32F2F',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        late: {\r\n          backgroundColor: '#FFC107',\r\n          hoverBackgroundColor: '#FFA000',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        }\r\n      };\r\n\r\n      // Create the chart\r\n      attendanceChart = new Chart(newCtx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Present', 'Absent', 'Late'],\r\n          datasets: [{\r\n            data: [stats.presentPercentage, stats.absentPercentage, stats.latePercentage],\r\n            backgroundColor: [\r\n              chartColors.present.backgroundColor,\r\n              chartColors.absent.backgroundColor,\r\n              chartColors.late.backgroundColor\r\n            ],\r\n            hoverBackgroundColor: [\r\n              chartColors.present.hoverBackgroundColor,\r\n              chartColors.absent.hoverBackgroundColor,\r\n              chartColors.late.hoverBackgroundColor\r\n            ],\r\n            borderColor: [\r\n              chartColors.present.borderColor,\r\n              chartColors.absent.borderColor,\r\n              chartColors.late.borderColor\r\n            ],\r\n            borderWidth: 2,\r\n            borderRadius: 5,\r\n            spacing: 5,\r\n            hoverOffset: 10\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          cutout: '70%',\r\n          animation: {\r\n            animateScale: true,\r\n            animateRotate: true,\r\n            duration: 1000,\r\n            easing: 'easeOutQuart'\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom',\r\n              labels: {\r\n                padding: 20,\r\n                boxWidth: 15,\r\n                boxHeight: 15,\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                },\r\n                generateLabels: (chart) => {\r\n                  const data = chart.data;\r\n                  if (data.labels.length && data.datasets.length) {\r\n                    return data.labels.map((label, i) => {\r\n                      const meta = chart.getDatasetMeta(0);\r\n                      const style = meta.controller.getStyle(i);\r\n                      \r\n                      return {\r\n                        text: `${label}: ${data.datasets[0].data[i].toFixed(1)}%`,\r\n                        fillStyle: style.backgroundColor,\r\n                        strokeStyle: style.borderColor,\r\n                        lineWidth: style.borderWidth,\r\n                        hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\r\n                        index: i\r\n                      };\r\n                    });\r\n                  }\r\n                  return [];\r\n                }\r\n              }\r\n            },\r\n            tooltip: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n              titleFont: {\r\n                size: 16,\r\n                weight: 'bold'\r\n              },\r\n              bodyFont: {\r\n                size: 14\r\n              },\r\n              padding: 15,\r\n              cornerRadius: 8,\r\n              displayColors: true,\r\n              callbacks: {\r\n                label: function(context) {\r\n                  const label = context.label || '';\r\n                  const value = context.raw || 0;\r\n                  return `${label}: ${value.toFixed(1)}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // View student details\r\n    const viewStudentDetails = async (student) => {\r\n      try {\r\n        // Reset any existing chart before showing a new student\r\n        if (attendanceChart) {\r\n          attendanceChart.destroy();\r\n          attendanceChart = null;\r\n        }\r\n        \r\n        selectedStudent.value = {\r\n          ...student,\r\n          attendanceHistory: [],\r\n          attendanceStats: { presentPercentage: 0, absentPercentage: 0, latePercentage: 0 }\r\n        }\r\n        \r\n        // Fetch attendance history with the current date filters\r\n        await fetchStudentAttendanceHistory(selectedStudent.value);\r\n      } catch (error) {\r\n        console.error('Error fetching student details:', error)\r\n        alert('Failed to load student details. Please try again.')\r\n      }\r\n    }\r\n    \r\n    // Fetch student attendance history with date filters\r\n    const fetchStudentAttendanceHistory = async (student) => {\r\n      if (!student) return;\r\n      \r\n      try {\r\n        console.log(`Fetching attendance history for student ${student.studentNumber} with date range:`, {\r\n          startDate: historyStartDate.value,\r\n          endDate: historyEndDate.value\r\n        });\r\n        \r\n        const response = await api.get(\r\n          `/attendance/${student.studentId}/history`,\r\n          {\r\n            params: {\r\n              subject: selectedSubject.value,\r\n              startDate: historyStartDate.value,\r\n              endDate: historyEndDate.value\r\n            },\r\n            headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n          }\r\n        )\r\n        \r\n        if (response.data) {\r\n          // Make sure we're updating the correct student\r\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\r\n            // Only include records that have a valid status (not null, undefined, or empty string)\r\n            const validRecords = Array.isArray(response.data.records) \r\n              ? response.data.records.filter(record => record && record.status && record.status !== '')\r\n              : [];\r\n            \r\n            selectedStudent.value.attendanceHistory = validRecords;\r\n            \r\n            // Only calculate statistics based on valid records\r\n            if (validRecords.length > 0) {\r\n              // Count occurrences of each status\r\n              const statusCounts = {\r\n                present: 0,\r\n                absent: 0,\r\n                late: 0\r\n              };\r\n              \r\n              validRecords.forEach(record => {\r\n                if (record.status in statusCounts) {\r\n                  statusCounts[record.status]++;\r\n                }\r\n              });\r\n              \r\n              // Calculate percentages\r\n              const total = validRecords.length;\r\n              const presentPercentage = total > 0 ? (statusCounts.present / total) * 100 : 0;\r\n              const absentPercentage = total > 0 ? (statusCounts.absent / total) * 100 : 0;\r\n              const latePercentage = total > 0 ? (statusCounts.late / total) * 100 : 0;\r\n              \r\n              selectedStudent.value.attendanceStats = {\r\n                presentPercentage,\r\n                absentPercentage,\r\n                latePercentage\r\n              };\r\n      } else {\r\n              // If no valid records, set all percentages to 0\r\n              selectedStudent.value.attendanceStats = {\r\n                presentPercentage: 0,\r\n                absentPercentage: 0,\r\n                latePercentage: 0\r\n              };\r\n            }\r\n            \r\n            console.log(`Loaded ${selectedStudent.value.attendanceHistory.length} attendance records for student ${student.studentNumber}`);\r\n            \r\n            // Create attendance chart on next tick to ensure DOM is ready\r\n            nextTick(() => {\r\n              // Reset any existing chart before creating a new one\r\n              if (attendanceChart) {\r\n                attendanceChart.destroy();\r\n                attendanceChart = null;\r\n              }\r\n              createPerformanceChart();\r\n            });\r\n          } else {\r\n            console.log('Selected student changed, not updating attendance history');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching student attendance history:', error);\r\n        selectedStudent.value.attendanceHistory = [];\r\n        selectedStudent.value.attendanceStats = { \r\n          presentPercentage: 0, \r\n          absentPercentage: 0, \r\n          latePercentage: 0 \r\n        };\r\n        \r\n        // Create chart with empty data\r\n        nextTick(() => {\r\n          if (attendanceChart) {\r\n            attendanceChart.destroy();\r\n            attendanceChart = null;\r\n          }\r\n          createPerformanceChart();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Sort functions\r\n    const sortBy = (field) => {\r\n      if (sortField.value === field) {\r\n        sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc'\r\n      } else {\r\n        sortField.value = field\r\n        sortOrder.value = 'asc'\r\n      }\r\n    }\r\n\r\n    const getSortIcon = (field) => {\r\n      if (sortField.value !== field) return 'fas fa-sort'\r\n      return sortOrder.value === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down'\r\n    }\r\n\r\n    // Sort students\r\n    const sortedStudents = computed(() => {\r\n      if (!Array.isArray(students.value)) {\r\n        return []\r\n      }\r\n\r\n      let sortedList = [...students.value]\r\n      if (sortField.value) {\r\n        sortedList.sort((a, b) => {\r\n          let aVal = a[sortField.value]\r\n          let bVal = b[sortField.value]\r\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase()\r\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase()\r\n          if (aVal < bVal) return sortOrder.value === 'asc' ? -1 : 1\r\n          if (aVal > bVal) return sortOrder.value === 'asc' ? 1 : -1\r\n          return 0\r\n        })\r\n      }\r\n\r\n      if (!searchQuery.value) {\r\n      return sortedList\r\n      }\r\n      \r\n      const searchLower = searchQuery.value.toLowerCase()\r\n      return sortedList.filter(student => {\r\n        return (\r\n          student.studentNumber.toLowerCase().includes(searchLower) ||\r\n          student.firstName.toLowerCase().includes(searchLower) ||\r\n          student.lastName.toLowerCase().includes(searchLower)\r\n        )\r\n      })\r\n    })\r\n\r\n    // Update attendance status\r\n    const markAttendance = async (student, status) => {\r\n      try {\r\n        if (!status || !student) {\r\n          console.log('Invalid status or student:', { status, student });\r\n          return;\r\n        }\r\n        \r\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\r\n        console.log('Marking attendance:', {\r\n          studentId: student.studentId,\r\n          studentNumber: student.studentNumber,\r\n          status,\r\n          date\r\n        });\r\n\r\n        const attendanceData = {\r\n          studentId: student.studentId,\r\n          studentNumber: student.studentNumber,\r\n          teacherId: store.state.auth.user._id,\r\n          date: date,\r\n          subject: selectedSubject.value,\r\n          section: selectedSection.value,\r\n          year: selectedYear.value,\r\n          status: status,\r\n          createdAt: new Date().toISOString() // Ensure we have a current timestamp\r\n        };\r\n        \r\n        // Update UI immediately for better responsiveness\r\n        student.currentStatus = status;\r\n\r\n        const response = await api.post('/attendance', attendanceData, {\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        });\r\n\r\n        if (response.data) {\r\n          console.log('Attendance marked successfully:', response.data);\r\n          \r\n          // Store the attendance status in the student object for this date\r\n          if (!student.attendanceByDate) {\r\n            student.attendanceByDate = {};\r\n          }\r\n          student.attendanceByDate[date] = status;\r\n          \r\n          // If the student is currently selected in the details modal, update their history\r\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\r\n            await fetchStudentAttendanceHistory(selectedStudent.value);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error marking attendance:', error);\r\n        // Revert the status on error\r\n        student.currentStatus = 'none';\r\n        alert('Failed to save attendance. Please try again.');\r\n      }\r\n    };\r\n\r\n    // Handle search\r\n    const handleSearch = () => {\r\n      // The sortedStudents computed property will automatically filter based on searchQuery\r\n    }\r\n\r\n    // Export attendance records\r\n    const doExportAttendance = async (format = 'csv', startDate = null, endDate = null) => {\r\n      if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\r\n        alert('Please select a year, section, and subject first')\r\n        return\r\n      }\r\n\r\n      if (students.value.length === 0) {\r\n        alert('No data available to export')\r\n        return\r\n      }\r\n\r\n      try {\r\n        // Get teacher name from user\r\n        const teacherName = `${store.state.auth.user.firstName} ${store.state.auth.user.lastName}`\r\n        \r\n        // Format dates for display and API\r\n        let dateRangeText = ''\r\n        let formattedDate = ''\r\n        \r\n        if (startDate && endDate) {\r\n          // For date range\r\n          formattedDate = `${moment(startDate).format('MM/DD/YYYY')} to ${moment(endDate).format('MM/DD/YYYY')}`\r\n          dateRangeText = ` - ${formattedDate}`\r\n        } else {\r\n          // Single date - current displayed date\r\n          formattedDate = formatDate(currentDate.value)\r\n        }\r\n        \r\n        // Create header row\r\n        const headers = ['Student Number', 'Name', 'Date', 'Status']\r\n        \r\n        // If exporting a date range, fetch attendance for that range\r\n        let attendanceData = []\r\n        \r\n        if (startDate && endDate) {\r\n          // Fetch attendance history for the date range\r\n          try {\r\n            const params = {\r\n              startDate: startDate,\r\n              endDate: endDate\r\n            }\r\n            \r\n            if (selectedSubject.value) params.subject = selectedSubject.value\r\n            \r\n            // Create array of promises for all students\r\n            const attendancePromises = students.value.map(student => \r\n              api.get(`/attendance/${student.studentId}/history`, {\r\n                params,\r\n                headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n              })\r\n            )\r\n            \r\n            // Wait for all promises to resolve\r\n            const responses = await Promise.all(attendancePromises)\r\n            \r\n            // Process attendance records for each student\r\n            attendanceData = responses.flatMap((response, index) => {\r\n              const student = students.value[index]\r\n              const attendanceRecords = response.data.records || []\r\n              \r\n              // Handle no records\r\n              if (!attendanceRecords.length) {\r\n                // Return a record with \"Not marked\" status for a date range\r\n                return [{\r\n                  studentNumber: student.studentNumber,\r\n                  studentName: `${student.lastName}, ${student.firstName}`,\r\n                  formattedDate: formattedDate,\r\n                  status: 'No records found'\r\n                }]\r\n              }\r\n              \r\n              // Map each attendance record to the format we need\r\n              return attendanceRecords.map(record => ({\r\n                studentNumber: student.studentNumber,\r\n                studentName: `${student.lastName}, ${student.firstName}`,\r\n                formattedDate: moment(record.date).format('MM/DD/YYYY'),\r\n                status: record.status\r\n              }))\r\n            })\r\n          } catch (error) {\r\n            console.error('Error fetching attendance data for date range:', error)\r\n            alert('Failed to fetch attendance data for the selected date range')\r\n            return\r\n          }\r\n        } else {\r\n          // Create rows for each student with their attendance status for current date\r\n          attendanceData = students.value.map(student => {\r\n            const studentName = `${student.lastName}, ${student.firstName}`\r\n            const status = student.currentStatus === 'none' ? 'Not marked' : student.currentStatus\r\n            \r\n            return {\r\n              studentNumber: student.studentNumber,\r\n              studentName: studentName,\r\n              formattedDate: formattedDate,\r\n              status: status\r\n            }\r\n          })\r\n        }\r\n        \r\n        // Create rows for export\r\n        const rows = attendanceData.map(data => [\r\n          data.studentNumber,\r\n          data.studentName,\r\n          data.formattedDate,\r\n          data.status\r\n        ])\r\n        \r\n        // Create title information\r\n        const titleInfo = [\r\n          ['Attendance Record'],\r\n          [`Year/Level: ${selectedYear.value}`, `Section: ${selectedSection.value}`],\r\n          [`Subject: ${selectedSubject.value}`, `Teacher: ${teacherName}`],\r\n          [`Date: ${formattedDate}`],\r\n          [''] // Empty row before headers\r\n        ]\r\n        \r\n        // Determine file type and export\r\n        if (format === 'csv') {\r\n          // For CSV export\r\n          // Start with title rows\r\n          let csv = ''\r\n          \r\n          // Add title information\r\n          titleInfo.forEach(row => {\r\n            csv += row.join(',') + '\\n'\r\n          })\r\n          \r\n          // Add header row\r\n          csv += headers.join(',') + '\\n'\r\n          \r\n          // Add data rows\r\n          rows.forEach(row => {\r\n            csv += row.join(',') + '\\n'\r\n          })\r\n          \r\n          // Create a Blob and trigger download\r\n          const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })\r\n          const url = URL.createObjectURL(blob)\r\n          const link = document.createElement('a')\r\n          link.setAttribute('href', url)\r\n          link.setAttribute('download', `Attendance_${selectedYear.value}_${selectedSection.value}_${selectedSubject.value}${dateRangeText}.csv`)\r\n          link.style.visibility = 'hidden'\r\n          document.body.appendChild(link)\r\n          link.click()\r\n          document.body.removeChild(link)\r\n          \r\n          // Show success message\r\n          alert('CSV file has been downloaded')\r\n        } else if (format === 'excel') {\r\n          // For Excel export using ExcelJS\r\n          const workbook = new ExcelJS.Workbook()\r\n          const worksheet = workbook.addWorksheet('Attendance')\r\n          \r\n          // Add title information with styling\r\n          titleInfo.forEach((rowData, rowIndex) => {\r\n            const row = worksheet.addRow(rowData)\r\n            if (rowIndex === 0) {\r\n              // First row is the title - make it bold and larger\r\n              row.font = { bold: true, size: 14 }\r\n            } else if (rowIndex < titleInfo.length - 1) {\r\n              // Info rows - make them bold\r\n              row.font = { bold: true }\r\n            }\r\n          })\r\n          \r\n          // Add headers with styling\r\n          const headerRow = worksheet.addRow(headers)\r\n          headerRow.eachCell(cell => {\r\n            cell.font = { bold: true }\r\n            cell.fill = {\r\n              type: 'pattern',\r\n              pattern: 'solid',\r\n              fgColor: { argb: 'FFE0E0E0' }\r\n            }\r\n            cell.border = {\r\n              top: { style: 'thin' },\r\n              left: { style: 'thin' },\r\n              bottom: { style: 'thin' },\r\n              right: { style: 'thin' }\r\n            }\r\n          })\r\n          \r\n          // Add data rows\r\n          rows.forEach(rowData => {\r\n            const row = worksheet.addRow(rowData)\r\n            row.eachCell(cell => {\r\n              cell.border = {\r\n                top: { style: 'thin' },\r\n                left: { style: 'thin' },\r\n                bottom: { style: 'thin' },\r\n                right: { style: 'thin' }\r\n              }\r\n              \r\n              // Color-code status cells\r\n              if (cell.col === 4) { // Status column (1-indexed)\r\n                if (cell.value === 'present') {\r\n                  cell.fill = {\r\n                    type: 'pattern',\r\n                    pattern: 'solid',\r\n                    fgColor: { argb: 'FF90EE90' } // Light green for present\r\n                  }\r\n                } else if (cell.value === 'absent') {\r\n                  cell.fill = {\r\n                    type: 'pattern',\r\n                    pattern: 'solid',\r\n                    fgColor: { argb: 'FFFF9999' } // Light red for absent\r\n                  }\r\n                } else if (cell.value === 'late') {\r\n                  cell.fill = {\r\n                    type: 'pattern',\r\n                    pattern: 'solid',\r\n                    fgColor: { argb: 'FFFFCC99' } // Light orange for late\r\n                  }\r\n                }\r\n              }\r\n            })\r\n          })\r\n          \r\n          // Auto-size columns for better readability\r\n          worksheet.columns.forEach(column => {\r\n            let maxLength = 0\r\n            column.eachCell(cell => {\r\n              const length = cell.value ? cell.value.toString().length : 0\r\n              if (length > maxLength) {\r\n                maxLength = length\r\n              }\r\n            })\r\n            column.width = maxLength < 10 ? 10 : maxLength + 2\r\n          })\r\n          \r\n          // Write to blob and download\r\n          const buffer = await workbook.xlsx.writeBuffer()\r\n          const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\r\n          const url = URL.createObjectURL(blob)\r\n          const link = document.createElement('a')\r\n          link.href = url\r\n          link.download = `Attendance_${selectedYear.value}_${selectedSection.value}_${selectedSubject.value}${dateRangeText}.xlsx`\r\n          document.body.appendChild(link)\r\n          link.click()\r\n          document.body.removeChild(link)\r\n          \r\n          // Show success message\r\n          alert('Excel file has been downloaded')\r\n        }\r\n        \r\n        // Close the export modal after successful export\r\n        showExportModal.value = false\r\n      } catch (error) {\r\n        console.error('Error during export operation:', error)\r\n        alert('Failed to export data. Please try again.')\r\n      } finally {\r\n        isExporting.value = false\r\n      }\r\n    }\r\n\r\n    // Export attendance records (wrapper function)\r\n    const exportAttendance = (format = 'csv', startDate = null, endDate = null) => {\r\n      doExportAttendance(format, startDate, endDate)\r\n    }\r\n\r\n    // Handle export button click\r\n    const handleExport = () => {\r\n      isExporting.value = true\r\n      \r\n      try {\r\n        let startDate = null\r\n        let endDate = null\r\n        \r\n        if (exportDateRange.value === 'custom') {\r\n          startDate = exportStartDate.value\r\n          endDate = exportEndDate.value\r\n          \r\n          if (!startDate || !endDate) {\r\n            alert('Please select both start and end dates')\r\n            isExporting.value = false\r\n            return\r\n          }\r\n          \r\n          if (moment(endDate).isBefore(moment(startDate))) {\r\n            alert('End date cannot be before start date')\r\n            isExporting.value = false\r\n            return\r\n          }\r\n        }\r\n        \r\n        doExportAttendance(exportFormat.value, startDate, endDate)\r\n      } catch (error) {\r\n        console.error('Error during export:', error)\r\n        alert('Export failed. Please try again.')\r\n      } finally {\r\n        isExporting.value = false\r\n      }\r\n    }\r\n\r\n    // Reset history date filter to default (last 30 days)\r\n    const resetHistoryDateFilter = () => {\r\n      historyStartDate.value = moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD');\r\n      historyEndDate.value = moment().tz('Asia/Manila').format('YYYY-MM-DD');\r\n      \r\n      // Fetch attendance history with the reset date range\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n    };\r\n\r\n    // Set history date range based on preset\r\n    const setHistoryDateRange = (preset) => {\r\n      const now = moment().tz('Asia/Manila');\r\n      \r\n      switch (preset) {\r\n        case 'week':\r\n          historyStartDate.value = now.clone().subtract(7, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'month':\r\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'quarter':\r\n          historyStartDate.value = now.clone().subtract(90, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'semester':\r\n          // Approximately 6 months\r\n          historyStartDate.value = now.clone().subtract(180, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        default:\r\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\r\n      }\r\n      \r\n      historyEndDate.value = now.format('YYYY-MM-DD');\r\n      \r\n      // Fetch attendance history with the new date range\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(async () => {\r\n      if (store.getters.isLoggedIn) {\r\n        try {\r\n          console.log('Component mounted, initializing...');\r\n          \r\n          // Fetch available years, sections, and subjects\r\n          await Promise.all([\r\n            fetchAvailableYearsAndSections(),\r\n            fetchTeacherSubjects()\r\n          ]);\r\n          \r\n          console.log('Initialization complete, checking for saved filters:', {\r\n            year: selectedYear.value,\r\n            section: selectedSection.value,\r\n            subject: selectedSubject.value\r\n          });\r\n          \r\n          // Apply filters if they are set\r\n          if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n            console.log('Saved filters found, fetching student records...');\r\n            await fetchStudentRecords();\r\n            console.log('Student records loaded');\r\n          } else {\r\n            console.log('No saved filters found, skipping data fetch');\r\n          }\r\n          \r\n          // Set up date auto-update\r\n          setupDateAutoUpdate();\r\n      } catch (error) {\r\n          console.error('Error during component initialization:', error);\r\n        }\r\n      } else {\r\n        router.push('/login');\r\n      }\r\n    });\r\n    \r\n    // Function to refresh attendance data\r\n    const refreshAttendance = async () => {\r\n      console.log('Manually refreshing attendance data');\r\n      \r\n      // Show loading indicator\r\n      const refreshButton = document.querySelector('.btn-outline-secondary i.fa-sync-alt');\r\n      if (refreshButton) {\r\n        refreshButton.classList.add('fa-spin');\r\n      }\r\n      \r\n      try {\r\n      // Fetch fresh attendance data from the server\r\n      await fetchAttendance();\r\n      \r\n      // Force a UI update to ensure the changes are reflected\r\n      nextTick(() => {\r\n        students.value = [...students.value];\r\n          console.log('Attendance data refreshed successfully');\r\n        });\r\n      } catch (error) {\r\n        console.error('Error refreshing attendance data:', error);\r\n      } finally {\r\n        // Remove loading indicator\r\n        setTimeout(() => {\r\n          if (refreshButton) {\r\n            refreshButton.classList.remove('fa-spin');\r\n          }\r\n        }, 500);\r\n      }\r\n    };\r\n\r\n    // Add openDatePicker function\r\n    const openDatePicker = () => {\r\n      const datePicker = document.querySelector('.date-picker-hidden');\r\n      if (datePicker) {\r\n        datePicker.click();\r\n      }\r\n    }\r\n\r\n    // Add openHistoryDatePicker function\r\n    const openHistoryDatePicker = () => {\r\n      showHistoryDatePicker.value = true;\r\n    }\r\n    \r\n    // Add applyHistoryDateFilter function\r\n    const applyHistoryDateFilter = () => {\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n      showHistoryDatePicker.value = false;\r\n    }\r\n\r\n    // Add openCalendarPopup function\r\n    const openCalendarPopup = () => {\r\n      showCalendarPopup.value = true;\r\n    }\r\n\r\n    // Add pagination state\r\n    const currentPage = ref(1)\r\n    const itemsPerPage = 25\r\n\r\n    // Compute total pages\r\n    const totalPages = computed(() => Math.ceil(sortedStudents.value.length / itemsPerPage))\r\n\r\n    // Get paginated students\r\n    const paginatedStudents = computed(() => {\r\n      const start = (currentPage.value - 1) * itemsPerPage\r\n      const end = start + itemsPerPage\r\n      return sortedStudents.value.slice(start, end)\r\n    })\r\n\r\n    // Compute pagination info\r\n    const paginationInfo = computed(() => {\r\n      const start = sortedStudents.value.length === 0 ? 0 : (currentPage.value - 1) * itemsPerPage + 1\r\n      const end = Math.min(start + itemsPerPage - 1, sortedStudents.value.length)\r\n      return { start, end }\r\n    })\r\n\r\n    // Pagination methods\r\n    const nextPage = () => {\r\n      if (currentPage.value < totalPages.value) {\r\n        currentPage.value++\r\n      }\r\n    }\r\n\r\n    const previousPage = () => {\r\n      if (currentPage.value > 1) {\r\n        currentPage.value--\r\n      }\r\n    }\r\n\r\n    // Reset pagination when filters change\r\n    watch([searchQuery, selectedYear, selectedSection, selectedSubject], () => {\r\n      currentPage.value = 1\r\n    })\r\n\r\n    // Add clearSearch function if it doesn't exist\r\n    const clearSearch = () => {\r\n      searchQuery.value = ''\r\n      handleSearch()\r\n    }\r\n\r\n    return {\r\n      students,\r\n      searchQuery,\r\n      sortedStudents,\r\n      selectedStudent,\r\n      currentDate,\r\n      formatDate,\r\n      formatDateForInput,\r\n      navigateDate,\r\n      isNextDayDisabled,\r\n      markAttendance,\r\n      slideDirection,\r\n      selectedYear,\r\n      selectedSection,\r\n      selectedSubject,\r\n      sortBy,\r\n      getSortIcon,\r\n      handleSearch,\r\n      viewStudentDetails,\r\n      fetchStudentAttendanceHistory,\r\n      historyStartDate,\r\n      historyEndDate,\r\n      availableYears,\r\n      availableSections,\r\n      sectionsByYear,\r\n      teacherSubjects,\r\n      filteredSections,\r\n      fetchAvailableYearsAndSections,\r\n      fetchTeacherSubjects,\r\n      applyFilters,\r\n      clearFilters,\r\n      getAttendanceStatus,\r\n      setCurrentDate,\r\n      resetHistoryDateFilter,\r\n      setHistoryDateRange,\r\n      openDatePicker,\r\n      showHistoryDatePicker,\r\n      openHistoryDatePicker,\r\n      applyHistoryDateFilter,\r\n      showCalendarPopup,\r\n      openCalendarPopup,\r\n      refreshAttendance,\r\n      currentPage,\r\n      totalPages,\r\n      paginatedStudents,\r\n      paginationInfo,\r\n      nextPage,\r\n      previousPage,\r\n      clearSearch,\r\n      exportAttendance,\r\n      showExportModal,\r\n      exportDateRange,\r\n      exportStartDate,\r\n      exportEndDate,\r\n      exportFormat,\r\n      isExporting,\r\n      handleExport,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Base z-index hierarchy - significantly increased values */\r\n:root {\r\n  --z-base: 1;\r\n  --z-table: 10;\r\n  --z-controls: 1000;\r\n  --z-dropdown: 10000;\r\n  --z-modal-backdrop: 20000;\r\n  --z-modal-wrapper: 20100;\r\n  --z-modal-content: 20200;\r\n  --z-table-header: 20;\r\n}\r\n\r\n.attendance-view {\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  padding: 0;\r\n  position: relative;\r\n}\r\n\r\n/* Controls container */\r\n.controls-container {\r\n  position: relative;\r\n  z-index: var(--z-controls);\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* Dropdown styles */\r\n.dropdown {\r\n  position: relative;\r\n  z-index: var(--z-dropdown);\r\n}\r\n\r\n.dropdown-menu {\r\n  position: absolute !important;\r\n  z-index: var(--z-dropdown) !important;\r\n  transform: none !important;\r\n  top: 100% !important;\r\n  left: 0 !important;\r\n  float: none !important;\r\n  min-width: 10rem !important;\r\n  background-color: #fff !important;\r\n  border: none !important;\r\n  border-radius: 12px !important;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\r\n  padding: 0.5rem 0 !important;\r\n  margin-top: 0.5rem !important;\r\n}\r\n\r\n/* Table container - lower z-index than controls */\r\n.table-responsive {\r\n  position: relative;\r\n  z-index: var(--z-table);\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: visible;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: visible !important;\r\n  position: relative;\r\n}\r\n\r\n.card-body {\r\n  padding: 1.5rem;\r\n  position: relative;\r\n}\r\n\r\n.table-controls {\r\n  position: relative;\r\n  z-index: 10000 !important; /* Same as dropdown z-index to ensure it stays on top */\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 1rem;\r\n  overflow: visible !important;\r\n}\r\n\r\n/* Dropdown button */\r\n.btn-control {\r\n  position: relative;\r\n  background: #f8fafc;\r\n  border: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n  font-size: 0.9rem;\r\n  padding: 0.5rem 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  border-radius: 8px;\r\n  transition: all 0.2s ease;\r\n  z-index: var(--z-controls);\r\n}\r\n\r\n.btn-control:hover {\r\n  background: #f1f5f9;\r\n  border-color: #cbd5e1;\r\n  color: #2d3748;\r\n}\r\n\r\n/* Dropdown menu */\r\n.control-menu {\r\n  border: none !important;\r\n  border-radius: 12px !important;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\r\n  padding: 0.5rem 0 !important;\r\n  margin-top: 0.5rem !important;\r\n  z-index: var(--z-dropdown) !important;\r\n  position: absolute !important;\r\n  min-width: 10rem !important;\r\n  background-color: #fff !important;\r\n}\r\n\r\n/* Override Bootstrap's dropdown styles */\r\n.dropdown-menu.show {\r\n  display: block !important;\r\n  z-index: var(--z-dropdown) !important;\r\n  position: absolute !important;\r\n}\r\n\r\n.dropdown-item {\r\n  padding: 0.6rem 1rem;\r\n  font-size: 0.9rem;\r\n  color: #4a5568;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.dropdown-item:hover {\r\n  background-color: #f8fafc;\r\n  color: #2d3748;\r\n}\r\n\r\n.dropdown-header {\r\n  color: #2d3748;\r\n  font-weight: 600;\r\n  font-size: 1rem;\r\n}\r\n\r\n.filter-badge {\r\n  position: absolute;\r\n  top: -6px;\r\n  right: -6px;\r\n  background: #e53e3e;\r\n  color: white;\r\n  width: 18px;\r\n  height: 18px;\r\n  border-radius: 50%;\r\n  font-size: 0.7rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 2px solid white;\r\n}\r\n\r\n.search-control {\r\n  position: relative;\r\n  z-index: 10000 !important;\r\n}\r\n\r\n/* Table styles from ClassRecords */\r\n.table {\r\n  width: 100%;\r\n  margin-bottom: 0;\r\n  color: #4a5568;\r\n  vertical-align: top;\r\n  border-color: #e2e8f0;\r\n}\r\n\r\n.table th {\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: var(--z-table-header);\r\n  background-color: #f8f9fa;\r\n  color: #666;\r\n  font-weight: 600;\r\n  padding: 0.75rem 1rem;\r\n  border-top: none;\r\n  white-space: nowrap;\r\n  vertical-align: bottom;\r\n  border-bottom: 2px solid #e2e8f0;\r\n}\r\n\r\n.table td {\r\n  padding: 0.75rem 1rem;\r\n  vertical-align: middle;\r\n  border-color: #eee;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.table tbody tr:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.table-hover tbody tr:hover {\r\n  background-color: rgba(0, 0, 0, 0.02);\r\n}\r\n\r\n.clickable-row {\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.clickable-row:hover {\r\n  background-color: rgba(0, 0, 0, 0.02);\r\n}\r\n\r\n.date-display {\r\n  font-size: 1.1rem;\r\n  font-weight: 500;\r\n  color: #495057;\r\n  padding: 0.5rem 1rem;\r\n  background: #fff;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  min-width: 200px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.date-display:hover {\r\n  background: #f8fafc;\r\n}\r\n\r\n.empty-state-message {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 2rem;\r\n  color: #6c757d;\r\n}\r\n\r\n.empty-state-message i {\r\n  font-size: 2rem;\r\n}\r\n\r\n.pagination-controls {\r\n  background: white;\r\n  padding: 1rem;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.pagination-info {\r\n  color: #4a5568;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.pagination-buttons .btn {\r\n  min-width: 100px;\r\n}\r\n\r\n.status-badge {\r\n  padding: 0.5em 0.75em;\r\n  border-radius: 0.375rem;\r\n  font-weight: 500;\r\n  font-size: 0.875rem;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.status-present {\r\n  background-color: #48bb78;\r\n  color: white;\r\n}\r\n\r\n.status-absent {\r\n  background-color: #f56565;\r\n  color: white;\r\n}\r\n\r\n.status-late {\r\n  background-color: #ed8936;\r\n  color: white;\r\n}\r\n\r\n.status-excused {\r\n  background-color: #4299e1;\r\n  color: white;\r\n}\r\n\r\n.calendar-popup {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: var(--z-modal-wrapper);\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.calendar-container {\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  z-index: var(--z-modal-content);\r\n  max-width: 400px;\r\n  width: 100%;\r\n}\r\n\r\n.calendar-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.calendar-body {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.quick-date-buttons {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n}\r\n\r\n.student-details {\r\n  display: grid;\r\n  grid-template-columns: 350px 1fr;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.chart-section {\r\n  position: relative;\r\n  z-index: var(--z-modal-content);\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 2rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chart-section h6 {\r\n  color: #2d3748;\r\n  font-size: 1.4rem;\r\n  font-weight: 600;\r\n  margin-bottom: 2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 2px solid #e2e8f0;\r\n}\r\n\r\n.attendance-table {\r\n  margin-top: 1rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.attendance-table th {\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n  background: white;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: var(--z-table-header);\r\n}\r\n\r\n.attendance-table td {\r\n  font-size: 1.1rem;\r\n  color: #4a5568;\r\n}\r\n\r\n.badge {\r\n  font-size: 1rem;\r\n  padding: 0.5em 1em;\r\n}\r\n\r\n/* Chart container */\r\n.chart-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 300px;\r\n}\r\n\r\n/* Add these styles for attendance status */\r\n.attendance-status-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  position: relative;\r\n}\r\n\r\n.attendance-select {\r\n  flex: 1;\r\n  padding-right: 2.5rem;\r\n  border-radius: 6px;\r\n  border: 1px solid #e2e8f0;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.select-present {\r\n  border-color: #48bb78;\r\n  background-color: rgba(72, 187, 120, 0.1);\r\n}\r\n\r\n.select-absent {\r\n  border-color: #f56565;\r\n  background-color: rgba(245, 101, 101, 0.1);\r\n}\r\n\r\n.select-late {\r\n  border-color: #ed8936;\r\n  background-color: rgba(237, 137, 54, 0.1);\r\n}\r\n\r\n.select-none {\r\n  border-color: #a0aec0;\r\n  background-color: rgba(160, 174, 192, 0.1);\r\n}\r\n\r\n.status-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 50%;\r\n  font-size: 1rem;\r\n  color: white;\r\n}\r\n\r\n.indicator-present {\r\n  background-color: #48bb78;\r\n}\r\n\r\n.indicator-absent {\r\n  background-color: #f56565;\r\n}\r\n\r\n.indicator-late {\r\n  background-color: #ed8936;\r\n}\r\n\r\n.indicator-none {\r\n  background-color: #a0aec0;\r\n}\r\n\r\n/* Add these styles for status row highlighting */\r\n.status-row-present {\r\n  background-color: rgba(72, 187, 120, 0.05);\r\n}\r\n\r\n.status-row-absent {\r\n  background-color: rgba(245, 101, 101, 0.05);\r\n}\r\n\r\n.status-row-late {\r\n  background-color: rgba(237, 137, 54, 0.05);\r\n}\r\n\r\n/* Export Modal Styles */\r\n.modal-backdrop {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: var(--z-modal-backdrop);\r\n}\r\n\r\n.modal-wrapper {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: var(--z-modal-wrapper);\r\n}\r\n\r\n.modal-content {\r\n  width: 100%;\r\n  max-width: 500px;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);\r\n  z-index: var(--z-modal-content);\r\n  overflow: hidden;\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 1rem 1.5rem;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.modal-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.modal-body {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.modal-footer {\r\n  padding: 1rem 1.5rem;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 0.5rem;\r\n  border-top: 1px solid #e9ecef;\r\n}\r\n</style> \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard-container\"\n};\nconst _hoisted_2 = {\n  class: \"greeting-section mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"greeting\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown\"\n};\nconst _hoisted_6 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_7 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_8 = {\n  class: \"mb-3\"\n};\nconst _hoisted_9 = {\n  class: \"mb-3\"\n};\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = {\n  class: \"mb-3\"\n};\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = [\"max\"];\nconst _hoisted_15 = {\n  class: \"mb-3\"\n};\nconst _hoisted_16 = [\"min\", \"max\"];\nconst _hoisted_17 = {\n  class: \"row mb-4 g-3\"\n};\nconst _hoisted_18 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_19 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_20 = {\n  class: \"card-info\"\n};\nconst _hoisted_21 = {\n  class: \"stat-value\"\n};\nconst _hoisted_22 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_23 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_24 = {\n  class: \"card-info\"\n};\nconst _hoisted_25 = {\n  class: \"stat-value\"\n};\nconst _hoisted_26 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_27 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_28 = {\n  class: \"chart-card\"\n};\nconst _hoisted_29 = {\n  class: \"chart-container\"\n};\nconst _hoisted_30 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_31 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_32 = {\n  ref: \"surveyAverageChart\"\n};\nconst _hoisted_33 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_34 = {\n  class: \"chart-card\"\n};\nconst _hoisted_35 = {\n  class: \"chart-container\"\n};\nconst _hoisted_36 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_37 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_38 = {\n  ref: \"surveyDistributionChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Welcome Section \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h2\", _hoisted_3, \"Welcome, \" + _toDisplayString($setup.store.state.auth.user?.firstName || 'User'), 1 /* TEXT */), _cache[5] || (_cache[5] = _createElementVNode(\"p\", {\n    class: \"greeting-subtitle\"\n  }, \"Here's your dashboard overview\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_4, [_cache[18] || (_cache[18] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Filters \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", _hoisted_6, [_cache[6] || (_cache[6] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[15] || (_cache[15] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"yearFilter\",\n    class: \"form-label\"\n  }, \"Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"yearFilter\",\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: $setup.handleYearChange\n  }, _cache[7] || (_cache[7] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-487c7cc4>All Years</option><option value=\\\"1st\\\" data-v-487c7cc4>1st Year</option><option value=\\\"2nd\\\" data-v-487c7cc4>2nd Year</option><option value=\\\"3rd\\\" data-v-487c7cc4>3rd Year</option><option value=\\\"4th\\\" data-v-487c7cc4>4th Year</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_9, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"sectionFilter\",\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"sectionFilter\",\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedSection = $event)\n  }, [_cache[9] || (_cache[9] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_10);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"subjectFilter\",\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"subjectFilter\",\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSubject = $event)\n  }, [_cache[11] || (_cache[11] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedSubject]])]), _cache[16] || (_cache[16] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_13, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"startDateFilter\",\n    class: \"form-label\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"startDateFilter\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedStartDate = $event),\n    max: $setup.selectedEndDate || $setup.today\n  }, null, 8 /* PROPS */, _hoisted_14), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_15, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    for: \"endDateFilter\",\n    class: \"form-label\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"endDateFilter\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedEndDate = $event),\n    min: $setup.selectedStartDate,\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_16), [[_vModelText, $setup.selectedEndDate]])]), _cache[17] || (_cache[17] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: $setup.applyFilters\n  }, \"Apply Filters\")])])]), _createCommentVNode(\" Stats Cards \"), _createElementVNode(\"div\", _hoisted_17, [_createCommentVNode(\" Failing Students Card \"), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[20] || (_cache[20] = _createElementVNode(\"div\", {\n    class: \"icon-container bg-danger\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-exclamation-triangle\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_20, [_cache[19] || (_cache[19] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Failing Students\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_21, _toDisplayString($setup.failingStudents), 1 /* TEXT */)])])]), _createCommentVNode(\" Total Surveys Card \"), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_cache[22] || (_cache[22] = _createElementVNode(\"div\", {\n    class: \"icon-container bg-success\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clipboard-check\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_24, [_cache[21] || (_cache[21] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Completed Surveys\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_25, _toDisplayString($setup.completedSurveys), 1 /* TEXT */)])])])]), _createCommentVNode(\" Survey Average Scores Chart \"), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_cache[25] || (_cache[25] = _createElementVNode(\"h3\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-bar me-2\"\n  }), _createTextVNode(\" Survey Average Scores \")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_29, [$setup.loadingSurveyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, _cache[23] || (_cache[23] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary spinner-border-sm me-2\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */), _createTextVNode(\" Loading survey data... \")]))) : !$setup.hasSurveyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_31, _cache[24] || (_cache[24] = [_createElementVNode(\"i\", {\n    class: \"fas fa-info-circle me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" No survey data available for the selected filters. \")]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_32, null, 512 /* NEED_PATCH */)])])]), _createCommentVNode(\" Survey Response Distribution Chart \"), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_cache[28] || (_cache[28] = _createElementVNode(\"h3\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-pie me-2\"\n  }), _createTextVNode(\" Survey Response Distribution \")], -1 /* HOISTED */)), _cache[29] || (_cache[29] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Distribution of student issues by priority level\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_35, [$setup.loadingSurveyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, _cache[26] || (_cache[26] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary spinner-border-sm me-2\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */), _createTextVNode(\" Loading survey data... \")]))) : !$setup.hasSurveyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_37, _cache[27] || (_cache[27] = [_createElementVNode(\"i\", {\n    class: \"fas fa-info-circle me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" No survey data available for the selected filters. \")]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_38, null, 512 /* NEED_PATCH */)])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","store","state","auth","user","firstName","_hoisted_4","_hoisted_5","_hoisted_6","_createTextVNode","getFilterDisplay","_hoisted_7","_hoisted_8","for","_cache","$event","selectedYear","onChange","handleYearChange","_createStaticVNode","_hoisted_9","selectedSection","value","_Fragment","_renderList","sections","section","_hoisted_10","_hoisted_11","selectedSubject","subjects","subject","_hoisted_12","_hoisted_13","selectedStartDate","max","selectedEndDate","today","_hoisted_14","_hoisted_15","min","_hoisted_16","onClick","applyFilters","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","failingStudents","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","completedSurveys","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","loadingSurveyData","_hoisted_30","role","hasSurveyData","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38"],"sources":["D:\\au_dev\\client\\src\\views\\SSPDashboard.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst store = useStore()\nconst surveyAverageChart = ref(null)\nconst surveyDistributionChart = ref(null)\n\n// Data refs\nconst failingStudents = ref(0)\nconst completedSurveys = ref(0)\nconst surveyData = ref([])\nconst sections = ref([])\nconst subjects = ref([])\n\n// Filter refs\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\nconst selectedStartDate = ref('')\nconst selectedEndDate = ref('')\nconst today = computed(() => moment().format('YYYY-MM-DD'))\n\n// Loading states\nconst loadingSurveyData = ref(false)\n\n// Get teacher ID from store\nconst getTeacherId = () => {\n  const user = store.state.auth.user\n  if (!user || !user._id) {\n    console.error('No teacher ID found in store')\n    return null\n  }\n  return user._id\n}\n\n// Remove unused computed properties and only keep what's needed\nconst hasSurveyData = computed(() => surveyData.value.length > 0)\n\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\n  try {\n    const teacherId = getTeacherId()\n    if (!teacherId) return\n\n    const token = store.state.auth.token\n    console.log('Fetching sections and subjects for:', { teacherId, year })\n\n    // First get all class records to extract sections\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n      params: { \n        teacherId,\n        year \n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n\n    if (recordsResponse.data) {\n      // Extract unique sections and subjects\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n      \n      sections.value = uniqueSections.sort()\n      subjects.value = uniqueSubjects.sort()\n      \n      console.log('Loaded sections and subjects:', {\n        sections: sections.value,\n        subjects: subjects.value\n      })\n    }\n  } catch (error) {\n    console.error('Error fetching teacher sections and subjects:', error)\n    sections.value = []\n    subjects.value = []\n  }\n}\n\nconst handleYearChange = async () => {\n  selectedSection.value = ''\n  selectedSubject.value = ''\n  if (selectedYear.value) {\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\n  } else {\n    sections.value = []\n    subjects.value = []\n  }\n  await fetchDashboardData()\n}\n\nconst getFilterDisplay = () => {\n  const filters = []\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n  if (selectedSection.value) filters.push(selectedSection.value)\n  if (selectedSubject.value) filters.push(selectedSubject.value)\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n}\n\nconst fetchDashboardData = async () => {\n  try {\n    const teacherId = getTeacherId();\n    if (!teacherId) {\n      console.error('No teacher ID found');\n      return;\n    }\n\n    const token = store.state.auth.token;\n    if (!token) {\n      console.error('No auth token found');\n      return;\n    }\n\n    console.log('Fetching dashboard data with params:', {\n      teacherId,\n      year: selectedYear.value,\n      section: selectedSection.value,\n      subject: selectedSubject.value,\n      startDate: selectedStartDate.value,\n      endDate: selectedEndDate.value\n    });\n\n    // Get failing students count directly from failing students list\n    try {\n      const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n\n      // Get completed surveys to exclude those students\n      const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      const completedSurveyIds = new Set();\n      if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n        completedSurveysResponse.data.forEach(survey => {\n          completedSurveyIds.add(survey.studentId);\n        });\n        \n        // Set completed surveys count\n        completedSurveys.value = completedSurveysResponse.data.length;\n        \n        // Also store survey data for visualization\n        surveyData.value = completedSurveysResponse.data;\n      } else {\n        completedSurveys.value = 0;\n        surveyData.value = [];\n      }\n      \n      // Filter out students who have completed surveys\n      const failingStudentList = failingListResponse.data?.list || [];\n      if (Array.isArray(failingStudentList)) {\n        const filteredCount = failingStudentList.filter(student => \n          !completedSurveyIds.has(student.info._id)\n        ).length;\n        \n        failingStudents.value = filteredCount;\n      } else {\n        failingStudents.value = 0;\n      }\n    } catch (error) {\n      console.error('Error fetching failing students:', error);\n      failingStudents.value = 0;\n      completedSurveys.value = 0;\n      surveyData.value = [];\n    }\n\n    // Log survey data\n    console.log('Survey Data:', surveyData.value);\n\n    // Only update survey charts\n    nextTick(() => {\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n    });\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n    }\n    \n    // Reset data on error\n    failingStudents.value = 0;\n    completedSurveys.value = 0;\n    surveyData.value = [];\n    \n    // Update just survey average chart with empty data\n    nextTick(() => {\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n    });\n  }\n}\n\nconst createSurveyAverageChart = () => {\n  console.log('Starting survey average chart creation...');\n  if (!surveyAverageChart.value) {\n    console.error('Survey average chart reference not found');\n    return;\n  }\n  \n  const ctx = surveyAverageChart.value.getContext('2d');\n  if (!ctx) {\n    console.error('Could not get 2d context for survey average chart');\n    return;\n  }\n\n  console.log('Creating survey average chart with data:', surveyData.value);\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    console.log('Destroying existing chart');\n    existingChart.destroy();\n  }\n\n  // For testing/demo: Use sample data if no actual data exists\n  if (!surveyData.value || surveyData.value.length === 0) {\n    console.log('No survey data available, creating sample chart');\n    \n    const sampleLabels = ['Academic Problems', 'Financial Issues', 'Social Difficulties', 'Health Concerns', 'Family Problems'];\n    const sampleScores = [3.8, 2.5, 3.2, 1.7, 2.9];\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n        labels: sampleLabels,\n      datasets: [{\n          label: 'Average Score (Sample Data)',\n          data: sampleScores,\n          backgroundColor: 'rgba(59, 130, 246, 0.8)',\n          borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n          legend: { display: false },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n                return `Average Score: ${context.raw}`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n            max: 5,\n            title: { display: true, text: 'Average Score (1-5)' }\n          },\n          x: {\n            ticks: {\n              maxRotation: 45,\n              minRotation: 45\n          }\n        }\n      }\n    }\n  });\n    return;\n  }\n\n  // Extract questions and calculate average scores\n  const questionLabels = [];\n  const questionScores = [];\n  \n  // Collect all unique questions\n  const allQuestions = new Set();\n  surveyData.value.forEach(survey => {\n    if (survey.responses && Array.isArray(survey.responses)) {\n      survey.responses.forEach(response => {\n        if (response.question) {\n          allQuestions.add(response.question);\n        }\n      });\n    }\n  });\n  \n  console.log('Found questions:', allQuestions);\n  \n  // Sort questions alphabetically for consistent display\n  const sortedQuestions = [...allQuestions].sort();\n  \n  // If no questions found, show sample data\n  if (sortedQuestions.length === 0) {\n    console.log('No questions found in survey data, using sample data');\n    \n    const sampleLabels = ['Academic Problems', 'Financial Issues', 'Social Difficulties', 'Health Concerns', 'Family Problems'];\n    const sampleScores = [3.8, 2.5, 3.2, 1.7, 2.9];\n  \n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n        labels: sampleLabels,\n        datasets: [{\n          label: 'Average Score (Sample Data)',\n          data: sampleScores,\n          backgroundColor: 'rgba(59, 130, 246, 0.8)',\n          borderColor: 'rgba(59, 130, 246, 1)',\n          borderWidth: 1,\n          borderRadius: 5\n        }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n        plugins: {\n          legend: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (context) => {\n                return `Average Score: ${context.raw}`;\n              }\n            }\n          }\n        },\n      scales: {\n          y: {\n            beginAtZero: true,\n            max: 5,\n            title: { display: true, text: 'Average Score (1-5)' }\n          },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n    return;\n  }\n  \n  // Calculate average score for each question\n  sortedQuestions.forEach(question => {\n    let totalScore = 0;\n    let count = 0;\n    \n    surveyData.value.forEach(survey => {\n      if (survey.responses && Array.isArray(survey.responses)) {\n        survey.responses.forEach(response => {\n          if (response.question === question && response.answer !== undefined && !isNaN(response.answer)) {\n            totalScore += Number(response.answer);\n            count++;\n          }\n        });\n      }\n    });\n    \n    const averageScore = count > 0 ? totalScore / count : 0;\n    questionLabels.push(question.length > 30 ? question.substring(0, 30) + '...' : question);\n    questionScores.push(parseFloat(averageScore.toFixed(2)));\n  });\n  \n  console.log('Chart data prepared:', { labels: questionLabels, data: questionScores });\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: questionLabels,\n      datasets: [{\n        label: 'Average Score',\n        data: questionScores,\n        backgroundColor: 'rgba(59, 130, 246, 0.8)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: { display: false },\n        tooltip: {\n          callbacks: {\n            title: (tooltipItems) => {\n              // Show full question text in tooltip\n              const index = tooltipItems[0].dataIndex;\n              return sortedQuestions[index] || questionLabels[index];\n            },\n            label: (context) => {\n              return `Average Score: ${context.raw}`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 5,\n          title: { display: true, text: 'Average Score (1-5)' }\n        },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create pie chart for survey response distribution by severity level\nconst createSurveyDistributionChart = () => {\n  console.log('Starting survey distribution chart creation...');\n  if (!surveyDistributionChart.value) {\n    console.error('Survey distribution chart reference not found');\n    return;\n  }\n  \n  const ctx = surveyDistributionChart.value.getContext('2d');\n  if (!ctx) {\n    console.error('Could not get 2d context for survey distribution chart');\n    return;\n  }\n\n  console.log('Creating survey distribution chart with data:', surveyData.value);\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    console.log('Destroying existing distribution chart');\n    existingChart.destroy();\n  }\n\n  // For testing/demo: Always use sample data to ensure chart is visible\n  const sampleData = [25, 40, 20, 15]; // High, Medium, Low, Minimal\n\n  new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: ['High Priority', 'Medium Priority', 'Low Priority', 'Minimal Concern'],\n      datasets: [{\n        data: sampleData,\n        backgroundColor: [\n          'rgba(239, 68, 68, 0.8)',    // Red (High)\n          'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n          'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n          'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n        ],\n        borderColor: [\n          'rgba(239, 68, 68, 1)',\n          'rgba(251, 191, 36, 1)',\n          'rgba(59, 130, 246, 1)',\n          'rgba(52, 211, 153, 1)'\n        ],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      cutout: '60%',\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 15,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = sampleData.reduce((a, b) => a + b, 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${context.label}: ${value} (${percentage}%)`;\n            }\n          }\n        }\n    }\n}\n  });\n};\n\nconst formatDate = (date) => {\n  return moment(date).format('MMM D, YYYY')\n}\n\nconst applyFilters = async () => {\n  // Save selected values to localStorage\n  if (selectedYear.value) {\n    localStorage.setItem('selectedYear', selectedYear.value)\n  } else {\n    localStorage.removeItem('selectedYear')\n  }\n\n  if (selectedSection.value) {\n    localStorage.setItem('selectedSection', selectedSection.value)\n  } else {\n    localStorage.removeItem('selectedSection')\n  }\n\n  if (selectedSubject.value) {\n    localStorage.setItem('selectedSubject', selectedSubject.value)\n  } else {\n    localStorage.removeItem('selectedSubject')\n  }\n\n  await fetchDashboardData()\n}\n\n// Watch for filter changes\nwatch(selectedYear, handleYearChange)\nwatch([selectedSection, selectedSubject], applyFilters)\nwatch([selectedStartDate, selectedEndDate], () => {\n  if (selectedStartDate.value && selectedEndDate.value) {\n    // Validate date range\n    const start = moment(selectedStartDate.value);\n    const end = moment(selectedEndDate.value);\n    \n    if (end.isBefore(start)) {\n      selectedEndDate.value = selectedStartDate.value;\n    }\n    \n    fetchDashboardData();\n  }\n})\n\n// Watch surveyData for changes to update charts\nwatch(surveyData, () => {\n  loadingSurveyData.value = true;\n  \n  // Use nextTick to ensure DOM is updated\n  nextTick(() => {\n    try {\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n    } catch (error) {\n      console.error('Error creating survey charts:', error);\n    } finally {\n      loadingSurveyData.value = false;\n    }\n  });\n}, { deep: true })\n\nonMounted(async () => {\n  console.log('SSP Dashboard mounted');\n      await fetchDashboardData();\n  \n  // Initialize charts\n  createSurveyAverageChart();\n  createSurveyDistributionChart();\n  \n  // Set up watchers for filters\n  watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], async () => {\n    console.log('Filters changed, refreshing data');\n    await fetchDashboardData();\n  });\n});\n</script>\n\n<template>\n  <div class=\"dashboard-container\">\n    <!-- Welcome Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ store.state.auth.user?.firstName || 'User' }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n\n        <div class=\"d-flex justify-content-between align-items-center mb-4\">\n            <h2 class=\"dashboard-title\"></h2>\n\n      <!-- Filters -->\n            <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                    <i class=\"fas fa-filter me-2\"></i>\n                    {{ getFilterDisplay() }}\n                </button>\n                <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n                    <h6 class=\"dropdown-header\">Filter Options</h6>\n          \n                    <div class=\"mb-3\">\n            <label for=\"yearFilter\" class=\"form-label\">Year</label>\n            <select id=\"yearFilter\" class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n                            <option value=\"\">All Years</option>\n                            <option value=\"1st\">1st Year</option>\n                            <option value=\"2nd\">2nd Year</option>\n                            <option value=\"3rd\">3rd Year</option>\n                            <option value=\"4th\">4th Year</option>\n                        </select>\n                    </div>\n          \n                    <div class=\"mb-3\">\n            <label for=\"sectionFilter\" class=\"form-label\">Section</label>\n            <select id=\"sectionFilter\" class=\"form-select\" v-model=\"selectedSection\">\n                            <option value=\"\">All Sections</option>\n                            <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n                        </select>\n                    </div>\n          \n                    <div class=\"mb-3\">\n            <label for=\"subjectFilter\" class=\"form-label\">Subject</label>\n            <select id=\"subjectFilter\" class=\"form-select\" v-model=\"selectedSubject\">\n                            <option value=\"\">All Subjects</option>\n                            <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n                        </select>\n                    </div>\n          \n          <div class=\"dropdown-divider\"></div>\n          \n                    <div class=\"mb-3\">\n            <label for=\"startDateFilter\" class=\"form-label\">Start Date</label>\n            <input type=\"date\" id=\"startDateFilter\" class=\"form-control\" v-model=\"selectedStartDate\" :max=\"selectedEndDate || today\">\n                            </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"endDateFilter\" class=\"form-label\">End Date</label>\n            <input type=\"date\" id=\"endDateFilter\" class=\"form-control\" v-model=\"selectedEndDate\" :min=\"selectedStartDate\" :max=\"today\">\n                    </div>\n                    <div class=\"dropdown-divider\"></div>\n                    <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n                </div>\n            </div>\n        </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row mb-4 g-3\">\n      <!-- Failing Students Card -->\n      <div class=\"col-md-6\">\n                <div class=\"dashboard-card\">\n          <div class=\"icon-container bg-danger\">\n            <i class=\"fas fa-exclamation-triangle\"></i>\n                    </div>\n                    <div class=\"card-info\">\n            <h3 class=\"stat-title\">Failing Students</h3>\n            <div class=\"stat-value\">{{ failingStudents }}</div>\n                    </div>\n                </div>\n            </div>\n\n      <!-- Total Surveys Card -->\n      <div class=\"col-md-6\">\n                <div class=\"dashboard-card\">\n          <div class=\"icon-container bg-success\">\n            <i class=\"fas fa-clipboard-check\"></i>\n                    </div>\n                    <div class=\"card-info\">\n            <h3 class=\"stat-title\">Completed Surveys</h3>\n            <div class=\"stat-value\">{{ completedSurveys }}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    <!-- Survey Average Scores Chart -->\n        <div class=\"row mb-4\">\n      <div class=\"col-md-6\">\n                <div class=\"chart-card\">\n          <h3 class=\"card-title\">\n            <i class=\"fas fa-chart-bar me-2\"></i>\n            Survey Average Scores\n          </h3>\n                        <div class=\"chart-container\">\n            <div v-if=\"loadingSurveyData\" class=\"no-data-message\">\n              <div class=\"spinner-border text-primary spinner-border-sm me-2\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n              Loading survey data...\n                    </div>\n            <div v-else-if=\"!hasSurveyData\" class=\"no-data-message\">\n              <i class=\"fas fa-info-circle me-2\"></i>\n              No survey data available for the selected filters.\n                </div>\n            <canvas ref=\"surveyAverageChart\"></canvas>\n                    </div>\n                </div>\n            </div>\n\n      <!-- Survey Response Distribution Chart -->\n      <div class=\"col-md-6\">\n                <div class=\"chart-card\">\n          <h3 class=\"card-title\">\n            <i class=\"fas fa-chart-pie me-2\"></i>\n            Survey Response Distribution\n          </h3>\n          <p class=\"chart-description\">Distribution of student issues by priority level</p>\n                        <div class=\"chart-container\">\n            <div v-if=\"loadingSurveyData\" class=\"no-data-message\">\n              <div class=\"spinner-border text-primary spinner-border-sm me-2\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n              Loading survey data...\n                    </div>\n            <div v-else-if=\"!hasSurveyData\" class=\"no-data-message\">\n              <i class=\"fas fa-info-circle me-2\"></i>\n              No survey data available for the selected filters.\n                </div>\n            <canvas ref=\"surveyDistributionChart\"></canvas>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style scoped>\n.dashboard-container {\n  padding: 1.5rem;\n  background-color: #f8fafc;\n}\n\n.welcome-section {\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.page-title {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n}\n\n.welcome-message {\n  color: #64748b;\n  font-size: 1rem;\n  margin-bottom: 0;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 10px;\n  padding: 1.25rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  height: 100%;\n  transition: transform 0.15s ease, box-shadow 0.15s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 48px;\n  height: 48px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.bg-danger {\n  background-color: #ef4444;\n}\n\n.bg-success {\n  background-color: #10b981;\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.25rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.25rem 0;\n  font-weight: 500;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: #0f172a;\n  line-height: 1.2;\n}\n\n.chart-container {\n  position: relative;\n  height: 450px;\n  width: 100%;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 1.25rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: #0f172a;\n  margin-bottom: 1.25rem;\n  display: flex;\n  align-items: center;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n    padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.625rem 1rem;\n  font-size: 0.875rem;\n  color: #0f172a;\n  width: auto;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 6px;\n  font-weight: 500;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 280px;\n  padding: 1rem;\n  border: none;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 10px 15px rgba(0, 0, 0, 0.05);\n  border-radius: 8px;\n}\n\n.dropdown-header {\n  color: #0f172a;\n  font-weight: 600;\n  padding: 0;\n  margin-bottom: 1rem;\n  font-size: 0.9375rem;\n}\n\n.form-label {\n  font-weight: 500;\n  color: #475569;\n  margin-bottom: 0.375rem;\n  font-size: 0.8125rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  padding: 0.5rem;\n  font-size: 0.875rem;\n  color: #0f172a;\n  background-color: #fff;\n  transition: all 0.15s ease;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);\n}\n\n@media (max-width: 768px) {\n  .dashboard-container {\n  padding: 1rem;\n  }\n  \n  .chart-container {\n    height: 300px;\n  }\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Reactive properties\n    const totalAttendanceRecords = ref(0);\n    const attendanceRate = ref(0);\n\n    // Data availability flags\n    const hasPerformanceData = ref(false);\n    const hasAttendanceData = ref(false);\n    const hasAssessmentData = ref(false);\n    const hasActivity = ref(false);\n\n    // Computed properties\n    const formattedAttendanceRate = computed(() => {\n      return `${attendanceRate.value.toFixed(1)}%`;\n    });\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize with dummy data when no real data is available\n    const initDummyData = () => {\n      createPerformanceChart();\n      createPerformanceTrendChart();\n      createAssessmentTypeChart();\n      createAssessmentTypePerformanceChart();\n    };\n    const createPerformanceChart = () => {\n      if (performanceChart.value) {\n        performanceChart.value.destroy();\n      }\n      nextTick(() => {\n        const ctx = document.getElementById('performanceChart');\n        if (ctx) {\n          performanceChart.value = new Chart(ctx, {\n            type: 'bar',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Excellent', 'Good', 'Average', 'Poor'],\n              datasets: [{\n                label: 'Number of Students',\n                data: [10, 20, 15, 5],\n                backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336'],\n                borderWidth: 1\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  color: '#fff',\n                  font: {\n                    weight: 'bold'\n                  }\n                }\n              }\n            }\n          });\n        }\n      });\n    };\n    const createPerformanceTrendChart = () => {\n      if (performanceTrendChart.value) {\n        performanceTrendChart.value.destroy();\n      }\n      nextTick(() => {\n        const ctx = document.getElementById('performanceTrendChart');\n        if (ctx) {\n          performanceTrendChart.value = new Chart(ctx, {\n            type: 'line',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'],\n              datasets: [{\n                label: 'Average Score',\n                data: [75, 78, 80, 82, 85],\n                borderColor: '#2196F3',\n                tension: 0.4,\n                fill: false\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  align: 'end',\n                  anchor: 'end',\n                  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n                  borderRadius: 4,\n                  color: '#333',\n                  font: {\n                    weight: 'bold'\n                  }\n                }\n              }\n            }\n          });\n        }\n      });\n    };\n    const createAssessmentTypeChart = () => {\n      if (assessmentTypeChart.value) {\n        assessmentTypeChart.value.destroy();\n      }\n      nextTick(() => {\n        const ctx = document.getElementById('assessmentTypeChart');\n        if (ctx) {\n          assessmentTypeChart.value = new Chart(ctx, {\n            type: 'pie',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Quizzes', 'Assignments', 'Projects', 'Exams'],\n              datasets: [{\n                data: [30, 25, 20, 25],\n                backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336']\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  color: '#fff',\n                  font: {\n                    weight: 'bold'\n                  },\n                  formatter: (value, ctx) => {\n                    const label = ctx.chart.data.labels[ctx.dataIndex];\n                    return `${label}: ${value}%`;\n                  }\n                }\n              }\n            }\n          });\n        }\n      });\n    };\n    const createAssessmentTypePerformanceChart = () => {\n      if (assessmentTypePerformanceChart.value) {\n        assessmentTypePerformanceChart.value.destroy();\n      }\n      nextTick(() => {\n        const ctx = document.getElementById('assessmentTypePerformanceChart');\n        if (ctx) {\n          assessmentTypePerformanceChart.value = new Chart(ctx, {\n            type: 'radar',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Quizzes', 'Assignments', 'Projects', 'Exams'],\n              datasets: [{\n                label: 'Average Score',\n                data: [85, 75, 90, 80],\n                backgroundColor: 'rgba(33, 150, 243, 0.2)',\n                borderColor: '#2196F3',\n                borderWidth: 2,\n                pointBackgroundColor: '#2196F3'\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  color: '#333',\n                  font: {\n                    weight: 'bold'\n                  },\n                  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n                  borderRadius: 4,\n                  padding: 4\n                }\n              },\n              scales: {\n                r: {\n                  min: 0,\n                  max: 100\n                }\n              }\n            }\n          });\n        }\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        // Check if we have the required filters\n        if (!selectedYear.value || !userId) {\n          console.warn('Missing required filters for dashboard data');\n          return;\n        }\n        loading.value = true;\n\n        // Prepare parameters\n        const params = {\n          teacherId: userId,\n          year: selectedYear.value,\n          ...(selectedSection.value && {\n            section: selectedSection.value\n          }),\n          ...(selectedSubject.value && {\n            subject: selectedSubject.value\n          }),\n          ...(selectedStartDate.value && {\n            startDate: selectedStartDate.value\n          }),\n          ...(selectedEndDate.value && {\n            endDate: selectedEndDate.value\n          })\n        };\n        console.log('Fetching dashboard data with params:', params);\n\n        // Make API call to get dashboard data\n        const response = await axios.get('/api/dashboard/teacher-stats', {\n          params\n        });\n        const data = response.data;\n\n        // Process response data\n        if (data) {\n          // Update statistics\n          totalStudents.value = data.totalStudents || 0;\n          totalSections.value = data.totalSections || 0;\n          totalSubjects.value = data.totalSubjects || 0;\n          averageScore.value = data.averageScore || 0;\n          attendanceRate.value = data.attendanceRate || 0;\n          totalAttendanceRecords.value = data.totalAttendanceRecords || 0;\n\n          // Update recent activities\n          if (data.recentActivities && data.recentActivities.length > 0) {\n            recentActivities.value = data.recentActivities;\n            hasActivity.value = true;\n          } else {\n            recentActivities.value = [];\n            hasActivity.value = false;\n          }\n\n          // Update performance data if available\n          if (data.performanceData) {\n            // Update performance chart\n            if (performanceChart.value) {\n              performanceChart.value.destroy();\n            }\n            nextTick(() => {\n              const ctx = document.getElementById('performanceChart');\n              if (ctx) {\n                performanceChart.value = new Chart(ctx, {\n                  type: 'bar',\n                  plugins: [ChartDataLabels],\n                  data: {\n                    labels: data.performanceData.labels || ['Excellent', 'Good', 'Average', 'Poor'],\n                    datasets: [{\n                      label: 'Number of Students',\n                      data: data.performanceData.values || [0, 0, 0, 0],\n                      backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336'],\n                      borderWidth: 1\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    plugins: {\n                      datalabels: {\n                        color: '#fff',\n                        font: {\n                          weight: 'bold'\n                        }\n                      }\n                    }\n                  }\n                });\n              }\n            });\n            hasPerformanceData.value = true;\n          } else {\n            hasPerformanceData.value = false;\n          }\n\n          // Update assessment data if available\n          if (data.assessmentData && data.assessmentData.length > 0) {\n            // Update assessment type chart\n            if (assessmentTypeChart.value) {\n              assessmentTypeChart.value.destroy();\n            }\n            nextTick(() => {\n              const ctx = document.getElementById('assessmentTypeChart');\n              if (ctx) {\n                assessmentTypeChart.value = new Chart(ctx, {\n                  type: 'pie',\n                  plugins: [ChartDataLabels],\n                  data: {\n                    labels: data.assessmentData.map(item => item.type) || [],\n                    datasets: [{\n                      data: data.assessmentData.map(item => item.percentage) || [],\n                      backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336']\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    plugins: {\n                      datalabels: {\n                        color: '#fff',\n                        font: {\n                          weight: 'bold'\n                        },\n                        formatter: (value, ctx) => {\n                          const label = ctx.chart.data.labels[ctx.dataIndex];\n                          return `${label}: ${value}%`;\n                        }\n                      }\n                    }\n                  }\n                });\n              }\n            });\n            hasAssessmentData.value = true;\n          } else {\n            hasAssessmentData.value = false;\n          }\n\n          // If we don't have any data, initialize with dummy data\n          if (!hasPerformanceData.value && !hasAssessmentData.value && !hasActivity.value) {\n            initDummyData();\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize with dummy data on error\n        initDummyData();\n      } finally {\n        loading.value = false;\n      }\n    };\n    const updatePerformanceChart = data => {\n      // Process attendance data\n      const attendanceData = data.attendanceStats || {\n        present: 0,\n        absent: 0,\n        late: 0,\n        excused: 0\n      };\n\n      // Calculate total records\n      const totalRecords = (attendanceData.present || 0) + (attendanceData.absent || 0) + (attendanceData.late || 0) + (attendanceData.excused || 0);\n      totalAttendanceRecords.value = totalRecords;\n\n      // Calculate attendance rate (present + excused) / total * 100\n      if (totalRecords > 0) {\n        attendanceRate.value = (attendanceData.present + attendanceData.excused) / totalRecords * 100;\n      } else {\n        attendanceRate.value = 0;\n      }\n\n      // Prepare chart data\n      const chartData = {\n        labels: ['Present', 'Absent', 'Late', 'Excused'],\n        datasets: [{\n          data: [attendanceData.present || 0, attendanceData.absent || 0, attendanceData.late || 0, attendanceData.excused || 0],\n          backgroundColor: ['rgba(39, 174, 96, 0.7)',\n          // Green for present\n          'rgba(231, 76, 60, 0.7)',\n          // Red for absent\n          'rgba(241, 196, 15, 0.7)',\n          // Yellow for late\n          'rgba(52, 152, 219, 0.7)' // Blue for excused\n          ],\n          borderColor: ['rgba(39, 174, 96, 1)', 'rgba(231, 76, 60, 1)', 'rgba(241, 196, 15, 1)', 'rgba(52, 152, 219, 1)'],\n          borderWidth: 1,\n          hoverOffset: 4\n        }]\n      };\n\n      // Chart options\n      const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right',\n            labels: {\n              font: {\n                family: \"'Poppins', sans-serif\",\n                size: 12\n              },\n              padding: 20\n            }\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                const label = context.label || '';\n                const value = context.raw || 0;\n                const percentage = totalRecords > 0 ? (value / totalRecords * 100).toFixed(1) + '%' : '0%';\n                return `${label}: ${value} (${percentage})`;\n              }\n            }\n          },\n          datalabels: {\n            display: totalRecords > 0,\n            formatter: (value, ctx) => {\n              if (value === 0) return '';\n              return totalRecords > 0 ? (value / totalRecords * 100).toFixed(0) + '%' : '';\n            },\n            color: '#fff',\n            font: {\n              weight: 'bold'\n            }\n          }\n        }\n      };\n\n      // Check if chart instance exists and destroy it\n      if (performanceChart.value) {\n        performanceChart.value.destroy();\n      }\n\n      // Get canvas element\n      const ctx = document.getElementById('performanceDistChart');\n      if (ctx) {\n        // Create new chart\n        performanceChart.value = new Chart(ctx, {\n          type: 'doughnut',\n          data: chartData,\n          options: options,\n          plugins: [ChartDataLabels]\n        });\n      } else {\n        console.error('Canvas element not found');\n      }\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Create more performance-focused data\n      // We will display average scores by assessment type, not just counts\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n          assessmentData.passRates[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n\n        // Calculate average scores and pass rates per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n\n            // Calculate pass rate\n            const passingCount = typeAssessments.filter(a => (parseFloat(a.averageScore) || 0) >= 70).length;\n            assessmentData.passRates[type] = (passingCount / totalCount * 100).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n            assessmentData.passRates[type] = 0;\n          }\n        });\n      }\n\n      // Create dual-axis chart showing both average scores and pass rates\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n            backgroundColor: 'rgba(59, 130, 246, 0.8)',\n            // Blue\n            borderColor: 'rgb(45, 110, 220)',\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6,\n            order: 2\n          }, {\n            label: 'Pass Rate (%)',\n            data: assessmentTypes.map(type => assessmentData.passRates[type]),\n            backgroundColor: 'rgba(0, 0, 0, 0)',\n            // Transparent background\n            borderColor: 'rgb(20, 170, 100)',\n            // Green\n            borderWidth: 3,\n            type: 'line',\n            pointStyle: 'circle',\n            pointRadius: 6,\n            pointBackgroundColor: 'rgb(20, 170, 100)',\n            tension: 0.3,\n            order: 1,\n            yAxisID: 'y1'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            y1: {\n              beginAtZero: true,\n              max: 100,\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Pass Rate (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                drawOnChartArea: false\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  size: 12\n                },\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n\n      // Add summary section to chart to show key insights\n      const chartContainer = assessmentTypeChart.value.parentNode;\n\n      // Create or update summary div\n      let summaryDiv = chartContainer.querySelector('.assessment-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('assessment-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n\n      // Calculate the highest performing assessment type\n      let highestType = assessmentTypes[0];\n      let highestScore = parseFloat(assessmentData.averageScores[assessmentTypes[0]]) || 0;\n      assessmentTypes.forEach(type => {\n        const score = parseFloat(assessmentData.averageScores[type]) || 0;\n        if (score > highestScore) {\n          highestScore = score;\n          highestType = type;\n        }\n      });\n\n      // Add insightful summary\n      summaryDiv.innerHTML = `\n        <div class=\"assessment-insight\">\n          <div class=\"insight-title\">Performance Insights:</div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Highest performing assessment type:</span>\n            <span class=\"insight-value\">${highestType} (${highestScore}%)</span>\n          </div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Total assessments analyzed:</span>\n            <span class=\"insight-value\">${assessmentTypes.reduce((sum, type) => sum + (assessmentData.totalCounts[type] || 0), 0)}</span>\n          </div>\n        </div>\n      `;\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes to automatically update dashboard data\n    watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], () => {\n      if (selectedYear.value) {\n        fetchDashboardData();\n      }\n    }, {\n      deep: true\n    });\n\n    // When mounted, load initial data\n    onMounted(async () => {\n      await fetchTeacherSectionsAndSubjects();\n      initDummyData(); // Initialize with dummy data first\n      await fetchDashboardData();\n\n      // Set up date range filter defaults\n      if (!selectedStartDate.value) {\n        selectedStartDate.value = moment().subtract(30, 'days').format('YYYY-MM-DD');\n      }\n      if (!selectedEndDate.value) {\n        selectedEndDate.value = today.value;\n      }\n    });\n\n    // Return values for template\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      formattedAttendanceRate,\n      attendanceRate,\n      totalAttendanceRecords,\n      hasPerformanceData,\n      hasAttendanceData,\n      hasAssessmentData,\n      hasActivity,\n      performanceChart,\n      performanceTrendChart,\n      assessmentTypeChart,\n      assessmentTypePerformanceChart,\n      handleYearChange,\n      fetchDashboardData,\n      getFilterDisplay,\n      resetFilters\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","ChartDataLabels","axios","moment","name","setup","store","performanceChart","performanceTrendChart","assessmentTypeChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","totalAttendanceRecords","attendanceRate","hasPerformanceData","hasAttendanceData","hasAssessmentData","hasActivity","formattedAttendanceRate","value","toFixed","getTeacherId","user","state","auth","_id","console","error","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","length","join","initDummyData","createPerformanceChart","createPerformanceTrendChart","createAssessmentTypeChart","createAssessmentTypePerformanceChart","destroy","ctx","document","getElementById","type","plugins","labels","datasets","label","backgroundColor","borderWidth","options","responsive","datalabels","color","font","weight","borderColor","tension","fill","align","anchor","borderRadius","formatter","chart","dataIndex","pointBackgroundColor","padding","scales","r","min","max","userId","warn","loading","startDate","endDate","response","performanceData","values","assessmentData","item","percentage","updatePerformanceChart","attendanceData","attendanceStats","present","absent","late","excused","totalRecords","chartData","hoverOffset","maintainAspectRatio","legend","position","family","size","tooltip","callbacks","context","raw","display","updateAssessmentTypeChart","getContext","existingChart","getChart","assessmentTypes","Array","isArray","averageScores","totalCounts","passRates","forEach","typeAssessments","filter","a","totalCount","totalScore","reduce","sum","parseFloat","passingCount","barPercentage","order","pointStyle","pointRadius","yAxisID","x","grid","y","beginAtZero","title","text","ticks","y1","drawOnChartArea","boxWidth","dataset","afterLabel","count","titleFont","bodyFont","chartContainer","parentNode","summaryDiv","querySelector","createElement","classList","add","appendChild","highestType","highestScore","score","innerHTML","updatePerformanceTrendChart","validData","d","date","Number","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","updateAssessmentTypePerformanceChart","trendsByType","Quiz","Activity","performanceTrends","trend","Date","Object","keys","b","allDates","flat","entries","index","colors","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","deep","subtract","resetFilters"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\">{{ totalStudents }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\">{{ totalSections }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\">{{ totalSubjects }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Secondary Stats Row -->\n    <div class=\"row mt-4\">\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card h-100\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-clock\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"hasAttendanceData\">{{ formattedAttendanceRate }}</div>\n            <div class=\"no-data\" v-else>No attendance data available</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card h-100\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-tasks\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Assessment Completion</h3>\n            <div class=\"stat-value\" v-if=\"hasAssessmentData\">{{ assessmentCompletion }}%</div>\n            <div class=\"no-data\" v-else>No assessment data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4 mt-4\">\n      <!-- Attendance Statistics Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-clock me-2\"></i>\n              Attendance Statistics\n            </h5>\n            <p class=\"chart-description\">Overview of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores and passing rates by assessment type</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Reactive properties\n    const totalAttendanceRecords = ref(0)\n    const attendanceRate = ref(0)\n    \n    // Data availability flags\n    const hasPerformanceData = ref(false)\n    const hasAttendanceData = ref(false)\n    const hasAssessmentData = ref(false)\n    const hasActivity = ref(false)\n    \n    // Computed properties\n    const formattedAttendanceRate = computed(() => {\n      return `${attendanceRate.value.toFixed(1)}%`\n    })\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n          \n          sections.value = uniqueSections.sort()\n          subjects.value = uniqueSubjects.sort()\n          \n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize with dummy data when no real data is available\n    const initDummyData = () => {\n      createPerformanceChart()\n      createPerformanceTrendChart()\n      createAssessmentTypeChart()\n      createAssessmentTypePerformanceChart()\n    }\n\n    const createPerformanceChart = () => {\n      if (performanceChart.value) {\n        performanceChart.value.destroy()\n      }\n      \n      nextTick(() => {\n        const ctx = document.getElementById('performanceChart')\n        if (ctx) {\n          performanceChart.value = new Chart(ctx, {\n            type: 'bar',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Excellent', 'Good', 'Average', 'Poor'],\n              datasets: [{\n                label: 'Number of Students',\n                data: [10, 20, 15, 5],\n                backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336'],\n                borderWidth: 1\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  color: '#fff',\n                  font: {\n                    weight: 'bold'\n                  }\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n\n    const createPerformanceTrendChart = () => {\n      if (performanceTrendChart.value) {\n        performanceTrendChart.value.destroy()\n      }\n      \n      nextTick(() => {\n        const ctx = document.getElementById('performanceTrendChart')\n        if (ctx) {\n          performanceTrendChart.value = new Chart(ctx, {\n            type: 'line',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'],\n              datasets: [{\n                label: 'Average Score',\n                data: [75, 78, 80, 82, 85],\n                borderColor: '#2196F3',\n                tension: 0.4,\n                fill: false\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  align: 'end',\n                  anchor: 'end',\n                  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n                  borderRadius: 4,\n                  color: '#333',\n                  font: {\n                    weight: 'bold'\n                  }\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n\n    const createAssessmentTypeChart = () => {\n      if (assessmentTypeChart.value) {\n        assessmentTypeChart.value.destroy()\n      }\n      \n      nextTick(() => {\n        const ctx = document.getElementById('assessmentTypeChart')\n        if (ctx) {\n          assessmentTypeChart.value = new Chart(ctx, {\n            type: 'pie',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Quizzes', 'Assignments', 'Projects', 'Exams'],\n              datasets: [{\n                data: [30, 25, 20, 25],\n                backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336']\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  color: '#fff',\n                  font: {\n                    weight: 'bold'\n                  },\n                  formatter: (value, ctx) => {\n                    const label = ctx.chart.data.labels[ctx.dataIndex]\n                    return `${label}: ${value}%`\n                  }\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n\n    const createAssessmentTypePerformanceChart = () => {\n      if (assessmentTypePerformanceChart.value) {\n        assessmentTypePerformanceChart.value.destroy()\n      }\n      \n      nextTick(() => {\n        const ctx = document.getElementById('assessmentTypePerformanceChart')\n        if (ctx) {\n          assessmentTypePerformanceChart.value = new Chart(ctx, {\n            type: 'radar',\n            plugins: [ChartDataLabels],\n            data: {\n              labels: ['Quizzes', 'Assignments', 'Projects', 'Exams'],\n              datasets: [{\n                label: 'Average Score',\n                data: [85, 75, 90, 80],\n                backgroundColor: 'rgba(33, 150, 243, 0.2)',\n                borderColor: '#2196F3',\n                borderWidth: 2,\n                pointBackgroundColor: '#2196F3'\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                datalabels: {\n                  color: '#333',\n                  font: {\n                    weight: 'bold'\n                  },\n                  backgroundColor: 'rgba(255, 255, 255, 0.7)',\n                  borderRadius: 4,\n                  padding: 4\n                }\n              },\n              scales: {\n                r: {\n                  min: 0,\n                  max: 100\n                }\n              }\n            }\n          })\n        }\n      })\n    }\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        // Check if we have the required filters\n        if (!selectedYear.value || !userId) {\n          console.warn('Missing required filters for dashboard data')\n          return\n        }\n\n        loading.value = true\n        \n        // Prepare parameters\n        const params = {\n          teacherId: userId,\n          year: selectedYear.value,\n          ...(selectedSection.value && { section: selectedSection.value }),\n          ...(selectedSubject.value && { subject: selectedSubject.value }),\n          ...(selectedStartDate.value && { startDate: selectedStartDate.value }),\n          ...(selectedEndDate.value && { endDate: selectedEndDate.value })\n        }\n        \n        console.log('Fetching dashboard data with params:', params)\n        \n        // Make API call to get dashboard data\n        const response = await axios.get('/api/dashboard/teacher-stats', { params })\n        const data = response.data\n        \n        // Process response data\n        if (data) {\n          // Update statistics\n          totalStudents.value = data.totalStudents || 0\n          totalSections.value = data.totalSections || 0\n          totalSubjects.value = data.totalSubjects || 0\n          averageScore.value = data.averageScore || 0\n          attendanceRate.value = data.attendanceRate || 0\n          totalAttendanceRecords.value = data.totalAttendanceRecords || 0\n          \n          // Update recent activities\n          if (data.recentActivities && data.recentActivities.length > 0) {\n            recentActivities.value = data.recentActivities\n            hasActivity.value = true\n          } else {\n            recentActivities.value = []\n            hasActivity.value = false\n          }\n          \n          // Update performance data if available\n          if (data.performanceData) {\n            // Update performance chart\n            if (performanceChart.value) {\n              performanceChart.value.destroy()\n            }\n            nextTick(() => {\n              const ctx = document.getElementById('performanceChart')\n              if (ctx) {\n                performanceChart.value = new Chart(ctx, {\n                  type: 'bar',\n                  plugins: [ChartDataLabels],\n                  data: {\n                    labels: data.performanceData.labels || ['Excellent', 'Good', 'Average', 'Poor'],\n                    datasets: [{\n                      label: 'Number of Students',\n                      data: data.performanceData.values || [0, 0, 0, 0],\n                      backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336'],\n                      borderWidth: 1\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    plugins: {\n                      datalabels: {\n                        color: '#fff',\n                        font: {\n                          weight: 'bold'\n                        }\n                      }\n                    }\n                  }\n                })\n              }\n            })\n            hasPerformanceData.value = true\n          } else {\n            hasPerformanceData.value = false\n          }\n          \n          // Update assessment data if available\n          if (data.assessmentData && data.assessmentData.length > 0) {\n            // Update assessment type chart\n            if (assessmentTypeChart.value) {\n              assessmentTypeChart.value.destroy()\n            }\n            nextTick(() => {\n              const ctx = document.getElementById('assessmentTypeChart')\n              if (ctx) {\n                assessmentTypeChart.value = new Chart(ctx, {\n                  type: 'pie',\n                  plugins: [ChartDataLabels],\n                  data: {\n                    labels: data.assessmentData.map(item => item.type) || [],\n                    datasets: [{\n                      data: data.assessmentData.map(item => item.percentage) || [],\n                      backgroundColor: ['#4CAF50', '#2196F3', '#FFC107', '#F44336']\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    plugins: {\n                      datalabels: {\n                        color: '#fff',\n                        font: {\n                          weight: 'bold'\n                        },\n                        formatter: (value, ctx) => {\n                          const label = ctx.chart.data.labels[ctx.dataIndex]\n                          return `${label}: ${value}%`\n                        }\n                      }\n                    }\n                  }\n                })\n              }\n            })\n            hasAssessmentData.value = true\n          } else {\n            hasAssessmentData.value = false\n          }\n          \n          // If we don't have any data, initialize with dummy data\n          if (!hasPerformanceData.value && !hasAssessmentData.value && !hasActivity.value) {\n            initDummyData()\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error)\n        // Initialize with dummy data on error\n        initDummyData()\n      } finally {\n        loading.value = false\n      }\n    }\n\n    const updatePerformanceChart = (data) => {\n      // Process attendance data\n      const attendanceData = data.attendanceStats || {\n        present: 0,\n        absent: 0,\n        late: 0,\n        excused: 0\n      };\n      \n      // Calculate total records\n      const totalRecords = \n        (attendanceData.present || 0) + \n        (attendanceData.absent || 0) + \n        (attendanceData.late || 0) + \n        (attendanceData.excused || 0);\n      \n      totalAttendanceRecords.value = totalRecords;\n      \n      // Calculate attendance rate (present + excused) / total * 100\n      if (totalRecords > 0) {\n        attendanceRate.value = ((attendanceData.present + attendanceData.excused) / totalRecords) * 100;\n      } else {\n        attendanceRate.value = 0;\n      }\n      \n      // Prepare chart data\n      const chartData = {\n        labels: ['Present', 'Absent', 'Late', 'Excused'],\n        datasets: [{\n          data: [\n            attendanceData.present || 0,\n            attendanceData.absent || 0,\n            attendanceData.late || 0,\n            attendanceData.excused || 0\n          ],\n          backgroundColor: [\n            'rgba(39, 174, 96, 0.7)',  // Green for present\n            'rgba(231, 76, 60, 0.7)',  // Red for absent\n            'rgba(241, 196, 15, 0.7)', // Yellow for late\n            'rgba(52, 152, 219, 0.7)'  // Blue for excused\n          ],\n          borderColor: [\n            'rgba(39, 174, 96, 1)',\n            'rgba(231, 76, 60, 1)',\n            'rgba(241, 196, 15, 1)',\n            'rgba(52, 152, 219, 1)'\n          ],\n          borderWidth: 1,\n          hoverOffset: 4\n        }]\n      };\n      \n      // Chart options\n      const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right',\n            labels: {\n              font: {\n                family: \"'Poppins', sans-serif\",\n                size: 12\n              },\n              padding: 20\n            }\n          },\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                const label = context.label || '';\n                const value = context.raw || 0;\n                const percentage = totalRecords > 0 \n                  ? ((value / totalRecords) * 100).toFixed(1) + '%' \n                  : '0%';\n                return `${label}: ${value} (${percentage})`;\n              }\n            }\n          },\n          datalabels: {\n            display: totalRecords > 0,\n            formatter: (value, ctx) => {\n              if (value === 0) return '';\n              return totalRecords > 0 \n                ? ((value / totalRecords) * 100).toFixed(0) + '%' \n                : '';\n            },\n            color: '#fff',\n            font: {\n              weight: 'bold'\n            }\n          }\n        }\n      };\n      \n      // Check if chart instance exists and destroy it\n      if (performanceChart.value) {\n        performanceChart.value.destroy();\n      }\n      \n      // Get canvas element\n      const ctx = document.getElementById('performanceDistChart');\n      \n      if (ctx) {\n        // Create new chart\n        performanceChart.value = new Chart(ctx, {\n          type: 'doughnut',\n          data: chartData,\n          options: options,\n          plugins: [ChartDataLabels]\n        });\n      } else {\n        console.error('Canvas element not found');\n      }\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Create more performance-focused data\n      // We will display average scores by assessment type, not just counts\n      \n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n          assessmentData.passRates[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        \n        // Calculate average scores and pass rates per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n            \n            // Calculate pass rate\n            const passingCount = typeAssessments.filter(a => (parseFloat(a.averageScore) || 0) >= 70).length;\n            assessmentData.passRates[type] = ((passingCount / totalCount) * 100).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n            assessmentData.passRates[type] = 0;\n          }\n        });\n      }\n      \n      // Create dual-axis chart showing both average scores and pass rates\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: 'rgba(59, 130, 246, 0.8)', // Blue\n              borderColor: 'rgb(45, 110, 220)',\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6,\n              order: 2\n            },\n            {\n              label: 'Pass Rate (%)',\n              data: assessmentTypes.map(type => assessmentData.passRates[type]),\n              backgroundColor: 'rgba(0, 0, 0, 0)', // Transparent background\n              borderColor: 'rgb(20, 170, 100)', // Green\n              borderWidth: 3,\n              type: 'line',\n              pointStyle: 'circle',\n              pointRadius: 6,\n              pointBackgroundColor: 'rgb(20, 170, 100)',\n              tension: 0.3,\n              order: 1,\n              yAxisID: 'y1'\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            y1: {\n              beginAtZero: true,\n              max: 100,\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Pass Rate (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                drawOnChartArea: false\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  size: 12\n                },\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n      \n      // Add summary section to chart to show key insights\n      const chartContainer = assessmentTypeChart.value.parentNode;\n      \n      // Create or update summary div\n      let summaryDiv = chartContainer.querySelector('.assessment-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('assessment-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n      \n      // Calculate the highest performing assessment type\n      let highestType = assessmentTypes[0];\n      let highestScore = parseFloat(assessmentData.averageScores[assessmentTypes[0]]) || 0;\n      \n      assessmentTypes.forEach(type => {\n        const score = parseFloat(assessmentData.averageScores[type]) || 0;\n        if (score > highestScore) {\n          highestScore = score;\n          highestType = type;\n        }\n      });\n      \n      // Add insightful summary\n      summaryDiv.innerHTML = `\n        <div class=\"assessment-insight\">\n          <div class=\"insight-title\">Performance Insights:</div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Highest performing assessment type:</span>\n            <span class=\"insight-value\">${highestType} (${highestScore}%)</span>\n          </div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Total assessments analyzed:</span>\n            <span class=\"insight-value\">${assessmentTypes.reduce((sum, type) => sum + (assessmentData.totalCounts[type] || 0), 0)}</span>\n          </div>\n        </div>\n      `;\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes to automatically update dashboard data\n    watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], () => {\n      if (selectedYear.value) {\n        fetchDashboardData();\n      }\n    }, { deep: true });\n\n    // When mounted, load initial data\n    onMounted(async () => {\n      await fetchTeacherSectionsAndSubjects();\n      initDummyData(); // Initialize with dummy data first\n      await fetchDashboardData();\n      \n      // Set up date range filter defaults\n      if (!selectedStartDate.value) {\n        selectedStartDate.value = moment().subtract(30, 'days').format('YYYY-MM-DD');\n      }\n      if (!selectedEndDate.value) {\n        selectedEndDate.value = today.value;\n      }\n    })\n\n    // Return values for template\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      formattedAttendanceRate,\n      attendanceRate,\n      totalAttendanceRecords,\n      hasPerformanceData,\n      hasAttendanceData,\n      hasAssessmentData,\n      hasActivity,\n      performanceChart,\n      performanceTrendChart,\n      assessmentTypeChart,\n      assessmentTypePerformanceChart,\n      handleYearChange,\n      fetchDashboardData,\n      getFilterDisplay,\n      resetFilters\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Performance Summary Styles */\n.performance-summary {\n  margin-top: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 0.75rem;\n  border: 1px solid #e2e8f0;\n}\n\n.summary-stats {\n  display: flex;\n  justify-content: space-around;\n  gap: 1rem;\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  min-width: 120px;\n}\n\n.stat-item.passing {\n  background-color: rgba(52, 211, 153, 0.15);\n  border-left: 4px solid rgb(52, 211, 153);\n}\n\n.stat-item.failing {\n  background-color: rgba(239, 68, 68, 0.15);\n  border-left: 4px solid rgb(239, 68, 68);\n}\n\n.stat-item .stat-value {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 0.25rem;\n}\n\n.stat-item.passing .stat-value {\n  color: rgb(20, 150, 80);\n}\n\n.stat-item.failing .stat-value {\n  color: rgb(220, 50, 50);\n}\n\n.stat-item .stat-label {\n  font-size: 0.8rem;\n  font-weight: 500;\n  color: #64748b;\n}\n\n/* Assessment Insights Styles */\n.assessment-summary {\n  margin-top: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n  border: 1px solid #e2e8f0;\n}\n\n.assessment-insight {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.insight-title {\n  font-weight: 700;\n  font-size: 0.9rem;\n  color: #1e293b;\n  margin-bottom: 0.25rem;\n}\n\n.insight-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n.insight-label {\n  font-size: 0.85rem;\n  color: #64748b;\n}\n\n.insight-value {\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: #003366;\n  padding: 0.25rem 0.5rem;\n  background-color: rgba(0, 51, 102, 0.1);\n  border-radius: 4px;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
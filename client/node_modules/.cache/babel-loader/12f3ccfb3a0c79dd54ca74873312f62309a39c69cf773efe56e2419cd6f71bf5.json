{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withModifiers as _withModifiers, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, vModelRadio as _vModelRadio, Teleport as _Teleport, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"attendance-view\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex align-items-center gap-3\"\n};\nconst _hoisted_5 = [\"disabled\"];\nconst _hoisted_6 = {\n  class: \"card\"\n};\nconst _hoisted_7 = {\n  class: \"card-body\"\n};\nconst _hoisted_8 = {\n  class: \"table-controls mb-4\"\n};\nconst _hoisted_9 = {\n  class: \"d-flex gap-3 align-items-center\"\n};\nconst _hoisted_10 = {\n  class: \"d-flex gap-3\"\n};\nconst _hoisted_11 = {\n  class: \"dropdown\"\n};\nconst _hoisted_12 = {\n  class: \"dropdown-menu control-menu\"\n};\nconst _hoisted_13 = {\n  class: \"dropdown\"\n};\nconst _hoisted_14 = {\n  class: \"btn btn-control\",\n  type: \"button\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_15 = {\n  key: 0,\n  class: \"filter-badge\"\n};\nconst _hoisted_16 = {\n  class: \"dropdown-menu control-menu p-3\",\n  style: {\n    \"width\": \"280px\"\n  }\n};\nconst _hoisted_17 = {\n  class: \"mb-3\"\n};\nconst _hoisted_18 = [\"value\"];\nconst _hoisted_19 = {\n  class: \"mb-3\"\n};\nconst _hoisted_20 = [\"disabled\"];\nconst _hoisted_21 = [\"value\"];\nconst _hoisted_22 = {\n  class: \"mb-3\"\n};\nconst _hoisted_23 = [\"disabled\"];\nconst _hoisted_24 = [\"value\"];\nconst _hoisted_25 = {\n  class: \"d-flex justify-content-end gap-2 mt-3\"\n};\nconst _hoisted_26 = {\n  class: \"search-control\",\n  style: {\n    \"flex\": \"1\",\n    \"max-width\": \"400px\"\n  }\n};\nconst _hoisted_27 = {\n  class: \"input-group\"\n};\nconst _hoisted_28 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_29 = {\n  class: \"table table-hover\"\n};\nconst _hoisted_30 = [\"onClick\"];\nconst _hoisted_31 = {\n  class: \"attendance-status-container\"\n};\nconst _hoisted_32 = [\"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_33 = [\"selected\"];\nconst _hoisted_34 = [\"selected\"];\nconst _hoisted_35 = [\"selected\"];\nconst _hoisted_36 = {\n  key: 0\n};\nconst _hoisted_37 = {\n  colspan: \"4\",\n  class: \"text-center py-4\"\n};\nconst _hoisted_38 = {\n  class: \"empty-state-message\"\n};\nconst _hoisted_39 = {\n  key: 0,\n  class: \"text-muted small\"\n};\nconst _hoisted_40 = {\n  class: \"pagination-controls mt-3 d-flex justify-content-between align-items-center\"\n};\nconst _hoisted_41 = {\n  class: \"pagination-info\"\n};\nconst _hoisted_42 = {\n  class: \"pagination-buttons\"\n};\nconst _hoisted_43 = [\"disabled\"];\nconst _hoisted_44 = [\"disabled\"];\nconst _hoisted_45 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_46 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_47 = {\n  class: \"calendar-body\"\n};\nconst _hoisted_48 = {\n  class: \"input-group\"\n};\nconst _hoisted_49 = [\"value\", \"max\"];\nconst _hoisted_50 = {\n  class: \"quick-date-buttons mt-3\"\n};\nconst _hoisted_51 = {\n  class: \"table\"\n};\nconst _hoisted_52 = {\n  key: 0\n};\nconst _hoisted_53 = {\n  class: \"modal-overlay\"\n};\nconst _hoisted_54 = {\n  class: \"modal-wrapper\"\n};\nconst _hoisted_55 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_56 = {\n  class: \"modal-content\"\n};\nconst _hoisted_57 = {\n  class: \"modal-header\"\n};\nconst _hoisted_58 = {\n  class: \"modal-body\"\n};\nconst _hoisted_59 = {\n  class: \"mb-3\"\n};\nconst _hoisted_60 = {\n  class: \"mb-3\"\n};\nconst _hoisted_61 = {\n  class: \"mt-4\"\n};\nconst _hoisted_62 = {\n  class: \"form-check\"\n};\nconst _hoisted_63 = {\n  class: \"form-check\"\n};\nconst _hoisted_64 = {\n  class: \"mt-4 text-end\"\n};\nconst _hoisted_65 = [\"disabled\"];\nconst _hoisted_66 = {\n  key: 0\n};\nconst _hoisted_67 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StudentDetailsModal = _resolveComponent(\"StudentDetailsModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Control Buttons and Date Navigation \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Any attendance-specific buttons can go here \"), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.refreshAttendance && $setup.refreshAttendance(...args)),\n    title: \"Refresh attendance data from database\"\n  }, _cache[37] || (_cache[37] = [_createElementVNode(\"i\", {\n    class: \"fas fa-sync-alt me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Refresh Attendance \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-success\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.openExportModal && $setup.openExportModal(...args)),\n    title: \"Export attendance records\"\n  }, _cache[38] || (_cache[38] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export Attendance \")]))]), _createCommentVNode(\" Date Navigation \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[2] || (_cache[2] = $event => $setup.navigateDate(-1))\n  }, _cache[39] || (_cache[39] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"div\", {\n    class: \"date-display\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.openCalendarPopup && $setup.openCalendarPopup(...args)),\n    role: \"button\"\n  }, _toDisplayString($setup.formatDate($setup.currentDate)), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[4] || (_cache[4] = $event => $setup.navigateDate(1)),\n    disabled: $setup.isNextDayDisabled\n  }, _cache[40] || (_cache[40] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_5)])]), _createCommentVNode(\" Attendance Table \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" Table Controls \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_createCommentVNode(\" Sort Dropdown \"), _createElementVNode(\"div\", _hoisted_11, [_cache[45] || (_cache[45] = _createElementVNode(\"button\", {\n    class: \"btn btn-control\",\n    type: \"button\",\n    \"data-bs-toggle\": \"dropdown\",\n    \"aria-expanded\": \"false\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-sort me-2\"\n  }), _createTextVNode(\" Sort by \")], -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_12, [_createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item d-flex align-items-center\",\n    href: \"#\",\n    onClick: _cache[5] || (_cache[5] = $event => $setup.sortBy('studentNumber'))\n  }, [_cache[41] || (_cache[41] = _createElementVNode(\"i\", {\n    class: \"fas fa-sort-numeric-down me-2\"\n  }, null, -1 /* HOISTED */)), _cache[42] || (_cache[42] = _createTextVNode(\" Student Number \")), _createElementVNode(\"i\", {\n    class: _normalizeClass([$setup.getSortIcon('studentNumber'), \"ms-auto\"])\n  }, null, 2 /* CLASS */)])]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item d-flex align-items-center\",\n    href: \"#\",\n    onClick: _cache[6] || (_cache[6] = $event => $setup.sortBy('lastName'))\n  }, [_cache[43] || (_cache[43] = _createElementVNode(\"i\", {\n    class: \"fas fa-sort-alpha-down me-2\"\n  }, null, -1 /* HOISTED */)), _cache[44] || (_cache[44] = _createTextVNode(\" Name \")), _createElementVNode(\"i\", {\n    class: _normalizeClass([$setup.getSortIcon('lastName'), \"ms-auto\"])\n  }, null, 2 /* CLASS */)])])])]), _createCommentVNode(\" Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", _hoisted_14, [_cache[46] || (_cache[46] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _cache[47] || (_cache[47] = _createTextVNode(\" Filter \")), $setup.selectedYear || $setup.selectedSection || $setup.selectedSubject ? (_openBlock(), _createElementBlock(\"span\", _hoisted_15, \"!\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_16, [_cache[54] || (_cache[54] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header mb-2\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [_cache[49] || (_cache[49] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Year Level\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $setup.selectedYear = $event),\n    onChange: _cache[8] || (_cache[8] = (...args) => $setup.applyFilters && $setup.applyFilters(...args))\n  }, [_cache[48] || (_cache[48] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Year\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_18);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_19, [_cache[51] || (_cache[51] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear,\n    onChange: _cache[10] || (_cache[10] = (...args) => $setup.applyFilters && $setup.applyFilters(...args))\n  }, [_cache[50] || (_cache[50] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Section\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredSections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_21);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_20), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_22, [_cache[53] || (_cache[53] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedSection,\n    onChange: _cache[12] || (_cache[12] = (...args) => $setup.applyFilters && $setup.applyFilters(...args))\n  }, [_cache[52] || (_cache[52] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Subject\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.teacherSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_24);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_23), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-light\",\n    onClick: _cache[13] || (_cache[13] = (...args) => $setup.clearFilters && $setup.clearFilters(...args))\n  }, \" Clear All \"), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-primary\",\n    onClick: _cache[14] || (_cache[14] = (...args) => $setup.applyFilters && $setup.applyFilters(...args))\n  }, \" Apply Filters \")])])])]), _createCommentVNode(\" Search Control \"), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_cache[56] || (_cache[56] = _createElementVNode(\"span\", {\n    class: \"input-group-text border-end-0\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-search\"\n  })], -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control border-start-0\",\n    \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => $setup.searchQuery = $event),\n    placeholder: \"Search students...\",\n    onInput: _cache[16] || (_cache[16] = (...args) => $setup.handleSearch && $setup.handleSearch(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.searchQuery]]), $setup.searchQuery ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"btn btn-outline-secondary border-start-0\",\n    type: \"button\",\n    onClick: _cache[17] || (_cache[17] = (...args) => $setup.clearSearch && $setup.clearSearch(...args))\n  }, _cache[55] || (_cache[55] = [_createElementVNode(\"i\", {\n    class: \"fas fa-times\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Table \"), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"table\", _hoisted_29, [_cache[60] || (_cache[60] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Student Number\"), _createElementVNode(\"th\", null, \"Last Name\"), _createElementVNode(\"th\", null, \"First Name\"), _createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.paginatedStudents, student => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: student.studentNumber,\n      class: _normalizeClass([\"clickable-row\", {\n        'status-row-present': student.currentStatus === 'present',\n        'status-row-absent': student.currentStatus === 'absent',\n        'status-row-late': student.currentStatus === 'late'\n      }]),\n      onClick: $event => $setup.viewStudentDetails(student)\n    }, [_createElementVNode(\"td\", null, _toDisplayString(student.studentNumber), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.lastName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.firstName), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_31, [_withDirectives(_createElementVNode(\"select\", {\n      class: _normalizeClass([\"form-select form-select-sm attendance-select\", {\n        'select-present': student.currentStatus === 'present',\n        'select-absent': student.currentStatus === 'absent',\n        'select-late': student.currentStatus === 'late',\n        'select-none': student.currentStatus === 'none'\n      }]),\n      \"onUpdate:modelValue\": $event => student.currentStatus = $event,\n      onChange: $event => $setup.markAttendance(student, $event.target.value),\n      onClick: _cache[18] || (_cache[18] = _withModifiers(() => {}, [\"stop\"]))\n    }, [_cache[57] || (_cache[57] = _createElementVNode(\"option\", {\n      value: \"none\"\n    }, \"Not marked\", -1 /* HOISTED */)), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'present',\n      value: \"present\"\n    }, \"Present\", 8 /* PROPS */, _hoisted_33), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'absent',\n      value: \"absent\"\n    }, \"Absent\", 8 /* PROPS */, _hoisted_34), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'late',\n      value: \"late\"\n    }, \"Late\", 8 /* PROPS */, _hoisted_35)], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_32), [[_vModelSelect, student.currentStatus]]), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"status-indicator\", {\n        'indicator-present': student.currentStatus === 'present',\n        'indicator-absent': student.currentStatus === 'absent',\n        'indicator-late': student.currentStatus === 'late',\n        'indicator-none': student.currentStatus === 'none'\n      }])\n    }, [_createElementVNode(\"i\", {\n      class: _normalizeClass([\"fas\", {\n        'fa-check-circle': student.currentStatus === 'present',\n        'fa-times-circle': student.currentStatus === 'absent',\n        'fa-exclamation-circle': student.currentStatus === 'late',\n        'fa-question-circle': student.currentStatus === 'none'\n      }])\n    }, null, 2 /* CLASS */)], 2 /* CLASS */)])])], 10 /* CLASS, PROPS */, _hoisted_30);\n  }), 128 /* KEYED_FRAGMENT */)), $setup.paginatedStudents.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_36, [_createElementVNode(\"td\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_cache[58] || (_cache[58] = _createElementVNode(\"i\", {\n    class: \"fas fa-users text-muted mb-2\"\n  }, null, -1 /* HOISTED */)), _cache[59] || (_cache[59] = _createElementVNode(\"p\", {\n    class: \"mb-0\"\n  }, \"No students found\", -1 /* HOISTED */)), $setup.selectedYear || $setup.selectedSection || $setup.selectedSubject ? (_openBlock(), _createElementBlock(\"p\", _hoisted_39, \" Try adjusting your filters \")) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Pagination Controls \"), _createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"div\", _hoisted_41, \" Showing \" + _toDisplayString($setup.paginationInfo.start) + \" to \" + _toDisplayString($setup.paginationInfo.end) + \" of \" + _toDisplayString($setup.sortedStudents.length) + \" entries \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary me-2\",\n    onClick: _cache[19] || (_cache[19] = (...args) => $setup.previousPage && $setup.previousPage(...args)),\n    disabled: $setup.currentPage === 1\n  }, _cache[61] || (_cache[61] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Previous \")]), 8 /* PROPS */, _hoisted_43), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[20] || (_cache[20] = (...args) => $setup.nextPage && $setup.nextPage(...args)),\n    disabled: $setup.currentPage >= $setup.totalPages\n  }, _cache[62] || (_cache[62] = [_createTextVNode(\" Next \"), _createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right ms-1\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_44)])])])]), _createCommentVNode(\" Calendar Popup \"), $setup.showCalendarPopup ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"calendar-popup\",\n    onClick: _cache[26] || (_cache[26] = _withModifiers($event => $setup.showCalendarPopup = false, [\"self\"]))\n  }, [_createElementVNode(\"div\", _hoisted_45, [_createElementVNode(\"div\", _hoisted_46, [_cache[63] || (_cache[63] = _createElementVNode(\"h6\", {\n    class: \"mb-0\"\n  }, \"Select Date\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[21] || (_cache[21] = $event => $setup.showCalendarPopup = false)\n  })]), _createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"div\", _hoisted_48, [_cache[64] || (_cache[64] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-day\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    value: $setup.formatDateForInput($setup.currentDate),\n    max: $setup.formatDateForInput(new Date()),\n    onChange: _cache[22] || (_cache[22] = $event => {\n      $setup.setCurrentDate($event.target.value);\n      $setup.showCalendarPopup = false;\n    })\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_49)]), _createCommentVNode(\" Quick Date Buttons \"), _createElementVNode(\"div\", _hoisted_50, [_createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-outline-secondary\",\n    onClick: _cache[23] || (_cache[23] = $event => {\n      $setup.navigateDate(-7);\n      $setup.showCalendarPopup = false;\n    })\n  }, _cache[65] || (_cache[65] = [_createElementVNode(\"i\", {\n    class: \"fas fa-angle-double-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Last Week \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-outline-secondary\",\n    onClick: _cache[24] || (_cache[24] = $event => {\n      $setup.navigateDate(-1);\n      $setup.showCalendarPopup = false;\n    })\n  }, _cache[66] || (_cache[66] = [_createElementVNode(\"i\", {\n    class: \"fas fa-angle-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Yesterday \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-primary\",\n    onClick: _cache[25] || (_cache[25] = $event => {\n      $setup.setCurrentDate($setup.formatDateForInput(new Date()));\n      $setup.showCalendarPopup = false;\n    })\n  }, \" Today \")])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Student Details Modal \"), _createVNode(_component_StudentDetailsModal, {\n    show: !!$setup.selectedStudent,\n    student: $setup.selectedStudent || {},\n    \"year-level\": $setup.selectedYear,\n    section: $setup.selectedSection,\n    subject: $setup.selectedSubject,\n    title: \"Student Attendance Details\",\n    \"chart-title\": \"Attendance Overview\",\n    \"history-title\": \"Attendance History\",\n    \"chart-id\": `attendanceChart-${$setup.selectedStudent?.studentId}`,\n    \"is-class-record\": false,\n    \"onUpdate:show\": _cache[27] || (_cache[27] = value => !value && ($setup.selectedStudent = null)),\n    onClose: _cache[28] || (_cache[28] = $event => $setup.selectedStudent = null)\n  }, {\n    \"history-table\": _withCtx(() => [_createElementVNode(\"table\", _hoisted_51, [_cache[68] || (_cache[68] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [!$setup.selectedStudent?.attendanceHistory || $setup.selectedStudent.attendanceHistory.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_52, _cache[67] || (_cache[67] = [_createElementVNode(\"td\", {\n      colspan: \"2\",\n      class: \"text-center py-3 text-muted\"\n    }, [_createElementVNode(\"i\", {\n      class: \"fas fa-info-circle me-2\"\n    }), _createTextVNode(\"No attendance records found. \")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedStudent?.attendanceHistory, record => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: record.date\n      }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(record.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n        class: _normalizeClass([\"badge\", {\n          'bg-success': record.status === 'present',\n          'bg-danger': record.status === 'absent',\n          'bg-warning': record.status === 'late'\n        }])\n      }, _toDisplayString(record.status.charAt(0).toUpperCase() + record.status.slice(1)), 3 /* TEXT, CLASS */)])]);\n    }), 128 /* KEYED_FRAGMENT */))])])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\", \"student\", \"year-level\", \"section\", \"subject\", \"chart-id\"]), _createCommentVNode(\" Export Records Modal \"), $setup.showExportModal ? (_openBlock(), _createBlock(_Teleport, {\n    key: 1,\n    to: \"body\"\n  }, [_createElementVNode(\"div\", _hoisted_53, [_createElementVNode(\"div\", _hoisted_54, [_createElementVNode(\"div\", _hoisted_55, [_createElementVNode(\"div\", _hoisted_56, [_createElementVNode(\"div\", _hoisted_57, [_cache[69] || (_cache[69] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Export Attendance Records\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[29] || (_cache[29] = (...args) => $setup.closeExportModal && $setup.closeExportModal(...args))\n  })]), _createElementVNode(\"div\", _hoisted_58, [_cache[76] || (_cache[76] = _createElementVNode(\"div\", {\n    class: \"alert alert-info\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-info-circle me-2\"\n  }), _createTextVNode(\" Select a date range to export attendance records. Only attendance within this date range will be included. \")], -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[35] || (_cache[35] = _withModifiers((...args) => $setup.exportRecords && $setup.exportRecords(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_59, [_cache[70] || (_cache[70] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[30] || (_cache[30] = $event => $setup.exportDateRange.start = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportDateRange.start]])]), _createElementVNode(\"div\", _hoisted_60, [_cache[71] || (_cache[71] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[31] || (_cache[31] = $event => $setup.exportDateRange.end = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportDateRange.end]])]), _createElementVNode(\"div\", _hoisted_61, [_createElementVNode(\"div\", _hoisted_62, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    name: \"exportType\",\n    id: \"exportTypeExcel\",\n    value: \"excel\",\n    \"onUpdate:modelValue\": _cache[32] || (_cache[32] = $event => $setup.exportType = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportType]]), _cache[72] || (_cache[72] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"exportTypeExcel\"\n  }, \" Export to Excel (.xlsx) \", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_63, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    name: \"exportType\",\n    id: \"exportTypeCsv\",\n    value: \"csv\",\n    \"onUpdate:modelValue\": _cache[33] || (_cache[33] = $event => $setup.exportType = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportType]]), _cache[73] || (_cache[73] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"exportTypeCsv\"\n  }, \" Export to CSV (.csv) \", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_64, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary me-2\",\n    onClick: _cache[34] || (_cache[34] = (...args) => $setup.closeExportModal && $setup.closeExportModal(...args))\n  }, \" Cancel \"), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-success\",\n    disabled: $setup.isExporting\n  }, [$setup.isExporting ? (_openBlock(), _createElementBlock(\"span\", _hoisted_66, _cache[74] || (_cache[74] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Exporting... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_67, _cache[75] || (_cache[75] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export \")])))], 8 /* PROPS */, _hoisted_65)])], 32 /* NEED_HYDRATION */)])])])]), _createElementVNode(\"div\", {\n    class: \"modal-backdrop\",\n    onClick: _cache[36] || (_cache[36] = (...args) => $setup.closeExportModal && $setup.closeExportModal(...args))\n  })])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","type","key","style","colspan","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","onClick","_cache","args","$setup","refreshAttendance","title","_createTextVNode","openExportModal","_hoisted_4","$event","navigateDate","openCalendarPopup","role","formatDate","currentDate","disabled","isNextDayDisabled","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","href","sortBy","_normalizeClass","getSortIcon","_hoisted_13","_hoisted_14","selectedYear","selectedSection","selectedSubject","_hoisted_15","_hoisted_16","_hoisted_17","onChange","applyFilters","value","_Fragment","_renderList","availableYears","year","_hoisted_18","_hoisted_19","filteredSections","section","_hoisted_21","_hoisted_20","_hoisted_22","teacherSubjects","subject","_hoisted_24","_hoisted_23","_hoisted_25","clearFilters","_hoisted_26","_hoisted_27","searchQuery","placeholder","onInput","handleSearch","clearSearch","_hoisted_28","_hoisted_29","paginatedStudents","student","studentNumber","currentStatus","viewStudentDetails","_toDisplayString","lastName","firstName","_hoisted_31","markAttendance","target","_withModifiers","selected","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_32","_hoisted_30","length","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","paginationInfo","start","end","sortedStudents","_hoisted_42","previousPage","currentPage","_hoisted_43","nextPage","totalPages","_hoisted_44","showCalendarPopup","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","formatDateForInput","max","Date","setCurrentDate","_hoisted_49","_hoisted_50","_createVNode","_component_StudentDetailsModal","show","selectedStudent","studentId","onClose","_withCtx","_hoisted_51","attendanceHistory","_hoisted_52","record","date","status","charAt","toUpperCase","slice","_","showExportModal","_createBlock","_Teleport","to","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","closeExportModal","_hoisted_58","onSubmit","exportRecords","_hoisted_59","exportDateRange","required","_hoisted_60","_hoisted_61","_hoisted_62","name","id","exportType","for","_hoisted_63","_hoisted_64","isExporting","_hoisted_66","_hoisted_67","_hoisted_65"],"sources":["D:\\au_dev\\client\\src\\views\\Attendance.vue"],"sourcesContent":["<template>\n  <div class=\"attendance-view\">\n    <!-- Control Buttons and Date Navigation -->\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <div class=\"d-flex gap-2\">\n        <!-- Any attendance-specific buttons can go here -->\n        <button \n          class=\"btn btn-outline-secondary\" \n          @click=\"refreshAttendance\"\n          title=\"Refresh attendance data from database\"\n        >\n          <i class=\"fas fa-sync-alt me-2\"></i> Refresh Attendance\n        </button>\n        <button \n          class=\"btn btn-success\" \n          @click=\"openExportModal\"\n          title=\"Export attendance records\"\n        >\n          <i class=\"fas fa-file-export me-2\"></i> Export Attendance\n        </button>\n      </div>\n      \n      <!-- Date Navigation -->\n      <div class=\"d-flex align-items-center gap-3\">\n        <button class=\"btn btn-outline-primary\" @click=\"navigateDate(-1)\">\n          <i class=\"fas fa-chevron-left\"></i>\n        </button>\n        <div class=\"date-display\" @click=\"openCalendarPopup\" role=\"button\">\n          {{ formatDate(currentDate) }}\n        </div>\n        <button \n          class=\"btn btn-outline-primary\" \n          @click=\"navigateDate(1)\"\n          :disabled=\"isNextDayDisabled\"\n        >\n          <i class=\"fas fa-chevron-right\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Attendance Table -->\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <!-- Table Controls -->\n        <div class=\"table-controls mb-4\" >\n          <div class=\"d-flex gap-3 align-items-center\">\n            <div class=\"d-flex gap-3\" >\n              <!-- Sort Dropdown -->\n              <div class=\"dropdown\" >\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  <i class=\"fas fa-sort me-2\"></i> Sort by\n                </button>\n                <ul class=\"dropdown-menu control-menu\" >\n                  <li>\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('studentNumber')\">\n                      <i class=\"fas fa-sort-numeric-down me-2\"></i> Student Number\n                      <i :class=\"getSortIcon('studentNumber')\" class=\"ms-auto\"></i>\n                    </a>\n                  </li>\n                  <li>\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('lastName')\">\n                      <i class=\"fas fa-sort-alpha-down me-2\"></i> Name\n                      <i :class=\"getSortIcon('lastName')\" class=\"ms-auto\"></i>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n\n              <!-- Filter Dropdown -->\n              <div class=\"dropdown\">\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  <i class=\"fas fa-filter me-2\"></i> Filter\n                  <span v-if=\"selectedYear || selectedSection || selectedSubject\" class=\"filter-badge\">!</span>\n                </button>\n                <div class=\"dropdown-menu control-menu p-3\" style=\"width: 280px;\">\n                  <h6 class=\"dropdown-header mb-2\">Filter Options</h6>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Year Level</label>\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedYear\" @change=\"applyFilters\">\n                      <option value=\"\">Select Year</option>\n                      <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n                    </select>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Section</label>\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSection\" :disabled=\"!selectedYear\" @change=\"applyFilters\">\n                      <option value=\"\">Select Section</option>\n                      <option v-for=\"section in filteredSections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n                    </select>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Subject</label>\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSubject\" :disabled=\"!selectedSection\" @change=\"applyFilters\">\n                      <option value=\"\">Select Subject</option>\n                      <option v-for=\"subject in teacherSubjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n                    </select>\n                  </div>\n                  <div class=\"d-flex justify-content-end gap-2 mt-3\">\n                    <button class=\"btn btn-sm btn-light\" @click=\"clearFilters\">\n                      Clear All\n                    </button>\n                    <button class=\"btn btn-sm btn-primary\" @click=\"applyFilters\">\n                      Apply Filters\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Search Control -->\n            <div class=\"search-control\" style=\"flex: 1; max-width: 400px;\">\n              <div class=\"input-group\">\n                <span class=\"input-group-text border-end-0\">\n                  <i class=\"fas fa-search\"></i>\n                </span>\n                <input \n                  type=\"text\" \n                  class=\"form-control border-start-0\" \n                  v-model=\"searchQuery\"\n                  placeholder=\"Search students...\"\n                  @input=\"handleSearch\"\n                >\n                <button \n                  v-if=\"searchQuery\"\n                  class=\"btn btn-outline-secondary border-start-0\" \n                  type=\"button\"\n                  @click=\"clearSearch\"\n                >\n                  <i class=\"fas fa-times\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Table -->\n        <div class=\"table-responsive\">\n          <table class=\"table table-hover\">\n            <thead>\n              <tr>\n            <th>Student Number</th>\n                <th>Last Name</th>\n                <th>First Name</th>\n                  <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n            <tr \n                v-for=\"student in paginatedStudents\" \n                  :key=\"student.studentNumber\" \n                  class=\"clickable-row\" \n                  @click=\"viewStudentDetails(student)\"\n                  :class=\"{\n                    'status-row-present': student.currentStatus === 'present',\n                    'status-row-absent': student.currentStatus === 'absent',\n                    'status-row-late': student.currentStatus === 'late'\n                  }\"\n            >\n              <td>{{ student.studentNumber }}</td>\n                  <td>{{ student.lastName }}</td>\n                  <td>{{ student.firstName }}</td>\n                  <td>\n                    <div class=\"attendance-status-container\">\n                      <select \n                        class=\"form-select form-select-sm attendance-select\"\n                        :class=\"{\n                          'select-present': student.currentStatus === 'present',\n                          'select-absent': student.currentStatus === 'absent',\n                          'select-late': student.currentStatus === 'late',\n                          'select-none': student.currentStatus === 'none'\n                        }\"\n                        v-model=\"student.currentStatus\"\n                        @change=\"markAttendance(student, $event.target.value)\"\n                        @click.stop\n                      >\n                        <option value=\"none\">Not marked</option>\n                        <option :selected=\"student.currentStatus === 'present'\" value=\"present\">Present</option>\n                        <option :selected=\"student.currentStatus === 'absent'\" value=\"absent\">Absent</option>\n                        <option :selected=\"student.currentStatus === 'late'\" value=\"late\">Late</option>\n                      </select>\n                      <div \n                        class=\"status-indicator\" \n                        :class=\"{\n                          'indicator-present': student.currentStatus === 'present',\n                          'indicator-absent': student.currentStatus === 'absent',\n                          'indicator-late': student.currentStatus === 'late',\n                          'indicator-none': student.currentStatus === 'none'\n                        }\"\n                      >\n                        <i \n                          class=\"fas\" \n                          :class=\"{\n                            'fa-check-circle': student.currentStatus === 'present',\n                            'fa-times-circle': student.currentStatus === 'absent',\n                            'fa-exclamation-circle': student.currentStatus === 'late',\n                            'fa-question-circle': student.currentStatus === 'none'\n                          }\"\n                        ></i>\n                      </div>\n                    </div>\n                  </td>\n              </tr>\n              <tr v-if=\"paginatedStudents.length === 0\">\n                <td colspan=\"4\" class=\"text-center py-4\">\n                  <div class=\"empty-state-message\">\n                    <i class=\"fas fa-users text-muted mb-2\"></i>\n                    <p class=\"mb-0\">No students found</p>\n                    <p class=\"text-muted small\" v-if=\"selectedYear || selectedSection || selectedSubject\">\n                      Try adjusting your filters\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          </div>\n        \n        <!-- Pagination Controls -->\n        <div class=\"pagination-controls mt-3 d-flex justify-content-between align-items-center\">\n          <div class=\"pagination-info\">\n            Showing {{ paginationInfo.start }} to {{ paginationInfo.end }} of {{ sortedStudents.length }} entries\n          </div>\n          <div class=\"pagination-buttons\">\n            <button \n              class=\"btn btn-outline-primary me-2\" \n              @click=\"previousPage\" \n              :disabled=\"currentPage === 1\"\n            >\n              <i class=\"fas fa-chevron-left me-1\"></i> Previous\n            </button>\n            <button \n              class=\"btn btn-outline-primary\" \n              @click=\"nextPage\" \n              :disabled=\"currentPage >= totalPages\"\n            >\n              Next <i class=\"fas fa-chevron-right ms-1\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Calendar Popup -->\n    <div class=\"calendar-popup\" v-if=\"showCalendarPopup\" @click.self=\"showCalendarPopup = false\">\n      <div class=\"calendar-container\">\n        <div class=\"calendar-header\">\n          <h6 class=\"mb-0\">Select Date</h6>\n          <button type=\"button\" class=\"btn-close\" @click=\"showCalendarPopup = false\"></button>\n        </div>\n        <div class=\"calendar-body\">\n          <div class=\"input-group\">\n            <span class=\"input-group-text\"><i class=\"fas fa-calendar-day\"></i></span>\n            <input \n              type=\"date\" \n              class=\"form-control\" \n              :value=\"formatDateForInput(currentDate)\"\n              :max=\"formatDateForInput(new Date())\"\n              @change=\"setCurrentDate($event.target.value); showCalendarPopup = false\"\n            >\n          </div>\n          \n          <!-- Quick Date Buttons -->\n          <div class=\"quick-date-buttons mt-3\">\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-7); showCalendarPopup = false\">\n              <i class=\"fas fa-angle-double-left me-1\"></i> Last Week\n            </button>\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-1); showCalendarPopup = false\">\n              <i class=\"fas fa-angle-left me-1\"></i> Yesterday\n            </button>\n            <button class=\"btn btn-sm btn-primary\" @click=\"setCurrentDate(formatDateForInput(new Date())); showCalendarPopup = false\">\n              Today\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Student Details Modal -->\n    <StudentDetailsModal\n      :show=\"!!selectedStudent\"\n      :student=\"selectedStudent || {}\"\n      :year-level=\"selectedYear\"\n      :section=\"selectedSection\"\n      :subject=\"selectedSubject\"\n      title=\"Student Attendance Details\"\n      chart-title=\"Attendance Overview\"\n      history-title=\"Attendance History\"\n      :chart-id=\"`attendanceChart-${selectedStudent?.studentId}`\"\n      :is-class-record=\"false\"\n      @update:show=\"(value) => !value && (selectedStudent = null)\"\n      @close=\"selectedStudent = null\"\n    >\n      <template #history-table>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-if=\"!selectedStudent?.attendanceHistory || selectedStudent.attendanceHistory.length === 0\">\n              <td colspan=\"2\" class=\"text-center py-3 text-muted\">\n                <i class=\"fas fa-info-circle me-2\"></i>No attendance records found.\n              </td>\n            </tr>\n            <tr v-for=\"record in selectedStudent?.attendanceHistory\" :key=\"record.date\">\n              <td>{{ formatDate(record.date) }}</td>\n              <td>\n                <span \n                  class=\"badge\"\n                  :class=\"{\n                    'bg-success': record.status === 'present',\n                    'bg-danger': record.status === 'absent',\n                    'bg-warning': record.status === 'late'\n                  }\"\n                >\n                  {{ record.status.charAt(0).toUpperCase() + record.status.slice(1) }}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </template>\n    </StudentDetailsModal>\n    \n    <!-- Export Records Modal -->\n    <teleport to=\"body\" v-if=\"showExportModal\">\n      <div class=\"modal-overlay\">\n        <div class=\"modal-wrapper\">\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Export Attendance Records</h5>\n                <button type=\"button\" class=\"btn-close\" @click=\"closeExportModal\"></button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"alert alert-info\">\n                  <i class=\"fas fa-info-circle me-2\"></i>\n                  Select a date range to export attendance records. Only attendance within this date range will be included.\n                </div>\n\n                <form @submit.prevent=\"exportRecords\">\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Start Date</label>\n                    <input type=\"date\" class=\"form-control\" v-model=\"exportDateRange.start\" required>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">End Date</label>\n                    <input type=\"date\" class=\"form-control\" v-model=\"exportDateRange.end\" required>\n                  </div>\n                  \n                  <div class=\"mt-4\">\n                    <div class=\"form-check\">\n                      <input class=\"form-check-input\" type=\"radio\" name=\"exportType\" id=\"exportTypeExcel\" value=\"excel\" v-model=\"exportType\">\n                      <label class=\"form-check-label\" for=\"exportTypeExcel\">\n                        Export to Excel (.xlsx)\n                      </label>\n                    </div>\n                    <div class=\"form-check\">\n                      <input class=\"form-check-input\" type=\"radio\" name=\"exportType\" id=\"exportTypeCsv\" value=\"csv\" v-model=\"exportType\">\n                      <label class=\"form-check-label\" for=\"exportTypeCsv\">\n                        Export to CSV (.csv)\n                      </label>\n                    </div>\n                  </div>\n                  \n                  <div class=\"mt-4 text-end\">\n                    <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"closeExportModal\">\n                      Cancel\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-success\" :disabled=\"isExporting\">\n                      <span v-if=\"isExporting\">\n                        <i class=\"fas fa-spinner fa-spin me-2\"></i> Exporting...\n                      </span>\n                      <span v-else>\n                        <i class=\"fas fa-file-export me-2\"></i> Export\n                      </span>\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-backdrop\" @click=\"closeExportModal\"></div>\n      </div>\n    </teleport>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRoute, useRouter } from 'vue-router'\nimport axios from 'axios'\nimport moment from 'moment-timezone'\nimport Chart from 'chart.js/auto'\nimport StudentDetailsModal from '@/components/modals/StudentDetailsModal.vue'\nimport * as XLSX from 'xlsx'\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default {\n  name: 'Attendance',\n  components: {\n    StudentDetailsModal\n  },\n  setup() {\n    const store = useStore()\n    const route = useRoute()\n    const router = useRouter()\n    const students = ref([])\n    const searchQuery = ref('')\n    const sortField = ref('lastName')\n    const sortOrder = ref('asc')\n    const selectedStudent = ref(null)\n    const currentDate = ref(moment().tz('Asia/Manila').startOf('day').toDate())\n    const slideDirection = ref('')\n    let attendanceChart = null\n    let dateUpdateInterval = null\n    \n    // Date filter for attendance history\n    const historyStartDate = ref(moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD'))\n    const historyEndDate = ref(moment().tz('Asia/Manila').format('YYYY-MM-DD'))\n    const showHistoryDatePicker = ref(false)\n    const showCalendarPopup = ref(false)\n\n    // Add refs for query parameters\n    const selectedYear = ref(route.query.year || localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(route.query.section || localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(route.query.subject || localStorage.getItem('selectedSubject') || '')\n    \n    // Add refs for available options\n    const availableYears = ref([])\n    const availableSections = ref([])\n    const sectionsByYear = ref({})\n    const teacherSubjects = ref([])\n    \n    // Computed property for filtered sections based on selected year\n    const filteredSections = computed(() => {\n      if (!selectedYear.value) return []\n      return sectionsByYear.value[selectedYear.value] || []\n    })\n    \n    // Function to fetch available years and sections\n    const fetchAvailableYearsAndSections = async () => {\n      try {\n        const token = store.state.auth.token\n        const teacherId = store.state.auth.user?._id\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available')\n          return\n        }\n\n        console.log('Fetching available years and sections for teacher:', teacherId)\n        \n        // Use the teacher-specific endpoint to get only years and sections for this teacher\n        const response = await api.get('/teacher-class-records/available-years-sections', {\n          params: { teacherId },\n          headers: { 'Authorization': `Bearer ${token}` }\n        }).catch(error => {\n          console.error('Error fetching teacher-specific years and sections:', error)\n          \n          // Fall back to the general endpoint if teacher-specific one fails\n          return api.get('/students/available-years-sections', {\n            headers: { 'Authorization': `Bearer ${token}` }\n          })\n        })\n\n        console.log('API Response for years and sections:', response.data)\n\n        if (response.data) {\n          // Set available years and sections from the response\n          availableYears.value = response.data.years || []\n          availableSections.value = response.data.sections || []\n          \n          // Use sectionsByYear from the API response\n          if (response.data.sectionsByYear) {\n            sectionsByYear.value = response.data.sectionsByYear\n          } else {\n            sectionsByYear.value = {}\n            \n            // If we have years and sections but no sectionsByYear mapping,\n            // create a simple mapping where each year has all sections\n            if (availableYears.value.length > 0 && availableSections.value.length > 0) {\n              availableYears.value.forEach(year => {\n                sectionsByYear.value[year] = [...availableSections.value]\n              })\n            }\n          }\n          \n          console.log('Available years:', availableYears.value)\n          console.log('Available sections:', availableSections.value)\n          console.log('Sections by year mapping:', sectionsByYear.value)\n          \n          // If no years are available, don't add default values\n          // This ensures teachers only see years they've added\n          if (availableYears.value.length === 0) {\n            console.log('No years found for this teacher')\n          }\n          \n          // If no sections are available, don't add default values\n          if (availableSections.value.length === 0) {\n            console.log('No sections found for this teacher')\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch available years and sections:', error)\n        // Don't set default values - teacher should only see what they've added\n        availableYears.value = []\n        availableSections.value = []\n        sectionsByYear.value = {}\n      }\n    }\n    \n    // Function to fetch teacher subjects\n    const fetchTeacherSubjects = async () => {\n      try {\n        const token = store.state.auth.token\n        const teacherId = store.state.auth.user?._id\n\n        if (!teacherId) {\n          console.error('Teacher ID not available')\n          return\n        }\n\n        // Try to fetch subjects from the teacher class records\n        try {\n          const response = await api.get('/teacher-class-records/available-years-sections', {\n          params: { teacherId },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n          if (response.data && response.data.subjects && response.data.subjects.length > 0) {\n            teacherSubjects.value = response.data.subjects\n            console.log('Subjects loaded from teacher class records:', teacherSubjects.value)\n          } else {\n            // If no subjects found in class records, try the user endpoint\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\n              headers: { 'Authorization': `Bearer ${token}` }\n            })\n            \n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\n              teacherSubjects.value = userResponse.data.subjects\n              console.log('Subjects loaded from user profile:', teacherSubjects.value)\n            } else {\n              // If still no subjects, use default subjects\n              console.log('No subjects found, using default subjects')\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch teacher subjects from class records:', error)\n          \n          // Try the user endpoint as fallback\n          try {\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\n              headers: { 'Authorization': `Bearer ${token}` }\n            })\n            \n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\n              teacherSubjects.value = userResponse.data.subjects\n              console.log('Subjects loaded from user profile (fallback):', teacherSubjects.value)\n            } else {\n              teacherSubjects.value = ['Math', 'Science', 'English', 'History']\n              console.log('No subjects found in user profile, using default subjects')\n            }\n          } catch (userError) {\n            console.error('Failed to fetch teacher subjects from user profile:', userError)\n            teacherSubjects.value = ['Math', 'Science', 'English', 'History']\n            console.log('Using default subjects due to API errors')\n          }\n        }\n      } catch (error) {\n        console.error('Error in fetchTeacherSubjects:', error)\n        teacherSubjects.value = ['Math', 'Science', 'English', 'History']\n      }\n    }\n    \n    // Function to apply filters\n    const applyFilters = async () => {\n      console.log('Applying filters:', {\n        year: selectedYear.value,\n        section: selectedSection.value,\n        subject: selectedSubject.value\n      })\n      \n      // Save selected values to localStorage\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\n      \n      // Update URL query parameters\n      router.replace({\n        query: {\n          ...route.query,\n          year: selectedYear.value || undefined,\n          section: selectedSection.value || undefined,\n          subject: selectedSubject.value || undefined\n        }\n      })\n      \n      // Always fetch student records when filters are applied\n      await fetchStudentRecords()\n    }\n    \n    // Function to clear filters\n    const clearFilters = () => {\n      selectedYear.value = ''\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      localStorage.removeItem('selectedYear')\n      localStorage.removeItem('selectedSection')\n      localStorage.removeItem('selectedSubject')\n      \n      // Update URL query parameters\n      router.replace({\n        query: {}\n      })\n    }\n\n    // Function to fetch students and their attendance\n    const fetchStudentRecords = async () => {\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n\n        // Create a params object with the teacher ID\n        const params = { teacherId };\n        \n        // Add any selected filters to the params\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        \n        console.log('Fetching student records with filters:', params);\n        \n        try {\n          const response = await api.get('/teacher-class-records/students-for-attendance', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n\n          console.log('Students API response:', response.data);\n\n          if (response.data) {\n            let studentList = [];\n            \n            if (Array.isArray(response.data)) {\n              studentList = response.data;\n            } else if (response.data.students && Array.isArray(response.data.students)) {\n              studentList = response.data.students;\n            }\n            \n            // Log each student's data to verify studentId is present\n            studentList.forEach(student => {\n              console.log('Student data:', {\n                studentId: student._id || student.studentId,\n                studentNumber: student.studentNumber,\n                name: `${student.firstName} ${student.lastName}`\n              });\n            });\n            \n            // Initialize students with 'none' status and ensure studentId is set\n            students.value = studentList.map(student => ({\n              ...student,\n              studentId: student._id || student.studentId, // Use _id if studentId is not present\n              currentStatus: 'none'\n            }));\n            \n            console.log(`Loaded ${students.value.length} students with IDs`);\n            \n            // Immediately fetch attendance after loading students\n            if (students.value.length > 0) {\n              await fetchAttendance();\n          }\n        }\n      } catch (error) {\n          console.error('Failed to fetch student records:', error);\n        students.value = [];\n      }\n      } catch (error) {\n        console.error('Error in fetchStudentRecords:', error);\n        students.value = [];\n      }\n    };\n\n    // Function to fetch attendance for current date\n    const fetchAttendance = async () => {\n      try {\n        // If there are no students, we can't fetch attendance\n        if (!students.value.length) {\n          console.log('fetchAttendance: No students to fetch attendance for');\n          return;\n        }\n\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\n        console.log('fetchAttendance: Fetching attendance data for date:', date);\n\n        // Create params object with the date and required filters\n        const params = {\n          teacherId: store.state.auth.user?._id,\n          date: date\n        };\n        \n        // Add any selected filters to the params\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        \n        console.log('Fetching attendance with params:', params);\n        \n        const response = await api.get(`/attendance/date/${date}`, {\n          params,\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\n        });\n\n        console.log('Attendance data received:', response.data);\n\n        // Create a map to store attendance by student ID\n        const studentMap = new Map();\n\n        if (response.data && Array.isArray(response.data)) {\n          console.log(`Processing ${response.data.length} attendance records`);\n          \n          // Group records by student ID to find the most recent one for each student\n          const recordsByStudent = {};\n          \n          response.data.forEach(record => {\n            if (record.studentId) {\n              // If we don't have this student yet, or this record is newer\n              if (!recordsByStudent[record.studentId] || \n                  (record.createdAt && \n                   (!recordsByStudent[record.studentId].createdAt || \n                    new Date(record.createdAt) > new Date(recordsByStudent[record.studentId].createdAt)))) {\n                recordsByStudent[record.studentId] = record;\n                console.log(`Found newer record for student ${record.studentId}: ${record.status} (created at ${record.createdAt})`);\n              }\n            } else {\n              console.log('Record missing studentId:', record);\n            }\n          });\n          \n          // Now use the most recent record for each student\n          Object.values(recordsByStudent).forEach(record => {\n            studentMap.set(String(record.studentId), record.status || 'none');\n            console.log(`Using most recent attendance for student ID ${record.studentId}: ${record.status || 'none'} (created at ${record.createdAt})`);\n          });\n        }\n\n        // Update students with attendance data\n        if (students.value && students.value.length > 0) {\n          // Merge attendance data into students array\n          // This will fix the updating of attendance data\n          students.value = students.value\n            .map(student => ({\n              ...student,\n              currentStatus: response.data.find(att => att.studentId === student.studentId)?.status\n            }));\n          \n          // Force a UI update\n          await nextTick();\n          students.value = [...students.value];\n          console.log('Updated attendance status for all students');\n        }\n      } catch (error) {\n        console.error('Error in fetchAttendance:', error);\n      }\n    };\n\n    // Create attendance chart\n    const createPerformanceChart = () => {\n      if (!selectedStudent.value) return;\n      \n      // Create a unique chart ID for each student\n      const chartId = `attendanceChart-${selectedStudent.value.studentId}`;\n      const chartElement = document.getElementById('attendanceChart');\n      \n      // Set a unique ID to the chart element\n      if (chartElement) {\n        chartElement.id = chartId;\n      }\n      \n      const ctx = document.getElementById(chartId)?.getContext('2d');\n      if (!ctx) return;\n\n      // Destroy existing chart if it exists\n      if (attendanceChart) {\n        attendanceChart.destroy();\n        attendanceChart = null;\n      }\n\n      // Get the chart container\n      const chartContainer = document.querySelector('.chart-container');\n      if (!chartContainer) return;\n\n      // Check if we have valid attendance statistics and records\n      const stats = selectedStudent.value.attendanceStats;\n      const hasAttendanceRecords = selectedStudent.value.attendanceHistory && \n                                  selectedStudent.value.attendanceHistory.length > 0;\n      \n      if (!hasAttendanceRecords || \n          !stats || \n          (stats.presentPercentage === 0 && stats.absentPercentage === 0 && stats.latePercentage === 0)) {\n        // If no attendance data, display a message instead of an empty chart\n        chartContainer.innerHTML = '';\n        const noDataMessage = document.createElement('div');\n        noDataMessage.className = 'text-center py-5 text-muted';\n        noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No attendance data available for this student in the selected date range.';\n        chartContainer.appendChild(noDataMessage);\n        return;\n      }\n\n      // Clear the container and add canvas back\n      chartContainer.innerHTML = '';\n      const canvas = document.createElement('canvas');\n      canvas.id = chartId;\n      chartContainer.appendChild(canvas);\n\n      // Get the context from the new canvas\n      const newCtx = document.getElementById(chartId)?.getContext('2d');\n      if (!newCtx) return;\n\n      // Enhanced colors for the chart\n      const chartColors = {\n        present: {\n          backgroundColor: '#4CAF50',\n          hoverBackgroundColor: '#388E3C',\n          borderColor: '#fff',\n          borderWidth: 2\n        },\n        absent: {\n          backgroundColor: '#F44336',\n          hoverBackgroundColor: '#D32F2F',\n          borderColor: '#fff',\n          borderWidth: 2\n        },\n        late: {\n          backgroundColor: '#FFC107',\n          hoverBackgroundColor: '#FFA000',\n          borderColor: '#fff',\n          borderWidth: 2\n        }\n      };\n\n      // Create the chart\n      attendanceChart = new Chart(newCtx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Absent', 'Late'],\n          datasets: [{\n            data: [stats.presentPercentage, stats.absentPercentage, stats.latePercentage],\n            backgroundColor: [\n              chartColors.present.backgroundColor,\n              chartColors.absent.backgroundColor,\n              chartColors.late.backgroundColor\n            ],\n            hoverBackgroundColor: [\n              chartColors.present.hoverBackgroundColor,\n              chartColors.absent.hoverBackgroundColor,\n              chartColors.late.hoverBackgroundColor\n            ],\n            borderColor: [\n              chartColors.present.borderColor,\n              chartColors.absent.borderColor,\n              chartColors.late.borderColor\n            ],\n            borderWidth: 2,\n            borderRadius: 5,\n            spacing: 5,\n            hoverOffset: 10\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '70%',\n          animation: {\n            animateScale: true,\n            animateRotate: true,\n            duration: 1000,\n            easing: 'easeOutQuart'\n          },\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                boxWidth: 15,\n                boxHeight: 15,\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                },\n                generateLabels: (chart) => {\n                  const data = chart.data;\n                  if (data.labels.length && data.datasets.length) {\n                    return data.labels.map((label, i) => {\n                      const meta = chart.getDatasetMeta(0);\n                      const style = meta.controller.getStyle(i);\n                      \n                      return {\n                        text: `${label}: ${data.datasets[0].data[i].toFixed(1)}%`,\n                        fillStyle: style.backgroundColor,\n                        strokeStyle: style.borderColor,\n                        lineWidth: style.borderWidth,\n                        hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n                        index: i\n                      };\n                    });\n                  }\n                  return [];\n                }\n              }\n            },\n            tooltip: {\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                size: 16,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 14\n              },\n              padding: 15,\n              cornerRadius: 8,\n              displayColors: true,\n              callbacks: {\n                label: function(context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value.toFixed(1)}%`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n\n    // View student details\n    const viewStudentDetails = async (student) => {\n      try {\n        // Reset any existing chart before showing a new student\n        if (attendanceChart) {\n          attendanceChart.destroy();\n          attendanceChart = null;\n        }\n        \n        selectedStudent.value = {\n          ...student,\n          attendanceHistory: [],\n          attendanceStats: { presentPercentage: 0, absentPercentage: 0, latePercentage: 0 }\n        }\n        \n        // Fetch attendance history with the current date filters\n        await fetchStudentAttendanceHistory(selectedStudent.value);\n      } catch (error) {\n        console.error('Error fetching student details:', error)\n        alert('Failed to load student details. Please try again.')\n      }\n    }\n    \n    // Fetch student attendance history with date filters\n    const fetchStudentAttendanceHistory = async (student) => {\n      if (!student) return;\n      \n      try {\n        console.log(`Fetching attendance history for student ${student.studentNumber} with date range:`, {\n          startDate: historyStartDate.value,\n          endDate: historyEndDate.value\n        });\n        \n        const response = await api.get(\n          `/attendance/${student.studentId}/history`,\n          {\n            params: {\n              subject: selectedSubject.value,\n              startDate: historyStartDate.value,\n              endDate: historyEndDate.value\n            },\n            headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\n          }\n        )\n        \n        if (response.data) {\n          // Make sure we're updating the correct student\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\n            // Only include records that have a valid status (not null, undefined, or empty string)\n            const validRecords = Array.isArray(response.data.records) \n              ? response.data.records.filter(record => record && record.status && record.status !== '')\n              : [];\n            \n            selectedStudent.value.attendanceHistory = validRecords;\n            \n            // Only calculate statistics based on valid records\n            if (validRecords.length > 0) {\n              // Count occurrences of each status\n              const statusCounts = {\n                present: 0,\n                absent: 0,\n                late: 0\n              };\n              \n              validRecords.forEach(record => {\n                if (record.status in statusCounts) {\n                  statusCounts[record.status]++;\n                }\n              });\n              \n              // Calculate percentages\n              const total = validRecords.length;\n              const presentPercentage = total > 0 ? (statusCounts.present / total) * 100 : 0;\n              const absentPercentage = total > 0 ? (statusCounts.absent / total) * 100 : 0;\n              const latePercentage = total > 0 ? (statusCounts.late / total) * 100 : 0;\n              \n              selectedStudent.value.attendanceStats = {\n                presentPercentage,\n                absentPercentage,\n                latePercentage\n              };\n      } else {\n              // If no valid records, set all percentages to 0\n              selectedStudent.value.attendanceStats = {\n                presentPercentage: 0,\n                absentPercentage: 0,\n                latePercentage: 0\n              };\n            }\n            \n            console.log(`Loaded ${selectedStudent.value.attendanceHistory.length} attendance records for student ${student.studentNumber}`);\n            \n            // Create attendance chart on next tick to ensure DOM is ready\n            nextTick(() => {\n              // Reset any existing chart before creating a new one\n              if (attendanceChart) {\n                attendanceChart.destroy();\n                attendanceChart = null;\n              }\n              createPerformanceChart();\n            });\n          } else {\n            console.log('Selected student changed, not updating attendance history');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching student attendance history:', error);\n        selectedStudent.value.attendanceHistory = [];\n        selectedStudent.value.attendanceStats = { \n          presentPercentage: 0, \n          absentPercentage: 0, \n          latePercentage: 0 \n        };\n        \n        // Create chart with empty data\n        nextTick(() => {\n          if (attendanceChart) {\n            attendanceChart.destroy();\n            attendanceChart = null;\n          }\n          createPerformanceChart();\n        });\n      }\n    }\n\n    // Sort functions\n    const sortBy = (field) => {\n      if (sortField.value === field) {\n        sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc'\n      } else {\n        sortField.value = field\n        sortOrder.value = 'asc'\n      }\n    }\n\n    const getSortIcon = (field) => {\n      if (sortField.value !== field) return 'fas fa-sort'\n      return sortOrder.value === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down'\n    }\n\n    // Sort students\n    const sortedStudents = computed(() => {\n      if (!Array.isArray(students.value)) {\n        return []\n      }\n\n      let sortedList = [...students.value]\n      if (sortField.value) {\n        sortedList.sort((a, b) => {\n          let aVal = a[sortField.value]\n          let bVal = b[sortField.value]\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase()\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase()\n          if (aVal < bVal) return sortOrder.value === 'asc' ? -1 : 1\n          if (aVal > bVal) return sortOrder.value === 'asc' ? 1 : -1\n          return 0\n        })\n      }\n\n      if (!searchQuery.value) {\n      return sortedList\n      }\n      \n      const searchLower = searchQuery.value.toLowerCase()\n      return sortedList.filter(student => {\n        return (\n          student.studentNumber.toLowerCase().includes(searchLower) ||\n          student.firstName.toLowerCase().includes(searchLower) ||\n          student.lastName.toLowerCase().includes(searchLower)\n        )\n      })\n    })\n\n    // Update attendance status\n    const markAttendance = async (student, status) => {\n      try {\n        if (!status || !student) {\n          console.log('Invalid status or student:', { status, student });\n          return;\n        }\n        \n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\n        console.log('Marking attendance:', {\n          studentId: student.studentId,\n          studentNumber: student.studentNumber,\n          status,\n          date\n        });\n\n        const attendanceData = {\n          studentId: student.studentId,\n          studentNumber: student.studentNumber,\n          teacherId: store.state.auth.user._id,\n          date: date,\n          subject: selectedSubject.value,\n          section: selectedSection.value,\n          year: selectedYear.value,\n          status: status,\n          createdAt: new Date().toISOString() // Ensure we have a current timestamp\n        };\n        \n        // Update UI immediately for better responsiveness\n        student.currentStatus = status;\n\n        const response = await api.post('/attendance', attendanceData, {\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\n        });\n\n        if (response.data) {\n          console.log('Attendance marked successfully:', response.data);\n          \n          // Store the attendance status in the student object for this date\n          if (!student.attendanceByDate) {\n            student.attendanceByDate = {};\n          }\n          student.attendanceByDate[date] = status;\n          \n          // If the student is currently selected in the details modal, update their history\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\n            await fetchStudentAttendanceHistory(selectedStudent.value);\n          }\n        }\n      } catch (error) {\n        console.error('Error marking attendance:', error);\n        // Revert the status on error\n        student.currentStatus = 'none';\n        alert('Failed to save attendance. Please try again.');\n      }\n    };\n\n    // Handle search\n    const handleSearch = () => {\n      // The sortedStudents computed property will automatically filter based on searchQuery\n    }\n\n    // Watch for query parameter changes\n    watch([selectedYear, selectedSection, selectedSubject], async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\n      \n      // Fetch student records and attendance when filters change\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n        await fetchStudentRecords()\n      }\n      \n      // Update navigation title\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n        try {\n          if (router.currentRoute.value.matched[0].components.default.props) {\n            router.currentRoute.value.matched[0].components.default.props.selectedInfo = \n              `${selectedYear.value} - ${selectedSection.value} | ${selectedSubject.value}`\n          }\n        } catch (error) {\n          console.error('Error updating navigation title:', error)\n        }\n      }\n    })\n\n    // Watch for date changes\n    watch(currentDate, async (newDate, oldDate) => {\n      console.log('Current date changed from', moment(oldDate).format('YYYY-MM-DD'), 'to', moment(newDate).format('YYYY-MM-DD'));\n      \n      // Only fetch if we have the required data\n      if (selectedYear.value && selectedSection.value && selectedSubject.value && students.value.length > 0) {\n        console.log('Fetching attendance data for new date');\n        await fetchAttendance();\n      } else {\n        console.log('Skipping attendance fetch due to missing data:', {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          studentsCount: students.value?.length || 0\n        });\n      }\n    });\n\n    // Clean up chart when component unmounts\n    onUnmounted(() => {\n      if (attendanceChart) {\n        attendanceChart.destroy()\n        attendanceChart = null\n      }\n      \n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval)\n      }\n    })\n\n    // Clean up chart when student modal closes\n    watch(() => selectedStudent.value, (newValue, oldValue) => {\n      if (!newValue && attendanceChart) {\n        attendanceChart.destroy();\n        attendanceChart = null;\n        \n        // Reset the chart element ID back to the default\n        if (oldValue) {\n          const chartElement = document.getElementById(`attendanceChart-${oldValue.studentId}`);\n          if (chartElement) {\n            chartElement.id = 'attendanceChart';\n          }\n        }\n      }\n    });\n\n    // Format date for display\n    const formatDate = (date) => {\n      if (!date) return 'N/A'\n      return moment(date).tz('Asia/Manila').format('MMMM D, YYYY')\n    }\n    \n    // Format date for input fields (YYYY-MM-DD)\n    const formatDateForInput = (date) => {\n      if (!date) return ''\n      return moment(date).tz('Asia/Manila').format('YYYY-MM-DD')\n    }\n\n    // Add isNextDayDisabled computed property\n    const isNextDayDisabled = computed(() => {\n      const now = moment().tz('Asia/Manila').startOf('day')\n      const selected = moment(currentDate.value).tz('Asia/Manila').startOf('day')\n      return selected.isSameOrAfter(now, 'day')\n    })\n\n    // Add navigateDate function\n    const navigateDate = (direction) => {\n      const now = moment().tz('Asia/Manila').startOf('day')\n      const newDate = moment(currentDate.value).tz('Asia/Manila').startOf('day').add(direction, 'days')\n      \n      // Only allow navigation to past dates or current date\n      if (direction < 0 || (direction > 0 && !newDate.isAfter(now, 'day'))) {\n        slideDirection.value = direction > 0 ? 'slide-left' : 'slide-right'\n        currentDate.value = newDate.toDate()\n        \n        // Refresh attendance data\n        fetchAttendance(currentDate.value)\n        \n        setTimeout(() => {\n          slideDirection.value = ''\n        }, 300)\n      }\n    }\n\n    // Setup date auto-update to handle timezone correctly\n    const setupDateAutoUpdate = () => {\n      const checkAndUpdateDate = () => {\n        const now = moment().tz('Asia/Manila').startOf('day')\n        const current = moment(currentDate.value).tz('Asia/Manila').startOf('day')\n        \n        // If it's past midnight and we're showing yesterday's date\n        if (now.isAfter(current, 'day')) {\n          currentDate.value = now.toDate()\n          fetchAttendance()\n        }\n      }\n\n      // Clear existing interval if any\n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval)\n      }\n\n      // Check every minute\n      dateUpdateInterval = setInterval(checkAndUpdateDate, 60000)\n    }\n\n    // Add watchers for filter changes\n    watch(selectedYear, (newValue) => {\n      if (newValue) {\n        selectedSection.value = '';\n        selectedSubject.value = '';\n      }\n    });\n\n    watch(selectedSection, (newValue) => {\n      if (newValue) {\n        selectedSubject.value = '';\n      }\n    });\n\n    // Get attendance status for display\n    const getAttendanceStatus = (student) => {\n      // If student has a currentStatus property and it's not 'none', use it\n      if (student.currentStatus && student.currentStatus !== 'none') {\n        return student.currentStatus;\n      }\n      \n      // If no status is set, return 'none'\n      return 'none';\n    }\n\n    // Add setCurrentDate function\n    const setCurrentDate = (dateString) => {\n      if (!dateString) return;\n      \n      const newDate = moment(dateString).tz('Asia/Manila').startOf('day');\n      const now = moment().tz('Asia/Manila').startOf('day');\n      \n      // Only allow setting dates up to the current date\n      if (newDate.isAfter(now, 'day')) {\n        return;\n      }\n      \n      // Set animation direction based on whether we're going forward or backward in time\n      const currentMoment = moment(currentDate.value).tz('Asia/Manila').startOf('day');\n      slideDirection.value = newDate.isAfter(currentMoment) ? 'slide-left' : 'slide-right';\n      \n      // Update the current date\n      currentDate.value = newDate.toDate();\n      \n      // Refresh attendance data\n      fetchAttendance();\n      \n      // Reset animation after transition completes\n      setTimeout(() => {\n        slideDirection.value = '';\n      }, 300);\n    };\n\n    // Reset history date filter to default (last 30 days)\n    const resetHistoryDateFilter = () => {\n      historyStartDate.value = moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD');\n      historyEndDate.value = moment().tz('Asia/Manila').format('YYYY-MM-DD');\n      \n      // Fetch attendance history with the reset date range\n      if (selectedStudent.value) {\n        fetchStudentAttendanceHistory(selectedStudent.value);\n      }\n    };\n\n    // Set history date range based on preset\n    const setHistoryDateRange = (preset) => {\n      const now = moment().tz('Asia/Manila');\n      \n      switch (preset) {\n        case 'week':\n          historyStartDate.value = now.clone().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n        case 'quarter':\n          historyStartDate.value = now.clone().subtract(90, 'days').format('YYYY-MM-DD');\n          break;\n        case 'semester':\n          // Approximately 6 months\n          historyStartDate.value = now.clone().subtract(180, 'days').format('YYYY-MM-DD');\n          break;\n        default:\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\n      }\n      \n      historyEndDate.value = now.format('YYYY-MM-DD');\n      \n      // Fetch attendance history with the new date range\n      if (selectedStudent.value) {\n        fetchStudentAttendanceHistory(selectedStudent.value);\n      }\n    };\n\n    // Initialize component\n    onMounted(async () => {\n      if (store.getters.isLoggedIn) {\n        try {\n          console.log('Component mounted, initializing...');\n          \n          // Fetch available years, sections, and subjects\n          await Promise.all([\n            fetchAvailableYearsAndSections(),\n            fetchTeacherSubjects()\n          ]);\n          \n          console.log('Initialization complete, checking for saved filters:', {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          });\n          \n          // Apply filters if they are set\n          if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n            console.log('Saved filters found, fetching student records...');\n            await fetchStudentRecords();\n            console.log('Student records loaded');\n          } else {\n            console.log('No saved filters found, skipping data fetch');\n          }\n          \n          // Set up date auto-update\n          setupDateAutoUpdate();\n      } catch (error) {\n          console.error('Error during component initialization:', error);\n        }\n      } else {\n        router.push('/login');\n      }\n    });\n    \n    // Function to refresh attendance data\n    const refreshAttendance = async () => {\n      console.log('Manually refreshing attendance data');\n      \n      // Show loading indicator\n      const refreshButton = document.querySelector('.btn-outline-secondary i.fa-sync-alt');\n      if (refreshButton) {\n        refreshButton.classList.add('fa-spin');\n      }\n      \n      try {\n      // Fetch fresh attendance data from the server\n      await fetchAttendance();\n      \n      // Force a UI update to ensure the changes are reflected\n      nextTick(() => {\n        students.value = [...students.value];\n          console.log('Attendance data refreshed successfully');\n        });\n      } catch (error) {\n        console.error('Error refreshing attendance data:', error);\n      } finally {\n        // Remove loading indicator\n        setTimeout(() => {\n          if (refreshButton) {\n            refreshButton.classList.remove('fa-spin');\n          }\n        }, 500);\n      }\n    };\n\n    // Add openDatePicker function\n    const openDatePicker = () => {\n      const datePicker = document.querySelector('.date-picker-hidden');\n      if (datePicker) {\n        datePicker.click();\n      }\n    }\n\n    // Add openHistoryDatePicker function\n    const openHistoryDatePicker = () => {\n      showHistoryDatePicker.value = true;\n    }\n    \n    // Add applyHistoryDateFilter function\n    const applyHistoryDateFilter = () => {\n      if (selectedStudent.value) {\n        fetchStudentAttendanceHistory(selectedStudent.value);\n      }\n      showHistoryDatePicker.value = false;\n    }\n\n    // Add openCalendarPopup function\n    const openCalendarPopup = () => {\n      showCalendarPopup.value = true;\n    }\n\n    // Add pagination state\n    const currentPage = ref(1)\n    const itemsPerPage = 25\n\n    // Compute total pages\n    const totalPages = computed(() => Math.ceil(sortedStudents.value.length / itemsPerPage))\n\n    // Get paginated students\n    const paginatedStudents = computed(() => {\n      const start = (currentPage.value - 1) * itemsPerPage\n      const end = start + itemsPerPage\n      return sortedStudents.value.slice(start, end)\n    })\n\n    // Compute pagination info\n    const paginationInfo = computed(() => {\n      const start = sortedStudents.value.length === 0 ? 0 : (currentPage.value - 1) * itemsPerPage + 1\n      const end = Math.min(start + itemsPerPage - 1, sortedStudents.value.length)\n      return { start, end }\n    })\n\n    // Pagination methods\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++\n      }\n    }\n\n    const previousPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--\n      }\n    }\n\n    // Reset pagination when filters change\n    watch([searchQuery, selectedYear, selectedSection, selectedSubject], () => {\n      currentPage.value = 1\n    })\n\n    // Add clearSearch function if it doesn't exist\n    const clearSearch = () => {\n      searchQuery.value = ''\n      handleSearch()\n    }\n\n    // Add export related refs\n    const showExportModal = ref(false)\n    const exportDateRange = ref({\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n      end: moment().format('YYYY-MM-DD')\n    })\n    const exportType = ref('excel')\n    const isExporting = ref(false)\n    \n    // Function to export attendance records\n    const exportRecords = async () => {\n      try {\n        isExporting.value = true\n        \n        // Validate date range\n        const startDate = new Date(exportDateRange.value.start)\n        const endDate = new Date(exportDateRange.value.end)\n        \n        if (startDate > endDate) {\n          alert('Start date cannot be after end date')\n          isExporting.value = false\n          return\n        }\n        \n        const teacherId = store.state.auth.user?._id\n        if (!teacherId) {\n          throw new Error('Teacher ID not available')\n        }\n        \n        // Fetch export data from API\n        const response = await api.get('/users/export/attendance', {\n          params: {\n            teacherId,\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: exportDateRange.value.start,\n            endDate: exportDateRange.value.end\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        })\n        \n        const data = response.data\n        \n        // Prepare worksheet data\n        const worksheetData = []\n        \n        // Add header rows with class information\n        worksheetData.push(['Attendance Records Export'])\n        worksheetData.push(['Teacher:', data.teacherName])\n        worksheetData.push(['Year:', data.year])\n        worksheetData.push(['Section:', data.section])\n        worksheetData.push(['Subject:', data.subject])\n        worksheetData.push(['Date Range:', data.dateRange])\n        worksheetData.push([]) // Empty row\n        \n        // Add table headers\n        const headers = ['Student Number', 'Last Name', 'First Name']\n        \n        // Add date headers\n        data.dates.forEach(date => {\n          headers.push(moment(date).format('MM/DD/YYYY'))\n        })\n        \n        worksheetData.push(headers)\n        \n        // Add student data rows\n        data.students.forEach(student => {\n          const row = [\n            student.studentNumber,\n            student.lastName,\n            student.firstName\n          ]\n          \n          // Add attendance status for each date\n          data.dates.forEach(date => {\n            const status = student.attendance[date] || 'none'\n            \n            // Capitalize first letter and handle 'none' specially\n            const formattedStatus = status === 'none' ? 'N/A' : \n              status.charAt(0).toUpperCase() + status.slice(1)\n            \n            row.push(formattedStatus)\n          })\n          \n          worksheetData.push(row)\n        })\n        \n        // Create worksheet and workbook\n        const worksheet = XLSX.utils.aoa_to_sheet(worksheetData)\n        const workbook = XLSX.utils.book_new()\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Attendance Records')\n        \n        // Set column widths\n        const colWidths = [\n          { wch: 15 }, // Student Number\n          { wch: 15 }, // Last Name\n          { wch: 15 }, // First Name\n        ]\n        \n        // Add widths for each date column\n        data.dates.forEach(() => {\n          colWidths.push({ wch: 12 })\n        })\n        \n        worksheet['!cols'] = colWidths\n        \n        // Export based on selected type\n        if (exportType.value === 'excel') {\n          XLSX.writeFile(workbook, `${data.subject}_${data.year}_${data.section}_Attendance.xlsx`)\n        } else {\n          XLSX.writeFile(workbook, `${data.subject}_${data.year}_${data.section}_Attendance.csv`, { bookType: 'csv' })\n        }\n        \n        closeExportModal()\n      } catch (error) {\n        console.error('Error exporting attendance records:', error)\n        alert('Failed to export attendance records. Please try again.')\n      } finally {\n        isExporting.value = false\n      }\n    }\n\n    // Function to open export modal\n    const openExportModal = () => {\n      // Set modal visibility\n      showExportModal.value = true\n      \n      // Add class to body to prevent scrolling when modal is open\n      document.body.classList.add('modal-open')\n      \n      // Reset date range to last 30 days by default\n      exportDateRange.value = {\n        start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n        end: moment().format('YYYY-MM-DD')\n      }\n      \n      // Log modal opening for debugging\n      console.log('Export modal opened')\n    }\n\n    // Function to close export modal\n    const closeExportModal = () => {\n      showExportModal.value = false\n      document.body.classList.remove('modal-open')\n    }\n\n    return {\n      students,\n      searchQuery,\n      sortedStudents,\n      selectedStudent,\n      currentDate,\n      formatDate,\n      formatDateForInput,\n      navigateDate,\n      isNextDayDisabled,\n      markAttendance,\n      slideDirection,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      sortBy,\n      getSortIcon,\n      handleSearch,\n      viewStudentDetails,\n      fetchStudentAttendanceHistory,\n      historyStartDate,\n      historyEndDate,\n      availableYears,\n      availableSections,\n      sectionsByYear,\n      teacherSubjects,\n      filteredSections,\n      fetchAvailableYearsAndSections,\n      fetchTeacherSubjects,\n      applyFilters,\n      clearFilters,\n      getAttendanceStatus,\n      setCurrentDate,\n      resetHistoryDateFilter,\n      setHistoryDateRange,\n      openDatePicker,\n      showHistoryDatePicker,\n      openHistoryDatePicker,\n      applyHistoryDateFilter,\n      showCalendarPopup,\n      openCalendarPopup,\n      refreshAttendance,\n      currentPage,\n      totalPages,\n      paginatedStudents,\n      paginationInfo,\n      nextPage,\n      previousPage,\n      clearSearch,\n      showExportModal,\n      exportDateRange,\n      exportType,\n      isExporting,\n      exportRecords,\n      openExportModal,\n      closeExportModal,\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Base z-index hierarchy - using ClassRecords approach */\n:root {\n  --z-base: 1;\n  --z-table: 10;\n  --z-controls: 100;\n  --z-dropdown: 1000;\n  --z-modal-backdrop: 9998;\n  --z-modal-wrapper: 9999;\n  --z-modal-content: 10000;\n  --z-table-header: 20;\n}\n\n/* Modal Styles */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: var(--z-modal-wrapper);\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(4px);\n}\n\n.modal-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: var(--z-modal-wrapper);\n}\n\n.modal-dialog {\n  position: relative;\n  width: 90%;\n  max-width: 600px;\n  margin: 1.75rem auto;\n  pointer-events: auto;\n  z-index: var(--z-modal-content);\n}\n\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: none;\n  border-radius: 0.5rem;\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n  outline: 0;\n  max-height: calc(100vh - 3.5rem);\n  overflow-y: auto;\n  z-index: var(--z-modal-content);\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: var(--z-modal-backdrop);\n}\n\n/* Teleported modals need higher z-index */\n:deep(body > .modal-overlay) {\n  z-index: 99999;\n}\n\n:deep(body > .modal-wrapper) {\n  z-index: 100000;\n}\n\n:deep(body > .modal-content) {\n  z-index: 100001;\n}\n\n/* The rest of the existing styles */\n.attendance-view {\n  max-width: 100%;\n  margin: 0 auto;\n  padding: 0;\n  position: relative;\n}\n\n/* Controls container */\n.controls-container {\n  position: relative;\n  z-index: var(--z-controls);\n  background: white;\n  padding: 1rem;\n  border-radius: 12px;\n  margin-bottom: 1rem;\n}\n\n/* Dropdown styles */\n.dropdown {\n  position: relative;\n  z-index: var(--z-dropdown);\n}\n\n.dropdown-menu {\n  position: absolute !important;\n  z-index: var(--z-dropdown) !important;\n  transform: none !important;\n  top: 100% !important;\n  left: 0 !important;\n  float: none !important;\n  min-width: 10rem !important;\n  background-color: #fff !important;\n  border: none !important;\n  border-radius: 12px !important;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\n  padding: 0.5rem 0 !important;\n  margin-top: 0.5rem !important;\n}\n\n/* Table container - lower z-index than controls */\n.table-responsive {\n  position: relative;\n  z-index: var(--z-table);\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  overflow: visible;\n  margin-top: 1rem;\n}\n\n.card {\n  border: none;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  overflow: visible !important;\n  position: relative;\n}\n\n.card-body {\n  padding: 1.5rem;\n  position: relative;\n}\n\n.table-controls {\n  position: relative;\n  z-index: var(--z-controls);\n  background: white;\n  padding: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  margin-bottom: 1rem;\n  overflow: visible;\n}\n\n/* Dropdown button */\n.btn-control {\n  position: relative;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  color: #4a5568;\n  font-size: 0.9rem;\n  padding: 0.5rem 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  z-index: var(--z-controls);\n}\n\n.btn-control:hover {\n  background: #f1f5f9;\n  border-color: #cbd5e1;\n  color: #2d3748;\n}\n\n/* Dropdown menu */\n.control-menu {\n  border: none !important;\n  border-radius: 12px !important;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\n  padding: 0.5rem 0 !important;\n  margin-top: 0.5rem !important;\n  z-index: var(--z-dropdown) !important;\n  position: absolute !important;\n  min-width: 10rem !important;\n  background-color: #fff !important;\n}\n\n/* Override Bootstrap's dropdown styles */\n.dropdown-menu.show {\n  display: block !important;\n  z-index: var(--z-dropdown) !important;\n  position: absolute !important;\n}\n\n.dropdown-item {\n  padding: 0.6rem 1rem;\n  font-size: 0.9rem;\n  color: #4a5568;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.dropdown-item:hover {\n  background-color: #f8fafc;\n  color: #2d3748;\n}\n\n.dropdown-header {\n  color: #2d3748;\n  font-weight: 600;\n  font-size: 1rem;\n}\n\n.filter-badge {\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  background: #e53e3e;\n  color: white;\n  width: 18px;\n  height: 18px;\n  border-radius: 50%;\n  font-size: 0.7rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid white;\n}\n\n.search-control {\n  position: relative;\n  z-index: var(--z-controls);\n}\n\n/* Table styles from ClassRecords */\n.table {\n  width: 100%;\n  margin-bottom: 0;\n  color: #4a5568;\n  vertical-align: top;\n  border-color: #e2e8f0;\n}\n\n.table th {\n  position: sticky;\n  top: 0;\n  z-index: var(--z-table-header);\n  background-color: #f8f9fa;\n  color: #666;\n  font-weight: 600;\n  padding: 0.75rem 1rem;\n  border-top: none;\n  white-space: nowrap;\n  vertical-align: bottom;\n  border-bottom: 2px solid #e2e8f0;\n}\n\n.table td {\n  padding: 0.75rem 1rem;\n  vertical-align: middle;\n  border-color: #eee;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table tbody tr:hover {\n  background-color: #f8f9fa;\n}\n\n.table-hover tbody tr:hover {\n  background-color: rgba(0, 0, 0, 0.02);\n}\n\n.clickable-row {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.clickable-row:hover {\n  background-color: rgba(0, 0, 0, 0.02);\n}\n\n.date-display {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #495057;\n  padding: 0.5rem 1rem;\n  background: #fff;\n  border-radius: 0.5rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  min-width: 200px;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.date-display:hover {\n  background: #f8fafc;\n}\n\n.empty-state-message {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 2rem;\n  color: #6c757d;\n}\n\n.empty-state-message i {\n  font-size: 2rem;\n}\n\n.pagination-controls {\n  background: white;\n  padding: 1rem;\n  border-top: 1px solid #e2e8f0;\n}\n\n.pagination-info {\n  color: #4a5568;\n  font-size: 0.9rem;\n}\n\n.pagination-buttons .btn {\n  min-width: 100px;\n}\n\n.status-badge {\n  padding: 0.5em 0.75em;\n  border-radius: 0.375rem;\n  font-weight: 500;\n  font-size: 0.875rem;\n  text-transform: capitalize;\n}\n\n.status-present {\n  background-color: #48bb78;\n  color: white;\n}\n\n.status-absent {\n  background-color: #f56565;\n  color: white;\n}\n\n.status-late {\n  background-color: #ed8936;\n  color: white;\n}\n\n.status-excused {\n  background-color: #4299e1;\n  color: white;\n}\n\n.calendar-popup {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: var(--z-modal-wrapper);\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.calendar-container {\n  position: relative;\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: var(--z-modal-content);\n  max-width: 400px;\n  width: 100%;\n}\n\n.calendar-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n}\n\n.calendar-body {\n  margin-bottom: 1rem;\n}\n\n.quick-date-buttons {\n  display: flex;\n  gap: 0.5rem;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n.student-details {\n  display: grid;\n  grid-template-columns: 350px 1fr;\n  gap: 1.5rem;\n}\n\n.chart-section {\n  position: relative;\n  z-index: var(--z-modal-content);\n  background: white;\n  border-radius: 12px;\n  padding: 2rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.chart-section h6 {\n  color: #2d3748;\n  font-size: 1.4rem;\n  font-weight: 600;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 2px solid #e2e8f0;\n}\n\n.attendance-table {\n  margin-top: 1rem;\n  font-size: 1.1rem;\n}\n\n.attendance-table th {\n  font-size: 1.1rem;\n  font-weight: 600;\n  color: #2d3748;\n  background: white;\n  position: sticky;\n  top: 0;\n  z-index: var(--z-table-header);\n}\n\n.attendance-table td {\n  font-size: 1.1rem;\n  color: #4a5568;\n}\n\n.badge {\n  font-size: 1rem;\n  padding: 0.5em 1em;\n}\n\n/* Chart container */\n.chart-container {\n  position: relative;\n  width: 100%;\n  height: 300px;\n}\n\n/* Add these styles for attendance status */\n.attendance-status-container {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  position: relative;\n}\n\n.attendance-select {\n  flex: 1;\n  padding-right: 2.5rem;\n  border-radius: 6px;\n  border: 1px solid #e2e8f0;\n  transition: all 0.2s;\n}\n\n.select-present {\n  border-color: #48bb78;\n  background-color: rgba(72, 187, 120, 0.1);\n}\n\n.select-absent {\n  border-color: #f56565;\n  background-color: rgba(245, 101, 101, 0.1);\n}\n\n.select-late {\n  border-color: #ed8936;\n  background-color: rgba(237, 137, 54, 0.1);\n}\n\n.select-none {\n  border-color: #a0aec0;\n  background-color: rgba(160, 174, 192, 0.1);\n}\n\n.status-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  font-size: 1rem;\n  color: white;\n}\n\n.indicator-present {\n  background-color: #48bb78;\n}\n\n.indicator-absent {\n  background-color: #f56565;\n}\n\n.indicator-late {\n  background-color: #ed8936;\n}\n\n.indicator-none {\n  background-color: #a0aec0;\n}\n\n/* Add these styles for status row highlighting */\n.status-row-present {\n  background-color: rgba(72, 187, 120, 0.05);\n}\n\n.status-row-absent {\n  background-color: rgba(245, 101, 101, 0.05);\n}\n\n.status-row-late {\n  background-color: rgba(237, 137, 54, 0.05);\n}\n</style> \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
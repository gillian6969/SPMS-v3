{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Add date filter refs\n    const selectedDateRange = ref(localStorage.getItem('selectedDateRange') || 'all');\n    const customStartDate = ref('');\n    const customEndDate = ref('');\n\n    // Computed property for current date range\n    const currentDateRange = computed(() => {\n      const end = moment();\n      let start = moment();\n      switch (selectedDateRange.value) {\n        case '1week':\n          start = moment().subtract(1, 'weeks');\n          break;\n        case '2weeks':\n          start = moment().subtract(2, 'weeks');\n          break;\n        case '1month':\n          start = moment().subtract(1, 'month');\n          break;\n        case 'custom':\n          if (customStartDate.value && customEndDate.value) {\n            start = moment(customStartDate.value);\n            end = moment(customEndDate.value).endOf('day');\n          }\n          break;\n        case 'all':\n        default:\n          // Use all available data\n          start = moment().subtract(1, 'year');\n          break;\n      }\n      return {\n        start: start.toDate(),\n        end: end.toDate(),\n        startStr: start.format('YYYY-MM-DD'),\n        endStr: end.format('YYYY-MM-DD')\n      };\n    });\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n\n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n\n          // Save available years\n          availableYears.value = uniqueYears.sort();\n\n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n\n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n          }\n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: [{\n          type: 'Quiz',\n          averageScore: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0\n        }]\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n\n        // Prepare query parameters\n        const params = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: currentDateRange.value.startStr,\n          endDate: currentDateRange.value.endStr\n        };\n        console.log('Fetching dashboard data with params:', params);\n\n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n\n        // Store complete data for reference\n        data.value = response.data;\n\n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n\n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n\n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [attendanceStats.present || 0, attendanceStats.late || 0, attendanceStats.absent || 0];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n\n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n\n        // For the assessment type chart, create dummy data for testing\n        // This data will be removed once the real API is working properly\n        const dummyAssessmentData = [{\n          type: 'Quiz',\n          averageScore: 85,\n          count: 12\n        }, {\n          type: 'Activity',\n          averageScore: 78,\n          count: 8\n        }, {\n          type: 'Performance Task',\n          averageScore: 92,\n          count: 5\n        }];\n\n        // Debug assessmentTypes from API\n        console.log('Assessment types from API:', response.data.assessmentTypes);\n\n        // Update assessment data for the assessment type chart\n        // Extract assessment data from the response\n        const assessmentData = [];\n\n        // Process assessment type data from the dashboard API response\n        if (response.data.assessmentTypes) {\n          Object.keys(response.data.assessmentTypes).forEach(type => {\n            const typeData = response.data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          console.log('Processed assessment data:', assessmentData);\n          if (assessmentData.length > 0) {\n            updateAssessmentTypeChart({\n              assessmentData\n            });\n          } else {\n            // If API returned empty data, use dummy data for testing\n            console.log('Using dummy assessment data due to empty API response');\n            updateAssessmentTypeChart({\n              assessmentData: dummyAssessmentData\n            });\n          }\n        } else {\n          // Fallback to dummy assessment types if no data provided\n          console.log('Using dummy assessment data due to missing API data');\n          updateAssessmentTypeChart({\n            assessmentData: dummyAssessmentData\n          });\n        }\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) ? data.attendanceDistribution.slice(0, 3) : [0, 0, 0];\n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for late\n            'rgba(239, 68, 68, 0.8)' // Red for absent\n            ],\n            borderColor: ['rgb(15, 140, 80)',\n            // Darker borders for contrast\n            'rgb(220, 160, 20)', 'rgb(220, 50, 50)'],\n            borderWidth: 1,\n            hoverOffset: 15\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n\n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n\n          // Get the count from the first matching assessment if available\n          const firstMatch = typeAssessments[0];\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n        console.log('Processed assessment chart data:', assessmentData);\n      }\n\n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Quiz\n            'rgba(59, 130, 246, 0.8)',\n            // Blue for Activity\n            'rgba(251, 191, 36, 0.8)' // Yellow for Performance Task\n            ],\n            borderColor: ['rgb(15, 140, 80)', 'rgb(45, 110, 220)', 'rgb(220, 160, 20)'],\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n\n    // Set date range\n    const setDateRange = range => {\n      selectedDateRange.value = range;\n      localStorage.setItem('selectedDateRange', range);\n\n      // If custom, initialize with reasonable defaults\n      if (range === 'custom' && !customStartDate.value) {\n        customStartDate.value = moment().subtract(2, 'weeks').format('YYYY-MM-DD');\n        customEndDate.value = today.value;\n      }\n\n      // Refresh data with new date range\n      fetchDashboardData();\n    };\n\n    // Format date for short display\n    const formatDateShort = date => {\n      if (!date) return '';\n      return moment(date).format('MMM D, YYYY');\n    };\n\n    // Watch for changes to custom date range\n    watch([customStartDate, customEndDate], () => {\n      if (selectedDateRange.value === 'custom' && customStartDate.value && customEndDate.value) {\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initDummyData();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      selectedDateRange,\n      customStartDate,\n      customEndDate,\n      currentDateRange,\n      setDateRange,\n      formatDateShort\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","availableYears","selectedDateRange","customStartDate","customEndDate","currentDateRange","end","start","value","subtract","endOf","toDate","startStr","endStr","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","data","attendanceDistribution","some","val","hasPerformanceData","Array","isArray","performanceTrends","length","assessmentTypes","Object","values","type","count","hasAssessmentData","assessmentTypeDistribution","hasActivity","loading","userName","firstName","lastName","trim","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueYears","Set","map","record","filter","Boolean","uniqueSections","section","uniqueSubjects","subject","sort","filteredRecords","warn","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initDummyData","updatePerformanceChart","updateAssessmentTypeChart","assessmentData","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","startDate","endDate","response","hasOwnProperty","scoreValue","parseFloat","isNaN","toFixed","attendanceResponse","attendanceStats","present","late","absent","err","dummyAssessmentData","keys","forEach","typeData","avgScore","scoreCount","totalScore","ctx","getContext","existingChart","getChart","destroy","attendanceData","slice","totalAttendance","reduce","a","b","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","display","position","usePointStyle","padding","font","size","tooltip","callbacks","label","context","raw","total","percentage","titleFont","weight","bodyFont","cornerRadius","layout","top","right","bottom","left","averageScores","totalCounts","typeAssessments","totalCount","firstMatch","sum","borderRadius","barPercentage","scales","y","beginAtZero","max","grid","color","title","text","ticks","x","dataset","afterLabel","dataIndex","validData","d","date","Number","score","tension","fill","pointRadius","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","trendsByType","Quiz","Activity","trend","Date","allDates","flat","item","entries","index","colors","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","isBefore","setDateRange","range","formatDateShort"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Add date filter component and enable legends for all charts -->\n    <div class=\"row mb-4\">\n      <div class=\"col-12\">\n        <div class=\"date-filter-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title mb-3\">\n              <i class=\"fas fa-calendar me-2\"></i>\n              Chart Date Range\n            </h5>\n            <div class=\"d-flex flex-wrap align-items-center\">\n              <div class=\"date-filter-buttons me-3 mb-2\">\n                <button @click=\"setDateRange('1week')\" :class=\"['btn', selectedDateRange === '1week' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Last Week\n                </button>\n                <button @click=\"setDateRange('2weeks')\" :class=\"['btn', selectedDateRange === '2weeks' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Last 2 Weeks\n                </button>\n                <button @click=\"setDateRange('1month')\" :class=\"['btn', selectedDateRange === '1month' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Last Month\n                </button>\n                <button @click=\"setDateRange('custom')\" :class=\"['btn', selectedDateRange === 'custom' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Custom\n                </button>\n              </div>\n              <div v-if=\"selectedDateRange === 'custom'\" class=\"date-custom-inputs d-flex flex-wrap mb-2\">\n                <div class=\"input-group me-2\" style=\"max-width: 200px;\">\n                  <span class=\"input-group-text\">From</span>\n                  <input type=\"date\" class=\"form-control\" v-model=\"customStartDate\" :max=\"today\">\n                </div>\n                <div class=\"input-group\" style=\"max-width: 200px;\">\n                  <span class=\"input-group-text\">To</span>\n                  <input type=\"date\" class=\"form-control\" v-model=\"customEndDate\" :max=\"today\" :min=\"customStartDate\">\n                </div>\n              </div>\n              <div class=\"ms-auto mb-2\">\n                <span class=\"text-muted\" v-if=\"selectedDateRange && selectedDateRange !== 'all'\">\n                  Showing data from {{ formatDateShort(currentDateRange.start) }} to {{ formatDateShort(currentDateRange.end) }}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Add date filter refs\n    const selectedDateRange = ref(localStorage.getItem('selectedDateRange') || 'all');\n    const customStartDate = ref('');\n    const customEndDate = ref('');\n    \n    // Computed property for current date range\n    const currentDateRange = computed(() => {\n      const end = moment();\n      let start = moment();\n      \n      switch (selectedDateRange.value) {\n        case '1week':\n          start = moment().subtract(1, 'weeks');\n          break;\n        case '2weeks':\n          start = moment().subtract(2, 'weeks');\n          break;\n        case '1month':\n          start = moment().subtract(1, 'month');\n          break;\n        case 'custom':\n          if (customStartDate.value && customEndDate.value) {\n            start = moment(customStartDate.value);\n            end = moment(customEndDate.value).endOf('day');\n          }\n          break;\n        case 'all':\n        default:\n          // Use all available data\n          start = moment().subtract(1, 'year');\n          break;\n      }\n      \n      return {\n        start: start.toDate(),\n        end: end.toDate(),\n        startStr: start.format('YYYY-MM-DD'),\n        endStr: end.format('YYYY-MM-DD')\n      };\n    });\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        } else {\n          console.warn('No class records found or unexpected response format');\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: currentDateRange.value.startStr,\n          endDate: currentDateRange.value.endStr\n        };\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [\n                attendanceStats.present || 0,\n                attendanceStats.late || 0,\n                attendanceStats.absent || 0\n              ];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        // For the assessment type chart, create dummy data for testing\n        // This data will be removed once the real API is working properly\n        const dummyAssessmentData = [\n          { type: 'Quiz', averageScore: 85, count: 12 },\n          { type: 'Activity', averageScore: 78, count: 8 },\n          { type: 'Performance Task', averageScore: 92, count: 5 }\n        ];\n        \n        // Debug assessmentTypes from API\n        console.log('Assessment types from API:', response.data.assessmentTypes);\n        \n        // Update assessment data for the assessment type chart\n        // Extract assessment data from the response\n        const assessmentData = [];\n        \n        // Process assessment type data from the dashboard API response\n        if (response.data.assessmentTypes) {\n          Object.keys(response.data.assessmentTypes).forEach(type => {\n            const typeData = response.data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          console.log('Processed assessment data:', assessmentData);\n          \n          if (assessmentData.length > 0) {\n            updateAssessmentTypeChart({ assessmentData });\n          } else {\n            // If API returned empty data, use dummy data for testing\n            console.log('Using dummy assessment data due to empty API response');\n            updateAssessmentTypeChart({ assessmentData: dummyAssessmentData });\n          }\n        } else {\n          // Fallback to dummy assessment types if no data provided\n          console.log('Using dummy assessment data due to missing API data');\n          updateAssessmentTypeChart({ assessmentData: dummyAssessmentData });\n        }\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          \n          // Get the count from the first matching assessment if available\n          const firstMatch = typeAssessments[0];\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n        \n        console.log('Processed assessment chart data:', assessmentData);\n      }\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ],\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    // Set date range\n    const setDateRange = (range) => {\n      selectedDateRange.value = range;\n      localStorage.setItem('selectedDateRange', range);\n      \n      // If custom, initialize with reasonable defaults\n      if (range === 'custom' && !customStartDate.value) {\n        customStartDate.value = moment().subtract(2, 'weeks').format('YYYY-MM-DD');\n        customEndDate.value = today.value;\n      }\n      \n      // Refresh data with new date range\n      fetchDashboardData();\n    };\n    \n    // Format date for short display\n    const formatDateShort = (date) => {\n      if (!date) return '';\n      return moment(date).format('MMM D, YYYY');\n    };\n    \n    // Watch for changes to custom date range\n    watch([customStartDate, customEndDate], () => {\n      if (selectedDateRange.value === 'custom' && customStartDate.value && customEndDate.value) {\n        fetchDashboardData();\n      }\n    });\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initDummyData();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      selectedDateRange,\n      customStartDate,\n      customEndDate,\n      currentDateRange,\n      setDateRange,\n      formatDateShort\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n/* Add date filter styles */\n.date-filter-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  padding: 0.25rem;\n  transition: all 0.2s ease;\n}\n\n.date-filter-buttons .btn {\n  margin-right: 0.5rem;\n  border-radius: 20px;\n  padding: 0.4rem 1rem;\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.date-custom-inputs .input-group-text {\n  background-color: #f8f9fa;\n  font-size: 0.875rem;\n  border-radius: 8px 0 0 8px;\n}\n\n.date-custom-inputs .form-control {\n  border-radius: 0 8px 8px 0;\n  font-size: 0.875rem;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const assessmentCompletion = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => averageAttendance.value > 0);\n    const hasPerformanceData = computed(() => averageScore.value > 0);\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0);\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n        if (response.data) {\n          // Update stats\n          totalStudents.value = response.data.totalStudents || 0;\n          totalSections.value = response.data.totalSections || 0;\n          totalSubjects.value = response.data.totalSubjects || 0;\n          averageAttendance.value = response.data.averageAttendance || 0;\n          averageScore.value = response.data.averageScore || 0;\n          assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n          recentActivities.value = response.data.recentActivities || [];\n\n          // Log data before updating charts\n          console.log('Performance Distribution:', response.data.performanceDistribution);\n          console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n          console.log('Performance Trends:', response.data.performanceTrends);\n          console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n          // Update charts with new data\n          if (Array.isArray(response.data.performanceDistribution)) {\n            updatePerformanceChart(response.data);\n          } else {\n            console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n            updatePerformanceChart({\n              performanceDistribution: [0, 0, 0, 0, 0]\n            });\n          }\n          if (Array.isArray(response.data.assessmentTypeDistribution)) {\n            updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n          } else {\n            console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n            updateAssessmentTypeChart([{\n              type: 'Quiz',\n              percentage: 0\n            }, {\n              type: 'Activity',\n              percentage: 0\n            }, {\n              type: 'Performance Task',\n              percentage: 0\n            }]);\n          }\n          if (Array.isArray(response.data.performanceTrends)) {\n            updatePerformanceTrendChart(response.data.performanceTrends);\n          } else {\n            console.warn('Invalid performance trends data:', response.data.performanceTrends);\n            updatePerformanceTrendChart([]);\n          }\n          if (response.data.assessmentCompletion?.byType) {\n            updateAssessmentTypePerformanceChart(response.data);\n          } else {\n            console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n            updateAssessmentTypePerformanceChart({\n              assessmentCompletion: {\n                byType: {\n                  quiz: 0,\n                  activity: 0,\n                  performancetask: 0\n                }\n              }\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Reset data on error\n        totalStudents.value = 0;\n        totalSections.value = 0;\n        totalSubjects.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n        assessmentCompletion.value = 0;\n        recentActivities.value = [];\n\n        // Update charts with empty data\n        updatePerformanceChart({\n          performanceDistribution: [0, 0, 0, 0, 0]\n        });\n        updateAssessmentTypeChart([{\n          type: 'Quiz',\n          percentage: 0\n        }, {\n          type: 'Activity',\n          percentage: 0\n        }, {\n          type: 'Performance Task',\n          percentage: 0\n        }]);\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          assessmentCompletion: {\n            byType: {\n              quiz: 0,\n              activity: 0,\n              performancetask: 0\n            }\n          }\n        });\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process performance distribution data\n      const performanceData = Array.isArray(data.performanceDistribution) ? data.performanceDistribution : [0, 0, 0, 0, 0];\n      console.log('Performance distribution data:', performanceData);\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n          datasets: [{\n            label: 'Number of Students',\n            data: performanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for highest\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow\n            'rgba(251, 146, 60, 0.8)',\n            // Orange\n            'rgba(239, 68, 68, 0.8)' // Red for lowest\n            ],\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${value} students (${percentage}%)`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1\n              },\n              title: {\n                display: true,\n                text: 'Number of Students'\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the assessment type distribution data\n      const labels = data.labels || [];\n      const datasets = data.datasets || [];\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets.map((dataset, index) => ({\n            label: dataset.type,\n            data: dataset.data,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)' // Yellow\n            ][index],\n            borderWidth: 1\n          }))\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Assessments'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.dataset.label}: ${context.raw || 0} assessments`\n              }\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n          updateAssessmentTypeChart([{\n            type: 'Quiz',\n            percentage: 0\n          }, {\n            type: 'Activity',\n            percentage: 0\n          }, {\n            type: 'Performance Task',\n            percentage: 0\n          }]);\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageAttendance,\n      averageScore,\n      assessmentCompletion,\n      performanceChart,\n      attendanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageAttendance","averageScore","assessmentCompletion","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","value","hasPerformanceData","hasAssessmentData","hasActivity","length","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","startDate","endDate","response","overall","performanceDistribution","assessmentTypeDistribution","performanceTrends","byType","Array","isArray","updatePerformanceChart","warn","updateAssessmentTypeChart","type","percentage","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","quiz","activity","performancetask","ctx","getContext","existingChart","getChart","destroy","performanceData","labels","datasets","label","backgroundColor","borderWidth","borderRadius","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","raw","total","reduce","a","b","toFixed","scales","y","beginAtZero","ticks","stepSize","title","text","dataset","index","x","stacked","maxRotation","minRotation","position","validData","d","date","Number","score","borderColor","tension","fill","pointRadius","pointHoverRadius","dataPoint","dataIndex","max","font","size","weight","trendsByType","Quiz","Activity","forEach","trend","Date","parseFloat","Object","keys","allDates","values","flat","item","entries","colors","color","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <h2 class=\"dashboard-title\"></h2>\r\n      \r\n      <!-- Combined Filter Dropdown -->\r\n      <div class=\"dropdown\">\r\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n          <i class=\"fas fa-filter me-2\"></i>\r\n          {{ getFilterDisplay() }}\r\n        </button>\r\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\r\n          <h6 class=\"dropdown-header\">Filter Options</h6>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Academic Year</label>\r\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n              <option value=\"\">All Years</option>\r\n              <option value=\"1st\">1st Year</option>\r\n              <option value=\"2nd\">2nd Year</option>\r\n              <option value=\"3rd\">3rd Year</option>\r\n              <option value=\"4th\">4th Year</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Section</label>\r\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\r\n              <option value=\"\">All Sections</option>\r\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Subject</label>\r\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\r\n              <option value=\"\">All Subjects</option>\r\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Date Range</label>\r\n            <div class=\"d-flex gap-2\">\r\n              <div class=\"flex-grow-1\">\r\n                <label class=\"small text-muted\">From</label>\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"form-control form-control-sm\" \r\n                  v-model=\"selectedStartDate\"\r\n                  :max=\"today\"\r\n                >\r\n              </div>\r\n              <div class=\"flex-grow-1\">\r\n                <label class=\"small text-muted\">To</label>\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"form-control form-control-sm\" \r\n                  v-model=\"selectedEndDate\"\r\n                  :max=\"today\"\r\n                >\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"dropdown-divider\"></div>\r\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Analytics Cards -->\r\n    <div class=\"row g-4\">\r\n      <!-- Total Students Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-user-graduate\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Total Students</h3>\r\n            <div class=\"stat-value\">{{ totalStudents }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total Sections Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-chalkboard\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Active Sections</h3>\r\n            <div class=\"stat-value\">{{ totalSections }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total Subjects Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-book\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">My Subjects</h3>\r\n            <div class=\"stat-value\">{{ totalSubjects }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Average Score Card -->\r\n      <div class=\"col-md-3\">\r\n        <div class=\"dashboard-card\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-chart-line\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Class Average</h3>\r\n            <div class=\"stat-value\" v-if=\"hasPerformanceData\">{{ averageScore }}%</div>\r\n            <div class=\"no-data\" v-else>No data available</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Secondary Stats Row -->\r\n    <div class=\"row mt-4\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"dashboard-card h-100\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-clock\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Average Attendance</h3>\r\n            <div class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</div>\r\n            <div class=\"no-data\" v-else>No attendance data available</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <div class=\"dashboard-card h-100\">\r\n          <div class=\"icon-container\">\r\n            <i class=\"fas fa-tasks\"></i>\r\n          </div>\r\n          <div class=\"card-info\">\r\n            <h3 class=\"stat-title\">Assessment Completion</h3>\r\n            <div class=\"stat-value\" v-if=\"hasAssessmentData\">{{ assessmentCompletion }}%</div>\r\n            <div class=\"no-data\" v-else>No assessment data available</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Row -->\r\n    <div class=\"row mb-4\">\r\n      <!-- Performance Distribution Chart -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Grade Distribution</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"performanceChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Assessment Type Distribution -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Assessment Type Distribution</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"assessmentTypeChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No assessment data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Performance Trend Chart -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Performance Trends</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"performanceTrendChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Assessment Type Performance -->\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"chart-card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Performance by Assessment Type</h5>\r\n            <div class=\"chart-container\">\r\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\r\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Recent Activity -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">Recent Activity</h5>\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Activity</th>\r\n                <th>Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-if=\"!hasActivity\">\r\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\r\n              </tr>\r\n              <tr v-for=\"activity in recentActivities\" :key=\"activity.id\">\r\n                <td>{{ formatDate(activity.date) }}</td>\r\n                <td>{{ activity.type }}</td>\r\n                <td>{{ activity.details }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\nexport default {\r\n  name: 'TeacherDashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    const performanceChart = ref(null)\r\n    const attendanceChart = ref(null)\r\n    const assessmentTypeChart = ref(null)\r\n    const performanceTrendChart = ref(null)\r\n    const assessmentTypePerformanceChart = ref(null)\r\n\r\n    // Data refs\r\n    const totalStudents = ref(0)\r\n    const totalSections = ref(0)\r\n    const totalSubjects = ref(0)\r\n    const averageAttendance = ref(0)\r\n    const averageScore = ref(0)\r\n    const assessmentCompletion = ref(0)\r\n    const recentActivities = ref([])\r\n    const sections = ref([])\r\n    const subjects = ref([])\r\n    \r\n    // Filter refs\r\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\r\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\r\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\r\n    const selectedStartDate = ref('')\r\n    const selectedEndDate = ref('')\r\n    const today = computed(() => moment().format('YYYY-MM-DD'))\r\n\r\n    // Get teacher ID from store\r\n    const getTeacherId = () => {\r\n      const user = store.state.auth.user\r\n      if (!user || !user._id) {\r\n        console.error('No teacher ID found in store')\r\n        return null\r\n      }\r\n      return user._id\r\n    }\r\n\r\n    // Computed properties for data availability\r\n    const hasAttendanceData = computed(() => averageAttendance.value > 0)\r\n    const hasPerformanceData = computed(() => averageScore.value > 0)\r\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0)\r\n    const hasActivity = computed(() => recentActivities.value.length > 0)\r\n\r\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\r\n      try {\r\n        const teacherId = getTeacherId()\r\n        if (!teacherId) return\r\n\r\n        const token = store.state.auth.token\r\n        console.log('Fetching sections and subjects for:', { teacherId, year })\r\n\r\n        // First get all class records to extract sections\r\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\r\n          params: { \r\n            teacherId,\r\n            year \r\n          },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        })\r\n\r\n        if (recordsResponse.data) {\r\n          // Extract unique sections and subjects\r\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\r\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\r\n          \r\n          sections.value = uniqueSections.sort()\r\n          subjects.value = uniqueSubjects.sort()\r\n          \r\n          console.log('Loaded sections and subjects:', {\r\n            sections: sections.value,\r\n            subjects: subjects.value\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching teacher sections and subjects:', error)\r\n        sections.value = []\r\n        subjects.value = []\r\n      }\r\n    }\r\n\r\n    const handleYearChange = async () => {\r\n      selectedSection.value = ''\r\n      selectedSubject.value = ''\r\n      if (selectedYear.value) {\r\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\r\n      } else {\r\n        sections.value = []\r\n        subjects.value = []\r\n      }\r\n      await fetchDashboardData()\r\n    }\r\n\r\n    const getFilterDisplay = () => {\r\n      const filters = []\r\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\r\n      if (selectedSection.value) filters.push(selectedSection.value)\r\n      if (selectedSubject.value) filters.push(selectedSubject.value)\r\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\r\n    }\r\n\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        const teacherId = getTeacherId();\r\n        if (!teacherId) {\r\n          console.error('No teacher ID found');\r\n          return;\r\n        }\r\n\r\n        const token = store.state.auth.token;\r\n        if (!token) {\r\n          console.error('No auth token found');\r\n          return;\r\n        }\r\n\r\n        console.log('Fetching dashboard data with params:', {\r\n          teacherId,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          startDate: selectedStartDate.value,\r\n          endDate: selectedEndDate.value\r\n        });\r\n\r\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\r\n          params: {\r\n            year: selectedYear.value,\r\n            section: selectedSection.value,\r\n            subject: selectedSubject.value,\r\n            startDate: selectedStartDate.value,\r\n            endDate: selectedEndDate.value\r\n          },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n\r\n        console.log('Dashboard data received:', response.data);\r\n\r\n        if (response.data) {\r\n          // Update stats\r\n          totalStudents.value = response.data.totalStudents || 0;\r\n          totalSections.value = response.data.totalSections || 0;\r\n          totalSubjects.value = response.data.totalSubjects || 0;\r\n          averageAttendance.value = response.data.averageAttendance || 0;\r\n          averageScore.value = response.data.averageScore || 0;\r\n          assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\r\n          recentActivities.value = response.data.recentActivities || [];\r\n\r\n          // Log data before updating charts\r\n          console.log('Performance Distribution:', response.data.performanceDistribution);\r\n          console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\r\n          console.log('Performance Trends:', response.data.performanceTrends);\r\n          console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\r\n\r\n          // Update charts with new data\r\n          if (Array.isArray(response.data.performanceDistribution)) {\r\n            updatePerformanceChart(response.data);\r\n          } else {\r\n            console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\r\n            updatePerformanceChart({\r\n              performanceDistribution: [0, 0, 0, 0, 0]\r\n            });\r\n          }\r\n\r\n          if (Array.isArray(response.data.assessmentTypeDistribution)) {\r\n            updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\r\n          } else {\r\n            console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\r\n            updateAssessmentTypeChart([\r\n              { type: 'Quiz', percentage: 0 },\r\n              { type: 'Activity', percentage: 0 },\r\n              { type: 'Performance Task', percentage: 0 }\r\n            ]);\r\n          }\r\n\r\n          if (Array.isArray(response.data.performanceTrends)) {\r\n            updatePerformanceTrendChart(response.data.performanceTrends);\r\n          } else {\r\n            console.warn('Invalid performance trends data:', response.data.performanceTrends);\r\n            updatePerformanceTrendChart([]);\r\n          }\r\n\r\n          if (response.data.assessmentCompletion?.byType) {\r\n            updateAssessmentTypePerformanceChart(response.data);\r\n          } else {\r\n            console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\r\n            updateAssessmentTypePerformanceChart({\r\n              assessmentCompletion: {\r\n                byType: {\r\n                  quiz: 0,\r\n                  activity: 0,\r\n                  performancetask: 0\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching dashboard data:', error);\r\n        if (error.response) {\r\n          console.error('Error response:', error.response.data);\r\n        }\r\n        \r\n        // Reset data on error\r\n        totalStudents.value = 0;\r\n        totalSections.value = 0;\r\n        totalSubjects.value = 0;\r\n        averageAttendance.value = 0;\r\n        averageScore.value = 0;\r\n        assessmentCompletion.value = 0;\r\n        recentActivities.value = [];\r\n        \r\n        // Update charts with empty data\r\n        updatePerformanceChart({\r\n          performanceDistribution: [0, 0, 0, 0, 0]\r\n        });\r\n        updateAssessmentTypeChart([\r\n          { type: 'Quiz', percentage: 0 },\r\n          { type: 'Activity', percentage: 0 },\r\n          { type: 'Performance Task', percentage: 0 }\r\n        ]);\r\n        updatePerformanceTrendChart([]);\r\n        updateAssessmentTypePerformanceChart({\r\n          assessmentCompletion: {\r\n            byType: {\r\n              quiz: 0,\r\n              activity: 0,\r\n              performancetask: 0\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    const updatePerformanceChart = (data) => {\r\n      if (!performanceChart.value) return;\r\n      \r\n      const ctx = performanceChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Process performance distribution data\r\n      const performanceData = Array.isArray(data.performanceDistribution) \r\n        ? data.performanceDistribution \r\n        : [0, 0, 0, 0, 0];\r\n      \r\n      console.log('Performance distribution data:', performanceData);\r\n\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\r\n          datasets: [{\r\n            label: 'Number of Students',\r\n            data: performanceData,\r\n            backgroundColor: [\r\n              'rgba(52, 211, 153, 0.8)',  // Green for highest\r\n              'rgba(59, 130, 246, 0.8)',  // Blue\r\n              'rgba(251, 191, 36, 0.8)',  // Yellow\r\n              'rgba(251, 146, 60, 0.8)',  // Orange\r\n              'rgba(239, 68, 68, 0.8)'    // Red for lowest\r\n            ],\r\n            borderWidth: 1,\r\n            borderRadius: 5\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  const value = context.raw || 0;\r\n                  const total = performanceData.reduce((a, b) => a + (b || 0), 0);\r\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\r\n                  return `${value} students (${percentage}%)`;\r\n                }\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              ticks: {\r\n                stepSize: 1\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Number of Students'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const updateAssessmentTypeChart = (data) => {\r\n      if (!assessmentTypeChart.value) return;\r\n      \r\n      const ctx = assessmentTypeChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Process the assessment type distribution data\r\n      const labels = data.labels || [];\r\n      const datasets = data.datasets || [];\r\n      \r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: labels,\r\n          datasets: datasets.map((dataset, index) => ({\r\n            label: dataset.type,\r\n            data: dataset.data,\r\n            backgroundColor: [\r\n              'rgba(52, 211, 153, 0.8)',  // Green\r\n              'rgba(59, 130, 246, 0.8)',  // Blue\r\n              'rgba(251, 191, 36, 0.8)'   // Yellow\r\n            ][index],\r\n            borderWidth: 1\r\n          }))\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            x: {\r\n              stacked: true,\r\n              ticks: {\r\n                maxRotation: 45,\r\n                minRotation: 45\r\n              }\r\n            },\r\n            y: {\r\n              stacked: true,\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Number of Assessments'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top'\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => `${context.dataset.label}: ${context.raw || 0} assessments`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const updatePerformanceTrendChart = (data) => {\r\n      if (!performanceTrendChart.value) {\r\n        console.warn('Performance trend chart reference not found');\r\n        return;\r\n      }\r\n      \r\n      const ctx = performanceTrendChart.value.getContext('2d');\r\n      if (!ctx) {\r\n        console.warn('Could not get 2d context for performance trend chart');\r\n        return;\r\n      }\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) {\r\n        existingChart.destroy();\r\n      }\r\n\r\n      // Ensure data is valid\r\n      const validData = Array.isArray(data) ? data : [];\r\n      console.log('Creating performance trend chart with data:', validData);\r\n\r\n      new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\r\n          datasets: [{\r\n            label: 'Average Score',\r\n            data: validData.map(d => Number(d.score) || 0),\r\n            borderColor: '#4CAF50',\r\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\r\n            tension: 0.4,\r\n            fill: true,\r\n            pointRadius: 4,\r\n            pointHoverRadius: 6\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  const dataPoint = validData[context.dataIndex];\r\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\r\n                }\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              ticks: {\r\n                stepSize: 20,\r\n                font: {\r\n                  size: 12\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Average Score (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              ticks: {\r\n                font: {\r\n                  size: 12\r\n                },\r\n                maxRotation: 45,\r\n                minRotation: 45\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const updateAssessmentTypePerformanceChart = (data) => {\r\n      if (!assessmentTypePerformanceChart.value) return;\r\n      \r\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Process the performance trends data by assessment type\r\n      const trendsByType = {\r\n        Quiz: [],\r\n        Activity: [],\r\n        'Performance Task': []\r\n      };\r\n\r\n      // Process performance trends data\r\n      if (Array.isArray(data.performanceTrends)) {\r\n        data.performanceTrends.forEach(trend => {\r\n          const type = trend.type || trend.name;\r\n          if (type in trendsByType) {\r\n            trendsByType[type].push({\r\n              date: new Date(trend.date),\r\n              score: parseFloat(trend.score) || 0\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Sort data points by date for each type\r\n      Object.keys(trendsByType).forEach(type => {\r\n        trendsByType[type].sort((a, b) => a.date - b.date);\r\n      });\r\n\r\n      // Get unique dates across all types\r\n      const allDates = [...new Set(\r\n        Object.values(trendsByType)\r\n          .flat()\r\n          .map(item => item.date)\r\n      )].sort((a, b) => a - b);\r\n\r\n      // Create datasets\r\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\r\n        const colors = [\r\n          'rgb(52, 211, 153)',   // Green for Quiz\r\n          'rgb(59, 130, 246)',   // Blue for Activity\r\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\r\n        ];\r\n        const color = colors[index];\r\n\r\n        return {\r\n          label: type,\r\n          data: allDates.map(date => {\r\n            const point = data.find(d => d.date.getTime() === date.getTime());\r\n            return point ? point.score : null;\r\n          }),\r\n          borderColor: color,\r\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\r\n          fill: true,\r\n          tension: 0.4,\r\n          pointRadius: 4,\r\n          pointHoverRadius: 6,\r\n          spanGaps: true // This will connect points even if there are null values\r\n        };\r\n      });\r\n\r\n      new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\r\n          datasets\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          interaction: {\r\n            intersect: false,\r\n            mode: 'index'\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top'\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\r\n                  return `${context.dataset.label}: ${value}%`;\r\n                }\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Score (%)'\r\n              }\r\n            },\r\n            x: {\r\n              ticks: {\r\n                maxRotation: 45,\r\n                minRotation: 45\r\n            }\r\n          }\r\n        }\r\n    }\r\n      });\r\n    };\r\n\r\n    const formatDate = (date) => {\r\n      return moment(date).format('MMM D, YYYY')\r\n    }\r\n\r\n    const applyFilters = async () => {\r\n      // Save selected values to localStorage\r\n      if (selectedYear.value) {\r\n        localStorage.setItem('selectedYear', selectedYear.value)\r\n      } else {\r\n        localStorage.removeItem('selectedYear')\r\n      }\r\n\r\n      if (selectedSection.value) {\r\n        localStorage.setItem('selectedSection', selectedSection.value)\r\n      } else {\r\n        localStorage.removeItem('selectedSection')\r\n      }\r\n\r\n      if (selectedSubject.value) {\r\n        localStorage.setItem('selectedSubject', selectedSubject.value)\r\n      } else {\r\n        localStorage.removeItem('selectedSubject')\r\n      }\r\n\r\n      await fetchDashboardData()\r\n    }\r\n\r\n    // Watch for filter changes\r\n    watch(selectedYear, handleYearChange)\r\n    watch([selectedSection, selectedSubject], applyFilters)\r\n    watch([selectedStartDate, selectedEndDate], () => {\r\n      if (selectedStartDate.value && selectedEndDate.value) {\r\n        // Validate date range\r\n        const start = moment(selectedStartDate.value);\r\n        const end = moment(selectedEndDate.value);\r\n        \r\n        if (end.isBefore(start)) {\r\n          selectedEndDate.value = selectedStartDate.value;\r\n        }\r\n        \r\n        fetchDashboardData();\r\n      }\r\n    })\r\n\r\n    onMounted(async () => {\r\n      if (store.state.auth.user?._id && store.state.auth.token) {\r\n        console.log('Component mounted, initializing...');\r\n        \r\n        // Wait for the next tick to ensure DOM elements are rendered\r\n        await nextTick();\r\n        \r\n        try {\r\n          // Initialize empty charts first\r\n          console.log('Initializing empty charts...');\r\n          \r\n          updatePerformanceChart({\r\n            performanceDistribution: [0, 0, 0, 0, 0]\r\n          });\r\n          updateAssessmentTypeChart([\r\n            { type: 'Quiz', percentage: 0 },\r\n            { type: 'Activity', percentage: 0 },\r\n            { type: 'Performance Task', percentage: 0 }\r\n          ]);\r\n          updatePerformanceTrendChart([]);\r\n          updateAssessmentTypePerformanceChart({\r\n            assessmentCompletion: {\r\n              byType: {\r\n                quiz: 0,\r\n                activity: 0,\r\n                performancetask: 0\r\n              }\r\n            }\r\n          });\r\n          \r\n          console.log('Empty charts initialized');\r\n          \r\n          // Fetch sections and subjects\r\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\r\n          console.log('Sections and subjects fetched');\r\n          \r\n          // Fetch actual dashboard data\r\n          await fetchDashboardData();\r\n          console.log('Initial data fetch completed');\r\n        } catch (error) {\r\n          console.error('Error during initialization:', error);\r\n        }\r\n      } else {\r\n        console.error('No user ID or token found');\r\n      }\r\n    })\r\n\r\n    return {\r\n      totalStudents,\r\n      totalSections,\r\n      totalSubjects,\r\n      averageAttendance,\r\n      averageScore,\r\n      assessmentCompletion,\r\n      performanceChart,\r\n      attendanceChart,\r\n      recentActivities,\r\n      sections,\r\n      subjects,\r\n      selectedYear,\r\n      selectedSection,\r\n      selectedSubject,\r\n      hasAttendanceData,\r\n      hasPerformanceData,\r\n      hasAssessmentData,\r\n      hasActivity,\r\n      formatDate,\r\n      getFilterDisplay,\r\n      handleYearChange,\r\n      applyFilters,\r\n      assessmentTypeChart,\r\n      performanceTrendChart,\r\n      assessmentTypePerformanceChart,\r\n      selectedStartDate,\r\n      selectedEndDate,\r\n      today,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 2rem;\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.dashboard-title {\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  letter-spacing: -0.5px;\r\n}\r\n\r\n.dashboard-card {\r\n  background: #fff;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.25rem;\r\n  height: 100%;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.dashboard-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.icon-container {\r\n  width: 52px;\r\n  height: 52px;\r\n  border-radius: 12px;\r\n  background-color: #003366;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.dashboard-card:hover .icon-container {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.icon-container i {\r\n  color: white;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.card-info {\r\n  flex: 1;\r\n}\r\n\r\n.stat-title {\r\n  font-size: 0.875rem;\r\n  color: #64748b;\r\n  margin: 0 0 0.5rem 0;\r\n  font-weight: 600;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  line-height: 1.2;\r\n}\r\n\r\n.no-data {\r\n  color: #94a3b8;\r\n  font-style: italic;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  height: 300px;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  height: 100%;\r\n  padding: 1.5rem;\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.125rem;\r\n  font-weight: 700;\r\n  color: #1e293b;\r\n  margin-bottom: 1.5rem;\r\n  letter-spacing: -0.3px;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #94a3b8;\r\n  font-style: italic;\r\n  text-align: center;\r\n  width: 100%;\r\n    padding: 1rem;\r\n}\r\n\r\n.btn-filter {\r\n  background-color: white;\r\n  border: 1px solid #e2e8f0;\r\n  padding: 0.75rem 1.25rem;\r\n  font-size: 0.9rem;\r\n  color: #1e293b;\r\n  min-width: 220px;\r\n  text-align: left;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-filter:hover {\r\n  background-color: #f8fafc;\r\n  border-color: #003366;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.filter-menu {\r\n  width: 320px;\r\n  padding: 1.25rem;\r\n  border: none;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  border-radius: 12px;\r\n}\r\n\r\n.dropdown-header {\r\n  color: #003366;\r\n  font-weight: 700;\r\n  padding: 0;\r\n  margin-bottom: 1.25rem;\r\n  font-size: 1rem;\r\n}\r\n\r\n.form-label {\r\n  font-weight: 600;\r\n  color: #475569;\r\n  margin-bottom: 0.5rem;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.form-select, .form-control {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.625rem;\r\n  font-size: 0.9rem;\r\n  color: #1e293b;\r\n  background-color: #fff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.form-select:hover, .form-control:hover {\r\n  border-color: #003366;\r\n}\r\n\r\n.form-select:focus, .form-control:focus {\r\n  border-color: #003366;\r\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\r\n}\r\n\r\n.form-select:disabled {\r\n  background-color: #f1f5f9;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.dropdown-divider {\r\n  margin: 1.25rem 0;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.table {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  color: #475569;\r\n  border-bottom-width: 1px;\r\n  padding: 1rem;\r\n  font-size: 0.875rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.table td {\r\n  padding: 1rem;\r\n  color: #1e293b;\r\n  vertical-align: middle;\r\n  font-size: 0.9rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.table tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .dashboard-card {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .filter-menu {\r\n    width: 100%;\r\n    max-width: 320px;\r\n  }\r\n\r\n  .btn-filter {\r\n    min-width: auto;\r\n    width: 100%;\r\n  }\r\n}\r\n</style> "],"mappings":";;;;;;;;;;;;;AA4OA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAO,QAAS,KAAI;AAC9D,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,KAAI,MAAO,eAAc;AAChC,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,QAAO;AAE1B,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIN,QAAQ,CAAC;IACvB,MAAMO,gBAAe,GAAIZ,GAAG,CAAC,IAAI;IACjC,MAAMa,eAAc,GAAIb,GAAG,CAAC,IAAI;IAChC,MAAMc,mBAAkB,GAAId,GAAG,CAAC,IAAI;IACpC,MAAMe,qBAAoB,GAAIf,GAAG,CAAC,IAAI;IACtC,MAAMgB,8BAA6B,GAAIhB,GAAG,CAAC,IAAI;;IAE/C;IACA,MAAMiB,aAAY,GAAIjB,GAAG,CAAC,CAAC;IAC3B,MAAMkB,aAAY,GAAIlB,GAAG,CAAC,CAAC;IAC3B,MAAMmB,aAAY,GAAInB,GAAG,CAAC,CAAC;IAC3B,MAAMoB,iBAAgB,GAAIpB,GAAG,CAAC,CAAC;IAC/B,MAAMqB,YAAW,GAAIrB,GAAG,CAAC,CAAC;IAC1B,MAAMsB,oBAAmB,GAAItB,GAAG,CAAC,CAAC;IAClC,MAAMuB,gBAAe,GAAIvB,GAAG,CAAC,EAAE;IAC/B,MAAMwB,QAAO,GAAIxB,GAAG,CAAC,EAAE;IACvB,MAAMyB,QAAO,GAAIzB,GAAG,CAAC,EAAE;;IAEvB;IACA,MAAM0B,YAAW,GAAI1B,GAAG,CAAC2B,YAAY,CAACC,OAAO,CAAC,cAAc,KAAK,EAAE;IACnE,MAAMC,eAAc,GAAI7B,GAAG,CAAC2B,YAAY,CAACC,OAAO,CAAC,iBAAiB,KAAK,EAAE;IACzE,MAAME,eAAc,GAAI9B,GAAG,CAAC2B,YAAY,CAACC,OAAO,CAAC,iBAAiB,KAAK,EAAE;IACzE,MAAMG,iBAAgB,GAAI/B,GAAG,CAAC,EAAE;IAChC,MAAMgC,eAAc,GAAIhC,GAAG,CAAC,EAAE;IAC9B,MAAMiC,KAAI,GAAI/B,QAAQ,CAAC,MAAMM,MAAM,CAAC,CAAC,CAAC0B,MAAM,CAAC,YAAY,CAAC;;IAE1D;IACA,MAAMC,YAAW,GAAIA,CAAA,KAAM;MACzB,MAAMC,IAAG,GAAIzB,KAAK,CAAC0B,KAAK,CAACC,IAAI,CAACF,IAAG;MACjC,IAAI,CAACA,IAAG,IAAK,CAACA,IAAI,CAACG,GAAG,EAAE;QACtBC,OAAO,CAACC,KAAK,CAAC,8BAA8B;QAC5C,OAAO,IAAG;MACZ;MACA,OAAOL,IAAI,CAACG,GAAE;IAChB;;IAEA;IACA,MAAMG,iBAAgB,GAAIxC,QAAQ,CAAC,MAAMkB,iBAAiB,CAACuB,KAAI,GAAI,CAAC;IACpE,MAAMC,kBAAiB,GAAI1C,QAAQ,CAAC,MAAMmB,YAAY,CAACsB,KAAI,GAAI,CAAC;IAChE,MAAME,iBAAgB,GAAI3C,QAAQ,CAAC,MAAMoB,oBAAoB,CAACqB,KAAI,GAAI,CAAC;IACvE,MAAMG,WAAU,GAAI5C,QAAQ,CAAC,MAAMqB,gBAAgB,CAACoB,KAAK,CAACI,MAAK,GAAI,CAAC;IAEpE,MAAMC,+BAA8B,GAAI,MAAAA,CAAOC,IAAG,GAAI,EAAE,KAAK;MAC3D,IAAI;QACF,MAAMC,SAAQ,GAAIf,YAAY,CAAC;QAC/B,IAAI,CAACe,SAAS,EAAE;QAEhB,MAAMC,KAAI,GAAIxC,KAAK,CAAC0B,KAAK,CAACC,IAAI,CAACa,KAAI;QACnCX,OAAO,CAACY,GAAG,CAAC,qCAAqC,EAAE;UAAEF,SAAS;UAAED;QAAK,CAAC;;QAEtE;QACA,MAAMI,eAAc,GAAI,MAAM9C,KAAK,CAAC+C,GAAG,CAAC,iDAAiD,EAAE;UACzFC,MAAM,EAAE;YACNL,SAAS;YACTD;UACF,CAAC;UACDO,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUL,KAAK;UAAG;QAChD,CAAC;QAED,IAAIE,eAAe,CAACI,IAAI,EAAE;UACxB;UACA,MAAMC,cAAa,GAAI,CAAC,GAAG,IAAIC,GAAG,CAACN,eAAe,CAACI,IAAI,CAACG,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACC,OAAO,CAAC,CAAC;UACtF,MAAMC,cAAa,GAAI,CAAC,GAAG,IAAIJ,GAAG,CAACN,eAAe,CAACI,IAAI,CAACG,GAAG,CAACC,MAAK,IAAKA,MAAM,CAACG,OAAO,CAAC,CAAC;UAEtFxC,QAAQ,CAACmB,KAAI,GAAIe,cAAc,CAACO,IAAI,CAAC;UACrCxC,QAAQ,CAACkB,KAAI,GAAIoB,cAAc,CAACE,IAAI,CAAC;UAErCzB,OAAO,CAACY,GAAG,CAAC,+BAA+B,EAAE;YAC3C5B,QAAQ,EAAEA,QAAQ,CAACmB,KAAK;YACxBlB,QAAQ,EAAEA,QAAQ,CAACkB;UACrB,CAAC;QACH;MACF,EAAE,OAAOF,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEA,KAAK;QACpEjB,QAAQ,CAACmB,KAAI,GAAI,EAAC;QAClBlB,QAAQ,CAACkB,KAAI,GAAI,EAAC;MACpB;IACF;IAEA,MAAMuB,gBAAe,GAAI,MAAAA,CAAA,KAAY;MACnCrC,eAAe,CAACc,KAAI,GAAI,EAAC;MACzBb,eAAe,CAACa,KAAI,GAAI,EAAC;MACzB,IAAIjB,YAAY,CAACiB,KAAK,EAAE;QACtB,MAAMK,+BAA+B,CAACtB,YAAY,CAACiB,KAAK;MAC1D,OAAO;QACLnB,QAAQ,CAACmB,KAAI,GAAI,EAAC;QAClBlB,QAAQ,CAACkB,KAAI,GAAI,EAAC;MACpB;MACA,MAAMwB,kBAAkB,CAAC;IAC3B;IAEA,MAAMC,gBAAe,GAAIA,CAAA,KAAM;MAC7B,MAAMC,OAAM,GAAI,EAAC;MACjB,IAAI3C,YAAY,CAACiB,KAAK,EAAE0B,OAAO,CAACC,IAAI,CAAC5C,YAAY,CAACiB,KAAI,GAAI,OAAO;MACjE,IAAId,eAAe,CAACc,KAAK,EAAE0B,OAAO,CAACC,IAAI,CAACzC,eAAe,CAACc,KAAK;MAC7D,IAAIb,eAAe,CAACa,KAAK,EAAE0B,OAAO,CAACC,IAAI,CAACxC,eAAe,CAACa,KAAK;MAC7D,OAAO0B,OAAO,CAACtB,MAAK,GAAI,IAAIsB,OAAO,CAACE,IAAI,CAAC,KAAK,IAAI,aAAY;IAChE;IAEA,MAAMJ,kBAAiB,GAAI,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMjB,SAAQ,GAAIf,YAAY,CAAC,CAAC;QAChC,IAAI,CAACe,SAAS,EAAE;UACdV,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;UACpC;QACF;QAEA,MAAMU,KAAI,GAAIxC,KAAK,CAAC0B,KAAK,CAACC,IAAI,CAACa,KAAK;QACpC,IAAI,CAACA,KAAK,EAAE;UACVX,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;UACpC;QACF;QAEAD,OAAO,CAACY,GAAG,CAAC,sCAAsC,EAAE;UAClDF,SAAS;UACTD,IAAI,EAAEvB,YAAY,CAACiB,KAAK;UACxBmB,OAAO,EAAEjC,eAAe,CAACc,KAAK;UAC9BqB,OAAO,EAAElC,eAAe,CAACa,KAAK;UAC9B6B,SAAS,EAAEzC,iBAAiB,CAACY,KAAK;UAClC8B,OAAO,EAAEzC,eAAe,CAACW;QAC3B,CAAC,CAAC;QAEF,MAAM+B,QAAO,GAAI,MAAMnE,KAAK,CAAC+C,GAAG,CAAC,+CAA+CJ,SAAS,QAAQ,EAAE;UACjGK,MAAM,EAAE;YACNN,IAAI,EAAEvB,YAAY,CAACiB,KAAK;YACxBmB,OAAO,EAAEjC,eAAe,CAACc,KAAK;YAC9BqB,OAAO,EAAElC,eAAe,CAACa,KAAK;YAC9B6B,SAAS,EAAEzC,iBAAiB,CAACY,KAAK;YAClC8B,OAAO,EAAEzC,eAAe,CAACW;UAC3B,CAAC;UACDa,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUL,KAAK;UAAG;QAChD,CAAC,CAAC;QAEFX,OAAO,CAACY,GAAG,CAAC,0BAA0B,EAAEsB,QAAQ,CAACjB,IAAI,CAAC;QAEtD,IAAIiB,QAAQ,CAACjB,IAAI,EAAE;UACjB;UACAxC,aAAa,CAAC0B,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAACxC,aAAY,IAAK,CAAC;UACtDC,aAAa,CAACyB,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAACvC,aAAY,IAAK,CAAC;UACtDC,aAAa,CAACwB,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAACtC,aAAY,IAAK,CAAC;UACtDC,iBAAiB,CAACuB,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAACrC,iBAAgB,IAAK,CAAC;UAC9DC,YAAY,CAACsB,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAACpC,YAAW,IAAK,CAAC;UACpDC,oBAAoB,CAACqB,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAACnC,oBAAoB,EAAEqD,OAAM,IAAK,CAAC;UAC7EpD,gBAAgB,CAACoB,KAAI,GAAI+B,QAAQ,CAACjB,IAAI,CAAClC,gBAAe,IAAK,EAAE;;UAE7D;UACAiB,OAAO,CAACY,GAAG,CAAC,2BAA2B,EAAEsB,QAAQ,CAACjB,IAAI,CAACmB,uBAAuB,CAAC;UAC/EpC,OAAO,CAACY,GAAG,CAAC,+BAA+B,EAAEsB,QAAQ,CAACjB,IAAI,CAACoB,0BAA0B,CAAC;UACtFrC,OAAO,CAACY,GAAG,CAAC,qBAAqB,EAAEsB,QAAQ,CAACjB,IAAI,CAACqB,iBAAiB,CAAC;UACnEtC,OAAO,CAACY,GAAG,CAAC,gCAAgC,EAAEsB,QAAQ,CAACjB,IAAI,CAACnC,oBAAoB,EAAEyD,MAAM,CAAC;;UAEzF;UACA,IAAIC,KAAK,CAACC,OAAO,CAACP,QAAQ,CAACjB,IAAI,CAACmB,uBAAuB,CAAC,EAAE;YACxDM,sBAAsB,CAACR,QAAQ,CAACjB,IAAI,CAAC;UACvC,OAAO;YACLjB,OAAO,CAAC2C,IAAI,CAAC,wCAAwC,EAAET,QAAQ,CAACjB,IAAI,CAACmB,uBAAuB,CAAC;YAC7FM,sBAAsB,CAAC;cACrBN,uBAAuB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACzC,CAAC,CAAC;UACJ;UAEA,IAAII,KAAK,CAACC,OAAO,CAACP,QAAQ,CAACjB,IAAI,CAACoB,0BAA0B,CAAC,EAAE;YAC3DO,yBAAyB,CAACV,QAAQ,CAACjB,IAAI,CAACoB,0BAA0B,CAAC;UACrE,OAAO;YACLrC,OAAO,CAAC2C,IAAI,CAAC,4CAA4C,EAAET,QAAQ,CAACjB,IAAI,CAACoB,0BAA0B,CAAC;YACpGO,yBAAyB,CAAC,CACxB;cAAEC,IAAI,EAAE,MAAM;cAAEC,UAAU,EAAE;YAAE,CAAC,EAC/B;cAAED,IAAI,EAAE,UAAU;cAAEC,UAAU,EAAE;YAAE,CAAC,EACnC;cAAED,IAAI,EAAE,kBAAkB;cAAEC,UAAU,EAAE;YAAE,EAC3C,CAAC;UACJ;UAEA,IAAIN,KAAK,CAACC,OAAO,CAACP,QAAQ,CAACjB,IAAI,CAACqB,iBAAiB,CAAC,EAAE;YAClDS,2BAA2B,CAACb,QAAQ,CAACjB,IAAI,CAACqB,iBAAiB,CAAC;UAC9D,OAAO;YACLtC,OAAO,CAAC2C,IAAI,CAAC,kCAAkC,EAAET,QAAQ,CAACjB,IAAI,CAACqB,iBAAiB,CAAC;YACjFS,2BAA2B,CAAC,EAAE,CAAC;UACjC;UAEA,IAAIb,QAAQ,CAACjB,IAAI,CAACnC,oBAAoB,EAAEyD,MAAM,EAAE;YAC9CS,oCAAoC,CAACd,QAAQ,CAACjB,IAAI,CAAC;UACrD,OAAO;YACLjB,OAAO,CAAC2C,IAAI,CAAC,qCAAqC,EAAET,QAAQ,CAACjB,IAAI,CAACnC,oBAAoB,CAAC;YACvFkE,oCAAoC,CAAC;cACnClE,oBAAoB,EAAE;gBACpByD,MAAM,EAAE;kBACNU,IAAI,EAAE,CAAC;kBACPC,QAAQ,EAAE,CAAC;kBACXC,eAAe,EAAE;gBACnB;cACF;YACF,CAAC,CAAC;UACJ;QACF;MACF,EAAE,OAAOlD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD,IAAIA,KAAK,CAACiC,QAAQ,EAAE;UAClBlC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACiC,QAAQ,CAACjB,IAAI,CAAC;QACvD;;QAEA;QACAxC,aAAa,CAAC0B,KAAI,GAAI,CAAC;QACvBzB,aAAa,CAACyB,KAAI,GAAI,CAAC;QACvBxB,aAAa,CAACwB,KAAI,GAAI,CAAC;QACvBvB,iBAAiB,CAACuB,KAAI,GAAI,CAAC;QAC3BtB,YAAY,CAACsB,KAAI,GAAI,CAAC;QACtBrB,oBAAoB,CAACqB,KAAI,GAAI,CAAC;QAC9BpB,gBAAgB,CAACoB,KAAI,GAAI,EAAE;;QAE3B;QACAuC,sBAAsB,CAAC;UACrBN,uBAAuB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACzC,CAAC,CAAC;QACFQ,yBAAyB,CAAC,CACxB;UAAEC,IAAI,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAE,CAAC,EAC/B;UAAED,IAAI,EAAE,UAAU;UAAEC,UAAU,EAAE;QAAE,CAAC,EACnC;UAAED,IAAI,EAAE,kBAAkB;UAAEC,UAAU,EAAE;QAAE,EAC3C,CAAC;QACFC,2BAA2B,CAAC,EAAE,CAAC;QAC/BC,oCAAoC,CAAC;UACnClE,oBAAoB,EAAE;YACpByD,MAAM,EAAE;cACNU,IAAI,EAAE,CAAC;cACPC,QAAQ,EAAE,CAAC;cACXC,eAAe,EAAE;YACnB;UACF;QACF,CAAC,CAAC;MACJ;IACF;IAEA,MAAMT,sBAAqB,GAAKzB,IAAI,IAAK;MACvC,IAAI,CAAC7C,gBAAgB,CAAC+B,KAAK,EAAE;MAE7B,MAAMiD,GAAE,GAAIhF,gBAAgB,CAAC+B,KAAK,CAACkD,UAAU,CAAC,IAAI,CAAC;MACnD,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAIxF,KAAK,CAACyF,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMC,eAAc,GAAIjB,KAAK,CAACC,OAAO,CAACxB,IAAI,CAACmB,uBAAuB,IAC9DnB,IAAI,CAACmB,uBAAsB,GAC3B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAEnBpC,OAAO,CAACY,GAAG,CAAC,gCAAgC,EAAE6C,eAAe,CAAC;MAE9D,IAAI3F,KAAK,CAACsF,GAAG,EAAE;QACbP,IAAI,EAAE,KAAK;QACX5B,IAAI,EAAE;UACJyC,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;UACzDC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,oBAAoB;YAC3B3C,IAAI,EAAEwC,eAAe;YACrBI,eAAe,EAAE,CACf,yBAAyB;YAAG;YAC5B,yBAAyB;YAAG;YAC5B,yBAAyB;YAAG;YAC5B,yBAAyB;YAAG;YAC5B,wBAAuB,CAAK;YAAA,CAC7B;YACDC,WAAW,EAAE,CAAC;YACdC,YAAY,EAAE;UAChB,CAAC;QACH,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE;YACX,CAAC;YACDC,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTX,KAAK,EAAGY,OAAO,IAAK;kBAClB,MAAMrE,KAAI,GAAIqE,OAAO,CAACC,GAAE,IAAK,CAAC;kBAC9B,MAAMC,KAAI,GAAIjB,eAAe,CAACkB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAA,IAAKC,CAAA,IAAK,CAAC,CAAC,EAAE,CAAC,CAAC;kBAC/D,MAAM/B,UAAS,GAAI4B,KAAI,GAAI,IAAI,CAAEvE,KAAI,GAAIuE,KAAK,GAAI,GAAG,EAAEI,OAAO,CAAC,CAAC,IAAI,CAAC;kBACrE,OAAO,GAAG3E,KAAK,cAAc2C,UAAU,IAAI;gBAC7C;cACF;YACF;UACF,CAAC;UACDiC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,KAAK,EAAE;gBACLC,QAAQ,EAAE;cACZ,CAAC;cACDC,KAAK,EAAE;gBACLf,OAAO,EAAE,IAAI;gBACbgB,IAAI,EAAE;cACR;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMzC,yBAAwB,GAAK3B,IAAI,IAAK;MAC1C,IAAI,CAAC3C,mBAAmB,CAAC6B,KAAK,EAAE;MAEhC,MAAMiD,GAAE,GAAI9E,mBAAmB,CAAC6B,KAAK,CAACkD,UAAU,CAAC,IAAI,CAAC;MACtD,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAIxF,KAAK,CAACyF,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAME,MAAK,GAAIzC,IAAI,CAACyC,MAAK,IAAK,EAAE;MAChC,MAAMC,QAAO,GAAI1C,IAAI,CAAC0C,QAAO,IAAK,EAAE;MAEpC,IAAI7F,KAAK,CAACsF,GAAG,EAAE;QACbP,IAAI,EAAE,KAAK;QACX5B,IAAI,EAAE;UACJyC,MAAM,EAAEA,MAAM;UACdC,QAAQ,EAAEA,QAAQ,CAACvC,GAAG,CAAC,CAACkE,OAAO,EAAEC,KAAK,MAAM;YAC1C3B,KAAK,EAAE0B,OAAO,CAACzC,IAAI;YACnB5B,IAAI,EAAEqE,OAAO,CAACrE,IAAI;YAClB4C,eAAe,EAAE,CACf,yBAAyB;YAAG;YAC5B,yBAAyB;YAAG;YAC5B,yBAAwB,CAAI;YAAA,CAC7B,CAAC0B,KAAK,CAAC;YACRzB,WAAW,EAAE;UACf,CAAC,CAAC;QACJ,CAAC;QACDE,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1Ba,MAAM,EAAE;YACNS,CAAC,EAAE;cACDC,OAAO,EAAE,IAAI;cACbP,KAAK,EAAE;gBACLQ,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACf;YACF,CAAC;YACDX,CAAC,EAAE;cACDS,OAAO,EAAE,IAAI;cACbR,WAAW,EAAE,IAAI;cACjBG,KAAK,EAAE;gBACLf,OAAO,EAAE,IAAI;gBACbgB,IAAI,EAAE;cACR;YACF;UACF,CAAC;UACDlB,OAAO,EAAE;YACPC,MAAM,EAAE;cACNwB,QAAQ,EAAE;YACZ,CAAC;YACDtB,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTX,KAAK,EAAGY,OAAO,IAAK,GAAGA,OAAO,CAACc,OAAO,CAAC1B,KAAK,KAAKY,OAAO,CAACC,GAAE,IAAK,CAAC;cACnE;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAM1B,2BAA0B,GAAK9B,IAAI,IAAK;MAC5C,IAAI,CAAC1C,qBAAqB,CAAC4B,KAAK,EAAE;QAChCH,OAAO,CAAC2C,IAAI,CAAC,6CAA6C,CAAC;QAC3D;MACF;MAEA,MAAMS,GAAE,GAAI7E,qBAAqB,CAAC4B,KAAK,CAACkD,UAAU,CAAC,IAAI,CAAC;MACxD,IAAI,CAACD,GAAG,EAAE;QACRpD,OAAO,CAAC2C,IAAI,CAAC,sDAAsD,CAAC;QACpE;MACF;MAEA,MAAMW,aAAY,GAAIxF,KAAK,CAACyF,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAE;QACjBA,aAAa,CAACE,OAAO,CAAC,CAAC;MACzB;;MAEA;MACA,MAAMqC,SAAQ,GAAIrD,KAAK,CAACC,OAAO,CAACxB,IAAI,IAAIA,IAAG,GAAI,EAAE;MACjDjB,OAAO,CAACY,GAAG,CAAC,6CAA6C,EAAEiF,SAAS,CAAC;MAErE,IAAI/H,KAAK,CAACsF,GAAG,EAAE;QACbP,IAAI,EAAE,MAAM;QACZ5B,IAAI,EAAE;UACJyC,MAAM,EAAEmC,SAAS,CAACzE,GAAG,CAAC0E,CAAA,IAAK9H,MAAM,CAAC8H,CAAC,CAACC,IAAI,CAAC,CAACrG,MAAM,CAAC,aAAa,CAAC,CAAC;UAChEiE,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,eAAe;YACtB3C,IAAI,EAAE4E,SAAS,CAACzE,GAAG,CAAC0E,CAAA,IAAKE,MAAM,CAACF,CAAC,CAACG,KAAK,KAAK,CAAC,CAAC;YAC9CC,WAAW,EAAE,SAAS;YACtBrC,eAAe,EAAE,wBAAwB;YACzCsC,OAAO,EAAE,GAAG;YACZC,IAAI,EAAE,IAAI;YACVC,WAAW,EAAE,CAAC;YACdC,gBAAgB,EAAE;UACpB,CAAC;QACH,CAAC;QACDtC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,OAAO,EAAE;YACX,CAAC;YACDC,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTX,KAAK,EAAGY,OAAO,IAAK;kBAClB,MAAM+B,SAAQ,GAAIV,SAAS,CAACrB,OAAO,CAACgC,SAAS,CAAC;kBAC9C,OAAO,GAAGD,SAAS,CAACtI,IAAI,KAAK,CAACuG,OAAO,CAACC,GAAE,IAAK,CAAC,EAAEK,OAAO,CAAC,CAAC,CAAC,GAAG;gBAC/D;cACF;YACF;UACF,CAAC;UACDC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBwB,GAAG,EAAE,GAAG;cACRvB,KAAK,EAAE;gBACLC,QAAQ,EAAE,EAAE;gBACZuB,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF,CAAC;cACDvB,KAAK,EAAE;gBACLf,OAAO,EAAE,IAAI;gBACbgB,IAAI,EAAE,mBAAmB;gBACzBqB,IAAI,EAAE;kBACJC,IAAI,EAAE,EAAE;kBACRC,MAAM,EAAE;gBACV;cACF;YACF,CAAC;YACDpB,CAAC,EAAE;cACDN,KAAK,EAAE;gBACLwB,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR,CAAC;gBACDjB,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACf;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAM3C,oCAAmC,GAAK/B,IAAI,IAAK;MACrD,IAAI,CAACzC,8BAA8B,CAAC2B,KAAK,EAAE;MAE3C,MAAMiD,GAAE,GAAI5E,8BAA8B,CAAC2B,KAAK,CAACkD,UAAU,CAAC,IAAI,CAAC;MACjE,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAIxF,KAAK,CAACyF,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMqD,YAAW,GAAI;QACnBC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZ,kBAAkB,EAAE;MACtB,CAAC;;MAED;MACA,IAAIvE,KAAK,CAACC,OAAO,CAACxB,IAAI,CAACqB,iBAAiB,CAAC,EAAE;QACzCrB,IAAI,CAACqB,iBAAiB,CAAC0E,OAAO,CAACC,KAAI,IAAK;UACtC,MAAMpE,IAAG,GAAIoE,KAAK,CAACpE,IAAG,IAAKoE,KAAK,CAAChJ,IAAI;UACrC,IAAI4E,IAAG,IAAKgE,YAAY,EAAE;YACxBA,YAAY,CAAChE,IAAI,CAAC,CAACf,IAAI,CAAC;cACtBiE,IAAI,EAAE,IAAImB,IAAI,CAACD,KAAK,CAAClB,IAAI,CAAC;cAC1BE,KAAK,EAAEkB,UAAU,CAACF,KAAK,CAAChB,KAAK,KAAK;YACpC,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ;;MAEA;MACAmB,MAAM,CAACC,IAAI,CAACR,YAAY,CAAC,CAACG,OAAO,CAACnE,IAAG,IAAK;QACxCgE,YAAY,CAAChE,IAAI,CAAC,CAACpB,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACmB,IAAG,GAAIlB,CAAC,CAACkB,IAAI,CAAC;MACpD,CAAC,CAAC;;MAEF;MACA,MAAMuB,QAAO,GAAI,CAAC,GAAG,IAAInG,GAAG,CAC1BiG,MAAM,CAACG,MAAM,CAACV,YAAY,EACvBW,IAAI,CAAC,EACLpG,GAAG,CAACqG,IAAG,IAAKA,IAAI,CAAC1B,IAAI,CAC1B,CAAC,CAAC,CAACtE,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KAAKD,CAAA,GAAIC,CAAC,CAAC;;MAExB;MACA,MAAMlB,QAAO,GAAIyD,MAAM,CAACM,OAAO,CAACb,YAAY,CAAC,CAACzF,GAAG,CAAC,CAAC,CAACyB,IAAI,EAAE5B,IAAI,CAAC,EAAEsE,KAAK,KAAK;QACzE,MAAMoC,MAAK,GAAI,CACb,mBAAmB;QAAI;QACvB,mBAAmB;QAAI;QACvB,mBAAkB,CAAK;QAAA,CACxB;QACD,MAAMC,KAAI,GAAID,MAAM,CAACpC,KAAK,CAAC;QAE3B,OAAO;UACL3B,KAAK,EAAEf,IAAI;UACX5B,IAAI,EAAEqG,QAAQ,CAAClG,GAAG,CAAC2E,IAAG,IAAK;YACzB,MAAM8B,KAAI,GAAI5G,IAAI,CAAC6G,IAAI,CAAChC,CAAA,IAAKA,CAAC,CAACC,IAAI,CAACgC,OAAO,CAAC,MAAMhC,IAAI,CAACgC,OAAO,CAAC,CAAC,CAAC;YACjE,OAAOF,KAAI,GAAIA,KAAK,CAAC5B,KAAI,GAAI,IAAI;UACnC,CAAC,CAAC;UACFC,WAAW,EAAE0B,KAAK;UAClB/D,eAAe,EAAE+D,KAAK,CAACI,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC;UACpE5B,IAAI,EAAE,IAAI;UACVD,OAAO,EAAE,GAAG;UACZE,WAAW,EAAE,CAAC;UACdC,gBAAgB,EAAE,CAAC;UACnB2B,QAAQ,EAAE,IAAG,CAAE;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAInK,KAAK,CAACsF,GAAG,EAAE;QACbP,IAAI,EAAE,MAAM;QACZ5B,IAAI,EAAE;UACJyC,MAAM,EAAE4D,QAAQ,CAAClG,GAAG,CAAC2E,IAAG,IAAK/H,MAAM,CAAC+H,IAAI,CAAC,CAACrG,MAAM,CAAC,aAAa,CAAC,CAAC;UAChEiE;QACF,CAAC;QACDK,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BgE,WAAW,EAAE;YACXC,SAAS,EAAE,KAAK;YAChBC,IAAI,EAAE;UACR,CAAC;UACDjE,OAAO,EAAE;YACPC,MAAM,EAAE;cACNwB,QAAQ,EAAE;YACZ,CAAC;YACDtB,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTX,KAAK,EAAGY,OAAO,IAAK;kBAClB,MAAMrE,KAAI,GAAIqE,OAAO,CAACC,GAAE,KAAM,IAAG,GAAID,OAAO,CAACC,GAAG,CAACK,OAAO,CAAC,CAAC,IAAI,KAAK;kBACnE,OAAO,GAAGN,OAAO,CAACc,OAAO,CAAC1B,KAAK,KAAKzD,KAAK,GAAG;gBAC9C;cACF;YACF;UACF,CAAC;UACD4E,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBwB,GAAG,EAAE,GAAG;cACRrB,KAAK,EAAE;gBACLf,OAAO,EAAE,IAAI;gBACbgB,IAAI,EAAE;cACR;YACF,CAAC;YACDG,CAAC,EAAE;cACDN,KAAK,EAAE;gBACLQ,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACjB;YACF;UACF;QACJ;MACE,CAAC,CAAC;IACJ,CAAC;IAED,MAAM0C,UAAS,GAAKtC,IAAI,IAAK;MAC3B,OAAO/H,MAAM,CAAC+H,IAAI,CAAC,CAACrG,MAAM,CAAC,aAAa;IAC1C;IAEA,MAAM4I,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B;MACA,IAAIpJ,YAAY,CAACiB,KAAK,EAAE;QACtBhB,YAAY,CAACoJ,OAAO,CAAC,cAAc,EAAErJ,YAAY,CAACiB,KAAK;MACzD,OAAO;QACLhB,YAAY,CAACqJ,UAAU,CAAC,cAAc;MACxC;MAEA,IAAInJ,eAAe,CAACc,KAAK,EAAE;QACzBhB,YAAY,CAACoJ,OAAO,CAAC,iBAAiB,EAAElJ,eAAe,CAACc,KAAK;MAC/D,OAAO;QACLhB,YAAY,CAACqJ,UAAU,CAAC,iBAAiB;MAC3C;MAEA,IAAIlJ,eAAe,CAACa,KAAK,EAAE;QACzBhB,YAAY,CAACoJ,OAAO,CAAC,iBAAiB,EAAEjJ,eAAe,CAACa,KAAK;MAC/D,OAAO;QACLhB,YAAY,CAACqJ,UAAU,CAAC,iBAAiB;MAC3C;MAEA,MAAM7G,kBAAkB,CAAC;IAC3B;;IAEA;IACAhE,KAAK,CAACuB,YAAY,EAAEwC,gBAAgB;IACpC/D,KAAK,CAAC,CAAC0B,eAAe,EAAEC,eAAe,CAAC,EAAEgJ,YAAY;IACtD3K,KAAK,CAAC,CAAC4B,iBAAiB,EAAEC,eAAe,CAAC,EAAE,MAAM;MAChD,IAAID,iBAAiB,CAACY,KAAI,IAAKX,eAAe,CAACW,KAAK,EAAE;QACpD;QACA,MAAMsI,KAAI,GAAIzK,MAAM,CAACuB,iBAAiB,CAACY,KAAK,CAAC;QAC7C,MAAMuI,GAAE,GAAI1K,MAAM,CAACwB,eAAe,CAACW,KAAK,CAAC;QAEzC,IAAIuI,GAAG,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;UACvBjJ,eAAe,CAACW,KAAI,GAAIZ,iBAAiB,CAACY,KAAK;QACjD;QAEAwB,kBAAkB,CAAC,CAAC;MACtB;IACF,CAAC;IAEDlE,SAAS,CAAC,YAAY;MACpB,IAAIU,KAAK,CAAC0B,KAAK,CAACC,IAAI,CAACF,IAAI,EAAEG,GAAE,IAAK5B,KAAK,CAAC0B,KAAK,CAACC,IAAI,CAACa,KAAK,EAAE;QACxDX,OAAO,CAACY,GAAG,CAAC,oCAAoC,CAAC;;QAEjD;QACA,MAAMhD,QAAQ,CAAC,CAAC;QAEhB,IAAI;UACF;UACAoC,OAAO,CAACY,GAAG,CAAC,8BAA8B,CAAC;UAE3C8B,sBAAsB,CAAC;YACrBN,uBAAuB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;UACzC,CAAC,CAAC;UACFQ,yBAAyB,CAAC,CACxB;YAAEC,IAAI,EAAE,MAAM;YAAEC,UAAU,EAAE;UAAE,CAAC,EAC/B;YAAED,IAAI,EAAE,UAAU;YAAEC,UAAU,EAAE;UAAE,CAAC,EACnC;YAAED,IAAI,EAAE,kBAAkB;YAAEC,UAAU,EAAE;UAAE,EAC3C,CAAC;UACFC,2BAA2B,CAAC,EAAE,CAAC;UAC/BC,oCAAoC,CAAC;YACnClE,oBAAoB,EAAE;cACpByD,MAAM,EAAE;gBACNU,IAAI,EAAE,CAAC;gBACPC,QAAQ,EAAE,CAAC;gBACXC,eAAe,EAAE;cACnB;YACF;UACF,CAAC,CAAC;UAEFnD,OAAO,CAACY,GAAG,CAAC,0BAA0B,CAAC;;UAEvC;UACA,MAAMJ,+BAA+B,CAACtB,YAAY,CAACiB,KAAK,CAAC;UACzDH,OAAO,CAACY,GAAG,CAAC,+BAA+B,CAAC;;UAE5C;UACA,MAAMe,kBAAkB,CAAC,CAAC;UAC1B3B,OAAO,CAACY,GAAG,CAAC,8BAA8B,CAAC;QAC7C,EAAE,OAAOX,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF,OAAO;QACLD,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC5C;IACF,CAAC;IAED,OAAO;MACLxB,aAAa;MACbC,aAAa;MACbC,aAAa;MACbC,iBAAiB;MACjBC,YAAY;MACZC,oBAAoB;MACpBV,gBAAgB;MAChBC,eAAe;MACfU,gBAAgB;MAChBC,QAAQ;MACRC,QAAQ;MACRC,YAAY;MACZG,eAAe;MACfC,eAAe;MACfY,iBAAiB;MACjBE,kBAAkB;MAClBC,iBAAiB;MACjBC,WAAW;MACX+H,UAAU;MACVzG,gBAAgB;MAChBF,gBAAgB;MAChB4G,YAAY;MACZhK,mBAAmB;MACnBC,qBAAqB;MACrBC,8BAA8B;MAC9Be,iBAAiB;MACjBC,eAAe;MACfC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
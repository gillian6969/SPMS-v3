{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"all-survey-stat\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-center py-4\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"text-center py-4\"\n};\nconst _hoisted_4 = {\n  key: 2,\n  class: \"survey-charts row g-4\"\n};\nconst _hoisted_5 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_6 = {\n  class: \"chart-container\"\n};\nconst _hoisted_7 = {\n  ref: \"problemTypesChart\"\n};\nconst _hoisted_8 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_9 = {\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  ref: \"severityLevelsChart\"\n};\nconst _hoisted_11 = {\n  class: \"col-md-12\"\n};\nconst _hoisted_12 = {\n  class: \"chart-container\"\n};\nconst _hoisted_13 = {\n  ref: \"responseRatesChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"mt-2\"\n  }, \"Loading survey statistics...\", -1 /* HOISTED */)]))) : $setup.noData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[1] || (_cache[1] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-pie fa-3x text-muted mb-3\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"h5\", null, \"No Survey Data Available\", -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"text-muted\"\n  }, \"No survey responses have been submitted yet.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" Problem Types Distribution \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[2] || (_cache[2] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Problem Types Distribution\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_7, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" Severity Levels \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_cache[3] || (_cache[3] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Severity Levels Distribution\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_10, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" Response Rates Chart \"), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_cache[4] || (_cache[4] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Survey Response Rates\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_13, null, 512 /* NEED_PATCH */)])])]))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","$setup","loading","_hoisted_2","_cache","_createElementVNode","role","noData","_hoisted_3","_hoisted_4","_createCommentVNode","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13"],"sources":["D:\\au_dev\\client\\src\\components\\AllSurveyStat.vue"],"sourcesContent":["<template>\r\n  <div class=\"all-survey-stat\">\r\n    <div v-if=\"loading\" class=\"text-center py-4\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <p class=\"mt-2\">Loading survey statistics...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"noData\" class=\"text-center py-4\">\r\n      <i class=\"fas fa-chart-pie fa-3x text-muted mb-3\"></i>\r\n      <h5>No Survey Data Available</h5>\r\n      <p class=\"text-muted\">No survey responses have been submitted yet.</p>\r\n    </div>\r\n    \r\n    <div v-else class=\"survey-charts row g-4\">\r\n      <!-- Problem Types Distribution -->\r\n      <div class=\"col-md-6\">\r\n        <div class=\"chart-container\">\r\n          <h6 class=\"chart-title\">Problem Types Distribution</h6>\r\n          <canvas ref=\"problemTypesChart\"></canvas>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Severity Levels -->\r\n      <div class=\"col-md-6\">\r\n        <div class=\"chart-container\">\r\n          <h6 class=\"chart-title\">Severity Levels Distribution</h6>\r\n          <canvas ref=\"severityLevelsChart\"></canvas>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Response Rates Chart -->\r\n      <div class=\"col-md-12\">\r\n        <div class=\"chart-container\">\r\n          <h6 class=\"chart-title\">Survey Response Rates</h6>\r\n          <canvas ref=\"responseRatesChart\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport Chart from 'chart.js/auto'\r\nimport moment from 'moment'\r\n\r\nconst store = useStore()\r\nconst loading = ref(true)\r\nconst noData = ref(false)\r\nconst problemTypesChart = ref(null)\r\nconst severityLevelsChart = ref(null)\r\nconst responseRatesChart = ref(null)\r\nconst surveys = ref([])\r\nconst problemCounts = ref({})\r\nconst severityCounts = ref({\r\n  high: 0,\r\n  medium: 0,\r\n  low: 0,\r\n  minimal: 0\r\n})\r\n\r\n// Get severity level based on score\r\nconst getSeverityLevel = (score) => {\r\n  if (score >= 7) return 'high';\r\n  if (score >= 5) return 'medium';\r\n  if (score >= 3) return 'low';\r\n  return 'minimal';\r\n}\r\n\r\n// Fetch all submitted surveys and process for statistics\r\nconst fetchSurveyData = async () => {\r\n  try {\r\n    loading.value = true\r\n    const token = store.state.auth.token\r\n    \r\n    // Get all completed surveys from the survey collection\r\n    const response = await axios.get('http://localhost:8000/api/survey/submitted', {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n    \r\n    if (response.data && Array.isArray(response.data) && response.data.length > 0) {\r\n      console.log('Survey data received:', response.data)\r\n      surveys.value = response.data\r\n      noData.value = false\r\n      processSurveyData()\r\n    } else {\r\n      console.log('No survey data found')\r\n      noData.value = true\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching survey data:', error)\r\n    noData.value = true\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// Process survey data to generate statistics\r\nconst processSurveyData = () => {\r\n  // Reset counts\r\n  problemCounts.value = {}\r\n  severityCounts.value = {\r\n    high: 0,\r\n    medium: 0,\r\n    low: 0,\r\n    minimal: 0\r\n  }\r\n  \r\n  // Process each survey\r\n  surveys.value.forEach(survey => {\r\n    // Count problem types and their severity\r\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\r\n      survey.surveyStats.forEach(stat => {\r\n        // Count problem types\r\n        if (stat.type) {\r\n          if (!problemCounts.value[stat.type]) {\r\n            problemCounts.value[stat.type] = 0\r\n          }\r\n          problemCounts.value[stat.type]++\r\n        }\r\n        \r\n        // Count severity levels\r\n        const severityLevel = getSeverityLevel(stat.average || 0)\r\n        severityCounts.value[severityLevel]++\r\n      })\r\n    }\r\n  })\r\n  \r\n  console.log('Processed problem counts:', problemCounts.value)\r\n  console.log('Processed severity counts:', severityCounts.value)\r\n  \r\n  // Create charts after processing data\r\n  renderProblemTypesChart()\r\n  renderSeverityLevelsChart()\r\n  renderResponseRatesChart()\r\n}\r\n\r\n// Create problem types distribution chart\r\nconst renderProblemTypesChart = () => {\r\n  if (!problemTypesChart.value) return\r\n  \r\n  const ctx = problemTypesChart.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  const existingChart = Chart.getChart(ctx)\r\n  if (existingChart) existingChart.destroy()\r\n  \r\n  const problemTypes = Object.keys(problemCounts.value)\r\n  const problemData = Object.values(problemCounts.value)\r\n  \r\n  // If no data, show default values\r\n  if (problemTypes.length === 0) {\r\n    const defaultTypes = ['Academic', 'Financial', 'Personal', 'Health', 'Social']\r\n    const defaultData = [0, 0, 0, 0, 0]\r\n    \r\n    // Create chart with default empty data\r\n    new Chart(ctx, {\r\n      type: 'pie',\r\n      data: {\r\n        labels: defaultTypes,\r\n        datasets: [{\r\n          data: defaultData,\r\n          backgroundColor: [\r\n            'rgba(54, 162, 235, 0.7)',\r\n            'rgba(255, 99, 132, 0.7)',\r\n            'rgba(255, 206, 86, 0.7)',\r\n            'rgba(75, 192, 192, 0.7)',\r\n            'rgba(153, 102, 255, 0.7)',\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          legend: {\r\n            position: 'right',\r\n            labels: {\r\n              boxWidth: 12,\r\n              padding: 15\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    return\r\n  }\r\n  \r\n  // Chart colors\r\n  const colors = [\r\n    'rgba(54, 162, 235, 0.7)',\r\n    'rgba(255, 99, 132, 0.7)',\r\n    'rgba(255, 206, 86, 0.7)',\r\n    'rgba(75, 192, 192, 0.7)',\r\n    'rgba(153, 102, 255, 0.7)',\r\n    'rgba(255, 159, 64, 0.7)'\r\n  ]\r\n  \r\n  // Create chart\r\n  new Chart(ctx, {\r\n    type: 'pie',\r\n    data: {\r\n      labels: problemTypes,\r\n      datasets: [{\r\n        data: problemData,\r\n        backgroundColor: colors.slice(0, problemTypes.length),\r\n        borderWidth: 1\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'right',\r\n          labels: {\r\n            boxWidth: 12,\r\n            padding: 15\r\n          }\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => {\r\n              const value = context.raw || 0\r\n              const total = problemData.reduce((a, b) => a + b, 0)\r\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0\r\n              return `${context.label}: ${value} (${percentage}%)`\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// Create severity levels distribution chart\r\nconst renderSeverityLevelsChart = () => {\r\n  if (!severityLevelsChart.value) return\r\n  \r\n  const ctx = severityLevelsChart.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  const existingChart = Chart.getChart(ctx)\r\n  if (existingChart) existingChart.destroy()\r\n  \r\n  const labels = ['High', 'Medium', 'Low', 'Minimal']\r\n  const data = [\r\n    severityCounts.value.high,\r\n    severityCounts.value.medium,\r\n    severityCounts.value.low,\r\n    severityCounts.value.minimal\r\n  ]\r\n  \r\n  // Chart colors\r\n  const colors = [\r\n    'rgba(220, 53, 69, 0.7)',   // High (red)\r\n    'rgba(255, 193, 7, 0.7)',   // Medium (yellow)\r\n    'rgba(13, 110, 253, 0.7)',  // Low (blue)\r\n    'rgba(25, 135, 84, 0.7)'    // Minimal (green)\r\n  ]\r\n  \r\n  // Create chart\r\n  new Chart(ctx, {\r\n    type: 'doughnut',\r\n    data: {\r\n      labels: labels,\r\n      datasets: [{\r\n        data: data,\r\n        backgroundColor: colors,\r\n        borderWidth: 1\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'right',\r\n          labels: {\r\n            boxWidth: 12,\r\n            padding: 15\r\n          }\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => {\r\n              const value = context.raw || 0\r\n              const total = data.reduce((a, b) => a + b, 0)\r\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0\r\n              return `${context.label}: ${value} (${percentage}%)`\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// Create response rates chart (by month)\r\nconst renderResponseRatesChart = () => {\r\n  if (!responseRatesChart.value) return\r\n  \r\n  const ctx = responseRatesChart.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  const existingChart = Chart.getChart(ctx)\r\n  if (existingChart) existingChart.destroy()\r\n  \r\n  // Group surveys by month\r\n  const monthlyData = {}\r\n  \r\n  // If no surveys, create sample data for current and past months\r\n  if (surveys.value.length === 0) {\r\n    const currentMonth = moment().format('MMM YYYY')\r\n    const lastMonth = moment().subtract(1, 'month').format('MMM YYYY')\r\n    const twoMonthsAgo = moment().subtract(2, 'month').format('MMM YYYY')\r\n    \r\n    monthlyData[twoMonthsAgo] = 0\r\n    monthlyData[lastMonth] = 0\r\n    monthlyData[currentMonth] = 0\r\n  } else {\r\n    surveys.value.forEach(survey => {\r\n      const date = moment(survey.createdAt || survey.updatedAt)\r\n      const monthKey = date.format('MMM YYYY')\r\n      \r\n      if (!monthlyData[monthKey]) {\r\n        monthlyData[monthKey] = 0\r\n      }\r\n      \r\n      monthlyData[monthKey]++\r\n    })\r\n  }\r\n  \r\n  // Sort months chronologically\r\n  const sortedMonths = Object.keys(monthlyData).sort((a, b) => {\r\n    return moment(a, 'MMM YYYY').diff(moment(b, 'MMM YYYY'))\r\n  })\r\n  \r\n  const responseData = sortedMonths.map(month => monthlyData[month])\r\n  \r\n  // Create chart\r\n  new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: sortedMonths,\r\n      datasets: [{\r\n        label: 'Survey Responses',\r\n        data: responseData,\r\n        backgroundColor: 'rgba(75, 192, 192, 0.7)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n        borderRadius: 5\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            label: (context) => `${context.raw} survey${context.raw !== 1 ? 's' : ''}`\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          ticks: {\r\n            stepSize: 1,\r\n            precision: 0\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Number of Responses'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// Initialize component\r\nonMounted(() => {\r\n  fetchSurveyData()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.all-survey-stat {\r\n  padding: 1rem;\r\n}\r\n\r\n.chart-container {\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\r\n  height: 300px;\r\n  position: relative;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n}\r\n\r\ncanvas {\r\n  max-height: 100%;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAD9BC,GAAA;EAEwBD,KAAK,EAAC;;;EAF9BC,GAAA;EAS4BD,KAAK,EAAC;;;EATlCC,GAAA;EAegBD,KAAK,EAAC;;;EAEXA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;;EAElBE,GAAG,EAAC;AAAmB;;EAK9BF,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAiB;;EAElBE,GAAG,EAAC;AAAqB;;EAKhCF,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAiB;;EAElBE,GAAG,EAAC;AAAoB;;uBAnCxCC,mBAAA,CAuCM,OAvCNC,UAuCM,GAtCOC,MAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAKM,OALNI,UAKM,EAAAC,MAAA,QAAAA,MAAA,OAJJC,mBAAA,CAEM;IAFDT,KAAK,EAAC,6BAA6B;IAACU,IAAI,EAAC;MAC5CD,mBAAA,CAA+C;IAAzCT,KAAK,EAAC;EAAiB,GAAC,YAAU,E,qBAE1CS,mBAAA,CAAgD;IAA7CT,KAAK,EAAC;EAAM,GAAC,8BAA4B,oB,MAG9BK,MAAA,CAAAM,MAAM,I,cAAtBR,mBAAA,CAIM,OAJNS,UAIM,EAAAJ,MAAA,QAAAA,MAAA,OAHJC,mBAAA,CAAsD;IAAnDT,KAAK,EAAC;EAAwC,4BACjDS,mBAAA,CAAiC,YAA7B,0BAAwB,qBAC5BA,mBAAA,CAAsE;IAAnET,KAAK,EAAC;EAAY,GAAC,8CAA4C,oB,qBAGpEG,mBAAA,CAwBM,OAxBNU,UAwBM,GAvBJC,mBAAA,gCAAmC,EACnCL,mBAAA,CAKM,OALNM,UAKM,GAJJN,mBAAA,CAGM,OAHNO,UAGM,G,0BAFJP,mBAAA,CAAuD;IAAnDT,KAAK,EAAC;EAAa,GAAC,4BAA0B,sBAClDS,mBAAA,CAAyC,UAAzCQ,UAAyC,8B,KAI7CH,mBAAA,qBAAwB,EACxBL,mBAAA,CAKM,OALNS,UAKM,GAJJT,mBAAA,CAGM,OAHNU,UAGM,G,0BAFJV,mBAAA,CAAyD;IAArDT,KAAK,EAAC;EAAa,GAAC,8BAA4B,sBACpDS,mBAAA,CAA2C,UAA3CW,WAA2C,8B,KAI/CN,mBAAA,0BAA6B,EAC7BL,mBAAA,CAKM,OALNY,WAKM,GAJJZ,mBAAA,CAGM,OAHNa,WAGM,G,0BAFJb,mBAAA,CAAkD;IAA9CT,KAAK,EAAC;EAAa,GAAC,uBAAqB,sBAC7CS,mBAAA,CAA0C,UAA1Cc,WAA0C,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
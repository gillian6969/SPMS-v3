{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { ref, computed, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport moment from 'moment';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\nexport default {\n  name: 'ExportGraphsModal',\n  props: {\n    dashboardType: {\n      type: String,\n      required: true,\n      validator: value => {\n        return ['cithead', 'teacher', 'ssp', 'ssphead'].includes(value);\n      }\n    },\n    chartRefs: {\n      type: Object,\n      required: true\n    },\n    filterInfo: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const selectedGraphs = ref([]);\n    const documentTitle = ref('Dashboard Report');\n    const startDate = ref('');\n    const endDate = ref('');\n    const orientation = ref('landscape');\n    const isExporting = ref(false);\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Define available graphs based on dashboard type\n    const availableGraphs = computed(() => {\n      const graphOptions = {\n        cithead: [{\n          id: 'performanceChart',\n          title: 'Attendance Distribution',\n          description: 'Status distribution of student attendance'\n        }, {\n          id: 'assessmentTypeChart',\n          title: 'Assessment Type Performance',\n          description: 'Average scores by assessment type'\n        }, {\n          id: 'performanceTrendChart',\n          title: 'Performance Trends',\n          description: 'Student performance across time periods'\n        }, {\n          id: 'sectionChart',\n          title: 'Section Performance',\n          description: 'Comparative performance across different sections'\n        }],\n        teacher: [{\n          id: 'performanceChart',\n          title: 'Attendance Distribution',\n          description: 'Status distribution of student attendance'\n        }, {\n          id: 'assessmentTypeChart',\n          title: 'Assessment Performance Analysis',\n          description: 'Average scores by assessment type'\n        }, {\n          id: 'performanceTrendChart',\n          title: 'Performance Trends',\n          description: 'Class average scores across recent assessments'\n        }, {\n          id: 'assessmentTypePerformanceChart',\n          title: 'Performance by Assessment Type',\n          description: 'Student performance across different assessment types'\n        }],\n        ssp: [{\n          id: 'surveyAverageChart',\n          title: 'Survey Average Scores',\n          description: 'Average scores across survey questions'\n        }, {\n          id: 'surveyDistributionChart',\n          title: 'Survey Response Distribution',\n          description: 'Distribution of student issues by priority level'\n        }],\n        ssphead: [{\n          id: 'performanceChart',\n          title: 'Performance Distribution',\n          description: 'Distribution of student performance'\n        }, {\n          id: 'assessmentTypeChart',\n          title: 'Assessment Type Distribution',\n          description: 'Distribution of assessment types'\n        }, {\n          id: 'performanceTrendChart',\n          title: 'Performance Trends',\n          description: 'Performance trends over time'\n        }, {\n          id: 'assessmentTypePerformanceChart',\n          title: 'Performance by Assessment Type',\n          description: 'Performance across different assessment types'\n        }]\n      };\n      return graphOptions[props.dashboardType] || [];\n    });\n\n    // Reset selected graphs when dashboard type changes\n    watch(() => props.dashboardType, () => {\n      selectedGraphs.value = [];\n    });\n\n    // Helper function to create a header with filter information\n    const createHeaderContent = (doc, y) => {\n      const username = store.state.auth.user?.name || `${store.state.auth.user?.firstName || ''} ${store.state.auth.user?.lastName || ''}`.trim() || 'User';\n\n      // Dashboard type mapping\n      const dashboardTypes = {\n        cithead: 'CIT Head Dashboard',\n        teacher: 'Teacher Dashboard',\n        ssp: 'SSP Adviser Dashboard',\n        ssphead: 'SSP Head Dashboard'\n      };\n      const dashboardName = dashboardTypes[props.dashboardType] || 'Dashboard';\n\n      // Set document title\n      doc.setFontSize(16);\n      doc.setFont('helvetica', 'bold');\n      doc.text(documentTitle.value, 14, y);\n      y += 8;\n\n      // Add metadata\n      doc.setFontSize(10);\n      doc.setFont('helvetica', 'normal');\n      doc.text(`${dashboardName} - Generated by: ${username}`, 14, y);\n      y += 5;\n      doc.text(`Date: ${moment().format('MMMM D, YYYY h:mm A')}`, 14, y);\n      y += 8;\n\n      // Add filter information\n      doc.setFontSize(10);\n      doc.setFont('helvetica', 'bold');\n      doc.text('Applied Filters:', 14, y);\n      y += 5;\n      doc.setFont('helvetica', 'normal');\n\n      // Extract filter information\n      const filters = [];\n      if (props.filterInfo.year) filters.push(`Year: ${props.filterInfo.year}`);\n      if (props.filterInfo.section) filters.push(`Section: ${props.filterInfo.section}`);\n      if (props.filterInfo.subject) filters.push(`Subject: ${props.filterInfo.subject}`);\n\n      // Date range\n      const dateRange = [];\n      if (startDate.value) dateRange.push(`From: ${moment(startDate.value).format('MMM D, YYYY')}`);\n      if (endDate.value) dateRange.push(`To: ${moment(endDate.value).format('MMM D, YYYY')}`);\n      if (dateRange.length > 0) {\n        filters.push(`Date Range: ${dateRange.join(' - ')}`);\n      }\n      if (filters.length === 0) {\n        doc.text('No filters applied', 14, y);\n      } else {\n        filters.forEach(filter => {\n          doc.text(`â€¢ ${filter}`, 14, y);\n          y += 5;\n        });\n      }\n      y += 5;\n      return y;\n    };\n\n    // Export selected graphs to PDF\n    const exportToPDF = async () => {\n      if (selectedGraphs.value.length === 0) return;\n      isExporting.value = true;\n      try {\n        // Create PDF document\n        const doc = new jsPDF({\n          orientation: orientation.value,\n          unit: 'mm',\n          format: 'a4'\n        });\n        let y = 15;\n\n        // Add header and filter information\n        y = createHeaderContent(doc, y);\n\n        // Set margin for charts\n        const margin = 14;\n        const pageWidth = orientation.value === 'landscape' ? 297 : 210;\n        const pageHeight = orientation.value === 'landscape' ? 210 : 297;\n        const contentWidth = pageWidth - margin * 2;\n\n        // Process each selected chart\n        for (let i = 0; i < selectedGraphs.value.length; i++) {\n          const graphId = selectedGraphs.value[i];\n          const canvas = props.chartRefs[graphId];\n          if (!canvas) {\n            console.error(`Chart canvas not found: ${graphId}`);\n            continue;\n          }\n\n          // Check if we need to add a new page\n          if (i > 0 && y > pageHeight - 80) {\n            doc.addPage();\n            y = 15;\n          }\n\n          // Get graph title\n          const graphInfo = availableGraphs.value.find(g => g.id === graphId);\n          const title = graphInfo ? graphInfo.title : 'Chart';\n\n          // Add chart title\n          doc.setFontSize(12);\n          doc.setFont('helvetica', 'bold');\n          doc.text(title, margin, y);\n          y += 8;\n          try {\n            // Convert chart canvas to image\n            const imageData = canvas.toDataURL('image/png', 1.0);\n\n            // Calculate aspect ratio to maintain proportions\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n            const ratio = canvasHeight / canvasWidth;\n\n            // Set image width and height maintaining aspect ratio\n            const imgWidth = contentWidth;\n            const imgHeight = imgWidth * ratio;\n\n            // Add image to PDF\n            doc.addImage(imageData, 'PNG', margin, y, imgWidth, imgHeight);\n\n            // Update y position for next chart\n            y += imgHeight + 15;\n          } catch (error) {\n            console.error(`Error capturing chart ${graphId}:`, error);\n          }\n        }\n\n        // Save PDF\n        const fileName = `${documentTitle.value.replace(/\\s+/g, '_')}_${moment().format('YYYY-MM-DD')}.pdf`;\n        doc.save(fileName);\n      } catch (error) {\n        console.error('Error generating PDF:', error);\n        alert('An error occurred while generating the PDF. Please try again.');\n      } finally {\n        isExporting.value = false;\n      }\n    };\n    return {\n      selectedGraphs,\n      availableGraphs,\n      documentTitle,\n      startDate,\n      endDate,\n      orientation,\n      isExporting,\n      today,\n      exportToPDF\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","watch","useStore","moment","jsPDF","html2canvas","name","props","dashboardType","type","String","required","validator","value","includes","chartRefs","Object","filterInfo","default","setup","store","selectedGraphs","documentTitle","startDate","endDate","orientation","isExporting","today","format","availableGraphs","graphOptions","cithead","id","title","description","teacher","ssp","ssphead","createHeaderContent","doc","y","username","state","auth","user","firstName","lastName","trim","dashboardTypes","dashboardName","setFontSize","setFont","text","filters","year","push","section","subject","dateRange","length","join","forEach","filter","exportToPDF","unit","margin","pageWidth","pageHeight","contentWidth","i","graphId","canvas","console","error","addPage","graphInfo","find","g","imageData","toDataURL","canvasWidth","width","canvasHeight","height","ratio","imgWidth","imgHeight","addImage","fileName","replace","save","alert"],"sources":["D:\\au_dev\\client\\src\\components\\ExportGraphsModal.vue"],"sourcesContent":["<template>\r\n  <div class=\"modal fade\" id=\"exportGraphsModal\" tabindex=\"-1\" aria-labelledby=\"exportGraphsModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"exportGraphsModalLabel\">\r\n            <i class=\"fas fa-file-export me-2\"></i>\r\n            Export Dashboard Graphs\r\n          </h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"row mb-4\">\r\n            <div class=\"col-md-12\">\r\n              <div class=\"card bg-light\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"mb-3\">Export Options</h6>\r\n                  \r\n                  <!-- Date Range Selection -->\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Date Range</label>\r\n                    <div class=\"row g-2\">\r\n                      <div class=\"col\">\r\n                        <label class=\"form-label small text-muted\">Start Date</label>\r\n                        <input \r\n                          type=\"date\" \r\n                          class=\"form-control form-control-sm\" \r\n                          v-model=\"startDate\"\r\n                          :max=\"today\"\r\n                        >\r\n                      </div>\r\n                      <div class=\"col\">\r\n                        <label class=\"form-label small text-muted\">End Date</label>\r\n                        <input \r\n                          type=\"date\" \r\n                          class=\"form-control form-control-sm\" \r\n                          v-model=\"endDate\"\r\n                          :min=\"startDate\"\r\n                          :max=\"today\"\r\n                        >\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"small text-muted mt-1\">\r\n                      <i class=\"fas fa-info-circle me-1\"></i>\r\n                      Leave empty to use current dashboard date filters\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <!-- Document Options -->\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Document Title</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"documentTitle\" placeholder=\"Dashboard Report\">\r\n                  </div>\r\n                  \r\n                  <!-- Orientation Selection -->\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Page Orientation</label>\r\n                    <div class=\"d-flex gap-3\">\r\n                      <div class=\"form-check\">\r\n                        <input class=\"form-check-input\" type=\"radio\" name=\"orientation\" id=\"orientationPortrait\" value=\"portrait\" v-model=\"orientation\">\r\n                        <label class=\"form-check-label\" for=\"orientationPortrait\">\r\n                          Portrait\r\n                        </label>\r\n                      </div>\r\n                      <div class=\"form-check\">\r\n                        <input class=\"form-check-input\" type=\"radio\" name=\"orientation\" id=\"orientationLandscape\" value=\"landscape\" v-model=\"orientation\">\r\n                        <label class=\"form-check-label\" for=\"orientationLandscape\">\r\n                          Landscape\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <h6 class=\"mb-3\">Select Graphs to Export</h6>\r\n          \r\n          <div class=\"row g-3\">\r\n            <div v-for=\"(graph, index) in availableGraphs\" :key=\"index\" class=\"col-md-6\">\r\n              <div class=\"card graph-selection\" :class=\"{ 'selected': selectedGraphs.includes(graph.id) }\">\r\n                <div class=\"card-body\">\r\n                  <div class=\"form-check\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" :id=\"'graph-' + graph.id\" :value=\"graph.id\" v-model=\"selectedGraphs\">\r\n                    <label class=\"form-check-label\" :for=\"'graph-' + graph.id\">\r\n                      {{ graph.title }}\r\n                    </label>\r\n                  </div>\r\n                  <p class=\"text-muted small mb-0\">{{ graph.description }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mt-4\">\r\n            <div class=\"alert alert-info d-flex align-items-center\" role=\"alert\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              <div>\r\n                The exported PDF will include your currently applied dashboard filters.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-primary\" \r\n            @click=\"exportToPDF\" \r\n            :disabled=\"isExporting || selectedGraphs.length === 0\"\r\n          >\r\n            <span v-if=\"isExporting\">\r\n              <i class=\"fas fa-spinner fa-spin me-2\"></i>\r\n              Generating PDF...\r\n            </span>\r\n            <span v-else>\r\n              <i class=\"fas fa-file-pdf me-2\"></i>\r\n              Export to PDF\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, watch } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport moment from 'moment'\r\nimport jsPDF from 'jspdf'\r\nimport html2canvas from 'html2canvas'\r\n\r\nexport default {\r\n  name: 'ExportGraphsModal',\r\n  props: {\r\n    dashboardType: {\r\n      type: String,\r\n      required: true,\r\n      validator: (value) => {\r\n        return ['cithead', 'teacher', 'ssp', 'ssphead'].includes(value)\r\n      }\r\n    },\r\n    chartRefs: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    filterInfo: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  setup(props) {\r\n    const store = useStore()\r\n    const selectedGraphs = ref([])\r\n    const documentTitle = ref('Dashboard Report')\r\n    const startDate = ref('')\r\n    const endDate = ref('')\r\n    const orientation = ref('landscape')\r\n    const isExporting = ref(false)\r\n    \r\n    const today = computed(() => moment().format('YYYY-MM-DD'))\r\n    \r\n    // Define available graphs based on dashboard type\r\n    const availableGraphs = computed(() => {\r\n      const graphOptions = {\r\n        cithead: [\r\n          { id: 'performanceChart', title: 'Attendance Distribution', description: 'Status distribution of student attendance' },\r\n          { id: 'assessmentTypeChart', title: 'Assessment Type Performance', description: 'Average scores by assessment type' },\r\n          { id: 'performanceTrendChart', title: 'Performance Trends', description: 'Student performance across time periods' },\r\n          { id: 'sectionChart', title: 'Section Performance', description: 'Comparative performance across different sections' }\r\n        ],\r\n        teacher: [\r\n          { id: 'performanceChart', title: 'Attendance Distribution', description: 'Status distribution of student attendance' },\r\n          { id: 'assessmentTypeChart', title: 'Assessment Performance Analysis', description: 'Average scores by assessment type' },\r\n          { id: 'performanceTrendChart', title: 'Performance Trends', description: 'Class average scores across recent assessments' },\r\n          { id: 'assessmentTypePerformanceChart', title: 'Performance by Assessment Type', description: 'Student performance across different assessment types' }\r\n        ],\r\n        ssp: [\r\n          { id: 'surveyAverageChart', title: 'Survey Average Scores', description: 'Average scores across survey questions' },\r\n          { id: 'surveyDistributionChart', title: 'Survey Response Distribution', description: 'Distribution of student issues by priority level' }\r\n        ],\r\n        ssphead: [\r\n          { id: 'performanceChart', title: 'Performance Distribution', description: 'Distribution of student performance' },\r\n          { id: 'assessmentTypeChart', title: 'Assessment Type Distribution', description: 'Distribution of assessment types' },\r\n          { id: 'performanceTrendChart', title: 'Performance Trends', description: 'Performance trends over time' },\r\n          { id: 'assessmentTypePerformanceChart', title: 'Performance by Assessment Type', description: 'Performance across different assessment types' }\r\n        ]\r\n      }\r\n      \r\n      return graphOptions[props.dashboardType] || []\r\n    })\r\n    \r\n    // Reset selected graphs when dashboard type changes\r\n    watch(() => props.dashboardType, () => {\r\n      selectedGraphs.value = []\r\n    })\r\n    \r\n    // Helper function to create a header with filter information\r\n    const createHeaderContent = (doc, y) => {\r\n      const username = store.state.auth.user?.name || \r\n                     `${store.state.auth.user?.firstName || ''} ${store.state.auth.user?.lastName || ''}`.trim() || \r\n                     'User'\r\n      \r\n      // Dashboard type mapping\r\n      const dashboardTypes = {\r\n        cithead: 'CIT Head Dashboard',\r\n        teacher: 'Teacher Dashboard',\r\n        ssp: 'SSP Adviser Dashboard',\r\n        ssphead: 'SSP Head Dashboard'\r\n      }\r\n      \r\n      const dashboardName = dashboardTypes[props.dashboardType] || 'Dashboard'\r\n      \r\n      // Set document title\r\n      doc.setFontSize(16)\r\n      doc.setFont('helvetica', 'bold')\r\n      doc.text(documentTitle.value, 14, y)\r\n      y += 8\r\n      \r\n      // Add metadata\r\n      doc.setFontSize(10)\r\n      doc.setFont('helvetica', 'normal')\r\n      doc.text(`${dashboardName} - Generated by: ${username}`, 14, y)\r\n      y += 5\r\n      doc.text(`Date: ${moment().format('MMMM D, YYYY h:mm A')}`, 14, y)\r\n      y += 8\r\n      \r\n      // Add filter information\r\n      doc.setFontSize(10)\r\n      doc.setFont('helvetica', 'bold')\r\n      doc.text('Applied Filters:', 14, y)\r\n      y += 5\r\n      \r\n      doc.setFont('helvetica', 'normal')\r\n      \r\n      // Extract filter information\r\n      const filters = []\r\n      if (props.filterInfo.year) filters.push(`Year: ${props.filterInfo.year}`)\r\n      if (props.filterInfo.section) filters.push(`Section: ${props.filterInfo.section}`)\r\n      if (props.filterInfo.subject) filters.push(`Subject: ${props.filterInfo.subject}`)\r\n      \r\n      // Date range\r\n      const dateRange = []\r\n      if (startDate.value) dateRange.push(`From: ${moment(startDate.value).format('MMM D, YYYY')}`)\r\n      if (endDate.value) dateRange.push(`To: ${moment(endDate.value).format('MMM D, YYYY')}`)\r\n      \r\n      if (dateRange.length > 0) {\r\n        filters.push(`Date Range: ${dateRange.join(' - ')}`)\r\n      }\r\n      \r\n      if (filters.length === 0) {\r\n        doc.text('No filters applied', 14, y)\r\n      } else {\r\n        filters.forEach(filter => {\r\n          doc.text(`â€¢ ${filter}`, 14, y)\r\n          y += 5\r\n        })\r\n      }\r\n      \r\n      y += 5\r\n      \r\n      return y\r\n    }\r\n    \r\n    // Export selected graphs to PDF\r\n    const exportToPDF = async () => {\r\n      if (selectedGraphs.value.length === 0) return\r\n      \r\n      isExporting.value = true\r\n      \r\n      try {\r\n        // Create PDF document\r\n        const doc = new jsPDF({\r\n          orientation: orientation.value,\r\n          unit: 'mm',\r\n          format: 'a4'\r\n        })\r\n        \r\n        let y = 15\r\n        \r\n        // Add header and filter information\r\n        y = createHeaderContent(doc, y)\r\n        \r\n        // Set margin for charts\r\n        const margin = 14\r\n        const pageWidth = orientation.value === 'landscape' ? 297 : 210\r\n        const pageHeight = orientation.value === 'landscape' ? 210 : 297\r\n        const contentWidth = pageWidth - (margin * 2)\r\n        \r\n        // Process each selected chart\r\n        for (let i = 0; i < selectedGraphs.value.length; i++) {\r\n          const graphId = selectedGraphs.value[i]\r\n          const canvas = props.chartRefs[graphId]\r\n          \r\n          if (!canvas) {\r\n            console.error(`Chart canvas not found: ${graphId}`)\r\n            continue\r\n          }\r\n          \r\n          // Check if we need to add a new page\r\n          if (i > 0 && y > pageHeight - 80) {\r\n            doc.addPage()\r\n            y = 15\r\n          }\r\n          \r\n          // Get graph title\r\n          const graphInfo = availableGraphs.value.find(g => g.id === graphId)\r\n          const title = graphInfo ? graphInfo.title : 'Chart'\r\n          \r\n          // Add chart title\r\n          doc.setFontSize(12)\r\n          doc.setFont('helvetica', 'bold')\r\n          doc.text(title, margin, y)\r\n          y += 8\r\n          \r\n          try {\r\n            // Convert chart canvas to image\r\n            const imageData = canvas.toDataURL('image/png', 1.0)\r\n            \r\n            // Calculate aspect ratio to maintain proportions\r\n            const canvasWidth = canvas.width\r\n            const canvasHeight = canvas.height\r\n            const ratio = canvasHeight / canvasWidth\r\n            \r\n            // Set image width and height maintaining aspect ratio\r\n            const imgWidth = contentWidth\r\n            const imgHeight = imgWidth * ratio\r\n            \r\n            // Add image to PDF\r\n            doc.addImage(imageData, 'PNG', margin, y, imgWidth, imgHeight)\r\n            \r\n            // Update y position for next chart\r\n            y += imgHeight + 15\r\n          } catch (error) {\r\n            console.error(`Error capturing chart ${graphId}:`, error)\r\n          }\r\n        }\r\n        \r\n        // Save PDF\r\n        const fileName = `${documentTitle.value.replace(/\\s+/g, '_')}_${moment().format('YYYY-MM-DD')}.pdf`\r\n        doc.save(fileName)\r\n      } catch (error) {\r\n        console.error('Error generating PDF:', error)\r\n        alert('An error occurred while generating the PDF. Please try again.')\r\n      } finally {\r\n        isExporting.value = false\r\n      }\r\n    }\r\n\r\n    return {\r\n      selectedGraphs,\r\n      availableGraphs,\r\n      documentTitle,\r\n      startDate,\r\n      endDate,\r\n      orientation,\r\n      isExporting,\r\n      today,\r\n      exportToPDF\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.graph-selection {\r\n  transition: all 0.2s ease;\r\n  cursor: pointer;\r\n  border: 1px solid #e2e8f0;\r\n}\r\n\r\n.graph-selection:hover {\r\n  border-color: #3b82f6;\r\n  box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.3);\r\n}\r\n\r\n.graph-selection.selected {\r\n  border-color: #3b82f6;\r\n  background-color: rgba(59, 130, 246, 0.05);\r\n  box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.5);\r\n}\r\n\r\n.form-check-input:checked {\r\n  background-color: #3b82f6;\r\n  border-color: #3b82f6;\r\n}\r\n</style> "],"mappings":";;;AAgIA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAI,QAAS,KAAI;AACzC,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,MAAK,MAAO,QAAO;AAC1B,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAOC,WAAU,MAAO,aAAY;AAEpC,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAE;IACLC,aAAa,EAAE;MACbC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAGC,KAAK,IAAK;QACpB,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACD,KAAK;MAChE;IACF,CAAC;IACDE,SAAS,EAAE;MACTN,IAAI,EAAEO,MAAM;MACZL,QAAQ,EAAE;IACZ,CAAC;IACDM,UAAU,EAAE;MACVR,IAAI,EAAEO,MAAM;MACZE,OAAO,EAAEA,CAAA,MAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,KAAKA,CAACZ,KAAK,EAAE;IACX,MAAMa,KAAI,GAAIlB,QAAQ,CAAC;IACvB,MAAMmB,cAAa,GAAItB,GAAG,CAAC,EAAE;IAC7B,MAAMuB,aAAY,GAAIvB,GAAG,CAAC,kBAAkB;IAC5C,MAAMwB,SAAQ,GAAIxB,GAAG,CAAC,EAAE;IACxB,MAAMyB,OAAM,GAAIzB,GAAG,CAAC,EAAE;IACtB,MAAM0B,WAAU,GAAI1B,GAAG,CAAC,WAAW;IACnC,MAAM2B,WAAU,GAAI3B,GAAG,CAAC,KAAK;IAE7B,MAAM4B,KAAI,GAAI3B,QAAQ,CAAC,MAAMG,MAAM,CAAC,CAAC,CAACyB,MAAM,CAAC,YAAY,CAAC;;IAE1D;IACA,MAAMC,eAAc,GAAI7B,QAAQ,CAAC,MAAM;MACrC,MAAM8B,YAAW,GAAI;QACnBC,OAAO,EAAE,CACP;UAAEC,EAAE,EAAE,kBAAkB;UAAEC,KAAK,EAAE,yBAAyB;UAAEC,WAAW,EAAE;QAA4C,CAAC,EACtH;UAAEF,EAAE,EAAE,qBAAqB;UAAEC,KAAK,EAAE,6BAA6B;UAAEC,WAAW,EAAE;QAAoC,CAAC,EACrH;UAAEF,EAAE,EAAE,uBAAuB;UAAEC,KAAK,EAAE,oBAAoB;UAAEC,WAAW,EAAE;QAA0C,CAAC,EACpH;UAAEF,EAAE,EAAE,cAAc;UAAEC,KAAK,EAAE,qBAAqB;UAAEC,WAAW,EAAE;QAAoD,EACtH;QACDC,OAAO,EAAE,CACP;UAAEH,EAAE,EAAE,kBAAkB;UAAEC,KAAK,EAAE,yBAAyB;UAAEC,WAAW,EAAE;QAA4C,CAAC,EACtH;UAAEF,EAAE,EAAE,qBAAqB;UAAEC,KAAK,EAAE,iCAAiC;UAAEC,WAAW,EAAE;QAAoC,CAAC,EACzH;UAAEF,EAAE,EAAE,uBAAuB;UAAEC,KAAK,EAAE,oBAAoB;UAAEC,WAAW,EAAE;QAAiD,CAAC,EAC3H;UAAEF,EAAE,EAAE,gCAAgC;UAAEC,KAAK,EAAE,gCAAgC;UAAEC,WAAW,EAAE;QAAwD,EACvJ;QACDE,GAAG,EAAE,CACH;UAAEJ,EAAE,EAAE,oBAAoB;UAAEC,KAAK,EAAE,uBAAuB;UAAEC,WAAW,EAAE;QAAyC,CAAC,EACnH;UAAEF,EAAE,EAAE,yBAAyB;UAAEC,KAAK,EAAE,8BAA8B;UAAEC,WAAW,EAAE;QAAmD,EACzI;QACDG,OAAO,EAAE,CACP;UAAEL,EAAE,EAAE,kBAAkB;UAAEC,KAAK,EAAE,0BAA0B;UAAEC,WAAW,EAAE;QAAsC,CAAC,EACjH;UAAEF,EAAE,EAAE,qBAAqB;UAAEC,KAAK,EAAE,8BAA8B;UAAEC,WAAW,EAAE;QAAmC,CAAC,EACrH;UAAEF,EAAE,EAAE,uBAAuB;UAAEC,KAAK,EAAE,oBAAoB;UAAEC,WAAW,EAAE;QAA+B,CAAC,EACzG;UAAEF,EAAE,EAAE,gCAAgC;UAAEC,KAAK,EAAE,gCAAgC;UAAEC,WAAW,EAAE;QAAgD;MAElJ;MAEA,OAAOJ,YAAY,CAACvB,KAAK,CAACC,aAAa,KAAK,EAAC;IAC/C,CAAC;;IAED;IACAP,KAAK,CAAC,MAAMM,KAAK,CAACC,aAAa,EAAE,MAAM;MACrCa,cAAc,CAACR,KAAI,GAAI,EAAC;IAC1B,CAAC;;IAED;IACA,MAAMyB,mBAAkB,GAAIA,CAACC,GAAG,EAAEC,CAAC,KAAK;MACtC,MAAMC,QAAO,GAAIrB,KAAK,CAACsB,KAAK,CAACC,IAAI,CAACC,IAAI,EAAEtC,IAAG,IAC5B,GAAGc,KAAK,CAACsB,KAAK,CAACC,IAAI,CAACC,IAAI,EAAEC,SAAQ,IAAK,EAAE,IAAIzB,KAAK,CAACsB,KAAK,CAACC,IAAI,CAACC,IAAI,EAAEE,QAAO,IAAK,EAAE,EAAE,CAACC,IAAI,CAAC,KAC1F,MAAK;;MAEpB;MACA,MAAMC,cAAa,GAAI;QACrBjB,OAAO,EAAE,oBAAoB;QAC7BI,OAAO,EAAE,mBAAmB;QAC5BC,GAAG,EAAE,uBAAuB;QAC5BC,OAAO,EAAE;MACX;MAEA,MAAMY,aAAY,GAAID,cAAc,CAACzC,KAAK,CAACC,aAAa,KAAK,WAAU;;MAEvE;MACA+B,GAAG,CAACW,WAAW,CAAC,EAAE;MAClBX,GAAG,CAACY,OAAO,CAAC,WAAW,EAAE,MAAM;MAC/BZ,GAAG,CAACa,IAAI,CAAC9B,aAAa,CAACT,KAAK,EAAE,EAAE,EAAE2B,CAAC;MACnCA,CAAA,IAAK;;MAEL;MACAD,GAAG,CAACW,WAAW,CAAC,EAAE;MAClBX,GAAG,CAACY,OAAO,CAAC,WAAW,EAAE,QAAQ;MACjCZ,GAAG,CAACa,IAAI,CAAC,GAAGH,aAAa,oBAAoBR,QAAQ,EAAE,EAAE,EAAE,EAAED,CAAC;MAC9DA,CAAA,IAAK;MACLD,GAAG,CAACa,IAAI,CAAC,SAASjD,MAAM,CAAC,CAAC,CAACyB,MAAM,CAAC,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAEY,CAAC;MACjEA,CAAA,IAAK;;MAEL;MACAD,GAAG,CAACW,WAAW,CAAC,EAAE;MAClBX,GAAG,CAACY,OAAO,CAAC,WAAW,EAAE,MAAM;MAC/BZ,GAAG,CAACa,IAAI,CAAC,kBAAkB,EAAE,EAAE,EAAEZ,CAAC;MAClCA,CAAA,IAAK;MAELD,GAAG,CAACY,OAAO,CAAC,WAAW,EAAE,QAAQ;;MAEjC;MACA,MAAME,OAAM,GAAI,EAAC;MACjB,IAAI9C,KAAK,CAACU,UAAU,CAACqC,IAAI,EAAED,OAAO,CAACE,IAAI,CAAC,SAAShD,KAAK,CAACU,UAAU,CAACqC,IAAI,EAAE;MACxE,IAAI/C,KAAK,CAACU,UAAU,CAACuC,OAAO,EAAEH,OAAO,CAACE,IAAI,CAAC,YAAYhD,KAAK,CAACU,UAAU,CAACuC,OAAO,EAAE;MACjF,IAAIjD,KAAK,CAACU,UAAU,CAACwC,OAAO,EAAEJ,OAAO,CAACE,IAAI,CAAC,YAAYhD,KAAK,CAACU,UAAU,CAACwC,OAAO,EAAE;;MAEjF;MACA,MAAMC,SAAQ,GAAI,EAAC;MACnB,IAAInC,SAAS,CAACV,KAAK,EAAE6C,SAAS,CAACH,IAAI,CAAC,SAASpD,MAAM,CAACoB,SAAS,CAACV,KAAK,CAAC,CAACe,MAAM,CAAC,aAAa,CAAC,EAAE;MAC5F,IAAIJ,OAAO,CAACX,KAAK,EAAE6C,SAAS,CAACH,IAAI,CAAC,OAAOpD,MAAM,CAACqB,OAAO,CAACX,KAAK,CAAC,CAACe,MAAM,CAAC,aAAa,CAAC,EAAE;MAEtF,IAAI8B,SAAS,CAACC,MAAK,GAAI,CAAC,EAAE;QACxBN,OAAO,CAACE,IAAI,CAAC,eAAeG,SAAS,CAACE,IAAI,CAAC,KAAK,CAAC,EAAE;MACrD;MAEA,IAAIP,OAAO,CAACM,MAAK,KAAM,CAAC,EAAE;QACxBpB,GAAG,CAACa,IAAI,CAAC,oBAAoB,EAAE,EAAE,EAAEZ,CAAC;MACtC,OAAO;QACLa,OAAO,CAACQ,OAAO,CAACC,MAAK,IAAK;UACxBvB,GAAG,CAACa,IAAI,CAAC,KAAKU,MAAM,EAAE,EAAE,EAAE,EAAEtB,CAAC;UAC7BA,CAAA,IAAK;QACP,CAAC;MACH;MAEAA,CAAA,IAAK;MAEL,OAAOA,CAAA;IACT;;IAEA;IACA,MAAMuB,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI1C,cAAc,CAACR,KAAK,CAAC8C,MAAK,KAAM,CAAC,EAAE;MAEvCjC,WAAW,CAACb,KAAI,GAAI,IAAG;MAEvB,IAAI;QACF;QACA,MAAM0B,GAAE,GAAI,IAAInC,KAAK,CAAC;UACpBqB,WAAW,EAAEA,WAAW,CAACZ,KAAK;UAC9BmD,IAAI,EAAE,IAAI;UACVpC,MAAM,EAAE;QACV,CAAC;QAED,IAAIY,CAAA,GAAI,EAAC;;QAET;QACAA,CAAA,GAAIF,mBAAmB,CAACC,GAAG,EAAEC,CAAC;;QAE9B;QACA,MAAMyB,MAAK,GAAI,EAAC;QAChB,MAAMC,SAAQ,GAAIzC,WAAW,CAACZ,KAAI,KAAM,WAAU,GAAI,GAAE,GAAI,GAAE;QAC9D,MAAMsD,UAAS,GAAI1C,WAAW,CAACZ,KAAI,KAAM,WAAU,GAAI,GAAE,GAAI,GAAE;QAC/D,MAAMuD,YAAW,GAAIF,SAAQ,GAAKD,MAAK,GAAI,CAAC;;QAE5C;QACA,KAAK,IAAII,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIhD,cAAc,CAACR,KAAK,CAAC8C,MAAM,EAAEU,CAAC,EAAE,EAAE;UACpD,MAAMC,OAAM,GAAIjD,cAAc,CAACR,KAAK,CAACwD,CAAC;UACtC,MAAME,MAAK,GAAIhE,KAAK,CAACQ,SAAS,CAACuD,OAAO;UAEtC,IAAI,CAACC,MAAM,EAAE;YACXC,OAAO,CAACC,KAAK,CAAC,2BAA2BH,OAAO,EAAE;YAClD;UACF;;UAEA;UACA,IAAID,CAAA,GAAI,KAAK7B,CAAA,GAAI2B,UAAS,GAAI,EAAE,EAAE;YAChC5B,GAAG,CAACmC,OAAO,CAAC;YACZlC,CAAA,GAAI,EAAC;UACP;;UAEA;UACA,MAAMmC,SAAQ,GAAI9C,eAAe,CAAChB,KAAK,CAAC+D,IAAI,CAACC,CAAA,IAAKA,CAAC,CAAC7C,EAAC,KAAMsC,OAAO;UAClE,MAAMrC,KAAI,GAAI0C,SAAQ,GAAIA,SAAS,CAAC1C,KAAI,GAAI,OAAM;;UAElD;UACAM,GAAG,CAACW,WAAW,CAAC,EAAE;UAClBX,GAAG,CAACY,OAAO,CAAC,WAAW,EAAE,MAAM;UAC/BZ,GAAG,CAACa,IAAI,CAACnB,KAAK,EAAEgC,MAAM,EAAEzB,CAAC;UACzBA,CAAA,IAAK;UAEL,IAAI;YACF;YACA,MAAMsC,SAAQ,GAAIP,MAAM,CAACQ,SAAS,CAAC,WAAW,EAAE,GAAG;;YAEnD;YACA,MAAMC,WAAU,GAAIT,MAAM,CAACU,KAAI;YAC/B,MAAMC,YAAW,GAAIX,MAAM,CAACY,MAAK;YACjC,MAAMC,KAAI,GAAIF,YAAW,GAAIF,WAAU;;YAEvC;YACA,MAAMK,QAAO,GAAIjB,YAAW;YAC5B,MAAMkB,SAAQ,GAAID,QAAO,GAAID,KAAI;;YAEjC;YACA7C,GAAG,CAACgD,QAAQ,CAACT,SAAS,EAAE,KAAK,EAAEb,MAAM,EAAEzB,CAAC,EAAE6C,QAAQ,EAAEC,SAAS;;YAE7D;YACA9C,CAAA,IAAK8C,SAAQ,GAAI,EAAC;UACpB,EAAE,OAAOb,KAAK,EAAE;YACdD,OAAO,CAACC,KAAK,CAAC,yBAAyBH,OAAO,GAAG,EAAEG,KAAK;UAC1D;QACF;;QAEA;QACA,MAAMe,QAAO,GAAI,GAAGlE,aAAa,CAACT,KAAK,CAAC4E,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,IAAItF,MAAM,CAAC,CAAC,CAACyB,MAAM,CAAC,YAAY,CAAC,MAAK;QAClGW,GAAG,CAACmD,IAAI,CAACF,QAAQ;MACnB,EAAE,OAAOf,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK;QAC5CkB,KAAK,CAAC,+DAA+D;MACvE,UAAU;QACRjE,WAAW,CAACb,KAAI,GAAI,KAAI;MAC1B;IACF;IAEA,OAAO;MACLQ,cAAc;MACdQ,eAAe;MACfP,aAAa;MACbC,SAAS;MACTC,OAAO;MACPC,WAAW;MACXC,WAAW;MACXC,KAAK;MACLoC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
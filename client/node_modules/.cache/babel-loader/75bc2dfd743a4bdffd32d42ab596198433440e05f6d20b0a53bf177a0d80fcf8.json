{"ast":null,"code":"import { createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.mySurvey.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"Bar\"], {\n    data: $setup.data,\n    options: $setup.options\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"h4\", null, \"No data available!\", -1 /* HOISTED */)])));\n}","map":{"version":3,"names":["key","$setup","mySurvey","length","_createElementBlock","_hoisted_1","_createVNode","data","options","_hoisted_2","_cache","_createElementVNode"],"sources":["D:\\au_dev\\client\\src\\components\\AllSurveyStat.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"mySurvey.length\">\r\n        <Bar :data=\"data\" :options=\"options\" />\r\n    </div>\r\n    <div  v-else>\r\n        <h4>No data available!</h4>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport {\r\n    Chart as ChartJS,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarElement,\r\n    CategoryScale,\r\n    LinearScale\r\n} from 'chart.js'\r\nimport { onMounted, onUnmounted, ref } from 'vue'\r\nimport { Bar } from 'vue-chartjs'\r\n\r\n// Create axios instance with correct base URL\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8081/api',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nconst props = defineProps({\r\n    _id: String,\r\n    surveyForm : Array\r\n})\r\nconst mySurvey = ref([]);\r\nconst data = ref({})\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)\r\nonUnmounted(() => {\r\n    mySurvey.value = [];\r\n    data.value = {};\r\n})\r\nonMounted(async () => {\r\n    const surveyResponse = await api.get(`/survey/stats/all`)\r\n    \r\n    mySurvey.value = surveyResponse.data;\r\n    data.value = {\r\n        labels: mySurvey.value?.map(s => s.type + ' Problem') || 'Not available',\r\n        datasets: [\r\n            {\r\n                label: 'Average Score Survey',\r\n                backgroundColor: '#f87979',\r\n                data: mySurvey.value?.map(s => s.average) || []\r\n            },\r\n        ]\r\n    }\r\n})\r\n\r\n\r\nconst options = ref({\r\n    //   responsive: true ,\r\n    //   maintainAspectRatio: false\r\n})\r\n\r\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;SACeC,MAAA,CAAAC,QAAQ,CAACC,MAAM,I,cAA1BC,mBAAA,CAEM,OAHVC,UAAA,GAEQC,YAAA,CAAuCL,MAAA;IAAjCM,IAAI,EAAEN,MAAA,CAAAM,IAAI;IAAGC,OAAO,EAAEP,MAAA,CAAAO;mEAEhCJ,mBAAA,CAEM,OANVK,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAKQC,mBAAA,CAA2B,YAAvB,oBAAkB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
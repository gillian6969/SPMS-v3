{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const assessmentCompletion = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => averageAttendance.value > 0);\n    const hasPerformanceData = computed(() => averageScore.value > 0);\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0);\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: [{\n          type: 'Quiz',\n          averageScore: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0\n        }]\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n\n        // Prepare query parameters\n        const params = {};\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n\n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data:', response.data);\n\n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.activeSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        averageScore.value = response.data.averageScore || 0;\n        averageAttendance.value = response.data.averageAttendance || 0;\n        assessmentCompletion.value = response.data.assessmentCompletion || 0;\n\n        // Update flags for UI\n        hasPerformanceData.value = !!response.data.performanceDistribution;\n        hasAttendanceData.value = !!response.data.averageAttendance;\n        hasAssessmentData.value = Array.isArray(response.data.assessmentTypeDistribution) && response.data.assessmentTypeDistribution.length > 0;\n        hasActivity.value = Array.isArray(response.data.recentActivities) && response.data.recentActivities.length > 0;\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // Update charts\n        if (hasPerformanceData.value) {\n          updatePerformanceChart(response.data);\n        } else {\n          updatePerformanceChart({\n            attendanceDistribution: [0, 0, 0, 0]\n          });\n        }\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        if (hasAssessmentData.value) {\n          // Update assessment data for the new chart\n          updateAssessmentTypeChart({\n            assessmentData: response.data.assessmentData || response.data.assessmentTypeDistribution.map(item => ({\n              type: item.type,\n              averageScore: item.averageScore || 0,\n              count: item.count || 0\n            }))\n          });\n        } else {\n          updateAssessmentTypeChart({\n            assessmentData: [{\n              type: 'Quiz',\n              averageScore: 0\n            }, {\n              type: 'Activity',\n              averageScore: 0\n            }, {\n              type: 'Performance Task',\n              averageScore: 0\n            }]\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent, excused]\n      const attendanceData = Array.isArray(data.attendanceDistribution) ? data.attendanceDistribution : [0, 0, 0, 0];\n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records and percentages\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      const presentCount = attendanceData[0] || 0; // Present\n      const lateCount = attendanceData[1] || 0; // Late\n      const absentCount = attendanceData[2] || 0; // Absent\n      const excusedCount = attendanceData[3] || 0; // Excused\n\n      const presentPercentage = totalAttendance > 0 ? (presentCount / totalAttendance * 100).toFixed(1) : 0;\n      const latePercentage = totalAttendance > 0 ? (lateCount / totalAttendance * 100).toFixed(1) : 0;\n      const absentPercentage = totalAttendance > 0 ? (absentCount / totalAttendance * 100).toFixed(1) : 0;\n      const excusedPercentage = totalAttendance > 0 ? (excusedCount / totalAttendance * 100).toFixed(1) : 0;\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent', 'Excused'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for late\n            'rgba(239, 68, 68, 0.8)',\n            // Red for absent\n            'rgba(156, 163, 175, 0.8)' // Gray for excused\n            ],\n            borderColor: ['rgb(15, 140, 80)',\n            // Darker borders for contrast\n            'rgb(220, 160, 20)', 'rgb(220, 50, 50)', 'rgb(120, 130, 140)'],\n            borderWidth: 1,\n            hoverOffset: 15\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n\n      // Add summary information to the HTML for a quick overview\n      const chartContainer = performanceChart.value.parentNode;\n\n      // Add summary div if it doesn't exist yet\n      let summaryDiv = chartContainer.querySelector('.performance-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('performance-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n\n      // Add attendance percentage information\n      summaryDiv.innerHTML = `\n        <div class=\"summary-stats\">\n          <div class=\"stat-item present\">\n            <span class=\"stat-value\">${presentPercentage}%</span>\n            <span class=\"stat-label\">Present</span>\n          </div>\n          <div class=\"stat-item late\">\n            <span class=\"stat-value\">${latePercentage}%</span>\n            <span class=\"stat-label\">Late</span>\n          </div>\n          <div class=\"stat-item absent\">\n            <span class=\"stat-value\">${absentPercentage}%</span>\n            <span class=\"stat-label\">Absent</span>\n          </div>\n        </div>\n      `;\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Create more performance-focused data\n      // We will display average scores by assessment type, not just counts\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n          assessmentData.passRates[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n\n        // Calculate average scores and pass rates per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n\n            // Calculate pass rate\n            const passingCount = typeAssessments.filter(a => (parseFloat(a.averageScore) || 0) >= 70).length;\n            assessmentData.passRates[type] = (passingCount / totalCount * 100).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n            assessmentData.passRates[type] = 0;\n          }\n        });\n      }\n\n      // Create dual-axis chart showing both average scores and pass rates\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n            backgroundColor: 'rgba(59, 130, 246, 0.8)',\n            // Blue\n            borderColor: 'rgb(45, 110, 220)',\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6,\n            order: 2\n          }, {\n            label: 'Pass Rate (%)',\n            data: assessmentTypes.map(type => assessmentData.passRates[type]),\n            backgroundColor: 'rgba(0, 0, 0, 0)',\n            // Transparent background\n            borderColor: 'rgb(20, 170, 100)',\n            // Green\n            borderWidth: 3,\n            type: 'line',\n            pointStyle: 'circle',\n            pointRadius: 6,\n            pointBackgroundColor: 'rgb(20, 170, 100)',\n            tension: 0.3,\n            order: 1,\n            yAxisID: 'y1'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            y1: {\n              beginAtZero: true,\n              max: 100,\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Pass Rate (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                drawOnChartArea: false\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  size: 12\n                },\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n\n      // Add summary section to chart to show key insights\n      const chartContainer = assessmentTypeChart.value.parentNode;\n\n      // Create or update summary div\n      let summaryDiv = chartContainer.querySelector('.assessment-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('assessment-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n\n      // Calculate the highest performing assessment type\n      let highestType = assessmentTypes[0];\n      let highestScore = parseFloat(assessmentData.averageScores[assessmentTypes[0]]) || 0;\n      assessmentTypes.forEach(type => {\n        const score = parseFloat(assessmentData.averageScores[type]) || 0;\n        if (score > highestScore) {\n          highestScore = score;\n          highestType = type;\n        }\n      });\n\n      // Add insightful summary\n      summaryDiv.innerHTML = `\n        <div class=\"assessment-insight\">\n          <div class=\"insight-title\">Performance Insights:</div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Highest performing assessment type:</span>\n            <span class=\"insight-value\">${highestType} (${highestScore}%)</span>\n          </div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Total assessments analyzed:</span>\n            <span class=\"insight-value\">${assessmentTypes.reduce((sum, type) => sum + (assessmentData.totalCounts[type] || 0), 0)}</span>\n          </div>\n        </div>\n      `;\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initDummyData();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageAttendance,\n      averageScore,\n      assessmentCompletion,\n      performanceChart,\n      attendanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageAttendance","averageScore","assessmentCompletion","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","value","hasPerformanceData","hasAssessmentData","hasActivity","length","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initDummyData","updatePerformanceChart","attendanceDistribution","updateAssessmentTypeChart","assessmentData","type","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","performanceTrends","startDate","endDate","response","activeSections","performanceDistribution","Array","isArray","assessmentTypeDistribution","item","count","ctx","getContext","existingChart","getChart","destroy","attendanceData","totalAttendance","reduce","a","b","presentCount","lateCount","absentCount","excusedCount","presentPercentage","toFixed","latePercentage","absentPercentage","excusedPercentage","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","display","position","padding","font","size","tooltip","callbacks","label","context","raw","total","percentage","titleFont","weight","bodyFont","cornerRadius","layout","top","right","bottom","left","chartContainer","parentNode","summaryDiv","querySelector","document","createElement","classList","add","appendChild","innerHTML","assessmentTypes","averageScores","totalCounts","passRates","forEach","typeAssessments","filter","totalCount","totalScore","sum","parseFloat","passingCount","borderRadius","barPercentage","order","pointStyle","pointRadius","pointBackgroundColor","tension","yAxisID","scales","x","grid","y","beginAtZero","max","color","title","text","ticks","y1","drawOnChartArea","boxWidth","dataset","afterLabel","dataIndex","highestType","highestScore","score","warn","validData","d","date","Number","fill","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","trendsByType","Quiz","Activity","trend","Date","Object","keys","allDates","values","flat","entries","index","colors","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\">{{ totalStudents }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\">{{ totalSections }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\">{{ totalSubjects }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4 mt-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores and passing rates by assessment type</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageAttendance = ref(0)\n    const averageScore = ref(0)\n    const assessmentCompletion = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => averageAttendance.value > 0)\n    const hasPerformanceData = computed(() => averageScore.value > 0)\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0)\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n          \n          sections.value = uniqueSections.sort()\n          subjects.value = uniqueSubjects.sort()\n          \n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data:', response.data);\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.activeSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        averageScore.value = response.data.averageScore || 0;\n        averageAttendance.value = response.data.averageAttendance || 0;\n        assessmentCompletion.value = response.data.assessmentCompletion || 0;\n        \n        // Update flags for UI\n        hasPerformanceData.value = !!response.data.performanceDistribution;\n        hasAttendanceData.value = !!response.data.averageAttendance;\n        hasAssessmentData.value = Array.isArray(response.data.assessmentTypeDistribution) && \n                                   response.data.assessmentTypeDistribution.length > 0;\n        hasActivity.value = Array.isArray(response.data.recentActivities) && \n                            response.data.recentActivities.length > 0;\n                            \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update charts\n        if (hasPerformanceData.value) {\n          updatePerformanceChart(response.data);\n        } else {\n          updatePerformanceChart({\n            attendanceDistribution: [0, 0, 0, 0]\n          });\n        }\n        \n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        if (hasAssessmentData.value) {\n          // Update assessment data for the new chart\n          updateAssessmentTypeChart({\n            assessmentData: response.data.assessmentData || response.data.assessmentTypeDistribution.map(item => ({\n              type: item.type,\n              averageScore: item.averageScore || 0,\n              count: item.count || 0\n            }))\n          });\n        } else {\n          updateAssessmentTypeChart({\n            assessmentData: [\n              { type: 'Quiz', averageScore: 0 },\n              { type: 'Activity', averageScore: 0 },\n              { type: 'Performance Task', averageScore: 0 }\n            ]\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent, excused]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution \n        : [0, 0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records and percentages\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      const presentCount = attendanceData[0] || 0; // Present\n      const lateCount = attendanceData[1] || 0;    // Late\n      const absentCount = attendanceData[2] || 0;  // Absent\n      const excusedCount = attendanceData[3] || 0; // Excused\n      \n      const presentPercentage = totalAttendance > 0 ? (presentCount / totalAttendance * 100).toFixed(1) : 0;\n      const latePercentage = totalAttendance > 0 ? (lateCount / totalAttendance * 100).toFixed(1) : 0;\n      const absentPercentage = totalAttendance > 0 ? (absentCount / totalAttendance * 100).toFixed(1) : 0;\n      const excusedPercentage = totalAttendance > 0 ? (excusedCount / totalAttendance * 100).toFixed(1) : 0;\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent', 'Excused'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n                'rgba(156, 163, 175, 0.8)'  // Gray for excused\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n                'rgb(120, 130, 140)'\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n      \n      // Add summary information to the HTML for a quick overview\n      const chartContainer = performanceChart.value.parentNode;\n      \n      // Add summary div if it doesn't exist yet\n      let summaryDiv = chartContainer.querySelector('.performance-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('performance-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n      \n      // Add attendance percentage information\n      summaryDiv.innerHTML = `\n        <div class=\"summary-stats\">\n          <div class=\"stat-item present\">\n            <span class=\"stat-value\">${presentPercentage}%</span>\n            <span class=\"stat-label\">Present</span>\n          </div>\n          <div class=\"stat-item late\">\n            <span class=\"stat-value\">${latePercentage}%</span>\n            <span class=\"stat-label\">Late</span>\n          </div>\n          <div class=\"stat-item absent\">\n            <span class=\"stat-value\">${absentPercentage}%</span>\n            <span class=\"stat-label\">Absent</span>\n          </div>\n        </div>\n      `;\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Create more performance-focused data\n      // We will display average scores by assessment type, not just counts\n      \n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n          assessmentData.passRates[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {},\n          passRates: {}\n        };\n        \n        // Calculate average scores and pass rates per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n            \n            // Calculate pass rate\n            const passingCount = typeAssessments.filter(a => (parseFloat(a.averageScore) || 0) >= 70).length;\n            assessmentData.passRates[type] = ((passingCount / totalCount) * 100).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n            assessmentData.passRates[type] = 0;\n          }\n        });\n      }\n      \n      // Create dual-axis chart showing both average scores and pass rates\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: 'rgba(59, 130, 246, 0.8)', // Blue\n              borderColor: 'rgb(45, 110, 220)',\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6,\n              order: 2\n            },\n            {\n              label: 'Pass Rate (%)',\n              data: assessmentTypes.map(type => assessmentData.passRates[type]),\n              backgroundColor: 'rgba(0, 0, 0, 0)', // Transparent background\n              borderColor: 'rgb(20, 170, 100)', // Green\n              borderWidth: 3,\n              type: 'line',\n              pointStyle: 'circle',\n              pointRadius: 6,\n              pointBackgroundColor: 'rgb(20, 170, 100)',\n              tension: 0.3,\n              order: 1,\n              yAxisID: 'y1'\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            y1: {\n              beginAtZero: true,\n              max: 100,\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Pass Rate (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                drawOnChartArea: false\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  size: 12\n                },\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n      \n      // Add summary section to chart to show key insights\n      const chartContainer = assessmentTypeChart.value.parentNode;\n      \n      // Create or update summary div\n      let summaryDiv = chartContainer.querySelector('.assessment-summary');\n      if (!summaryDiv) {\n        summaryDiv = document.createElement('div');\n        summaryDiv.classList.add('assessment-summary');\n        chartContainer.appendChild(summaryDiv);\n      }\n      \n      // Calculate the highest performing assessment type\n      let highestType = assessmentTypes[0];\n      let highestScore = parseFloat(assessmentData.averageScores[assessmentTypes[0]]) || 0;\n      \n      assessmentTypes.forEach(type => {\n        const score = parseFloat(assessmentData.averageScores[type]) || 0;\n        if (score > highestScore) {\n          highestScore = score;\n          highestType = type;\n        }\n      });\n      \n      // Add insightful summary\n      summaryDiv.innerHTML = `\n        <div class=\"assessment-insight\">\n          <div class=\"insight-title\">Performance Insights:</div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Highest performing assessment type:</span>\n            <span class=\"insight-value\">${highestType} (${highestScore}%)</span>\n          </div>\n          <div class=\"insight-item\">\n            <span class=\"insight-label\">Total assessments analyzed:</span>\n            <span class=\"insight-value\">${assessmentTypes.reduce((sum, type) => sum + (assessmentData.totalCounts[type] || 0), 0)}</span>\n          </div>\n        </div>\n      `;\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initDummyData();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageAttendance,\n      averageScore,\n      assessmentCompletion,\n      performanceChart,\n      attendanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Performance Summary Styles */\n.performance-summary {\n  margin-top: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 0.75rem;\n  border: 1px solid #e2e8f0;\n}\n\n.summary-stats {\n  display: flex;\n  justify-content: space-around;\n  gap: 1rem;\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  min-width: 120px;\n}\n\n.stat-item.present {\n  background-color: rgba(52, 211, 153, 0.15);\n  border-left: 4px solid rgb(52, 211, 153);\n}\n\n.stat-item.late {\n  background-color: rgba(251, 191, 36, 0.15);\n  border-left: 4px solid rgb(251, 191, 36);\n}\n\n.stat-item.absent {\n  background-color: rgba(239, 68, 68, 0.15);\n  border-left: 4px solid rgb(239, 68, 68);\n}\n\n.stat-item .stat-value {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 0.25rem;\n}\n\n.stat-item.present .stat-value {\n  color: rgb(20, 150, 80);\n}\n\n.stat-item.late .stat-value {\n  color: rgb(220, 160, 20);\n}\n\n.stat-item.absent .stat-value {\n  color: rgb(220, 50, 50);\n}\n\n.stat-item .stat-label {\n  font-size: 0.8rem;\n  font-weight: 500;\n  color: #64748b;\n}\n\n/* Assessment Insights Styles */\n.assessment-summary {\n  margin-top: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n  border: 1px solid #e2e8f0;\n}\n\n.assessment-insight {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.insight-title {\n  font-weight: 700;\n  font-size: 0.9rem;\n  color: #1e293b;\n  margin-bottom: 0.25rem;\n}\n\n.insight-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n.insight-label {\n  font-size: 0.85rem;\n  color: #64748b;\n}\n\n.insight-value {\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: #003366;\n  padding: 0.25rem 0.5rem;\n  background-color: rgba(0, 51, 102, 0.1);\n  border-radius: 4px;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
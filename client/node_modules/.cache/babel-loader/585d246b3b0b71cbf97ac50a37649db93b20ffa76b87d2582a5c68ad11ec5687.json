{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"greeting-section mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"greeting\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown\"\n};\nconst _hoisted_6 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_7 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_8 = {\n  class: \"mb-3\"\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = [\"value\"];\nconst _hoisted_16 = {\n  class: \"mb-3\"\n};\nconst _hoisted_17 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_18 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_19 = [\"max\"];\nconst _hoisted_20 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_21 = [\"max\"];\nconst _hoisted_22 = [\"disabled\"];\nconst _hoisted_23 = {\n  key: 0\n};\nconst _hoisted_24 = {\n  key: 1\n};\nconst _hoisted_25 = {\n  class: \"row g-4 mb-4\"\n};\nconst _hoisted_26 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_27 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_28 = {\n  class: \"card-info\"\n};\nconst _hoisted_29 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_30 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_31 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_32 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_33 = {\n  class: \"card-info\"\n};\nconst _hoisted_34 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_35 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_36 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_37 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_38 = {\n  class: \"card-info\"\n};\nconst _hoisted_39 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_40 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_41 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_42 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_43 = {\n  class: \"card-info\"\n};\nconst _hoisted_44 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_45 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_46 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_47 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_48 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_49 = {\n  class: \"chart-card\"\n};\nconst _hoisted_50 = {\n  class: \"card-body\"\n};\nconst _hoisted_51 = {\n  class: \"chart-filters mb-3\"\n};\nconst _hoisted_52 = {\n  class: \"btn-group date-filter-group\"\n};\nconst _hoisted_53 = {\n  class: \"chart-container\"\n};\nconst _hoisted_54 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_55 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_56 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_57 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_58 = [\"disabled\"];\nconst _hoisted_59 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_60 = {\n  class: \"chart-card\"\n};\nconst _hoisted_61 = {\n  class: \"card-body\"\n};\nconst _hoisted_62 = {\n  class: \"chart-filters mb-3\"\n};\nconst _hoisted_63 = {\n  class: \"btn-group date-filter-group\"\n};\nconst _hoisted_64 = {\n  class: \"chart-container\"\n};\nconst _hoisted_65 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_66 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_67 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_68 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_69 = [\"disabled\"];\nconst _hoisted_70 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_71 = {\n  class: \"chart-card\"\n};\nconst _hoisted_72 = {\n  class: \"card-body\"\n};\nconst _hoisted_73 = {\n  class: \"chart-filters mb-3\"\n};\nconst _hoisted_74 = {\n  class: \"btn-group date-filter-group\"\n};\nconst _hoisted_75 = {\n  class: \"chart-container\"\n};\nconst _hoisted_76 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_77 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_78 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_79 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_80 = [\"disabled\"];\nconst _hoisted_81 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_82 = {\n  class: \"chart-card\"\n};\nconst _hoisted_83 = {\n  class: \"card-body\"\n};\nconst _hoisted_84 = {\n  class: \"chart-filters mb-3\"\n};\nconst _hoisted_85 = {\n  class: \"btn-group date-filter-group\"\n};\nconst _hoisted_86 = {\n  class: \"chart-container\"\n};\nconst _hoisted_87 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_88 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_89 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_90 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_91 = [\"disabled\"];\nconst _hoisted_92 = {\n  class: \"card mb-4\"\n};\nconst _hoisted_93 = {\n  class: \"card-body\"\n};\nconst _hoisted_94 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_95 = {\n  class: \"table\"\n};\nconst _hoisted_96 = {\n  key: 0\n};\nconst _hoisted_97 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Greeting Section \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h2\", _hoisted_3, \"Welcome, \" + _toDisplayString($setup.userName), 1 /* TEXT */), _cache[23] || (_cache[23] = _createElementVNode(\"p\", {\n    class: \"greeting-subtitle\"\n  }, \"Here's your dashboard overview\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_4, [_cache[37] || (_cache[37] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", _hoisted_6, [_cache[24] || (_cache[24] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[35] || (_cache[35] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_cache[26] || (_cache[26] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, [_cache[25] || (_cache[25] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Years\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[28] || (_cache[28] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[27] || (_cache[27] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_11), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[30] || (_cache[30] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[29] || (_cache[29] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_15);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_14), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_16, [_cache[33] || (_cache[33] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_cache[31] || (_cache[31] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_19), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_20, [_cache[32] || (_cache[32] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_21), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[36] || (_cache[36] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: $setup.loading\n  }, [$setup.loading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_23, _cache[34] || (_cache[34] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Loading...\")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_24, \"Apply Filters\"))], 8 /* PROPS */, _hoisted_22)])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_25, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_cache[40] || (_cache[40] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_28, [_cache[39] || (_cache[39] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, _toDisplayString($setup.totalStudents), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_30, _cache[38] || (_cache[38] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Sections Card \"), _createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_cache[43] || (_cache[43] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_33, [_cache[42] || (_cache[42] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_34, _toDisplayString($setup.totalSections), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_35, _cache[41] || (_cache[41] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Subjects Card \"), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"div\", _hoisted_37, [_cache[46] || (_cache[46] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-book\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_38, [_cache[45] || (_cache[45] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"My Subjects\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_39, _toDisplayString($setup.totalSubjects), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_40, _cache[44] || (_cache[44] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"div\", _hoisted_42, [_cache[49] || (_cache[49] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_43, [_cache[48] || (_cache[48] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Class Average\", -1 /* HOISTED */)), !$setup.loading && $setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_44, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_45, _cache[47] || (_cache[47] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_46, \"No data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_47, [_createCommentVNode(\" Attendance Distribution Chart (previously Performance Distribution) \"), _createElementVNode(\"div\", _hoisted_48, [_createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"div\", _hoisted_50, [_cache[52] || (_cache[52] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[53] || (_cache[53] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_51, [_createElementVNode(\"div\", _hoisted_52, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $setup.applyChartDateFilter('attendance', 'day')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.attendance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Day\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $setup.applyChartDateFilter('attendance', 'week')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.attendance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Week\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $setup.applyChartDateFilter('attendance', 'month')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.attendance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Month\", 2 /* CLASS */)])]), _createElementVNode(\"div\", _hoisted_53, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_54, _cache[50] || (_cache[50] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_55, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_56, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_57, [_createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => $setup.generateChartData('attendance')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasAttendanceData || $setup.loading\n  }, _cache[51] || (_cache[51] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate \")]), 8 /* PROPS */, _hoisted_58)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_59, [_createElementVNode(\"div\", _hoisted_60, [_createElementVNode(\"div\", _hoisted_61, [_cache[56] || (_cache[56] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[57] || (_cache[57] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_62, [_createElementVNode(\"div\", _hoisted_63, [_createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = $event => $setup.applyChartDateFilter('assessmentType', 'day')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.assessmentType?.period === 'day' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Day\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = $event => $setup.applyChartDateFilter('assessmentType', 'week')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.assessmentType?.period === 'week' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Week\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = $event => $setup.applyChartDateFilter('assessmentType', 'month')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.assessmentType?.period === 'month' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Month\", 2 /* CLASS */)])]), _createElementVNode(\"div\", _hoisted_64, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_65, _cache[54] || (_cache[54] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_66, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_67, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_68, [_createElementVNode(\"button\", {\n    onClick: _cache[14] || (_cache[14] = $event => $setup.generateChartData('assessmentType')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasAssessmentData || $setup.loading\n  }, _cache[55] || (_cache[55] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate \")]), 8 /* PROPS */, _hoisted_69)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_70, [_createElementVNode(\"div\", _hoisted_71, [_createElementVNode(\"div\", _hoisted_72, [_cache[60] || (_cache[60] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[61] || (_cache[61] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Class average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_73, [_createElementVNode(\"div\", _hoisted_74, [_createElementVNode(\"button\", {\n    onClick: _cache[15] || (_cache[15] = $event => $setup.applyChartDateFilter('performanceTrend', 'day')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.performanceTrend?.period === 'day' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Day\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[16] || (_cache[16] = $event => $setup.applyChartDateFilter('performanceTrend', 'week')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.performanceTrend?.period === 'week' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Week\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[17] || (_cache[17] = $event => $setup.applyChartDateFilter('performanceTrend', 'month')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.performanceTrend?.period === 'month' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Month\", 2 /* CLASS */)])]), _createElementVNode(\"div\", _hoisted_75, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_76, _cache[58] || (_cache[58] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_77, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_78, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_79, [_createElementVNode(\"button\", {\n    onClick: _cache[18] || (_cache[18] = $event => $setup.generateChartData('performanceTrend')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasPerformanceData || $setup.loading\n  }, _cache[59] || (_cache[59] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate \")]), 8 /* PROPS */, _hoisted_80)])])])]), _createCommentVNode(\" Assessment Type Performance \"), _createElementVNode(\"div\", _hoisted_81, [_createElementVNode(\"div\", _hoisted_82, [_createElementVNode(\"div\", _hoisted_83, [_cache[64] || (_cache[64] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[65] || (_cache[65] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_84, [_createElementVNode(\"div\", _hoisted_85, [_createElementVNode(\"button\", {\n    onClick: _cache[19] || (_cache[19] = $event => $setup.applyChartDateFilter('assessmentTypePerformance', 'day')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.assessmentTypePerformance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Day\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[20] || (_cache[20] = $event => $setup.applyChartDateFilter('assessmentTypePerformance', 'week')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.assessmentTypePerformance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Week\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[21] || (_cache[21] = $event => $setup.applyChartDateFilter('assessmentTypePerformance', 'month')),\n    class: _normalizeClass(['btn', 'btn-sm', $setup.chartFilters?.assessmentTypePerformance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \"Month\", 2 /* CLASS */)])]), _createElementVNode(\"div\", _hoisted_86, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_87, _cache[62] || (_cache[62] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_88, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_89, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_90, [_createElementVNode(\"button\", {\n    onClick: _cache[22] || (_cache[22] = $event => $setup.generateChartData('assessmentTypePerformance')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasPerformanceData || $setup.loading\n  }, _cache[63] || (_cache[63] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate \")]), 8 /* PROPS */, _hoisted_91)])])])])]), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_92, [_createElementVNode(\"div\", _hoisted_93, [_cache[69] || (_cache[69] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, \"Recent Activity\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_94, [_createElementVNode(\"table\", _hoisted_95, [_cache[68] || (_cache[68] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Activity\"), _createElementVNode(\"th\", null, \"Details\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [$setup.loading ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_96, _cache[66] || (_cache[66] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }), _createTextVNode(\"Loading activities... \")], -1 /* HOISTED */)]))) : !$setup.hasActivity ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_97, _cache[67] || (_cache[67] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, \"No recent activity\", -1 /* HOISTED */)]))) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 2\n  }, _renderList($setup.recentActivities, activity => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: activity.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(activity.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.details), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","userName","_hoisted_4","_hoisted_5","_hoisted_6","_createTextVNode","getFilterDisplay","_hoisted_7","_hoisted_8","_cache","$event","selectedYear","onChange","args","handleYearChange","value","_Fragment","_renderList","availableYears","year","_hoisted_9","_hoisted_10","selectedSection","disabled","sections","section","_hoisted_12","_hoisted_11","_hoisted_13","selectedSubject","subjects","subject","_hoisted_15","_hoisted_14","_hoisted_16","_hoisted_17","_hoisted_18","selectedStartDate","max","today","_hoisted_19","_hoisted_20","selectedEndDate","_hoisted_21","onClick","applyFilters","loading","_hoisted_23","_hoisted_24","_hoisted_22","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","totalStudents","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","totalSections","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","totalSubjects","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","hasPerformanceData","_hoisted_44","averageScore","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","applyChartDateFilter","_normalizeClass","chartFilters","attendance","period","_hoisted_53","_hoisted_54","_hoisted_55","hasAttendanceData","_hoisted_56","_hoisted_57","generateChartData","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","assessmentType","_hoisted_64","_hoisted_65","_hoisted_66","hasAssessmentData","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","performanceTrend","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","_hoisted_80","_hoisted_81","_hoisted_82","_hoisted_83","_hoisted_84","_hoisted_85","assessmentTypePerformance","_hoisted_86","_hoisted_87","_hoisted_88","_hoisted_89","_hoisted_90","_hoisted_91","_hoisted_92","_hoisted_93","_hoisted_94","_hoisted_95","_hoisted_96","colspan","hasActivity","_hoisted_97","recentActivities","activity","formatDate","date","details"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('attendance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('attendance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('attendance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('attendance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAttendanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentType', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('assessmentType')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAssessmentData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('performanceTrend', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('performanceTrend')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('assessmentTypePerformance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { saveAs } from 'file-saver'\nimport * as XLSX from 'xlsx'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Chart date filter state - initialize early to avoid undefined errors\n    const chartFilters = ref({\n      attendance: { period: 'month' },\n      assessmentType: { period: 'month' },\n      performanceTrend: { period: 'month' },\n      assessmentTypePerformance: { period: 'month' }\n    });\n    \n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n            \n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n      \n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to apply date filter for a specific chart\n    const applyChartDateFilter = async (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n      \n      // Update the filter period\n      chartFilters.value[chartType].period = period;\n      \n      // Calculate date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      \n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n      \n      // Fetch and update the specific chart\n      await fetchChartData(chartType, startDate, endDate);\n    };\n    \n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          startDate,\n          endDate\n        };\n        \n        // Add filters if selected\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        \n        console.log(`Fetching ${chartType} data with params:`, params);\n        \n        let endpoint;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        const response = await axios.get(`http://localhost:8000/api/${endpoint}`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log(`${chartType} data received:`, response.data);\n        \n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n        \n        // Update the specific chart\n        switch (chartType) {\n          case 'attendance':\n            if (response.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = response.data;\n              const formattedData = {\n                attendanceDistribution: [\n                  attendanceStats.present || 0,\n                  attendanceStats.late || 0,\n                  attendanceStats.absent || 0\n                ]\n              };\n              updatePerformanceChart(formattedData);\n            }\n            break;\n          case 'assessmentType':\n            if (response.data && response.data.assessmentTypes) {\n              const assessmentData = [];\n              \n              Object.keys(response.data.assessmentTypes).forEach(type => {\n                const typeData = response.data.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  }\n                  \n                  assessmentData.push({\n                    type: type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                }\n              });\n              \n              updateAssessmentTypeChart({ assessmentData });\n            }\n            break;\n          case 'performanceTrend':\n            if (response.data) {\n              // Create performance trends data\n              const performanceTrends = Array.isArray(response.data) ? response.data\n                .filter(a => a.date) // Only include assessments with dates\n                .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n                .map(assessment => {\n                  // Calculate average score for this assessment\n                  let averageScore = 0;\n                  let scoreArray = [];\n                  \n                  if (assessment.scores) {\n                    if (Array.isArray(assessment.scores)) {\n                      scoreArray = assessment.scores;\n                    } else if (typeof assessment.scores === 'object') {\n                      scoreArray = Object.values(assessment.scores);\n                    }\n                    \n                    const validScores = scoreArray.filter(score => typeof score === 'number');\n                    if (validScores.length > 0) {\n                      const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                      averageScore = totalScore / validScores.length;\n                    }\n                  }\n                  \n                  return {\n                    date: assessment.date,\n                    score: averageScore,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  };\n                }) : [];\n              \n              updatePerformanceTrendChart(performanceTrends);\n            }\n            break;\n          case 'assessmentTypePerformance':\n            if (response.data) {\n              // Create performance trends data for assessment type performance\n              const performanceTrends = Array.isArray(response.data) ? response.data\n                .filter(a => a.date) // Only include assessments with dates\n                .map(assessment => ({\n                  date: assessment.date,\n                  score: assessment.averageScore || 0,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                })) : [];\n              \n              updateAssessmentTypePerformanceChart({\n                performanceTrends\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n      }\n    };\n    \n    // Function to generate and download chart data\n    const generateChartData = async (chartType) => {\n      try {\n        console.log(`Generating data for ${chartType} chart`);\n        \n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        \n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format attendance data for export\n            if (chartData.value[chartType]) {\n              // Use chartData instead of data\n              const stats = chartData.value[chartType];\n              dataToExport = [\n                {\n                  'Status': 'Present',\n                  'Count': stats.present || 0\n                },\n                {\n                  'Status': 'Late',\n                  'Count': stats.late || 0\n                },\n                {\n                  'Status': 'Absent',\n                  'Count': stats.absent || 0\n                }\n              ];\n            } else if (data.value?.attendanceDistribution) {\n              // Fallback to data.value if needed\n              dataToExport = [\n                {\n                  'Status': 'Present',\n                  'Count': data.value.attendanceDistribution[0] || 0\n                },\n                {\n                  'Status': 'Late',\n                  'Count': data.value.attendanceDistribution[1] || 0\n                },\n                {\n                  'Status': 'Absent',\n                  'Count': data.value.attendanceDistribution[2] || 0\n                }\n              ];\n            }\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type data for export\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format performance trend data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData\n                  .filter(assessment => assessment.date)\n                  .map(assessment => ({\n                    'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                    'Assessment': assessment.name || assessment.title || '',\n                    'Type': assessment.type || '',\n                    'Average Score': assessment.averageScore || 0\n                  }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type performance data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData\n                  .filter(assessment => assessment.date && assessment.type)\n                  .map(assessment => ({\n                    'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                    'Assessment Type': assessment.type || '',\n                    'Assessment Name': assessment.name || assessment.title || '',\n                    'Average Score': assessment.averageScore || 0\n                  }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment Type': trend.type || '',\n                'Assessment Name': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          return;\n        }\n        \n        // Create and download Excel file\n        const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n        const excelData = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        saveAs(excelData, `${fileName}.xlsx`);\n        \n        console.log(`Data exported for ${chartType}`);\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n      }\n    };\n\n    // Enhanced fetchDashboardData function\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = \n          (response.data.totalStudents > 0) || \n          (response.data.totalSections > 0) || \n          (Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0)) ||\n          (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [\n                attendanceStats.present || 0,\n                attendanceStats.late || 0,\n                attendanceStats.absent || 0\n              ];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Fetch assessment data separately\n        await fetchAssessmentData();\n        \n        // After updating the charts, apply the default filter (month) to each chart\n        // This ensures the charts' data is consistent with the filter state\n        const endDate = moment().format('YYYY-MM-DD');\n        const startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        \n        await Promise.all([\n          fetchChartData('attendance', startDate, endDate),\n          fetchChartData('assessmentType', startDate, endDate),\n          fetchChartData('performanceTrend', startDate, endDate),\n          fetchChartData('assessmentTypePerformance', startDate, endDate)\n        ]);\n        \n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n      \n      // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n      \n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n      \n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      \n      console.log('Processed assessment chart data:', processedData);\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: processedData.scores,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ].slice(0, processedData.types.length),\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ].slice(0, processedData.types.length),\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        \n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching assessment data with params:', params);\n        \n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({ assessmentData: [] });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = (data) => {\n      if (data) {\n        console.log('Assessment data received:', data);\n        \n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          \n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Activity': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Performance Task': { count: 0, totalScore: 0, scoreCount: 0 }\n          };\n          \n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n              \n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n          \n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 \n              ? (typeData.totalScore / typeData.scoreCount).toFixed(1) \n              : 0;\n            \n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n          \n          // Create performance trends data\n          const performanceTrends = data\n            .filter(a => a.date) // Only include assessments with dates\n            .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n            .map(assessment => {\n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: assessment.date,\n                score: averageScore,\n                name: assessment.name || assessment.title || assessment.type,\n                type: assessment.type\n              };\n            });\n          \n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initEmptyCharts();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n      \n      // Add default chart filter periods\n      Object.keys(chartFilters.value).forEach(chartType => {\n        chartFilters.value[chartType].period = 'month';\n      });\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Chart Filters */\n.chart-filters {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n\n.date-filter-group {\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.date-filter-group .btn {\n  border-radius: 0;\n  font-size: 0.8rem;\n  padding: 0.3rem 0.75rem;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  background-color: white;\n  transition: all 0.2s ease;\n}\n\n.date-filter-group .btn:first-child {\n  border-radius: 8px 0 0 8px;\n}\n\n.date-filter-group .btn:last-child {\n  border-radius: 0 8px 8px 0;\n}\n\n.date-filter-group .btn.btn-primary {\n  background-color: #003366;\n  color: white;\n  border-color: #003366;\n}\n\n.date-filter-group .btn.btn-outline-primary:hover {\n  background-color: #f8fafc;\n  color: #003366;\n  border-color: #003366;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
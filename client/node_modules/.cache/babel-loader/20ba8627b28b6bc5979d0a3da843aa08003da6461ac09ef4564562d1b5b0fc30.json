{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      try {\n        if (data.value && data.value.attendanceDistribution) {\n          // Check if we have an array and if any value is > 0\n          const distribution = data.value.attendanceDistribution;\n          if (Array.isArray(distribution) && distribution.length > 0) {\n            return distribution.some(val => {\n              const numVal = Number(val);\n              return !isNaN(numVal) && numVal > 0;\n            });\n          }\n        }\n\n        // Also check chartData as a fallback\n        if (chartData.value && chartData.value.attendance) {\n          const attendance = chartData.value.attendance;\n          return !!(Number(attendance.present) > 0 || Number(attendance.late) > 0 || Number(attendance.absent) > 0);\n        }\n        return false;\n      } catch (err) {\n        console.error('Error in hasAttendanceData:', err);\n        return false;\n      }\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n\n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n\n          // Save available years\n          availableYears.value = uniqueYears.sort();\n\n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n\n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n\n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n\n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n\n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch data for a specific chart\n    const fetchChartData = async chartType => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare query parameters with URLSearchParams to ensure proper encoding\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n\n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        console.log(`Fetching ${chartType} data with params:`, Object.fromEntries(params));\n        let endpoint;\n        let url;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        url = `http://localhost:8000/api/${endpoint}?${params.toString()}`;\n        console.log(`Requesting URL: ${url}`);\n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log(`${chartType} data received:`, response.data);\n\n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n\n        // Update the specific chart\n        switch (chartType) {\n          case 'attendance':\n            if (response.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = response.data;\n\n              // Ensure we have numbers for the chart\n              const present = parseInt(attendanceStats.present) || 0;\n              const late = parseInt(attendanceStats.late) || 0;\n              const absent = parseInt(attendanceStats.absent) || 0;\n              console.log('Attendance stats for chart:', {\n                present,\n                late,\n                absent\n              });\n              const formattedData = {\n                attendanceDistribution: [present, late, absent]\n              };\n\n              // Update the attendance data in our main data store too\n              if (data.value) {\n                data.value.attendanceDistribution = formattedData.attendanceDistribution;\n              }\n              updatePerformanceChart(formattedData);\n            }\n            break;\n          case 'assessmentType':\n            if (response.data && response.data.assessmentTypes) {\n              const assessmentData = [];\n              Object.keys(response.data.assessmentTypes).forEach(type => {\n                const typeData = response.data.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  }\n                  assessmentData.push({\n                    type: type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                }\n              });\n              updateAssessmentTypeChart({\n                assessmentData\n              });\n            } else if (Array.isArray(response.data)) {\n              // Handle array response format\n              const assessmentTypes = {};\n              response.data.forEach(assessment => {\n                const type = assessment.type || 'Other';\n                if (!assessmentTypes[type]) {\n                  assessmentTypes[type] = {\n                    count: 0,\n                    totalScore: 0,\n                    scoreCount: 0\n                  };\n                }\n                assessmentTypes[type].count++;\n                if (assessment.scores) {\n                  let scores = Array.isArray(assessment.scores) ? assessment.scores : Object.values(assessment.scores);\n                  scores.forEach(score => {\n                    if (typeof score === 'number') {\n                      assessmentTypes[type].totalScore += score;\n                      assessmentTypes[type].scoreCount++;\n                    }\n                  });\n                }\n              });\n              const assessmentData = Object.entries(assessmentTypes).map(([type, data]) => ({\n                type,\n                averageScore: data.scoreCount > 0 ? (data.totalScore / data.scoreCount).toFixed(1) : 0,\n                count: data.count\n              }));\n              updateAssessmentTypeChart({\n                assessmentData\n              });\n            }\n            break;\n          case 'performanceTrend':\n            if (Array.isArray(response.data)) {\n              const performanceTrends = response.data.filter(a => a.date).sort((a, b) => new Date(a.date) - new Date(b.date)).map(assessment => {\n                let averageScore = 0;\n                if (assessment.scores) {\n                  const scores = Array.isArray(assessment.scores) ? assessment.scores : Object.values(assessment.scores);\n                  const validScores = scores.filter(score => typeof score === 'number');\n                  if (validScores.length > 0) {\n                    averageScore = validScores.reduce((sum, score) => sum + score, 0) / validScores.length;\n                  }\n                }\n                return {\n                  date: assessment.date,\n                  score: assessment.averageScore || averageScore,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                };\n              });\n              updatePerformanceTrendChart(performanceTrends);\n            }\n            break;\n          case 'assessmentTypePerformance':\n            if (Array.isArray(response.data)) {\n              const performanceTrends = response.data.filter(a => a.date && a.type).sort((a, b) => new Date(a.date) - new Date(b.date)).map(assessment => {\n                let averageScore = 0;\n                if (assessment.scores) {\n                  const scores = Array.isArray(assessment.scores) ? assessment.scores : Object.values(assessment.scores);\n                  const validScores = scores.filter(score => typeof score === 'number');\n                  if (validScores.length > 0) {\n                    averageScore = validScores.reduce((sum, score) => sum + score, 0) / validScores.length;\n                  }\n                }\n                return {\n                  date: assessment.date,\n                  score: assessment.averageScore || averageScore,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                };\n              });\n              updateAssessmentTypePerformanceChart({\n                performanceTrends\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n        // Initialize with empty data on error\n        switch (chartType) {\n          case 'attendance':\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n            break;\n          case 'assessmentType':\n            updateAssessmentTypeChart({\n              assessmentData: []\n            });\n            break;\n          case 'performanceTrend':\n            updatePerformanceTrendChart([]);\n            break;\n          case 'assessmentTypePerformance':\n            updateAssessmentTypePerformanceChart({\n              performanceTrends: []\n            });\n            break;\n        }\n      }\n    };\n\n    // Function to generate and download chart data\n    const generateChartData = async chartType => {\n      try {\n        console.log(`Generating Excel for ${chartType} chart`);\n\n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n\n            // Improved attendance data extraction with explicit type conversion\n            let present = 0,\n              late = 0,\n              absent = 0;\n\n            // Try multiple data sources\n            if (chartData.value[chartType]) {\n              present = Number(chartData.value[chartType].present || 0);\n              late = Number(chartData.value[chartType].late || 0);\n              absent = Number(chartData.value[chartType].absent || 0);\n            } else if (data.value?.attendanceDistribution && Array.isArray(data.value.attendanceDistribution)) {\n              present = Number(data.value.attendanceDistribution[0] || 0);\n              late = Number(data.value.attendanceDistribution[1] || 0);\n              absent = Number(data.value.attendanceDistribution[2] || 0);\n            }\n            console.log('Attendance data for export (processed):', {\n              present,\n              late,\n              absent\n            });\n\n            // Create export data with explicit typing\n            dataToExport = [{\n              'Status': 'Present',\n              'Count': present\n            }, {\n              'Status': 'Late',\n              'Count': late\n            }, {\n              'Status': 'Absent',\n              'Count': absent\n            }];\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n\n            // Format assessment type data for export - improve data extraction\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  const avgScore = typeData.averageScore || (typeData.scoreCount > 0 ? (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0);\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': avgScore,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  } else if (typeData.averageScore) {\n                    avgScore = typeData.averageScore;\n                  }\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': avgScore,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n\n            // If still no data, look at chart data directly\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(assessmentTypeChart.value);\n                if (chart && chart.data?.datasets?.[0]?.data) {\n                  const labels = chart.data.labels || [];\n                  const scores = chart.data.datasets[0].data || [];\n                  labels.forEach((type, index) => {\n                    if (type && scores[index] !== undefined) {\n                      dataToExport.push({\n                        'Assessment Type': type,\n                        'Average Score': scores[index] || 0,\n                        'Count': 'N/A' // We don't have this information from the chart\n                      });\n                    }\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n\n            // Format performance trend data for export - improve data extraction\n            if (Array.isArray(chartData.value[chartType])) {\n              // Use raw assessment data\n              dataToExport = chartData.value[chartType].filter(assessment => assessment.date).map(assessment => ({\n                'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                'Assessment': assessment.name || assessment.title || '',\n                'Type': assessment.type || '',\n                'Average Score': assessment.averageScore || assessment.score || 0\n              }));\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n\n            // If still no data, extract from chart\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(performanceTrendChart.value);\n                if (chart && chart.data?.datasets?.[0]?.data) {\n                  const labels = chart.data.labels || [];\n                  const scores = chart.data.datasets[0].data || [];\n                  labels.forEach((date, index) => {\n                    if (date && scores[index] !== undefined) {\n                      dataToExport.push({\n                        'Date': date,\n                        'Assessment': 'Assessment ' + (index + 1),\n                        'Average Score': scores[index] || 0\n                      });\n                    }\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n\n            // Format assessment type performance data for export - improve data extraction\n            if (Array.isArray(chartData.value[chartType])) {\n              // Use chartData's raw assessment data\n              dataToExport = chartData.value[chartType].filter(assessment => assessment.date && assessment.type).map(assessment => ({\n                'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                'Assessment Type': assessment.type || '',\n                'Assessment Name': assessment.name || assessment.title || '',\n                'Average Score': assessment.averageScore || assessment.score || 0\n              }));\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value\n              dataToExport = data.value.performanceTrends.filter(trend => trend.type).map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment Type': trend.type || '',\n                'Assessment Name': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n\n            // If still no data, extract from chart\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(assessmentTypePerformanceChart.value);\n                if (chart && chart.data?.datasets) {\n                  const labels = chart.data.labels || [];\n                  const datasets = chart.data.datasets || [];\n                  datasets.forEach(dataset => {\n                    const type = dataset.label || 'Unknown';\n                    const data = dataset.data || [];\n                    labels.forEach((date, index) => {\n                      if (date && data[index] !== null && data[index] !== undefined) {\n                        dataToExport.push({\n                          'Date': date,\n                          'Assessment Type': type,\n                          'Assessment Name': 'Assessment ' + (index + 1),\n                          'Average Score': data[index] || 0\n                        });\n                      }\n                    });\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n\n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          alert('No data available to generate report');\n          return;\n        }\n\n        // Log the exact structure of data being exported\n        console.log('Data being exported:', JSON.stringify(dataToExport));\n\n        // Create and download Excel file only\n        const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n        const excelBuffer = XLSX.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        const excelData = new Blob([excelBuffer], {\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        saveAs(excelData, `${fileName}.xlsx`);\n        console.log(`Data export completed for ${chartType}`);\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating report: ${error.message || 'Unknown error'}`);\n      }\n    };\n\n    // Update fetchDashboardData to fetch all chart data with date filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n\n        // Prepare query parameters with URLSearchParams for consistency\n        const params = new URLSearchParams();\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        console.log('Fetching dashboard data with params:', Object.fromEntries(params));\n\n        // Fetch dashboard stats\n        const url = `http://localhost:8000/api/dashboard/teacher/${teacherId}/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n\n        // Store complete data for reference\n        data.value = response.data;\n\n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n\n        // Update class average score\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n        } else {\n          averageScore.value = '0.0';\n        }\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // Fetch all chart data with the current filters\n        await Promise.all([fetchChartData('attendance'), fetchChartData('assessmentType'), fetchChartData('performanceTrend'), fetchChartData('assessmentTypePerformance')]);\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initEmptyCharts();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      generateChartData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","saveAs","XLSX","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","chartData","attendance","assessmentType","performanceTrend","assessmentTypePerformance","availableYears","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","data","value","attendanceDistribution","distribution","Array","isArray","length","some","val","numVal","Number","isNaN","present","late","absent","err","hasPerformanceData","performanceTrends","assessmentTypes","Object","values","type","count","hasAssessmentData","assessmentTypeDistribution","hasActivity","loading","userName","firstName","lastName","trim","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueYears","Set","map","record","filter","Boolean","sort","filteredRecords","section","subject","uniqueSections","uniqueSubjects","warn","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initEmptyCharts","updatePerformanceChart","updateAssessmentTypeChart","assessmentData","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","fetchChartData","chartType","URLSearchParams","append","fromEntries","endpoint","url","Error","toString","response","attendanceStats","parseInt","formattedData","keys","forEach","typeData","avgScore","scoreCount","totalScore","toFixed","assessment","scores","score","entries","a","date","b","Date","validScores","reduce","sum","title","generateChartData","dataToExport","fileName","chart","getChart","datasets","labels","index","undefined","chartErr","trend","dataset","label","alert","JSON","stringify","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","excelData","Blob","message","hasOwnProperty","scoreValue","parseFloat","Promise","all","formatDate","applyFilters","setItem","removeItem","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"selectedEndDate || today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :min=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('attendance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAttendanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('assessmentType')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAssessmentData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('performanceTrend')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"generateChartData('assessmentTypePerformance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { saveAs } from 'file-saver'\nimport * as XLSX from 'xlsx'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      try {\n      if (data.value && data.value.attendanceDistribution) {\n          // Check if we have an array and if any value is > 0\n          const distribution = data.value.attendanceDistribution;\n          if (Array.isArray(distribution) && distribution.length > 0) {\n            return distribution.some(val => {\n              const numVal = Number(val);\n              return !isNaN(numVal) && numVal > 0;\n            });\n          }\n        }\n        \n        // Also check chartData as a fallback\n        if (chartData.value && chartData.value.attendance) {\n          const attendance = chartData.value.attendance;\n          return !!(\n            (Number(attendance.present) > 0) || \n            (Number(attendance.late) > 0) || \n            (Number(attendance.absent) > 0)\n          );\n        }\n        \n      return false;\n      } catch (err) {\n        console.error('Error in hasAttendanceData:', err);\n        return false;\n      }\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n            \n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n      \n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters with URLSearchParams to ensure proper encoding\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        \n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        \n        console.log(`Fetching ${chartType} data with params:`, Object.fromEntries(params));\n        \n        let endpoint;\n        let url;\n        \n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        url = `http://localhost:8000/api/${endpoint}?${params.toString()}`;\n        console.log(`Requesting URL: ${url}`);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log(`${chartType} data received:`, response.data);\n        \n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n        \n        // Update the specific chart\n        switch (chartType) {\n          case 'attendance':\n            if (response.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = response.data;\n              \n              // Ensure we have numbers for the chart\n              const present = parseInt(attendanceStats.present) || 0;\n              const late = parseInt(attendanceStats.late) || 0;\n              const absent = parseInt(attendanceStats.absent) || 0;\n              \n              console.log('Attendance stats for chart:', { present, late, absent });\n              \n              const formattedData = {\n                attendanceDistribution: [present, late, absent]\n              };\n              \n              // Update the attendance data in our main data store too\n              if (data.value) {\n                data.value.attendanceDistribution = formattedData.attendanceDistribution;\n              }\n              \n              updatePerformanceChart(formattedData);\n            }\n            break;\n          case 'assessmentType':\n            if (response.data && response.data.assessmentTypes) {\n              const assessmentData = [];\n              \n              Object.keys(response.data.assessmentTypes).forEach(type => {\n                const typeData = response.data.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  }\n                  \n                  assessmentData.push({\n                    type: type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                }\n              });\n              \n              updateAssessmentTypeChart({ assessmentData });\n            } else if (Array.isArray(response.data)) {\n              // Handle array response format\n              const assessmentTypes = {};\n              \n              response.data.forEach(assessment => {\n                const type = assessment.type || 'Other';\n                if (!assessmentTypes[type]) {\n                  assessmentTypes[type] = {\n                    count: 0,\n                    totalScore: 0,\n                    scoreCount: 0\n                  };\n                }\n                \n                assessmentTypes[type].count++;\n                \n                if (assessment.scores) {\n                  let scores = Array.isArray(assessment.scores) ? \n                    assessment.scores : \n                    Object.values(assessment.scores);\n                  \n                  scores.forEach(score => {\n                    if (typeof score === 'number') {\n                      assessmentTypes[type].totalScore += score;\n                      assessmentTypes[type].scoreCount++;\n                    }\n                  });\n                }\n              });\n              \n              const assessmentData = Object.entries(assessmentTypes).map(([type, data]) => ({\n                type,\n                averageScore: data.scoreCount > 0 ? (data.totalScore / data.scoreCount).toFixed(1) : 0,\n                count: data.count\n              }));\n              \n              updateAssessmentTypeChart({ assessmentData });\n            }\n            break;\n          case 'performanceTrend':\n            if (Array.isArray(response.data)) {\n              const performanceTrends = response.data\n                .filter(a => a.date)\n                .sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(assessment => {\n                  let averageScore = 0;\n                  if (assessment.scores) {\n                    const scores = Array.isArray(assessment.scores) ? \n                      assessment.scores : \n                      Object.values(assessment.scores);\n                    \n                    const validScores = scores.filter(score => typeof score === 'number');\n                    if (validScores.length > 0) {\n                      averageScore = validScores.reduce((sum, score) => sum + score, 0) / validScores.length;\n                    }\n                  }\n                  \n                  return {\n                    date: assessment.date,\n                    score: assessment.averageScore || averageScore,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  };\n                });\n              \n              updatePerformanceTrendChart(performanceTrends);\n            }\n            break;\n          case 'assessmentTypePerformance':\n            if (Array.isArray(response.data)) {\n              const performanceTrends = response.data\n                .filter(a => a.date && a.type)\n                .sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(assessment => {\n                  let averageScore = 0;\n                  if (assessment.scores) {\n                    const scores = Array.isArray(assessment.scores) ? \n                      assessment.scores : \n                      Object.values(assessment.scores);\n                    \n                    const validScores = scores.filter(score => typeof score === 'number');\n                    if (validScores.length > 0) {\n                      averageScore = validScores.reduce((sum, score) => sum + score, 0) / validScores.length;\n                    }\n                  }\n                  \n                  return {\n                    date: assessment.date,\n                    score: assessment.averageScore || averageScore,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  };\n                });\n              \n              updateAssessmentTypePerformanceChart({\n                performanceTrends\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n        // Initialize with empty data on error\n        switch (chartType) {\n          case 'attendance':\n            updatePerformanceChart({ attendanceDistribution: [0, 0, 0] });\n            break;\n          case 'assessmentType':\n            updateAssessmentTypeChart({ assessmentData: [] });\n            break;\n          case 'performanceTrend':\n            updatePerformanceTrendChart([]);\n            break;\n          case 'assessmentTypePerformance':\n            updateAssessmentTypePerformanceChart({ performanceTrends: [] });\n            break;\n        }\n      }\n    };\n    \n    // Function to generate and download chart data\n    const generateChartData = async (chartType) => {\n      try {\n        console.log(`Generating Excel for ${chartType} chart`);\n        \n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        \n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n            \n            // Improved attendance data extraction with explicit type conversion\n            let present = 0, late = 0, absent = 0;\n            \n            // Try multiple data sources\n            if (chartData.value[chartType]) {\n              present = Number(chartData.value[chartType].present || 0);\n              late = Number(chartData.value[chartType].late || 0);\n              absent = Number(chartData.value[chartType].absent || 0);\n            } else if (data.value?.attendanceDistribution && Array.isArray(data.value.attendanceDistribution)) {\n              present = Number(data.value.attendanceDistribution[0] || 0);\n              late = Number(data.value.attendanceDistribution[1] || 0);\n              absent = Number(data.value.attendanceDistribution[2] || 0);\n            }\n            \n            console.log('Attendance data for export (processed):', { present, late, absent });\n            \n            // Create export data with explicit typing\n            dataToExport = [\n              {\n                'Status': 'Present',\n                'Count': present\n              },\n              {\n                'Status': 'Late',\n                'Count': late\n              },\n              {\n                'Status': 'Absent',\n                'Count': absent\n              }\n            ];\n            break;\n            \n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type data for export - improve data extraction\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  const avgScore = typeData.averageScore || \n                                  (typeData.scoreCount > 0 ? \n                                    (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0);\n                            \n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': avgScore,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  } else if (typeData.averageScore) {\n                    avgScore = typeData.averageScore;\n                  }\n                  \n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': avgScore,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            \n            // If still no data, look at chart data directly\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(assessmentTypeChart.value);\n                if (chart && chart.data?.datasets?.[0]?.data) {\n                  const labels = chart.data.labels || [];\n                  const scores = chart.data.datasets[0].data || [];\n                  \n                  labels.forEach((type, index) => {\n                    if (type && scores[index] !== undefined) {\n                      dataToExport.push({\n                        'Assessment Type': type,\n                        'Average Score': scores[index] || 0,\n                        'Count': 'N/A' // We don't have this information from the chart\n                      });\n                    }\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n            \n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format performance trend data for export - improve data extraction\n            if (Array.isArray(chartData.value[chartType])) {\n              // Use raw assessment data\n              dataToExport = chartData.value[chartType]\n                .filter(assessment => assessment.date)\n                .map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment': assessment.name || assessment.title || '',\n                  'Type': assessment.type || '',\n                  'Average Score': assessment.averageScore || assessment.score || 0\n                }));\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            \n            // If still no data, extract from chart\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(performanceTrendChart.value);\n                if (chart && chart.data?.datasets?.[0]?.data) {\n                  const labels = chart.data.labels || [];\n                  const scores = chart.data.datasets[0].data || [];\n                  \n                  labels.forEach((date, index) => {\n                    if (date && scores[index] !== undefined) {\n                      dataToExport.push({\n                        'Date': date,\n                        'Assessment': 'Assessment ' + (index + 1),\n                        'Average Score': scores[index] || 0\n                      });\n                    }\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n            \n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type performance data for export - improve data extraction\n            if (Array.isArray(chartData.value[chartType])) {\n              // Use chartData's raw assessment data\n              dataToExport = chartData.value[chartType]\n                .filter(assessment => assessment.date && assessment.type)\n                .map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment Type': assessment.type || '',\n                  'Assessment Name': assessment.name || assessment.title || '',\n                  'Average Score': assessment.averageScore || assessment.score || 0\n                }));\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value\n              dataToExport = data.value.performanceTrends\n                .filter(trend => trend.type)\n                .map(trend => ({\n                  'Date': moment(trend.date).format('YYYY-MM-DD'),\n                  'Assessment Type': trend.type || '',\n                  'Assessment Name': trend.name || trend.title || '',\n                  'Average Score': trend.score || trend.averageScore || 0\n                }));\n            }\n            \n            // If still no data, extract from chart\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(assessmentTypePerformanceChart.value);\n                if (chart && chart.data?.datasets) {\n                  const labels = chart.data.labels || [];\n                  const datasets = chart.data.datasets || [];\n                  \n                  datasets.forEach(dataset => {\n                    const type = dataset.label || 'Unknown';\n                    const data = dataset.data || [];\n                    \n                    labels.forEach((date, index) => {\n                      if (date && data[index] !== null && data[index] !== undefined) {\n                        dataToExport.push({\n                          'Date': date,\n                          'Assessment Type': type,\n                          'Assessment Name': 'Assessment ' + (index + 1),\n                          'Average Score': data[index] || 0\n                        });\n                      }\n                    });\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n            \n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          alert('No data available to generate report');\n          return;\n        }\n        \n        // Log the exact structure of data being exported\n        console.log('Data being exported:', JSON.stringify(dataToExport));\n        \n        // Create and download Excel file only\n        const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n        const excelData = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        saveAs(excelData, `${fileName}.xlsx`);\n        \n        console.log(`Data export completed for ${chartType}`);\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating report: ${error.message || 'Unknown error'}`);\n      }\n    };\n\n    // Update fetchDashboardData to fetch all chart data with date filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters with URLSearchParams for consistency\n        const params = new URLSearchParams();\n        \n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        \n        console.log('Fetching dashboard data with params:', Object.fromEntries(params));\n        \n        // Fetch dashboard stats\n        const url = `http://localhost:8000/api/dashboard/teacher/${teacherId}/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Update class average score\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Fetch all chart data with the current filters\n        await Promise.all([\n          fetchChartData('attendance'),\n          fetchChartData('assessmentType'),\n          fetchChartData('performanceTrend'),\n          fetchChartData('assessmentTypePerformance')\n        ]);\n        \n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initEmptyCharts();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      generateChartData\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Chart Filters */\n.chart-filters {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n\n.date-filter-group {\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.date-filter-group .btn {\n  border-radius: 0;\n  font-size: 0.8rem;\n  padding: 0.3rem 0.75rem;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  background-color: white;\n  transition: all 0.2s ease;\n}\n\n.date-filter-group .btn:first-child {\n  border-radius: 8px 0 0 8px;\n}\n\n.date-filter-group .btn:last-child {\n  border-radius: 0 8px 8px 0;\n}\n\n.date-filter-group .btn.btn-primary {\n  background-color: #003366;\n  color: white;\n  border-color: #003366;\n}\n\n.date-filter-group .btn.btn-outline-primary:hover {\n  background-color: #f8fafc;\n  color: #003366;\n  border-color: #003366;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
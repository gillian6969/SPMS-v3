{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport axios from 'axios';\nimport VueRecaptcha from 'vue-recaptcha';\nexport default {\n  name: 'Login',\n  components: {\n    VueRecaptcha\n  },\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const loginType = ref('user');\n    const email = ref('');\n    const password = ref('');\n    const error = ref('');\n    const isLoading = ref(false);\n    const showPassword = ref(false);\n    const recaptchaVerified = ref(false);\n    const recaptchaResponse = ref('');\n    const onCaptchaVerified = response => {\n      recaptchaVerified.value = true;\n      recaptchaResponse.value = response;\n    };\n    const onCaptchaExpired = () => {\n      recaptchaVerified.value = false;\n      recaptchaResponse.value = '';\n    };\n    const handleLogin = async () => {\n      try {\n        error.value = '';\n        isLoading.value = true;\n        if (!recaptchaVerified.value) {\n          error.value = 'Please complete the reCAPTCHA verification';\n          return;\n        }\n        const credentials = {\n          email: email.value,\n          password: password.value,\n          loginType: loginType.value,\n          recaptchaResponse: recaptchaResponse.value\n        };\n        console.log('Attempting login with:', {\n          email: credentials.email,\n          loginType: credentials.loginType,\n          timestamp: new Date().toISOString()\n        });\n        const response = await store.dispatch('login', credentials);\n        console.log('Login response received:', {\n          userRole: response.data.user?.role,\n          loginType: loginType.value,\n          timestamp: new Date().toISOString()\n        });\n        const user = response.data.user;\n\n        // Check login type before proceeding\n        if (loginType.value === 'citHead') {\n          if (user.role === 'teacher' || user.role === 'ssp') {\n            console.log('Access denied: Non-CIT Head using CIT Head login');\n            error.value = 'Access denied. Please use the Teacher/Student login.';\n            await store.dispatch('logout');\n            return;\n          }\n        }\n        if (loginType === 'user') {\n          if (user.role === 'citHead' || user.role === 'sspHead') {\n            console.log('Access denied: CIT Head using regular login');\n            error.value = 'Access denied. Please use the CIT Head login.';\n            await store.dispatch('logout');\n            return;\n          }\n        }\n        router.push('/dashboard');\n      } catch (err) {\n        console.error('Login error:', {\n          error: err,\n          response: err.response?.data,\n          status: err.response?.status,\n          timestamp: new Date().toISOString()\n        });\n        if (err.response?.status === 403) {\n          error.value = err.response.data.message || 'Access denied. Please check your login type.';\n        } else if (err.response?.status === 400) {\n          error.value = err.response.data.message || 'Invalid credentials. Please try again.';\n        } else {\n          error.value = 'Login failed. Please try again.';\n        }\n      } finally {\n        isLoading.value = false;\n        // Reset reCAPTCHA\n        if (this.$refs.recaptcha) {\n          this.$refs.recaptcha.reset();\n        }\n        recaptchaVerified.value = false;\n        recaptchaResponse.value = '';\n      }\n    };\n    const goToForgotPassword = () => {\n      showForgotPasswordModal.value = true;\n    };\n\n    // Forgot password state\n    const showForgotPasswordModal = ref(false);\n    const forgotPasswordStep = ref(1);\n    const forgotEmail = ref('');\n    const verificationCode = ref('');\n    const newPassword = ref('');\n    const confirmPassword = ref('');\n    const resetError = ref('');\n    const resetSuccess = ref('');\n    const isLoadingReset = ref(false);\n\n    // Send verification code\n    const sendVerificationCode = async () => {\n      if (!forgotEmail.value) {\n        resetError.value = 'Please enter your email address';\n        return;\n      }\n      try {\n        resetError.value = '';\n        resetSuccess.value = '';\n        isLoadingReset.value = true;\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/request-code', {\n          email: forgotEmail.value\n        });\n        resetSuccess.value = 'Verification code sent to your email';\n        forgotPasswordStep.value = 2;\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Failed to send verification code. Please try again.';\n      } finally {\n        isLoadingReset.value = false;\n      }\n    };\n\n    // Verify code\n    const verifyCode = async () => {\n      if (!verificationCode.value) {\n        resetError.value = 'Please enter verification code';\n        return;\n      }\n      try {\n        resetError.value = '';\n        resetSuccess.value = '';\n        isLoadingReset.value = true;\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/verify-code', {\n          email: forgotEmail.value,\n          code: verificationCode.value\n        });\n        resetSuccess.value = 'Code verified successfully';\n        forgotPasswordStep.value = 3;\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Invalid verification code. Please try again.';\n      } finally {\n        isLoadingReset.value = false;\n      }\n    };\n\n    // Reset password\n    const resetPassword = async () => {\n      if (!newPassword.value) {\n        resetError.value = 'Please enter new password';\n        return;\n      }\n      if (newPassword.value !== confirmPassword.value) {\n        resetError.value = 'Passwords do not match';\n        return;\n      }\n      if (newPassword.value.length < 8) {\n        resetError.value = 'Password must be at least 8 characters long';\n        return;\n      }\n      try {\n        resetError.value = '';\n        resetSuccess.value = '';\n        isLoadingReset.value = true;\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/reset-with-code', {\n          email: forgotEmail.value,\n          code: verificationCode.value,\n          password: newPassword.value\n        });\n        resetSuccess.value = 'Password reset successfully';\n        setTimeout(() => {\n          showForgotPasswordModal.value = false;\n          forgotPasswordStep.value = 1;\n          forgotEmail.value = '';\n          verificationCode.value = '';\n          newPassword.value = '';\n          confirmPassword.value = '';\n          resetError.value = '';\n          resetSuccess.value = '';\n        }, 2000);\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Failed to reset password. Please try again.';\n      } finally {\n        isLoadingReset.value = false;\n      }\n    };\n    return {\n      loginType,\n      email,\n      password,\n      error,\n      isLoading,\n      handleLogin,\n      goToForgotPassword,\n      showPassword,\n      recaptchaVerified,\n      onCaptchaVerified,\n      onCaptchaExpired,\n      // Forgot password\n      showForgotPasswordModal,\n      forgotPasswordStep,\n      forgotEmail,\n      verificationCode,\n      newPassword,\n      confirmPassword,\n      resetError,\n      resetSuccess,\n      isLoadingReset,\n      sendVerificationCode,\n      verifyCode,\n      resetPassword\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useStore","useRouter","axios","VueRecaptcha","name","components","setup","store","router","loginType","email","password","error","isLoading","showPassword","recaptchaVerified","recaptchaResponse","onCaptchaVerified","response","value","onCaptchaExpired","handleLogin","credentials","console","log","timestamp","Date","toISOString","dispatch","userRole","data","user","role","push","err","status","message","$refs","recaptcha","reset","goToForgotPassword","showForgotPasswordModal","forgotPasswordStep","forgotEmail","verificationCode","newPassword","confirmPassword","resetError","resetSuccess","isLoadingReset","sendVerificationCode","post","verifyCode","code","resetPassword","length","setTimeout"],"sources":["D:\\au_dev\\client\\src\\views\\Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <div class=\"login-card\" :data-login-type=\"loginType\">\n      <div class=\"left-section\">\n        <div class=\"content-wrapper\">\n          <div class=\"logo-container\">\n            <img src=\"@/assets/logo2.png\" alt=\"School Logo\" class=\"logo logo1\" :class=\"{ active: loginType === 'citHead' }\">\n            <img src=\"@/assets/logo2.png\" alt=\"School Logo\" class=\"logo logo2\" :class=\"{ active: loginType === 'user' }\">\n          </div>\n          <h1 class=\"school-name\">PHINMA ARAULLO UNIVERSITY</h1>\n          <p class=\"system-name\">Student Performance Monitoring System</p>\n        </div>\n      </div>\n      \n      <div class=\"right-section\" :data-login-type=\"loginType\">\n        <h2 class=\"form-title\">{{ loginType === 'citHead' ? 'CIT HEAD & SSP HEAD LOGIN' : 'TEACHER & SSP ADVISERS LOGIN' }}</h2>\n        \n        <!-- Login Type Selector -->\n        <div class=\"login-type-selector\">\n          <button \n            class=\"type-btn\" \n            :class=\"{'active': loginType === 'user'}\"\n            :data-login-type=\"loginType\"\n            @click=\"loginType = 'user'\"\n          >\n          TEACHER & SSP ADVISERS LOGIN\n          </button>\n          <button \n            class=\"type-btn\" \n            :class=\"{'active': loginType === 'citHead'}\"\n            :data-login-type=\"loginType\"\n            @click=\"loginType = 'citHead'\"\n          >\n           CIT Head & SSP Head LOGIN\n          </button>\n        </div>\n\n        <form @submit.prevent=\"handleLogin\" class=\"login-form\">\n          <div class=\"form-group\">\n            <label class=\"form-label\">Username</label>\n            <input \n              type=\"text\" \n              class=\"form-control\" \n              v-model=\"email\" \n              placeholder=\"Enter your email here\"\n              required\n              :disabled=\"isLoading\"\n            >\n          </div>\n          \n          <div class=\"form-group\">\n            <label class=\"form-label\">Password</label>\n            <div class=\"password-input\">\n              <input \n                :type=\"showPassword ? 'text' : 'password'\" \n                class=\"form-control\" \n                v-model=\"password\" \n                placeholder=\"Enter your password here\"\n                required\n                :disabled=\"isLoading\"\n              >\n              <button \n                type=\"button\" \n                class=\"toggle-password\"\n                @click=\"showPassword = !showPassword\"\n              >\n                <i :class=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\n              </button>\n            </div>\n            <div class=\"mt-3 hover:cursor-pointer\" @click=\"goToForgotPassword\">\n              <h4>Forgot Password</h4>\n            </div>\n          </div>\n\n          <!-- Replace mock reCAPTCHA with real reCAPTCHA -->\n          <div class=\"form-group recaptcha-container\">\n            <vue-recaptcha\n              ref=\"recaptcha\"\n              :sitekey=\"process.env.VUE_APP_RECAPTCHA_SITE_KEY\"\n              @verify=\"onCaptchaVerified\"\n              @expired=\"onCaptchaExpired\"\n            />\n          </div>\n\n          <button type=\"submit\" class=\"btn-login\" :data-login-type=\"loginType\" :disabled=\"isLoading || !recaptchaVerified\">\n            <span v-if=\"isLoading\" class=\"spinner\">\n              <i class=\"fas fa-spinner fa-spin\"></i>\n            </span>\n            <span v-else>Login</span>\n          </button>\n\n          <p v-if=\"error\" class=\"error-message\">{{ error }}</p>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <!-- Forgot Password Modal -->\n  <div v-if=\"showForgotPasswordModal\" class=\"modal-overlay\">\n    <div class=\"modal-container\">\n      <div class=\"modal-header\">\n        <h3 class=\"text-xl font-semibold\">Reset Password</h3>\n        <button @click=\"showForgotPasswordModal = false\" class=\"close-btn\">&times;</button>\n      </div>\n      \n      <div class=\"modal-body\">\n        <div v-if=\"forgotPasswordStep === 1\">\n          <p class=\"mb-4\">Enter your email address to receive a verification code</p>\n          <div class=\"form-group\">\n            <input \n              type=\"email\" \n              v-model=\"forgotEmail\" \n              placeholder=\"Email Address\" \n              class=\"form-control bg-white text-gray-800\"\n              required\n            >\n          </div>\n          <button \n            @click=\"sendVerificationCode\" \n            class=\"btn-primary w-full\"\n            :disabled=\"isLoadingReset\"\n          >\n            <span v-if=\"isLoadingReset\" class=\"spinner\">\n              <i class=\"fas fa-spinner fa-spin\"></i>\n            </span>\n            <span v-else>Send Verification Code</span>\n          </button>\n        </div>\n\n        <div v-if=\"forgotPasswordStep === 2\">\n          <p class=\"mb-4\">Enter the verification code sent to your email</p>\n          <div class=\"form-group\">\n            <input \n              type=\"text\" \n              v-model=\"verificationCode\" \n              placeholder=\"Verification Code\" \n              class=\"form-control bg-white text-gray-800\"\n              required\n            >\n          </div>\n          <button \n            @click=\"verifyCode\" \n            class=\"btn-primary w-full\"\n            :disabled=\"isLoadingReset\"\n          >\n            <span v-if=\"isLoadingReset\" class=\"spinner\">\n              <i class=\"fas fa-spinner fa-spin\"></i>\n            </span>\n            <span v-else>Verify Code</span>\n          </button>\n        </div>\n\n        <div v-if=\"forgotPasswordStep === 3\">\n          <p class=\"mb-4\">Set your new password</p>\n          <div class=\"form-group\">\n            <input \n              type=\"password\" \n              v-model=\"newPassword\" \n              placeholder=\"New Password\" \n              class=\"form-control bg-white text-gray-800\"\n              required\n            >\n          </div>\n          <div class=\"form-group\">\n            <input \n              type=\"password\" \n              v-model=\"confirmPassword\" \n              placeholder=\"Confirm New Password\" \n              class=\"form-control bg-white text-gray-800\"\n              required\n            >\n          </div>\n          <button \n            @click=\"resetPassword\" \n            class=\"btn-primary w-full\"\n            :disabled=\"isLoadingReset\"\n          >\n            <span v-if=\"isLoadingReset\" class=\"spinner\">\n              <i class=\"fas fa-spinner fa-spin\"></i>\n            </span>\n            <span v-else>Reset Password</span>\n          </button>\n        </div>\n\n        <p v-if=\"resetError\" class=\"error-message mt-4\">{{ resetError }}</p>\n        <p v-if=\"resetSuccess\" class=\"success-message mt-4\">{{ resetSuccess }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\nimport axios from 'axios'\nimport VueRecaptcha from 'vue-recaptcha'\n\nexport default {\n  name: 'Login',\n  components: {\n    VueRecaptcha\n  },\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n\n    const loginType = ref('user')\n    const email = ref('')\n    const password = ref('')\n    const error = ref('')\n    const isLoading = ref(false)\n    const showPassword = ref(false)\n    const recaptchaVerified = ref(false)\n    const recaptchaResponse = ref('')\n\n    const onCaptchaVerified = (response) => {\n      recaptchaVerified.value = true\n      recaptchaResponse.value = response\n    }\n\n    const onCaptchaExpired = () => {\n      recaptchaVerified.value = false\n      recaptchaResponse.value = ''\n    }\n\n    const handleLogin = async () => {\n      try {\n        error.value = '';\n        isLoading.value = true;\n\n        if (!recaptchaVerified.value) {\n          error.value = 'Please complete the reCAPTCHA verification'\n          return\n        }\n\n        const credentials = {\n          email: email.value,\n          password: password.value,\n          loginType: loginType.value,\n          recaptchaResponse: recaptchaResponse.value\n        }\n\n        console.log('Attempting login with:', { \n          email: credentials.email, \n          loginType: credentials.loginType,\n          timestamp: new Date().toISOString()\n        })\n\n        const response = await store.dispatch('login', credentials)\n        console.log('Login response received:', {\n          userRole: response.data.user?.role,\n          loginType: loginType.value,\n          timestamp: new Date().toISOString()\n        })\n        \n        const user = response.data.user\n        \n        // Check login type before proceeding\n        if(loginType.value === 'citHead'){\n          if(user.role === 'teacher' || user.role === 'ssp'){\n            console.log('Access denied: Non-CIT Head using CIT Head login')\n            error.value = 'Access denied. Please use the Teacher/Student login.'\n            await store.dispatch('logout')\n            return\n          }\n        }\n\n        if(loginType === 'user'){\n          if(user.role === 'citHead' || user.role === 'sspHead'){\n            console.log('Access denied: CIT Head using regular login')\n            error.value = 'Access denied. Please use the CIT Head login.'\n            await store.dispatch('logout')\n            return\n          }\n        }\n\n        router.push('/dashboard')\n      } catch (err) {\n        console.error('Login error:', {\n          error: err,\n          response: err.response?.data,\n          status: err.response?.status,\n          timestamp: new Date().toISOString()\n        })\n        \n        if (err.response?.status === 403) {\n          error.value = err.response.data.message || 'Access denied. Please check your login type.'\n        } else if (err.response?.status === 400) {\n          error.value = err.response.data.message || 'Invalid credentials. Please try again.'\n        } else {\n          error.value = 'Login failed. Please try again.'\n        }\n      } finally {\n        isLoading.value = false\n        // Reset reCAPTCHA\n        if (this.$refs.recaptcha) {\n          this.$refs.recaptcha.reset()\n        }\n        recaptchaVerified.value = false\n        recaptchaResponse.value = ''\n      }\n    }\n\n    const goToForgotPassword = () => {\n      showForgotPasswordModal.value = true\n    }\n\n    // Forgot password state\n    const showForgotPasswordModal = ref(false)\n    const forgotPasswordStep = ref(1)\n    const forgotEmail = ref('')\n    const verificationCode = ref('')\n    const newPassword = ref('')\n    const confirmPassword = ref('')\n    const resetError = ref('')\n    const resetSuccess = ref('')\n    const isLoadingReset = ref(false)\n    \n    // Send verification code\n    const sendVerificationCode = async () => {\n      if (!forgotEmail.value) {\n        resetError.value = 'Please enter your email address'\n        return\n      }\n      \n      try {\n        resetError.value = ''\n        resetSuccess.value = ''\n        isLoadingReset.value = true\n        \n        const response = await axios.post('http://localhost:8000/api/users/profile/password/request-code', {\n          email: forgotEmail.value\n        })\n        \n        resetSuccess.value = 'Verification code sent to your email'\n        forgotPasswordStep.value = 2\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Failed to send verification code. Please try again.'\n      } finally {\n        isLoadingReset.value = false\n      }\n    }\n    \n    // Verify code\n    const verifyCode = async () => {\n      if (!verificationCode.value) {\n        resetError.value = 'Please enter verification code'\n        return\n      }\n      \n      try {\n        resetError.value = ''\n        resetSuccess.value = ''\n        isLoadingReset.value = true\n        \n        const response = await axios.post('http://localhost:8000/api/users/profile/password/verify-code', {\n          email: forgotEmail.value,\n          code: verificationCode.value\n        })\n        \n        resetSuccess.value = 'Code verified successfully'\n        forgotPasswordStep.value = 3\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Invalid verification code. Please try again.'\n      } finally {\n        isLoadingReset.value = false\n      }\n    }\n    \n    // Reset password\n    const resetPassword = async () => {\n      if (!newPassword.value) {\n        resetError.value = 'Please enter new password'\n        return\n      }\n      \n      if (newPassword.value !== confirmPassword.value) {\n        resetError.value = 'Passwords do not match'\n        return\n      }\n      \n      if (newPassword.value.length < 8) {\n        resetError.value = 'Password must be at least 8 characters long'\n        return\n      }\n      \n      try {\n        resetError.value = ''\n        resetSuccess.value = ''\n        isLoadingReset.value = true\n        \n        const response = await axios.post('http://localhost:8000/api/users/profile/password/reset-with-code', {\n          email: forgotEmail.value,\n          code: verificationCode.value,\n          password: newPassword.value\n        })\n        \n        resetSuccess.value = 'Password reset successfully'\n        setTimeout(() => {\n          showForgotPasswordModal.value = false\n          forgotPasswordStep.value = 1\n          forgotEmail.value = ''\n          verificationCode.value = ''\n          newPassword.value = ''\n          confirmPassword.value = ''\n          resetError.value = ''\n          resetSuccess.value = ''\n        }, 2000)\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Failed to reset password. Please try again.'\n      } finally {\n        isLoadingReset.value = false\n      }\n    }\n\n    return {\n      loginType,\n      email,\n      password,\n      error,\n      isLoading,\n      handleLogin,\n      goToForgotPassword,\n      showPassword,\n      recaptchaVerified,\n      onCaptchaVerified,\n      onCaptchaExpired,\n      // Forgot password\n      showForgotPasswordModal,\n      forgotPasswordStep,\n      forgotEmail,\n      verificationCode,\n      newPassword,\n      confirmPassword,\n      resetError,\n      resetSuccess,\n      isLoadingReset,\n      sendVerificationCode,\n      verifyCode,\n      resetPassword\n    }\n  }\n}\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap');\n\n.login-container {\n  @apply min-h-screen w-screen flex items-stretch justify-end bg-gray-50 m-0 p-0 overflow-hidden fixed inset-0;\n}\n\n.login-card {\n  @apply w-screen h-full flex bg-white overflow-hidden m-0 p-0 relative;\n}\n\n.left-section {\n  @apply flex-1 p-8 flex flex-col items-center justify-center text-center bg-white m-0 relative transition-transform duration-500;\n}\n\n.content-wrapper {\n  @apply flex flex-col items-center justify-center gap-0 w-full text-center px-8;\n}\n\n.logo-container {\n  @apply relative w-[600px] h-[600px] mb-0 flex items-center justify-center;\n}\n\n.logo {\n  @apply absolute max-w-full max-h-full w-auto h-auto top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-opacity duration-700 opacity-0 object-contain;\n}\n\n.logo.active {\n  @apply opacity-100;\n}\n\n/* Logo transitions based on login type */\n.login-card[data-login-type=\"citHead\"] .logo-container .logo1 {\n  opacity: 1;\n}\n\n.login-card[data-login-type=\"citHead\"] .logo-container .logo2 {\n  opacity: 0;\n}\n\n.login-card[data-login-type=\"user\"] .logo-container .logo1 {\n  opacity: 0;\n}\n\n.login-card[data-login-type=\"user\"] .logo-container .logo2 {\n  opacity: 1;\n}\n\n.right-section {\n  @apply min-w-[500px] w-[600px] p-20 text-white flex flex-col justify-center m-0 relative transition-all duration-700;\n}\n\n/* Sliding animations */\n.login-card[data-login-type=\"citHead\"] .left-section {\n  transform: translateX(0);\n}\n\n.login-card[data-login-type=\"citHead\"] .right-section {\n  transform: translateX(0);\n  @apply bg-navy rounded-l-3xl;\n}\n\n.login-card[data-login-type=\"user\"] .left-section {\n  transform: translateX(600px);\n}\n\n.login-card[data-login-type=\"user\"] .right-section {\n  transform: translateX(calc(-100vw + 600px));\n  @apply bg-navy rounded-r-3xl;\n}\n\n.login-type-selector {\n  @apply flex gap-4 mb-8;\n}\n\n.type-btn {\n  @apply flex-1 py-3 px-4 border-2 border-white bg-transparent text-white rounded-lg cursor-pointer font-semibold transition-all duration-300;\n}\n\n.type-btn:hover:not(.active) {\n  @apply bg-white/10;\n}\n\n.type-btn.active[data-login-type=\"citHead\"],\n.type-btn.active[data-login-type=\"user\"] {\n  @apply bg-white text-navy;\n}\n\n.school-name {\n  @apply text-4xl font-bold text-navy m-0 text-center relative w-full leading-tight -mt-8;\n}\n\n.system-name {\n  @apply text-xl text-gray-800 m-0 relative w-full leading-relaxed mt-2;\n}\n\n.login-form {\n  @apply w-full;\n}\n\n.form-title {\n  @apply text-5xl font-semibold mb-8 text-white text-start -mt-16;\n}\n\n.form-group {\n  @apply mb-6;\n}\n\n.form-label {\n  @apply block mb-2 text-white text-base font-medium;\n}\n\n.form-control {\n  @apply w-full py-3 px-4 border border-white/20 rounded-lg bg-transparent text-white text-base transition-all duration-300;\n}\n\n.form-control::placeholder {\n  @apply text-white/70;\n}\n\n.form-control:focus {\n  @apply outline-none border-white ring-2 ring-white/10;\n}\n\n.btn-login {\n  @apply bg-white text-navy py-3 px-4 rounded-lg w-3/5 uppercase font-bold mt-8 border-none cursor-pointer transition-colors duration-200 block mx-auto;\n}\n\n.btn-login:hover {\n  @apply bg-gray-100;\n}\n\n.error-message {\n  @apply text-red-400 mt-4 text-center;\n}\n\n.spinner {\n  @apply inline-block mr-2;\n}\n\n.btn-login:disabled {\n  @apply opacity-70 cursor-not-allowed;\n}\n\n.form-control:disabled {\n  @apply bg-white/10 cursor-not-allowed;\n}\n\n.recaptcha-container {\n  @apply flex justify-center mt-8;\n  min-height: 78px;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .login-card {\n    @apply flex-col max-w-[400px];\n  }\n\n  .right-section {\n    @apply w-full p-8;\n  }\n\n  .left-section {\n    @apply p-8;\n  }\n\n  .logo-container {\n    @apply w-[300px] h-[300px];\n  }\n\n  .school-name {\n    @apply text-2xl;\n  }\n\n  .system-name {\n    @apply text-lg;\n  }\n\n  .form-title {\n    @apply text-3xl mb-6 -mt-10;\n  }\n\n  .login-type-selector {\n    @apply mb-6;\n  }\n\n  .form-group {\n    @apply mb-5;\n  }\n\n  .btn-login {\n    @apply w-full mt-6;\n  }\n}\n\n/* Modal Styles */\n.modal-overlay {\n  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;\n}\n\n.modal-container {\n  @apply bg-navy w-full max-w-md mx-auto rounded-lg shadow-xl overflow-hidden;\n}\n\n.modal-header {\n  @apply flex justify-between items-center p-4 bg-navy border-b border-white/20 text-white;\n}\n\n.close-btn {\n  @apply text-white text-2xl font-bold hover:text-gray-300 focus:outline-none;\n}\n\n.modal-body {\n  @apply p-6 text-white;\n}\n\n.btn-primary {\n  @apply bg-white text-navy py-3 px-4 rounded-lg font-bold border-none cursor-pointer transition-colors duration-200 text-center;\n}\n\n.btn-primary:hover {\n  @apply bg-gray-100;\n}\n\n.btn-primary:disabled {\n  @apply opacity-70 cursor-not-allowed;\n}\n\n.success-message {\n  @apply text-green-400 text-center;\n}\n\n/* Password input styles */\n.password-input {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.toggle-password {\n  position: absolute;\n  right: 1rem;\n  background: none;\n  border: none;\n  color: rgba(255, 255, 255, 0.7);\n  cursor: pointer;\n  padding: 0.25rem;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n}\n\n.toggle-password:hover {\n  color: white;\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* Remove mock reCAPTCHA styles */\n.mock-recaptcha,\n.mock-recaptcha-checkbox,\n.mock-recaptcha-logo {\n  display: none;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const sectionChart = ref(null);\n    const selectedYear = ref('');\n    const dashboardContainer = ref(null);\n    const isLoading = ref(false);\n    const lastUpdate = ref(null);\n    const autoRefreshInterval = ref(null);\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead);\n    const token = computed(() => store.state.auth.token);\n\n    // Set auth token for all requests\n    watch(token, newToken => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, {\n      immediate: true\n    });\n\n    // Dashboard stats\n    const totalStudents = ref(0);\n    const totalTeachers = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const activeSections = ref(0);\n    const data = ref(null);\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasScoreData = computed(() => {\n      return data.value?.averageScore > 0;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n        const response = await api.get('/dashboard/stats', {\n          params: {\n            year: selectedYear.value\n          }\n        });\n        data.value = response.data;\n\n        // Update stats\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        averageAttendance.value = data.value.averageAttendance || 0;\n        averageScore.value = data.value.averageScore || 0;\n        activeSections.value = data.value.activeSections || 0;\n\n        // Update charts with new data\n        if (data.value) {\n          updateCharts(data.value);\n        }\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const updateCharts = data => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateSectionChart(data);\n    };\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: [{\n          type: 'Quiz',\n          averageScore: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0\n        }]\n      });\n      updatePerformanceTrendChart([]);\n      updateSectionChart({\n        sections: []\n      });\n    };\n\n    // Attendance Distribution Chart\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Get attendance distribution or use default values\n      const attendanceData = data.attendanceDistribution || [0, 0, 0];\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for Late\n            'rgba(239, 68, 68, 0.8)' // Red for Absent\n            ],\n            borderColor: ['rgb(16, 185, 129)', 'rgb(245, 158, 11)', 'rgb(220, 38, 38)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                font: {\n                  size: 12\n                },\n                padding: 15\n              }\n            }\n          },\n          cutout: '60%',\n          layout: {\n            padding: 20\n          }\n        }\n      });\n    };\n\n    // Assessment Type Chart\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n\n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n\n          // Get the count from the first matching assessment if available\n          const firstMatch = typeAssessments[0];\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n      }\n\n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Quiz\n            'rgba(59, 130, 246, 0.8)',\n            // Blue for Activity\n            'rgba(251, 191, 36, 0.8)' // Yellow for Performance Task\n            ],\n            borderColor: ['rgb(15, 140, 80)', 'rgb(45, 110, 220)', 'rgb(220, 160, 20)'],\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    };\n\n    // Performance Trend Chart\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) return;\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Check and normalize data\n      let performanceTrends = [];\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\n        performanceTrends = data.performanceTrends.slice(0, 10); // Take last 10 assessments\n      }\n\n      // Sort by date (oldest first for chronological order)\n      performanceTrends.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Format dates and handle missing data\n      const labels = performanceTrends.map(item => {\n        const date = new Date(item.date);\n        return `${date.getMonth() + 1}/${date.getDate()}`;\n      });\n      const scoreData = performanceTrends.map(item => item.score);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: scoreData,\n            borderColor: 'rgb(59, 130, 246)',\n            backgroundColor: 'rgba(59, 130, 246, 0.1)',\n            tension: 0.3,\n            fill: true,\n            pointBackgroundColor: 'rgb(59, 130, 246)',\n            pointBorderColor: '#fff',\n            pointBorderWidth: 2,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              align: 'end',\n              labels: {\n                boxWidth: 10,\n                usePointStyle: true,\n                pointStyle: 'circle'\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  return `Score: ${context.parsed.y}%`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Section Performance Chart (Keep this chart from the original Dashboard)\n    const updateSectionChart = data => {\n      if (!sectionChart.value) return;\n      const ctx = sectionChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Check if there is section data\n      if (!data.sections || !Array.isArray(data.sections) || data.sections.length === 0) {\n        // Draw empty chart with message\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: ['No Data'],\n            datasets: [{\n              data: [0],\n              backgroundColor: 'rgba(229, 231, 235, 0.5)',\n              borderColor: 'rgb(209, 213, 219)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Process section data\n      const labels = data.sections.map(section => section.name);\n      const scoreData = data.sections.map(section => section.averageScore);\n      const attendanceData = data.sections.map(section => section.attendanceRate);\n\n      // Create multi-dataset bar chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Score',\n            data: scoreData,\n            backgroundColor: 'rgba(59, 130, 246, 0.6)',\n            borderColor: 'rgb(37, 99, 235)',\n            borderWidth: 1,\n            borderRadius: 4,\n            barPercentage: 0.6,\n            categoryPercentage: 0.7\n          }, {\n            label: 'Attendance Rate',\n            data: attendanceData,\n            backgroundColor: 'rgba(52, 211, 153, 0.6)',\n            borderColor: 'rgb(16, 185, 129)',\n            borderWidth: 1,\n            borderRadius: 4,\n            barPercentage: 0.6,\n            categoryPercentage: 0.7\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Percentage (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              align: 'end',\n              labels: {\n                boxWidth: 12,\n                usePointStyle: true,\n                pointStyle: 'circle'\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `${context.dataset.label}: ${context.parsed.y}%`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Handle year change and refresh dashboard\n    const handleYearChange = () => {\n      fetchDashboardData();\n    };\n    const refreshDashboard = () => {\n      fetchDashboardData();\n    };\n    const scrollToSection = sectionId => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    };\n\n    // Auto-refresh logic\n    const setupAutoRefresh = () => {\n      // Clear any existing interval\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n\n      // Set new interval (every 5 minutes)\n      autoRefreshInterval.value = setInterval(() => {\n        fetchDashboardData();\n      }, 5 * 60 * 1000);\n    };\n\n    // Fetch data on component mount\n    onMounted(() => {\n      fetchDashboardData();\n      setupAutoRefresh();\n\n      // Initialize with dummy data while loading\n      nextTick(() => {\n        initDummyData();\n      });\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      sectionChart,\n      selectedYear,\n      isCITHead,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      scrollToSection,\n      handleYearChange,\n      refreshDashboard\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","onUnmounted","nextTick","useStore","Chart","axios","api","create","baseURL","name","setup","store","performanceChart","assessmentTypeChart","performanceTrendChart","sectionChart","selectedYear","dashboardContainer","isLoading","lastUpdate","autoRefreshInterval","isCITHead","getters","token","state","auth","newToken","defaults","headers","common","immediate","totalStudents","totalTeachers","averageAttendance","averageScore","activeSections","data","hasAttendanceData","value","attendanceDistribution","some","val","hasScoreData","hasPerformanceData","Array","isArray","performanceTrends","length","hasAssessmentData","assessmentTypes","Object","values","type","count","assessmentTypeDistribution","hasSectionData","sections","fetchDashboardData","response","get","params","year","updateCharts","Date","error","console","updatePerformanceChart","updateAssessmentTypeChart","updatePerformanceTrendChart","updateSectionChart","initDummyData","assessmentData","ctx","getContext","existingChart","getChart","destroy","attendanceData","labels","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","font","size","padding","cutout","layout","averageScores","totalCounts","forEach","typeAssessments","filter","a","totalCount","firstMatch","totalScore","reduce","sum","parseFloat","toFixed","label","map","borderRadius","barPercentage","scales","y","beginAtZero","max","grid","color","title","display","text","weight","ticks","x","slice","sort","b","date","item","getMonth","getDate","scoreData","score","tension","fill","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","align","boxWidth","usePointStyle","pointStyle","tooltip","callbacks","context","parsed","section","attendanceRate","categoryPercentage","dataset","handleYearChange","refreshDashboard","scrollToSection","sectionId","document","getElementById","scrollIntoView","behavior","setupAutoRefresh","clearInterval","setInterval"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\r\n    <!-- Year Filter -->\r\n    <div class=\"filter-section mb-4\">\r\n      <div v-if=\"isCITHead\" class=\"d-flex gap-3 align-items-center\">\r\n        <div class=\"filter-group\">\r\n          <select class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n            <option value=\"\">All Academic Years</option>\r\n            <option value=\"1st\">1st Year</option>\r\n            <option value=\"2nd\">2nd Year</option>\r\n            <option value=\"3rd\">3rd Year</option>\r\n            <option value=\"4th\">4th Year</option>\r\n          </select>\r\n        </div>\r\n        <button class=\"btn btn-refresh\" @click=\"refreshDashboard\">\r\n          <i class=\"fas fa-sync-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Analytics Cards -->\r\n    <div id=\"analytics\" class=\"analytics-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-graduate\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalStudents }}</h3>\r\n          <p class=\"stat-label\">Total Students</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chalkboard-teacher\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalTeachers }}</h3>\r\n          <p class=\"stat-label\">Total Teachers</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-users\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ activeSections }}</h3>\r\n          <p class=\"stat-label\">Active Sections</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Stats -->\r\n    <div class=\"performance-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-clock\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</h3>\r\n          <p class=\"stat-label\">Average Attendance</p>\r\n          <p v-if=\"!hasAttendanceData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chart-line\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasScoreData\">{{ averageScore }}%</h3>\r\n          <p class=\"stat-label\">Average Score</p>\r\n          <p v-if=\"!hasScoreData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Row -->\r\n    <div class=\"charts-grid mb-4\">\r\n      <!-- Attendance Distribution Chart -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-calendar-check me-2\"></i>\r\n          Attendance Distribution\r\n        </h5>\r\n        <p class=\"chart-description\">Breakdown of student attendance patterns</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"performanceChart\"></canvas>\r\n          <p v-if=\"!hasAttendanceData && !isLoading\" class=\"no-data-message\">No attendance data available</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Assessment Type Distribution -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-tasks me-2\"></i>\r\n          Assessment Performance Analysis\r\n        </h5>\r\n        <p class=\"chart-description\">Average scores by assessment type</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"assessmentTypeChart\"></canvas>\r\n          <p v-if=\"!hasAssessmentData && !isLoading\" class=\"no-data-message\">No assessment data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Trend & Section Performance -->\r\n    <div class=\"charts-grid mb-4\">\r\n      <!-- Performance Trend Chart -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-chart-line me-2\"></i>\r\n          Performance Trends Over Time\r\n        </h5>\r\n        <p class=\"chart-description\">Department average scores across recent assessments</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"performanceTrendChart\"></canvas>\r\n          <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Section Performance -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-users me-2\"></i>\r\n          Section Performance\r\n        </h5>\r\n        <p class=\"chart-description\">Comparison of performance across different sections</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"sectionChart\"></canvas>\r\n          <p v-if=\"!hasSectionData && !isLoading\" class=\"no-data-message\">No section data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api'\r\n});\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    const performanceChart = ref(null)\r\n    const assessmentTypeChart = ref(null)\r\n    const performanceTrendChart = ref(null)\r\n    const sectionChart = ref(null)\r\n    const selectedYear = ref('')\r\n    const dashboardContainer = ref(null)\r\n    const isLoading = ref(false)\r\n    const lastUpdate = ref(null)\r\n    const autoRefreshInterval = ref(null)\r\n\r\n    // Computed properties\r\n    const isCITHead = computed(() => store.getters.isCITHead)\r\n    const token = computed(() => store.state.auth.token)\r\n\r\n    // Set auth token for all requests\r\n    watch(token, (newToken) => {\r\n      if (newToken) {\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n      }\r\n    }, { immediate: true });\r\n\r\n    // Dashboard stats\r\n    const totalStudents = ref(0)\r\n    const totalTeachers = ref(0)\r\n    const averageAttendance = ref(0)\r\n    const averageScore = ref(0)\r\n    const activeSections = ref(0)\r\n    const data = ref(null)\r\n\r\n    // Computed properties for data availability\r\n    const hasAttendanceData = computed(() => {\r\n      if (data.value && data.value.attendanceDistribution) {\r\n        return data.value.attendanceDistribution.some(val => val > 0);\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const hasScoreData = computed(() => {\r\n      return data.value?.averageScore > 0;\r\n    });\r\n\r\n    const hasPerformanceData = computed(() => {\r\n      // Check if we have any assessment or performance data\r\n      if (data.value) {\r\n        // Check for averageScore > 0\r\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\r\n          return true;\r\n        }\r\n        \r\n        // Check for performance trends\r\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const hasAssessmentData = computed(() => {\r\n      if (data.value) {\r\n        // Check directly in assessmentTypes\r\n        if (data.value.assessmentTypes) {\r\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\r\n          return assessmentTypes.some(type => type.count > 0);\r\n        }\r\n        \r\n        // Fallback to assessmentTypeDistribution\r\n        if (data.value.assessmentTypeDistribution) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const hasSectionData = computed(() => {\r\n      return data.value?.sections?.length > 0;\r\n    });\r\n\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        isLoading.value = true;\r\n        const response = await api.get('/dashboard/stats', {\r\n          params: {\r\n            year: selectedYear.value\r\n          }\r\n        });\r\n\r\n        data.value = response.data;\r\n        \r\n        // Update stats\r\n        totalStudents.value = data.value.totalStudents || 0;\r\n        totalTeachers.value = data.value.totalTeachers || 0;\r\n        averageAttendance.value = data.value.averageAttendance || 0;\r\n        averageScore.value = data.value.averageScore || 0;\r\n        activeSections.value = data.value.activeSections || 0;\r\n\r\n        // Update charts with new data\r\n        if (data.value) {\r\n          updateCharts(data.value);\r\n        }\r\n        \r\n        lastUpdate.value = new Date();\r\n      } catch (error) {\r\n        console.error('Failed to fetch dashboard data:', error);\r\n        if (error.response) {\r\n          console.error('Error response:', error.response.data);\r\n        }\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    };\r\n\r\n    const updateCharts = (data) => {\r\n      updatePerformanceChart(data);\r\n      updateAssessmentTypeChart(data);\r\n      updatePerformanceTrendChart(data);\r\n      updateSectionChart(data);\r\n    };\r\n\r\n    // Initialize dummy data for charts when no data is available\r\n    const initDummyData = () => {\r\n      updatePerformanceChart({\r\n        attendanceDistribution: [0, 0, 0]\r\n      });\r\n      \r\n      updateAssessmentTypeChart({\r\n        assessmentData: [\r\n          { type: 'Quiz', averageScore: 0 },\r\n          { type: 'Activity', averageScore: 0 },\r\n          { type: 'Performance Task', averageScore: 0 }\r\n        ]\r\n      });\r\n      \r\n      updatePerformanceTrendChart([]);\r\n      updateSectionChart({ sections: [] });\r\n    };\r\n\r\n    // Attendance Distribution Chart\r\n    const updatePerformanceChart = (data) => {\r\n      if (!performanceChart.value) return;\r\n\r\n      const ctx = performanceChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Get attendance distribution or use default values\r\n      const attendanceData = data.attendanceDistribution || [0, 0, 0];\r\n\r\n      new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Present', 'Late', 'Absent'],\r\n          datasets: [{\r\n            data: attendanceData,\r\n            backgroundColor: [\r\n              'rgba(52, 211, 153, 0.8)',  // Green for Present\r\n              'rgba(251, 191, 36, 0.8)',  // Yellow for Late\r\n              'rgba(239, 68, 68, 0.8)',   // Red for Absent\r\n            ],\r\n            borderColor: [\r\n              'rgb(16, 185, 129)',\r\n              'rgb(245, 158, 11)',\r\n              'rgb(220, 38, 38)',\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom',\r\n              labels: {\r\n                font: {\r\n                  size: 12\r\n                },\r\n                padding: 15\r\n              }\r\n            }\r\n          },\r\n          cutout: '60%',\r\n          layout: {\r\n            padding: 20\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Assessment Type Chart\r\n    const updateAssessmentTypeChart = (data) => {\r\n      if (!assessmentTypeChart.value) return;\r\n      \r\n      const ctx = assessmentTypeChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Process incoming data to restructure it\r\n      let assessmentData = {};\r\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\r\n      \r\n      // Initialize default data structure if proper data isn't available\r\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\r\n        // Sample data structure for fallback\r\n        assessmentData = {\r\n          assessmentTypes: assessmentTypes,\r\n          averageScores: {},\r\n          totalCounts: {}\r\n        };\r\n        \r\n        assessmentTypes.forEach(type => {\r\n          assessmentData.averageScores[type] = 0;\r\n          assessmentData.totalCounts[type] = 0;\r\n        });\r\n      } else {\r\n        // Process actual data\r\n        assessmentData = {\r\n          assessmentTypes: assessmentTypes,\r\n          averageScores: {},\r\n          totalCounts: {}\r\n        };\r\n        \r\n        // Calculate average scores per assessment type\r\n        assessmentTypes.forEach(type => {\r\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\r\n          const totalCount = typeAssessments.length;\r\n          \r\n          // Get the count from the first matching assessment if available\r\n          const firstMatch = typeAssessments[0];\r\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\r\n          \r\n          if (totalCount > 0) {\r\n            // Calculate average score\r\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\r\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\r\n          } else {\r\n            assessmentData.averageScores[type] = 0;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Create a simple bar chart showing average scores\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: assessmentTypes,\r\n          datasets: [\r\n            {\r\n              label: 'Average Score (%)',\r\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\r\n              backgroundColor: [\r\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\r\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\r\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\r\n              ],\r\n              borderColor: [\r\n                'rgb(15, 140, 80)',\r\n                'rgb(45, 110, 220)',\r\n                'rgb(220, 160, 20)',\r\n              ],\r\n              borderWidth: 1,\r\n              borderRadius: 6,\r\n              barPercentage: 0.6\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.05)'\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Average Score (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              },\r\n              ticks: {\r\n                font: {\r\n                  size: 12\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                display: false\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Performance Trend Chart\r\n    const updatePerformanceTrendChart = (data) => {\r\n      if (!performanceTrendChart.value) return;\r\n      \r\n      const ctx = performanceTrendChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Check and normalize data\r\n      let performanceTrends = [];\r\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\r\n        performanceTrends = data.performanceTrends.slice(0, 10);  // Take last 10 assessments\r\n      }\r\n\r\n      // Sort by date (oldest first for chronological order)\r\n      performanceTrends.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n      // Format dates and handle missing data\r\n      const labels = performanceTrends.map(item => {\r\n        const date = new Date(item.date);\r\n        return `${date.getMonth() + 1}/${date.getDate()}`;\r\n      });\r\n      \r\n      const scoreData = performanceTrends.map(item => item.score);\r\n\r\n      new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Average Score (%)',\r\n              data: scoreData,\r\n              borderColor: 'rgb(59, 130, 246)',\r\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n              tension: 0.3,\r\n              fill: true,\r\n              pointBackgroundColor: 'rgb(59, 130, 246)',\r\n              pointBorderColor: '#fff',\r\n              pointBorderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 6\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.05)'\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Score (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                display: false\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n              align: 'end',\r\n              labels: {\r\n                boxWidth: 10,\r\n                usePointStyle: true,\r\n                pointStyle: 'circle'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  return `Score: ${context.parsed.y}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Section Performance Chart (Keep this chart from the original Dashboard)\r\n    const updateSectionChart = (data) => {\r\n      if (!sectionChart.value) return;\r\n      \r\n      const ctx = sectionChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Check if there is section data\r\n      if (!data.sections || !Array.isArray(data.sections) || data.sections.length === 0) {\r\n        // Draw empty chart with message\r\n        new Chart(ctx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: ['No Data'],\r\n            datasets: [{\r\n              data: [0],\r\n              backgroundColor: 'rgba(229, 231, 235, 0.5)',\r\n              borderColor: 'rgb(209, 213, 219)',\r\n              borderWidth: 1\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                max: 100\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              }\r\n            }\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Process section data\r\n      const labels = data.sections.map(section => section.name);\r\n      const scoreData = data.sections.map(section => section.averageScore);\r\n      const attendanceData = data.sections.map(section => section.attendanceRate);\r\n      \r\n      // Create multi-dataset bar chart\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Average Score',\r\n              data: scoreData,\r\n              backgroundColor: 'rgba(59, 130, 246, 0.6)',\r\n              borderColor: 'rgb(37, 99, 235)',\r\n              borderWidth: 1,\r\n              borderRadius: 4,\r\n              barPercentage: 0.6,\r\n              categoryPercentage: 0.7\r\n            },\r\n            {\r\n              label: 'Attendance Rate',\r\n              data: attendanceData,\r\n              backgroundColor: 'rgba(52, 211, 153, 0.6)',\r\n              borderColor: 'rgb(16, 185, 129)',\r\n              borderWidth: 1,\r\n              borderRadius: 4,\r\n              barPercentage: 0.6,\r\n              categoryPercentage: 0.7\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.05)'\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Percentage (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                display: false\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n              align: 'end',\r\n              labels: {\r\n                boxWidth: 12,\r\n                usePointStyle: true,\r\n                pointStyle: 'circle'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.parsed.y}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Handle year change and refresh dashboard\r\n    const handleYearChange = () => {\r\n      fetchDashboardData();\r\n    };\r\n\r\n    const refreshDashboard = () => {\r\n      fetchDashboardData();\r\n    };\r\n\r\n    const scrollToSection = (sectionId) => {\r\n      const section = document.getElementById(sectionId);\r\n      if (section) {\r\n        section.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    };\r\n\r\n    // Auto-refresh logic\r\n    const setupAutoRefresh = () => {\r\n      // Clear any existing interval\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value);\r\n      }\r\n      \r\n      // Set new interval (every 5 minutes)\r\n      autoRefreshInterval.value = setInterval(() => {\r\n        fetchDashboardData();\r\n      }, 5 * 60 * 1000);\r\n    };\r\n\r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      fetchDashboardData();\r\n      setupAutoRefresh();\r\n      \r\n      // Initialize with dummy data while loading\r\n      nextTick(() => {\r\n        initDummyData();\r\n      });\r\n    });\r\n\r\n    // Clean up on component unmount\r\n    onUnmounted(() => {\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value);\r\n      }\r\n    });\r\n\r\n    return {\r\n      performanceChart,\r\n      assessmentTypeChart,\r\n      performanceTrendChart,\r\n      sectionChart,\r\n      selectedYear,\r\n      isCITHead,\r\n      totalStudents,\r\n      totalTeachers,\r\n      averageAttendance,\r\n      averageScore,\r\n      activeSections,\r\n      hasAttendanceData,\r\n      hasScoreData,\r\n      hasPerformanceData,\r\n      hasAssessmentData,\r\n      hasSectionData,\r\n      dashboardContainer,\r\n      isLoading,\r\n      lastUpdate,\r\n      scrollToSection,\r\n      handleYearChange,\r\n      refreshDashboard\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 1.5rem;\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n.filter-section {\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.form-select {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.5rem 2.5rem 0.5rem 1rem;\r\n  font-size: 0.95rem;\r\n  color: #2d3748;\r\n  background-color: white;\r\n  transition: all 0.2s ease;\r\n  min-width: 200px;\r\n}\r\n\r\n.form-select:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n}\r\n\r\n.btn-refresh {\r\n  background: white;\r\n  border: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-refresh:hover {\r\n  background: #f7fafc;\r\n  color: #2d3748;\r\n  border-color: #cbd5e1;\r\n}\r\n\r\n/* Analytics Grid */\r\n.analytics-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.performance-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.charts-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Stat Cards */\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  background: #f0f9ff;\r\n  color: #3b82f6;\r\n  width: 3.5rem;\r\n  height: 3.5rem;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.5rem;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  color: #1e3a8a;\r\n  margin: 0;\r\n  line-height: 1.2;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 0.875rem;\r\n  color: #64748b;\r\n  margin: 0;\r\n}\r\n\r\n/* Chart Cards */\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  height: 100%;\r\n  position: relative;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  margin-bottom: 0.5rem;\r\n  color: #1e293b;\r\n}\r\n\r\n.chart-description {\r\n  color: #64748b;\r\n  font-size: 0.875rem;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  height: 300px;\r\n  width: 100%;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n  border-radius: 12px;\r\n}\r\n\r\n.loading-overlay i {\r\n  font-size: 2rem;\r\n  color: #3b82f6;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.loading-overlay p {\r\n  font-size: 0.875rem;\r\n  color: #64748b;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #94a3b8;\r\n  font-size: 0.875rem;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  margin-top: 0.5rem;\r\n  font-size: 0.75rem;\r\n  color: #94a3b8;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 1200px) {\r\n  .charts-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .stat-card {\r\n    padding: 1.25rem;\r\n  }\r\n  \r\n  .stat-icon {\r\n    width: 3rem;\r\n    height: 3rem;\r\n    font-size: 1.25rem;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 1.5rem;\r\n  }\r\n  \r\n  .chart-card {\r\n    padding: 1.25rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
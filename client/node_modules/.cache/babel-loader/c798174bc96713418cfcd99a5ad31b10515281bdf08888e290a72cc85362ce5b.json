{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n    const selectedYear = ref('');\n    const selectedSection = ref('');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const dashboardContainer = ref(null);\n    const isLoading = ref(false);\n    const lastUpdate = ref(null);\n    const autoRefreshInterval = ref(null);\n    const sections = ref([]);\n    const subjects = ref([]);\n    const availableYears = ref([]);\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead);\n    const token = computed(() => store.state.auth.token);\n\n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n\n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, newToken => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, {\n      immediate: true\n    });\n\n    // Dashboard stats\n    const totalStudents = ref(0);\n    const totalTeachers = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const activeSections = ref(0);\n    const data = ref(null);\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasScoreData = computed(() => {\n      return data.value?.averageScore > 0;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch available years and sections directly from database records\n    const fetchAvailableFilters = async () => {\n      try {\n        isLoading.value = true;\n\n        // Get all student records to extract years and sections\n        const response = await api.get('/students', {\n          headers: {\n            'Authorization': `Bearer ${token.value}`\n          }\n        });\n        if (response.data && Array.isArray(response.data)) {\n          // Extract unique years and sections from student records\n          const students = response.data;\n\n          // Get unique years with data\n          const years = [...new Set(students.map(student => student.year))].filter(Boolean);\n          availableYears.value = years.length > 0 ? years.sort() : ['1st', '2nd', '3rd', '4th'];\n\n          // Get unique sections based on selectedYear\n          await updateSectionsForSelectedYear();\n          console.log('Fetched available filters:', {\n            years: availableYears.value,\n            sections: sections.value\n          });\n        }\n        isLoading.value = false;\n      } catch (error) {\n        console.error('Error fetching available filters:', error);\n        // Keep default years if API fails\n        availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        isLoading.value = false;\n      }\n    };\n\n    // New function to update sections based on selected year\n    const updateSectionsForSelectedYear = async () => {\n      try {\n        const params = {};\n        if (selectedYear.value) {\n          params.year = selectedYear.value;\n        }\n\n        // Get students filtered by year if selected\n        const response = await api.get('/students', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${token.value}`\n          }\n        });\n        if (response.data && Array.isArray(response.data)) {\n          const students = response.data;\n          // Get unique sections from filtered students\n          const uniqueSections = [...new Set(students.map(student => student.section))].filter(Boolean);\n\n          // Map sections to include teacher info if available\n          sections.value = uniqueSections.map(sectionName => ({\n            id: sectionName,\n            name: sectionName,\n            teacherName: '' // We could fetch teacher info in the future\n          }));\n        } else {\n          sections.value = [];\n        }\n      } catch (error) {\n        console.error('Error updating sections for year:', error);\n        sections.value = [];\n      }\n    };\n\n    // Get attendance data for the charts\n    const fetchAttendanceData = async () => {\n      try {\n        // Make a specific request for attendance data with the selected filters\n        const attendanceParams = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n          endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n        };\n        console.log('Fetching attendance with params:', attendanceParams);\n\n        // First try: Direct fetch from attendance collection\n        try {\n          console.log('Trying direct fetch from attendance collection');\n          const attendanceResponse = await api.get('/attendance', {\n            params: attendanceParams\n          });\n          if (attendanceResponse.data && Array.isArray(attendanceResponse.data) && attendanceResponse.data.length > 0) {\n            // Process raw attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n\n            attendanceResponse.data.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;else if (record.status === 'late') attendanceCounts[1]++;else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            console.log('Processed attendance from /attendance:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('Attendance API direct fetch failed:', error.message);\n        }\n\n        // Second try: Use date-range endpoint\n        try {\n          console.log('Trying date-range endpoint');\n          const dateRangeParams = {\n            ...attendanceParams\n          };\n          const attendanceResponse = await api.get('/attendance/date-range', {\n            params: dateRangeParams\n          });\n          if (attendanceResponse.data && Array.isArray(attendanceResponse.data) && attendanceResponse.data.length > 0) {\n            // Process attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n\n            attendanceResponse.data.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;else if (record.status === 'late') attendanceCounts[1]++;else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            console.log('Processed attendance from date-range:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('Attendance date-range API failed:', error.message);\n        }\n\n        // Third try: Use specific date fetch for today to get some sample data\n        try {\n          console.log('Trying specific date fetch for recent dates');\n          const today = moment().format('YYYY-MM-DD');\n          const yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD');\n\n          // Try today's attendance\n          const todayResponse = await api.get(`/attendance/date/${today}`, {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n\n          // Try yesterday's attendance if today doesn't have data\n          const yesterdayResponse = await api.get(`/attendance/date/${yesterday}`, {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n\n          // Combine both day's data\n          const combinedData = [...(Array.isArray(todayResponse.data) ? todayResponse.data : []), ...(Array.isArray(yesterdayResponse.data) ? yesterdayResponse.data : [])];\n          if (combinedData.length > 0) {\n            // Process attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n\n            combinedData.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;else if (record.status === 'late') attendanceCounts[1]++;else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            console.log('Processed attendance from specific dates:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('Specific date attendance fetch failed:', error.message);\n        }\n\n        // Fourth try: Get all attendance records without filters except year/section\n        try {\n          console.log('Trying to get all attendance records for the year/section');\n          const response = await api.get('/attendance', {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n          if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n            // Process attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n\n            response.data.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;else if (record.status === 'late') attendanceCounts[1]++;else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            console.log('Processed all attendance for year/section:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('All attendance fetch failed:', error.message);\n        }\n\n        // Final try: Use stats endpoint with minimal filtering\n        try {\n          console.log('Trying attendance stats endpoint');\n          const response = await api.get('/attendance/stats', {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n          if (response.data) {\n            const stats = response.data;\n            const distribution = [stats.present || 0, stats.late || 0, stats.absent || 0];\n            console.log('Got attendance from stats endpoint:', distribution);\n            if (distribution[0] > 0 || distribution[1] > 0 || distribution[2] > 0) {\n              return distribution;\n            }\n          }\n        } catch (error) {\n          console.log('Attendance stats API failed:', error.message);\n        }\n\n        // Return empty data if no real data available\n        console.log('No attendance data found, using empty data');\n        return [0, 0, 0];\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n        return [0, 0, 0]; // Return empty data on error\n      }\n    };\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n        console.log('Fetching dashboard data with filters:', {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        // First, attempt to get attendance data directly\n        const attendanceDistribution = await fetchAttendanceData();\n        console.log('Attendance distribution result:', attendanceDistribution);\n\n        // Now fetch the main dashboard stats\n        const statsResponse = await api.get('/dashboard/stats', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          }\n        });\n        data.value = statsResponse.data || {};\n        console.log('Dashboard stats response:', data.value);\n\n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = data.value.totalStudents > 0 || data.value.totalTeachers > 0 || data.value.activeSections > 0 || data.value.performanceTrends && data.value.performanceTrends.length > 0;\n\n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value)) {\n          console.warn('No data found for the selected filters');\n        }\n\n        // Update basic stats from the response structure in dashboard.js\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n        averageScore.value = data.value.averageScore || 0;\n\n        // Use our fetched attendance data instead of depending on the dashboard endpoint\n        data.value.attendanceDistribution = attendanceDistribution;\n\n        // Calculate average attendance from distribution\n        const totalAttendance = attendanceDistribution.reduce((a, b) => a + b, 0);\n        if (totalAttendance > 0) {\n          // Calculate percentage of present and late (not absent)\n          const presentAttendance = attendanceDistribution[0] + attendanceDistribution[1];\n          averageAttendance.value = Math.round(presentAttendance / totalAttendance * 100);\n        } else {\n          averageAttendance.value = 0;\n        }\n\n        // Process assessment data for charts\n        await fetchAssessmentData();\n\n        // Update charts with new data\n        updateCharts(data.value);\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Initialize with empty data if main stats request fails\n        data.value = {\n          totalStudents: 0,\n          totalTeachers: 0,\n          activeSections: 0,\n          attendanceDistribution: [0, 0, 0],\n          averageAttendance: 0,\n          assessmentTypes: [],\n          performanceTrends: [],\n          averageScore: 0,\n          sections: []\n        };\n        totalStudents.value = 0;\n        totalTeachers.value = 0;\n        activeSections.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n\n        // Update charts with empty data\n        updateCharts(data.value);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Fetch assessment data directly\n    const fetchAssessmentData = async () => {\n      try {\n        // Set date range for better data filtering\n        const assessmentParams = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value || moment().subtract(90, 'days').format('YYYY-MM-DD'),\n          endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n        };\n        console.log('Fetching assessment data with params:', assessmentParams);\n\n        // Directly fetch assessment data with filters\n        const assessmentResponse = await api.get('/assessments', {\n          params: assessmentParams\n        });\n        console.log('Fetched assessment data count:', assessmentResponse.data?.length || 0);\n        if (assessmentResponse.data && Array.isArray(assessmentResponse.data)) {\n          const assessments = assessmentResponse.data;\n\n          // Group assessments by type\n          const assessmentTypes = {\n            'Quiz': {\n              count: 0,\n              totalScore: 0,\n              scores: []\n            },\n            'Activity': {\n              count: 0,\n              totalScore: 0,\n              scores: []\n            },\n            'Performance Task': {\n              count: 0,\n              totalScore: 0,\n              scores: []\n            }\n          };\n\n          // Process each assessment\n          assessments.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n\n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and Map formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  // Handle object format\n                  scoreArray = Object.values(assessment.scores);\n                }\n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    const percentage = assessment.maxScore ? score / assessment.maxScore * 100 : score;\n                    assessmentTypes[type].totalScore += percentage;\n                    assessmentTypes[type].scores.push(percentage);\n                  }\n                });\n              }\n            }\n          });\n\n          // Calculate averages and prepare for chart\n          data.value.assessmentTypes = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scores.length > 0 ? typeData.totalScore / typeData.scores.length : 0;\n            return {\n              type,\n              averageScore: Math.round(averageScore),\n              count: typeData.count,\n              completionRate: typeData.count > 0 ? 100 : 0\n            };\n          });\n\n          // Generate performance trends from assessment data\n          data.value.performanceTrends = assessments.filter(a => a.date) // Only include assessments with dates\n          .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n          .map(assessment => {\n            // Calculate average score for this assessment\n            let averageScore = 0;\n            let scoreArray = [];\n\n            // Handle different score formats\n            if (assessment.scores) {\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (assessment.scores instanceof Map) {\n                scoreArray = Array.from(assessment.scores.values());\n              } else if (typeof assessment.scores === 'object') {\n                scoreArray = Object.values(assessment.scores);\n              }\n\n              // Calculate average from valid scores\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              if (validScores.length > 0) {\n                const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                averageScore = assessment.maxScore ? totalScore / validScores.length / assessment.maxScore * 100 : totalScore / validScores.length;\n              }\n            }\n            return {\n              date: assessment.date,\n              title: assessment.name || assessment.type,\n              averageScore: Math.round(averageScore),\n              type: assessment.type\n            };\n          });\n\n          // Process section data if available\n          // Group assessments by section\n          const sectionPerformance = {};\n          assessments.forEach(assessment => {\n            if (assessment.section) {\n              if (!sectionPerformance[assessment.section]) {\n                sectionPerformance[assessment.section] = {\n                  totalScore: 0,\n                  scoreCount: 0,\n                  attendanceCount: 0,\n                  attendanceTotal: 0\n                };\n              }\n\n              // Process scores\n              let scoreArray = [];\n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    const percentage = assessment.maxScore ? score / assessment.maxScore * 100 : score;\n                    sectionPerformance[assessment.section].totalScore += percentage;\n                    sectionPerformance[assessment.section].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n\n          // Try to fetch attendance by section to calculate attendance rates\n          try {\n            const sectionAttendance = await api.get('/attendance/by-section', {\n              params: {\n                year: selectedYear.value\n              }\n            });\n            if (sectionAttendance.data) {\n              Object.entries(sectionAttendance.data).forEach(([section, data]) => {\n                if (sectionPerformance[section]) {\n                  sectionPerformance[section].attendanceRate = data.presentRate || 0;\n                }\n              });\n            }\n          } catch (error) {\n            console.log('No section attendance data available');\n          }\n\n          // Prepare section data for chart\n          if (Object.keys(sectionPerformance).length > 0) {\n            data.value.sections = Object.keys(sectionPerformance).map(sectionName => {\n              const section = sectionPerformance[sectionName];\n              const averageScore = section.scoreCount > 0 ? section.totalScore / section.scoreCount : 0;\n              const attendanceRate = section.attendanceRate || 0;\n              return {\n                name: sectionName,\n                averageScore: Math.round(averageScore),\n                attendanceRate: Math.round(attendanceRate),\n                performance: Math.round(averageScore) // For backward compatibility\n              };\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Set default values\n        data.value.assessmentTypes = [{\n          type: 'Quiz',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0,\n          count: 0\n        }];\n        data.value.performanceTrends = [];\n        data.value.sections = [];\n      }\n    };\n    const updateCharts = data => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateAssessmentTypePerformanceChart(data);\n    };\n\n    // Update initEmptyCharts to properly handle chart destruction\n    const initEmptyCharts = () => {\n      // First destroy any existing charts to prevent \"Canvas is already in use\" errors\n      const charts = [performanceChart.value, assessmentTypeChart.value, performanceTrendChart.value, assessmentTypePerformanceChart.value];\n\n      // Destroy all existing charts first\n      charts.forEach(canvas => {\n        if (canvas) {\n          const ctx = canvas.getContext('2d');\n          if (ctx) {\n            const existingChart = Chart.getChart(ctx);\n            if (existingChart) {\n              existingChart.destroy();\n            }\n          }\n        }\n      });\n\n      // Create empty data structure\n      const emptyData = {\n        totalStudents: 0,\n        totalTeachers: 0,\n        activeSections: 0,\n        averageAttendance: 0,\n        averageScore: 0,\n        attendanceDistribution: [0, 0, 0],\n        assessmentTypes: [{\n          type: 'Quiz',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0,\n          count: 0\n        }],\n        performanceTrends: [],\n        sections: []\n      };\n\n      // Update charts with empty data\n      updateCharts(emptyData);\n    };\n\n    // Format date for display\n    const formatDate = date => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      if (selectedYear.value) {\n        // Update the sections based on the selected year\n        await updateSectionsForSelectedYear();\n      } else {\n        // If no year selected, get all sections\n        await fetchAvailableFilters();\n      }\n\n      // Update dashboard data with new filters\n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = async () => {\n      // Update dashboard data with new filters\n      fetchDashboardData();\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedStartDate.value = '';\n      selectedEndDate.value = '';\n\n      // Refresh available filters after clearing\n      fetchAvailableFilters().then(() => {\n        fetchDashboardData();\n      });\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value);\n      if (selectedSection.value) filters.push(selectedSection.value);\n\n      // Add date range to display if selected\n      if (selectedStartDate.value && selectedEndDate.value) {\n        const formattedStart = moment(selectedStartDate.value).format('MMM D');\n        const formattedEnd = moment(selectedEndDate.value).format('MMM D, YYYY');\n        filters.push(`${formattedStart} - ${formattedEnd}`);\n      } else if (selectedStartDate.value) {\n        filters.push(`From ${moment(selectedStartDate.value).format('MMM D, YYYY')}`);\n      } else if (selectedEndDate.value) {\n        filters.push(`Until ${moment(selectedEndDate.value).format('MMM D, YYYY')}`);\n      }\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Attendance status distribution data\n      const attendanceLabels = ['Present', 'Late', 'Absent'];\n      let attendanceData = data.attendanceDistribution || [0, 0, 0];\n\n      // Ensure we have at least some data to display\n      const totalAttendanceCount = attendanceData.reduce((a, b) => a + b, 0);\n      if (totalAttendanceCount === 0) {\n        // Use empty distribution if no real data\n        attendanceData = [0, 0, 0];\n      }\n\n      // Log for debugging\n      console.log('Final attendance distribution data:', attendanceData);\n\n      // Create chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: attendanceLabels,\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n            borderWidth: 0,\n            hoverOffset: 4\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '70%',\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                  const percentage = total > 0 ? Math.round(value / total * 100) : 0;\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Assessment types data\n      const assessmentData = data.assessmentTypes || [];\n      const labels = [];\n      const values = [];\n      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n      try {\n        // Extract assessment types data\n        if (Array.isArray(assessmentData)) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            if (item && typeof item === 'object') {\n              labels.push(item.type || `Type ${index + 1}`);\n              values.push(parseFloat(item.averageScore) || 0);\n            }\n          });\n        } else if (typeof assessmentData === 'object' && assessmentData !== null) {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            labels.push(type);\n            values.push(parseFloat(data.averageScore) || 0);\n          });\n        }\n\n        // If no data was extracted, use default types\n        if (labels.length === 0) {\n          labels.push('Quiz', 'Activity', 'Performance Task');\n          values.push(0, 0, 0);\n        }\n      } catch (error) {\n        console.error('Error processing assessment data:', error);\n        // Fallback to default labels and values\n        labels.push('Quiz', 'Activity', 'Performance Task');\n        values.push(0, 0, 0);\n      }\n\n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: values,\n            backgroundColor: colors.slice(0, labels.length),\n            borderWidth: 0,\n            borderRadius: 6,\n            maxBarThickness: 50\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `Average Score: ${context.raw}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                callback: function (value) {\n                  return value + '%';\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) return;\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) return;\n\n      // Properly destroy any existing chart\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      let trends = [];\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\n        trends = data.performanceTrends.map(trend => ({\n          date: new Date(trend.date),\n          value: parseFloat(trend.averageScore || trend.score) || 0,\n          name: trend.title || trend.name || 'Assessment'\n        })).sort((a, b) => a.date - b.date);\n      }\n\n      // Create new chart after destroying the old one\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: trends.map(trend => moment(trend.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: trends.map(trend => trend.value),\n            borderColor: 'rgb(59, 130, 246)',\n            backgroundColor: 'rgba(59, 130, 246, 0.1)',\n            borderWidth: 2,\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointBackgroundColor: 'rgb(59, 130, 246)',\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                title: tooltipItems => {\n                  if (!tooltipItems.length || !trends[tooltipItems[0].dataIndex]) return '';\n                  const trend = trends[tooltipItems[0].dataIndex];\n                  return `${moment(trend.date).format('MMM D, YYYY')} - ${trend.name}`;\n                },\n                label: context => {\n                  return `Score: ${context.raw.toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Average Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.title;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.averageScore || trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Update the refreshDashboard function to properly handle chart destruction\n    const refreshDashboard = async () => {\n      try {\n        isLoading.value = true;\n\n        // Destroy existing charts before fetching new data\n        initEmptyCharts();\n\n        // Wait a tick to ensure DOM updates\n        await nextTick();\n\n        // Fetch new data\n        await fetchDashboardData();\n\n        // Update the last refresh time\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const scrollToSection = sectionId => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    };\n\n    // Restore auto-refresh in onMounted function\n    onMounted(async () => {\n      try {\n        // Make sure DOM is rendered before initializing charts\n        await nextTick();\n\n        // Initialize with empty data while waiting for API\n        initEmptyCharts();\n\n        // Set up API interceptor to handle 404 errors gracefully\n        api.interceptors.response.use(response => response, error => {\n          if (error.response && error.response.status === 404) {\n            console.warn(`API endpoint not found: ${error.config.url}`);\n          }\n          return Promise.reject(error);\n        });\n\n        // Set auth token for API requests\n        if (store.state.auth.token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${store.state.auth.token}`;\n        }\n\n        // Fetch available years and sections with data\n        await fetchAvailableFilters();\n\n        // Fetch dashboard data\n        await fetchDashboardData();\n\n        // Set up auto-refresh\n        if (autoRefreshInterval.value) {\n          clearInterval(autoRefreshInterval.value);\n        }\n\n        // Refresh every 5 minutes, but only if tab is visible\n        autoRefreshInterval.value = setInterval(() => {\n          if (document.visibilityState === 'visible') {\n            refreshDashboard();\n          }\n        }, 5 * 60 * 1000); // 5 minutes\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n        // Make sure we still have empty charts if data loading fails\n        await nextTick();\n        initEmptyCharts();\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n\n    // Add watch for date changes\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n      }\n    });\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedYear,\n      selectedSection,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard,\n      fetchAvailableFilters,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","onUnmounted","nextTick","useStore","Chart","axios","moment","api","create","baseURL","name","setup","store","performanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","selectedYear","selectedSection","selectedStartDate","selectedEndDate","dashboardContainer","isLoading","lastUpdate","autoRefreshInterval","sections","subjects","availableYears","today","format","isCITHead","getters","token","state","auth","userName","user","firstName","lastName","trim","hasActiveFilters","Boolean","value","newToken","defaults","headers","common","immediate","totalStudents","totalTeachers","averageAttendance","averageScore","activeSections","data","hasAttendanceData","attendanceDistribution","some","val","hasScoreData","hasPerformanceData","Array","isArray","performanceTrends","length","hasAssessmentData","assessmentTypes","Object","values","type","count","assessmentTypeDistribution","hasSectionData","fetchAvailableFilters","response","get","students","years","Set","map","student","year","filter","sort","updateSectionsForSelectedYear","console","log","error","params","uniqueSections","section","sectionName","id","teacherName","fetchAttendanceData","attendanceParams","startDate","subtract","endDate","attendanceResponse","attendanceCounts","forEach","record","status","message","dateRangeParams","yesterday","todayResponse","yesterdayResponse","combinedData","stats","distribution","present","late","absent","fetchDashboardData","statsResponse","hasValidData","warn","totalAttendance","reduce","a","b","presentAttendance","Math","round","fetchAssessmentData","updateCharts","Date","assessmentParams","assessmentResponse","assessments","totalScore","scores","assessment","scoreArray","Map","from","score","percentage","maxScore","push","keys","typeData","completionRate","date","validScores","sum","title","sectionPerformance","scoreCount","attendanceCount","attendanceTotal","sectionAttendance","entries","attendanceRate","presentRate","performance","updatePerformanceChart","updateAssessmentTypeChart","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","initEmptyCharts","charts","canvas","ctx","getContext","existingChart","getChart","destroy","emptyData","formatDate","handleYearChange","handleSectionChange","handleFilterChange","clearFilters","then","getFilterDisplay","filters","formattedStart","formattedEnd","join","attendanceLabels","attendanceData","totalAttendanceCount","labels","datasets","backgroundColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","position","usePointStyle","padding","font","size","tooltip","callbacks","label","context","raw","total","chart","assessmentData","colors","item","index","parseFloat","slice","borderRadius","maxBarThickness","display","scales","y","beginAtZero","max","ticks","callback","trends","trend","borderColor","tension","fill","pointRadius","pointBackgroundColor","pointHoverRadius","tooltipItems","dataIndex","toFixed","text","x","maxRotation","minRotation","trendsByType","Quiz","Activity","allDates","flat","color","point","find","d","getTime","replace","spanGaps","interaction","intersect","mode","dataset","refreshDashboard","scrollToSection","sectionId","document","getElementById","scrollIntoView","behavior","interceptors","use","config","url","Promise","reject","clearInterval","setInterval","visibilityState","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, Dean {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Computer and Information Technology Department Dashboard</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n          </select>\n        </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" @change=\"handleSectionChange\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section.id\" :value=\"section.name\">\n                {{ section.name }}{{ section.teacherName ? ` - ${section.teacherName}` : '' }}\n              </option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"d-flex justify-content-between\">\n            <button class=\"btn btn-outline-secondary\" @click=\"clearFilters\">Clear Filters</button>\n            <button class=\"btn btn-primary\" @click=\"refreshDashboard\">Apply</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Last Updated -->\n      <div class=\"last-update-badge\" v-if=\"lastUpdate\">\n        Last updated: {{ formatDate(lastUpdate) }}\n        <button class=\"btn btn-refresh ms-2\" @click=\"refreshDashboard\" title=\"Refresh Dashboard\">\n          <i class=\"fas fa-sync-alt\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-user-graduate\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n        </div>\n      </div>\n      </div>\n\n      <!-- Total Teachers Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-chalkboard-teacher\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Teachers</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalTeachers }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n        </div>\n      </div>\n        </div>\n\n      <!-- Active Sections Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-users\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ activeSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Performance Stats -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Average Attendance Card -->\n      <div v-if=\"isCITHead\" class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-clock\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasAttendanceData\">{{ averageAttendance }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n        </div>\n      </div>\n      </div>\n      \n      <!-- Average Score Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-chart-line\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Score</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasScoreData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart -->\n      <div class=\"col-md-6 mb-4\">\n      <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns across the department</p>\n        <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n          <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !isLoading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n      <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type across the department</p>\n        <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n          <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !isLoading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n        </div>\n      </div>\n    </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Department average scores across recent assessments</p>\n      <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n      </div>\n    </div>\n\n    <!-- Section Performance -->\n      <div class=\"col-md-6 mb-4\">\n    <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n      <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n        <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\n\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n    const selectedYear = ref('')\n    const selectedSection = ref('')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const dashboardContainer = ref(null)\n    const isLoading = ref(false)\n    const lastUpdate = ref(null)\n    const autoRefreshInterval = ref(null)\n    const sections = ref([])\n    const subjects = ref([])\n    const availableYears = ref([])\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead)\n    const token = computed(() => store.state.auth.token)\n    \n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n    \n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, (newToken) => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, { immediate: true });\n\n    // Dashboard stats\n    const totalStudents = ref(0)\n    const totalTeachers = ref(0)\n    const averageAttendance = ref(0)\n    const averageScore = ref(0)\n    const activeSections = ref(0)\n    const data = ref(null)\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasScoreData = computed(() => {\n      return data.value?.averageScore > 0;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch available years and sections directly from database records\n    const fetchAvailableFilters = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Get all student records to extract years and sections\n        const response = await api.get('/students', {\n          headers: { 'Authorization': `Bearer ${token.value}` }\n        });\n        \n        if (response.data && Array.isArray(response.data)) {\n          // Extract unique years and sections from student records\n          const students = response.data;\n          \n          // Get unique years with data\n          const years = [...new Set(students.map(student => student.year))].filter(Boolean);\n          availableYears.value = years.length > 0 ? years.sort() : ['1st', '2nd', '3rd', '4th'];\n          \n          // Get unique sections based on selectedYear\n          await updateSectionsForSelectedYear();\n          \n          console.log('Fetched available filters:', {\n            years: availableYears.value,\n            sections: sections.value\n          });\n        }\n        \n        isLoading.value = false;\n      } catch (error) {\n        console.error('Error fetching available filters:', error);\n        // Keep default years if API fails\n        availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        isLoading.value = false;\n      }\n    };\n\n    // New function to update sections based on selected year\n    const updateSectionsForSelectedYear = async () => {\n      try {\n        const params = {};\n        if (selectedYear.value) {\n          params.year = selectedYear.value;\n        }\n        \n        // Get students filtered by year if selected\n        const response = await api.get('/students', {\n          params,\n          headers: { 'Authorization': `Bearer ${token.value}` }\n        });\n        \n        if (response.data && Array.isArray(response.data)) {\n          const students = response.data;\n          // Get unique sections from filtered students\n          const uniqueSections = [...new Set(students.map(student => student.section))].filter(Boolean);\n          \n          // Map sections to include teacher info if available\n          sections.value = uniqueSections.map(sectionName => ({\n            id: sectionName,\n            name: sectionName,\n            teacherName: '' // We could fetch teacher info in the future\n          }));\n        } else {\n          sections.value = [];\n        }\n      } catch (error) {\n        console.error('Error updating sections for year:', error);\n        sections.value = [];\n      }\n    };\n\n    // Get attendance data for the charts\n    const fetchAttendanceData = async () => {\n      try {\n        // Make a specific request for attendance data with the selected filters\n        const attendanceParams = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n          endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n        };\n        \n        console.log('Fetching attendance with params:', attendanceParams);\n        \n        // First try: Direct fetch from attendance collection\n        try {\n          console.log('Trying direct fetch from attendance collection');\n          const attendanceResponse = await api.get('/attendance', { \n            params: attendanceParams \n          });\n          \n          if (attendanceResponse.data && Array.isArray(attendanceResponse.data) && attendanceResponse.data.length > 0) {\n            // Process raw attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n            \n            attendanceResponse.data.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;\n              else if (record.status === 'late') attendanceCounts[1]++;\n              else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            \n            console.log('Processed attendance from /attendance:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('Attendance API direct fetch failed:', error.message);\n        }\n        \n        // Second try: Use date-range endpoint\n        try {\n          console.log('Trying date-range endpoint');\n          const dateRangeParams = { ...attendanceParams };\n          \n          const attendanceResponse = await api.get('/attendance/date-range', {\n            params: dateRangeParams\n          });\n          \n          if (attendanceResponse.data && Array.isArray(attendanceResponse.data) && attendanceResponse.data.length > 0) {\n            // Process attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n            \n            attendanceResponse.data.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;\n              else if (record.status === 'late') attendanceCounts[1]++;\n              else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            \n            console.log('Processed attendance from date-range:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('Attendance date-range API failed:', error.message);\n        }\n        \n        // Third try: Use specific date fetch for today to get some sample data\n        try {\n          console.log('Trying specific date fetch for recent dates');\n          const today = moment().format('YYYY-MM-DD');\n          const yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD');\n          \n          // Try today's attendance\n          const todayResponse = await api.get(`/attendance/date/${today}`, {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n          \n          // Try yesterday's attendance if today doesn't have data\n          const yesterdayResponse = await api.get(`/attendance/date/${yesterday}`, {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n          \n          // Combine both day's data\n          const combinedData = [\n            ...(Array.isArray(todayResponse.data) ? todayResponse.data : []),\n            ...(Array.isArray(yesterdayResponse.data) ? yesterdayResponse.data : [])\n          ];\n          \n          if (combinedData.length > 0) {\n            // Process attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n            \n            combinedData.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;\n              else if (record.status === 'late') attendanceCounts[1]++;\n              else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            \n            console.log('Processed attendance from specific dates:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('Specific date attendance fetch failed:', error.message);\n        }\n        \n        // Fourth try: Get all attendance records without filters except year/section\n        try {\n          console.log('Trying to get all attendance records for the year/section');\n          const response = await api.get('/attendance', {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n          \n          if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n            // Process attendance records\n            const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n            \n            response.data.forEach(record => {\n              if (record.status === 'present') attendanceCounts[0]++;\n              else if (record.status === 'late') attendanceCounts[1]++;\n              else if (record.status === 'absent') attendanceCounts[2]++;\n            });\n            \n            console.log('Processed all attendance for year/section:', attendanceCounts);\n            return attendanceCounts;\n          }\n        } catch (error) {\n          console.log('All attendance fetch failed:', error.message);\n        }\n        \n        // Final try: Use stats endpoint with minimal filtering\n        try {\n          console.log('Trying attendance stats endpoint');\n          const response = await api.get('/attendance/stats', {\n            params: {\n              year: selectedYear.value,\n              section: selectedSection.value\n            }\n          });\n          \n          if (response.data) {\n            const stats = response.data;\n            const distribution = [\n              stats.present || 0,\n              stats.late || 0,\n              stats.absent || 0\n            ];\n            console.log('Got attendance from stats endpoint:', distribution);\n            if (distribution[0] > 0 || distribution[1] > 0 || distribution[2] > 0) {\n              return distribution;\n            }\n          }\n        } catch (error) {\n          console.log('Attendance stats API failed:', error.message);\n        }\n        \n        // Return empty data if no real data available\n        console.log('No attendance data found, using empty data');\n        return [0, 0, 0];\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n        return [0, 0, 0]; // Return empty data on error\n      }\n    };\n\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n        console.log('Fetching dashboard data with filters:', {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n        \n        // First, attempt to get attendance data directly\n        const attendanceDistribution = await fetchAttendanceData();\n        console.log('Attendance distribution result:', attendanceDistribution);\n        \n        // Now fetch the main dashboard stats\n        const statsResponse = await api.get('/dashboard/stats', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          }\n        });\n        \n        data.value = statsResponse.data || {};\n        console.log('Dashboard stats response:', data.value);\n        \n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = \n          (data.value.totalStudents > 0) || \n          (data.value.totalTeachers > 0) || \n          (data.value.activeSections > 0) || \n          (data.value.performanceTrends && data.value.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update basic stats from the response structure in dashboard.js\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n        averageScore.value = data.value.averageScore || 0;\n        \n        // Use our fetched attendance data instead of depending on the dashboard endpoint\n        data.value.attendanceDistribution = attendanceDistribution;\n        \n        // Calculate average attendance from distribution\n        const totalAttendance = attendanceDistribution.reduce((a, b) => a + b, 0);\n        if (totalAttendance > 0) {\n          // Calculate percentage of present and late (not absent)\n          const presentAttendance = attendanceDistribution[0] + attendanceDistribution[1];\n          averageAttendance.value = Math.round((presentAttendance / totalAttendance) * 100);\n        } else {\n          averageAttendance.value = 0;\n        }\n        \n        // Process assessment data for charts\n        await fetchAssessmentData();\n\n        // Update charts with new data\n        updateCharts(data.value);\n        \n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        \n        // Initialize with empty data if main stats request fails\n        data.value = {\n          totalStudents: 0,\n          totalTeachers: 0,\n          activeSections: 0,\n          attendanceDistribution: [0, 0, 0],\n          averageAttendance: 0,\n          assessmentTypes: [],\n          performanceTrends: [],\n          averageScore: 0,\n          sections: []\n        };\n        \n        totalStudents.value = 0;\n        totalTeachers.value = 0;\n        activeSections.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n        \n        // Update charts with empty data\n        updateCharts(data.value);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    \n    // Fetch assessment data directly\n    const fetchAssessmentData = async () => {\n      try {\n        // Set date range for better data filtering\n        const assessmentParams = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value || moment().subtract(90, 'days').format('YYYY-MM-DD'),\n          endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n        };\n        \n        console.log('Fetching assessment data with params:', assessmentParams);\n        \n        // Directly fetch assessment data with filters\n        const assessmentResponse = await api.get('/assessments', {\n          params: assessmentParams\n        });\n        \n        console.log('Fetched assessment data count:', assessmentResponse.data?.length || 0);\n        \n        if (assessmentResponse.data && Array.isArray(assessmentResponse.data)) {\n          const assessments = assessmentResponse.data;\n          \n          // Group assessments by type\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scores: [] },\n            'Activity': { count: 0, totalScore: 0, scores: [] },\n            'Performance Task': { count: 0, totalScore: 0, scores: [] }\n          };\n          \n          // Process each assessment\n          assessments.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n              \n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and Map formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  // Handle object format\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    const percentage = assessment.maxScore ? (score / assessment.maxScore) * 100 : score;\n                    assessmentTypes[type].totalScore += percentage;\n                    assessmentTypes[type].scores.push(percentage);\n                  }\n                });\n              }\n            }\n          });\n          \n          // Calculate averages and prepare for chart\n          data.value.assessmentTypes = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scores.length > 0 \n              ? typeData.totalScore / typeData.scores.length \n              : 0;\n              \n            return {\n              type,\n              averageScore: Math.round(averageScore),\n              count: typeData.count,\n              completionRate: typeData.count > 0 ? 100 : 0\n            };\n          });\n          \n          // Generate performance trends from assessment data\n          data.value.performanceTrends = assessments\n            .filter(a => a.date) // Only include assessments with dates\n            .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n            .map(assessment => {\n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              // Handle different score formats\n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                // Calculate average from valid scores\n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = assessment.maxScore \n                    ? (totalScore / validScores.length / assessment.maxScore) * 100\n                    : totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: assessment.date,\n                title: assessment.name || assessment.type,\n                averageScore: Math.round(averageScore),\n                type: assessment.type\n              };\n            });\n          \n          // Process section data if available\n          // Group assessments by section\n          const sectionPerformance = {};\n          \n          assessments.forEach(assessment => {\n            if (assessment.section) {\n              if (!sectionPerformance[assessment.section]) {\n                sectionPerformance[assessment.section] = {\n                  totalScore: 0,\n                  scoreCount: 0,\n                  attendanceCount: 0,\n                  attendanceTotal: 0\n                };\n              }\n              \n              // Process scores\n              let scoreArray = [];\n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    const percentage = assessment.maxScore ? (score / assessment.maxScore) * 100 : score;\n                    sectionPerformance[assessment.section].totalScore += percentage;\n                    sectionPerformance[assessment.section].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n          \n          // Try to fetch attendance by section to calculate attendance rates\n          try {\n            const sectionAttendance = await api.get('/attendance/by-section', {\n              params: { year: selectedYear.value }\n            });\n            \n            if (sectionAttendance.data) {\n              Object.entries(sectionAttendance.data).forEach(([section, data]) => {\n                if (sectionPerformance[section]) {\n                  sectionPerformance[section].attendanceRate = data.presentRate || 0;\n                }\n              });\n            }\n          } catch (error) {\n            console.log('No section attendance data available');\n          }\n          \n          // Prepare section data for chart\n          if (Object.keys(sectionPerformance).length > 0) {\n            data.value.sections = Object.keys(sectionPerformance).map(sectionName => {\n              const section = sectionPerformance[sectionName];\n              const averageScore = section.scoreCount > 0 \n                ? section.totalScore / section.scoreCount \n                : 0;\n              const attendanceRate = section.attendanceRate || 0;\n              \n              return {\n                name: sectionName,\n                averageScore: Math.round(averageScore),\n                attendanceRate: Math.round(attendanceRate),\n                performance: Math.round(averageScore) // For backward compatibility\n              };\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Set default values\n        data.value.assessmentTypes = [\n          { type: 'Quiz', averageScore: 0, count: 0 },\n          { type: 'Activity', averageScore: 0, count: 0 },\n          { type: 'Performance Task', averageScore: 0, count: 0 }\n        ];\n        data.value.performanceTrends = [];\n        data.value.sections = [];\n      }\n    };\n\n    const updateCharts = (data) => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateAssessmentTypePerformanceChart(data);\n    };\n\n    // Update initEmptyCharts to properly handle chart destruction\n    const initEmptyCharts = () => {\n      // First destroy any existing charts to prevent \"Canvas is already in use\" errors\n      const charts = [\n        performanceChart.value, \n        assessmentTypeChart.value, \n        performanceTrendChart.value,\n        assessmentTypePerformanceChart.value\n      ];\n      \n      // Destroy all existing charts first\n      charts.forEach(canvas => {\n        if (canvas) {\n          const ctx = canvas.getContext('2d');\n          if (ctx) {\n            const existingChart = Chart.getChart(ctx);\n            if (existingChart) {\n              existingChart.destroy();\n            }\n          }\n        }\n      });\n      \n      // Create empty data structure\n      const emptyData = {\n        totalStudents: 0,\n        totalTeachers: 0,\n        activeSections: 0,\n        averageAttendance: 0,\n        averageScore: 0,\n        attendanceDistribution: [0, 0, 0],\n        assessmentTypes: [\n          { type: 'Quiz', averageScore: 0, count: 0 },\n          { type: 'Activity', averageScore: 0, count: 0 },\n          { type: 'Performance Task', averageScore: 0, count: 0 }\n        ],\n        performanceTrends: [],\n        sections: []\n      };\n      \n      // Update charts with empty data\n      updateCharts(emptyData);\n    };\n\n    // Format date for display\n    const formatDate = (date) => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      \n      if (selectedYear.value) {\n        // Update the sections based on the selected year\n        await updateSectionsForSelectedYear();\n      } else {\n        // If no year selected, get all sections\n        await fetchAvailableFilters();\n      }\n      \n      // Update dashboard data with new filters\n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = async () => {\n      // Update dashboard data with new filters\n      fetchDashboardData();\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedStartDate.value = '';\n      selectedEndDate.value = '';\n      \n      // Refresh available filters after clearing\n      fetchAvailableFilters().then(() => {\n        fetchDashboardData();\n      });\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value)\n      if (selectedSection.value) filters.push(selectedSection.value)\n      \n      // Add date range to display if selected\n      if (selectedStartDate.value && selectedEndDate.value) {\n        const formattedStart = moment(selectedStartDate.value).format('MMM D')\n        const formattedEnd = moment(selectedEndDate.value).format('MMM D, YYYY')\n        filters.push(`${formattedStart} - ${formattedEnd}`)\n      } else if (selectedStartDate.value) {\n        filters.push(`From ${moment(selectedStartDate.value).format('MMM D, YYYY')}`)\n      } else if (selectedEndDate.value) {\n        filters.push(`Until ${moment(selectedEndDate.value).format('MMM D, YYYY')}`)\n      }\n      \n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      \n      // Attendance status distribution data\n      const attendanceLabels = ['Present', 'Late', 'Absent'];\n      let attendanceData = data.attendanceDistribution || [0, 0, 0];\n      \n      // Ensure we have at least some data to display\n      const totalAttendanceCount = attendanceData.reduce((a, b) => a + b, 0);\n      if (totalAttendanceCount === 0) {\n        // Use empty distribution if no real data\n        attendanceData = [0, 0, 0];\n      }\n      \n      // Log for debugging\n      console.log('Final attendance distribution data:', attendanceData);\n      \n      // Create chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: attendanceLabels,\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n            borderWidth: 0,\n            hoverOffset: 4\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '70%',\n            plugins: {\n              legend: {\n              position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                  const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\n                  return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      \n      // Assessment types data\n      const assessmentData = data.assessmentTypes || [];\n      const labels = [];\n      const values = [];\n      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n      \n      try {\n        // Extract assessment types data\n        if (Array.isArray(assessmentData)) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            if (item && typeof item === 'object') {\n              labels.push(item.type || `Type ${index + 1}`);\n              values.push(parseFloat(item.averageScore) || 0);\n            }\n          });\n        } else if (typeof assessmentData === 'object' && assessmentData !== null) {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            labels.push(type);\n            values.push(parseFloat(data.averageScore) || 0);\n          });\n        }\n        \n        // If no data was extracted, use default types\n        if (labels.length === 0) {\n          labels.push('Quiz', 'Activity', 'Performance Task');\n          values.push(0, 0, 0);\n        }\n      } catch (error) {\n        console.error('Error processing assessment data:', error);\n        // Fallback to default labels and values\n        labels.push('Quiz', 'Activity', 'Performance Task');\n        values.push(0, 0, 0);\n      }\n      \n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n          data: {\n          labels: labels,\n            datasets: [{\n            label: 'Average Score (%)',\n            data: values,\n            backgroundColor: colors.slice(0, labels.length),\n            borderWidth: 0,\n            borderRadius: 6,\n            maxBarThickness: 50\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n          plugins: {\n            legend: {\n                display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  return `Average Score: ${context.raw}%`;\n                }\n              }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function(value) {\n                    return value + '%';\n                  }\n                }\n              }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) return;\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Properly destroy any existing chart\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      let trends = [];\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\n        trends = data.performanceTrends.map(trend => ({\n          date: new Date(trend.date),\n          value: parseFloat(trend.averageScore || trend.score) || 0,\n          name: trend.title || trend.name || 'Assessment'\n        })).sort((a, b) => a.date - b.date);\n      }\n\n      // Create new chart after destroying the old one\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: trends.map(trend => moment(trend.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: trends.map(trend => trend.value),\n            borderColor: 'rgb(59, 130, 246)',\n            backgroundColor: 'rgba(59, 130, 246, 0.1)',\n            borderWidth: 2,\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointBackgroundColor: 'rgb(59, 130, 246)',\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n            plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            },\n              tooltip: {\n                callbacks: {\n                title: (tooltipItems) => {\n                  if (!tooltipItems.length || !trends[tooltipItems[0].dataIndex]) return '';\n                  const trend = trends[tooltipItems[0].dataIndex];\n                  return `${moment(trend.date).format('MMM D, YYYY')} - ${trend.name}`;\n                },\n                label: (context) => {\n                  return `Score: ${context.raw.toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Average Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.title;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.averageScore || trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n            },\n            plugins: {\n              legend: {\n              position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n              }\n            },\n            scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n                title: {\n                  display: true,\n                text: 'Score (%)'\n                }\n              },\n            x: {\n                ticks: {\n                maxRotation: 45,\n                minRotation: 45\n                }\n              }\n            }\n          }\n        });\n    };\n\n    // Update the refreshDashboard function to properly handle chart destruction\n    const refreshDashboard = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Destroy existing charts before fetching new data\n        initEmptyCharts();\n        \n        // Wait a tick to ensure DOM updates\n        await nextTick();\n        \n        // Fetch new data\n        await fetchDashboardData();\n        \n        // Update the last refresh time\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    const scrollToSection = (sectionId) => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({ behavior: 'smooth' });\n      }\n    };\n\n    // Restore auto-refresh in onMounted function\n    onMounted(async () => {\n      try {\n        // Make sure DOM is rendered before initializing charts\n        await nextTick();\n\n        // Initialize with empty data while waiting for API\n        initEmptyCharts();\n        \n        // Set up API interceptor to handle 404 errors gracefully\n        api.interceptors.response.use(\n          response => response,\n          error => {\n            if (error.response && error.response.status === 404) {\n              console.warn(`API endpoint not found: ${error.config.url}`);\n            }\n            return Promise.reject(error);\n          }\n        );\n        \n        // Set auth token for API requests\n        if (store.state.auth.token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${store.state.auth.token}`;\n        }\n        \n        // Fetch available years and sections with data\n        await fetchAvailableFilters();\n        \n        // Fetch dashboard data\n        await fetchDashboardData();\n        \n        // Set up auto-refresh\n        if (autoRefreshInterval.value) {\n          clearInterval(autoRefreshInterval.value);\n        }\n        \n        // Refresh every 5 minutes, but only if tab is visible\n        autoRefreshInterval.value = setInterval(() => {\n          if (document.visibilityState === 'visible') {\n            refreshDashboard();\n          }\n        }, 5 * 60 * 1000); // 5 minutes\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n        // Make sure we still have empty charts if data loading fails\n        await nextTick();\n        initEmptyCharts();\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n\n    // Add watch for date changes\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n      }\n    });\n\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedYear,\n      selectedSection,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard,\n      fetchAvailableFilters,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.last-update-badge {\n  font-size: 0.85rem;\n  color: #64748b;\n  display: flex;\n  align-items: center;\n}\n\n.btn-refresh {\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #4a5568;\n  padding: 0.5rem;\n  border-radius: 8px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.btn-refresh:hover {\n  background: #f7fafc;\n  color: #2d3748;\n  border-color: #cbd5e1;\n}\n\n/* Dashboard Cards */\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n/* Chart Cards */\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n\n  .greeting {\n    font-size: 1.75rem;\n  }\n  \n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n  \n  .chart-container {\n    height: 300px;\n  }\n}\n</style> "],"mappings":";;;;;;;;;;;;;;;AAgPA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,WAAW,EAAEC,QAAO,QAAS,KAAI;AAC3E,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,KAAI,MAAO,eAAc;AAChC,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,QAAO;;AAE1B;AACA,MAAMC,GAAE,GAAIF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIT,QAAQ,CAAC;IACvB,MAAMU,gBAAe,GAAIhB,GAAG,CAAC,IAAI;IACjC,MAAMiB,mBAAkB,GAAIjB,GAAG,CAAC,IAAI;IACpC,MAAMkB,qBAAoB,GAAIlB,GAAG,CAAC,IAAI;IACtC,MAAMmB,8BAA6B,GAAInB,GAAG,CAAC,IAAI;IAC/C,MAAMoB,YAAW,GAAIpB,GAAG,CAAC,EAAE;IAC3B,MAAMqB,eAAc,GAAIrB,GAAG,CAAC,EAAE;IAC9B,MAAMsB,iBAAgB,GAAItB,GAAG,CAAC,EAAE;IAChC,MAAMuB,eAAc,GAAIvB,GAAG,CAAC,EAAE;IAC9B,MAAMwB,kBAAiB,GAAIxB,GAAG,CAAC,IAAI;IACnC,MAAMyB,SAAQ,GAAIzB,GAAG,CAAC,KAAK;IAC3B,MAAM0B,UAAS,GAAI1B,GAAG,CAAC,IAAI;IAC3B,MAAM2B,mBAAkB,GAAI3B,GAAG,CAAC,IAAI;IACpC,MAAM4B,QAAO,GAAI5B,GAAG,CAAC,EAAE;IACvB,MAAM6B,QAAO,GAAI7B,GAAG,CAAC,EAAE;IACvB,MAAM8B,cAAa,GAAI9B,GAAG,CAAC,EAAE;IAC7B,MAAM+B,KAAI,GAAI7B,QAAQ,CAAC,MAAMO,MAAM,CAAC,CAAC,CAACuB,MAAM,CAAC,YAAY,CAAC;;IAE1D;IACA,MAAMC,SAAQ,GAAI/B,QAAQ,CAAC,MAAMa,KAAK,CAACmB,OAAO,CAACD,SAAS;IACxD,MAAME,KAAI,GAAIjC,QAAQ,CAAC,MAAMa,KAAK,CAACqB,KAAK,CAACC,IAAI,CAACF,KAAK;;IAEnD;IACA,MAAMG,QAAO,GAAIpC,QAAQ,CAAC,MAAM;MAC9B,MAAMqC,IAAG,GAAIxB,KAAK,CAACqB,KAAK,CAACC,IAAI,CAACE,IAAI;MAClC,OAAOA,IAAG,GAAIA,IAAI,CAAC1B,IAAG,IAAK,GAAG0B,IAAI,CAACC,SAAQ,IAAK,EAAE,IAAID,IAAI,CAACE,QAAO,IAAK,EAAE,EAAE,CAACC,IAAI,CAAC,KAAK,MAAK,GAAI,MAAM;IACvG,CAAC,CAAC;;IAEF;IACA,MAAMC,gBAAe,GAAIzC,QAAQ,CAAC,MAAM;MACtC,OAAO0C,OAAO,CAACxB,YAAY,CAACyB,KAAI,IAAKxB,eAAe,CAACwB,KAAK,CAAC;IAC7D,CAAC,CAAC;;IAEF;IACA1C,KAAK,CAACgC,KAAK,EAAGW,QAAQ,IAAK;MACzB,IAAIA,QAAQ,EAAE;QACZpC,GAAG,CAACqC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,IAAI,UAAUH,QAAQ,EAAE;MACrE;IACF,CAAC,EAAE;MAAEI,SAAS,EAAE;IAAK,CAAC,CAAC;;IAEvB;IACA,MAAMC,aAAY,GAAInD,GAAG,CAAC,CAAC;IAC3B,MAAMoD,aAAY,GAAIpD,GAAG,CAAC,CAAC;IAC3B,MAAMqD,iBAAgB,GAAIrD,GAAG,CAAC,CAAC;IAC/B,MAAMsD,YAAW,GAAItD,GAAG,CAAC,CAAC;IAC1B,MAAMuD,cAAa,GAAIvD,GAAG,CAAC,CAAC;IAC5B,MAAMwD,IAAG,GAAIxD,GAAG,CAAC,IAAI;;IAErB;IACA,MAAMyD,iBAAgB,GAAIvD,QAAQ,CAAC,MAAM;MACvC,IAAIsD,IAAI,CAACX,KAAI,IAAKW,IAAI,CAACX,KAAK,CAACa,sBAAsB,EAAE;QACnD,OAAOF,IAAI,CAACX,KAAK,CAACa,sBAAsB,CAACC,IAAI,CAACC,GAAE,IAAKA,GAAE,GAAI,CAAC,CAAC;MAC/D;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,MAAMC,YAAW,GAAI3D,QAAQ,CAAC,MAAM;MAClC,OAAOsD,IAAI,CAACX,KAAK,EAAES,YAAW,GAAI,CAAC;IACrC,CAAC,CAAC;IAEF,MAAMQ,kBAAiB,GAAI5D,QAAQ,CAAC,MAAM;MACxC;MACA,IAAIsD,IAAI,CAACX,KAAK,EAAE;QACd;QACA,IAAI,OAAOW,IAAI,CAACX,KAAK,CAACS,YAAW,KAAM,QAAO,IAAKE,IAAI,CAACX,KAAK,CAACS,YAAW,GAAI,CAAC,EAAE;UAC9E,OAAO,IAAI;QACb;;QAEA;QACA,IAAIS,KAAK,CAACC,OAAO,CAACR,IAAI,CAACX,KAAK,CAACoB,iBAAiB,KAAKT,IAAI,CAACX,KAAK,CAACoB,iBAAiB,CAACC,MAAK,GAAI,CAAC,EAAE;UAC1F,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,MAAMC,iBAAgB,GAAIjE,QAAQ,CAAC,MAAM;MACvC,IAAIsD,IAAI,CAACX,KAAK,EAAE;QACd;QACA,IAAIW,IAAI,CAACX,KAAK,CAACuB,eAAe,EAAE;UAC9B,MAAMA,eAAc,GAAIC,MAAM,CAACC,MAAM,CAACd,IAAI,CAACX,KAAK,CAACuB,eAAe,CAAC;UACjE,OAAOA,eAAe,CAACT,IAAI,CAACY,IAAG,IAAKA,IAAI,CAACC,KAAI,GAAI,CAAC,CAAC;QACrD;;QAEA;QACA,IAAIhB,IAAI,CAACX,KAAK,CAAC4B,0BAA0B,EAAE;UACzC,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,MAAMC,cAAa,GAAIxE,QAAQ,CAAC,MAAM;MACpC,OAAOsD,IAAI,CAACX,KAAK,EAAEjB,QAAQ,EAAEsC,MAAK,GAAI,CAAC;IACzC,CAAC,CAAC;;IAEF;IACA,MAAMS,qBAAoB,GAAI,MAAAA,CAAA,KAAY;MACxC,IAAI;QACFlD,SAAS,CAACoB,KAAI,GAAI,IAAI;;QAEtB;QACA,MAAM+B,QAAO,GAAI,MAAMlE,GAAG,CAACmE,GAAG,CAAC,WAAW,EAAE;UAC1C7B,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUb,KAAK,CAACU,KAAK;UAAG;QACtD,CAAC,CAAC;QAEF,IAAI+B,QAAQ,CAACpB,IAAG,IAAKO,KAAK,CAACC,OAAO,CAACY,QAAQ,CAACpB,IAAI,CAAC,EAAE;UACjD;UACA,MAAMsB,QAAO,GAAIF,QAAQ,CAACpB,IAAI;;UAE9B;UACA,MAAMuB,KAAI,GAAI,CAAC,GAAG,IAAIC,GAAG,CAACF,QAAQ,CAACG,GAAG,CAACC,OAAM,IAAKA,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACxC,OAAO,CAAC;UACjFd,cAAc,CAACe,KAAI,GAAIkC,KAAK,CAACb,MAAK,GAAI,IAAIa,KAAK,CAACM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;;UAErF;UACA,MAAMC,6BAA6B,CAAC,CAAC;UAErCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;YACxCT,KAAK,EAAEjD,cAAc,CAACe,KAAK;YAC3BjB,QAAQ,EAAEA,QAAQ,CAACiB;UACrB,CAAC,CAAC;QACJ;QAEApB,SAAS,CAACoB,KAAI,GAAI,KAAK;MACzB,EAAE,OAAO4C,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzD;QACA3D,cAAc,CAACe,KAAI,GAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QACnDpB,SAAS,CAACoB,KAAI,GAAI,KAAK;MACzB;IACF,CAAC;;IAED;IACA,MAAMyC,6BAA4B,GAAI,MAAAA,CAAA,KAAY;MAChD,IAAI;QACF,MAAMI,MAAK,GAAI,CAAC,CAAC;QACjB,IAAItE,YAAY,CAACyB,KAAK,EAAE;UACtB6C,MAAM,CAACP,IAAG,GAAI/D,YAAY,CAACyB,KAAK;QAClC;;QAEA;QACA,MAAM+B,QAAO,GAAI,MAAMlE,GAAG,CAACmE,GAAG,CAAC,WAAW,EAAE;UAC1Ca,MAAM;UACN1C,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUb,KAAK,CAACU,KAAK;UAAG;QACtD,CAAC,CAAC;QAEF,IAAI+B,QAAQ,CAACpB,IAAG,IAAKO,KAAK,CAACC,OAAO,CAACY,QAAQ,CAACpB,IAAI,CAAC,EAAE;UACjD,MAAMsB,QAAO,GAAIF,QAAQ,CAACpB,IAAI;UAC9B;UACA,MAAMmC,cAAa,GAAI,CAAC,GAAG,IAAIX,GAAG,CAACF,QAAQ,CAACG,GAAG,CAACC,OAAM,IAAKA,OAAO,CAACU,OAAO,CAAC,CAAC,CAAC,CAACR,MAAM,CAACxC,OAAO,CAAC;;UAE7F;UACAhB,QAAQ,CAACiB,KAAI,GAAI8C,cAAc,CAACV,GAAG,CAACY,WAAU,KAAM;YAClDC,EAAE,EAAED,WAAW;YACfhF,IAAI,EAAEgF,WAAW;YACjBE,WAAW,EAAE,EAAC,CAAE;UAClB,CAAC,CAAC,CAAC;QACL,OAAO;UACLnE,QAAQ,CAACiB,KAAI,GAAI,EAAE;QACrB;MACF,EAAE,OAAO4C,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzD7D,QAAQ,CAACiB,KAAI,GAAI,EAAE;MACrB;IACF,CAAC;;IAED;IACA,MAAMmD,mBAAkB,GAAI,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,MAAMC,gBAAe,GAAI;UACvBd,IAAI,EAAE/D,YAAY,CAACyB,KAAK;UACxB+C,OAAO,EAAEvE,eAAe,CAACwB,KAAK;UAC9BqD,SAAS,EAAE5E,iBAAiB,CAACuB,KAAI,IAAKpC,MAAM,CAAC,CAAC,CAAC0F,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAACnE,MAAM,CAAC,YAAY,CAAC;UACxFoE,OAAO,EAAE7E,eAAe,CAACsB,KAAI,IAAKpC,MAAM,CAAC,CAAC,CAACuB,MAAM,CAAC,YAAY;QAChE,CAAC;QAEDuD,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAES,gBAAgB,CAAC;;QAEjE;QACA,IAAI;UACFV,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;UAC7D,MAAMa,kBAAiB,GAAI,MAAM3F,GAAG,CAACmE,GAAG,CAAC,aAAa,EAAE;YACtDa,MAAM,EAAEO;UACV,CAAC,CAAC;UAEF,IAAII,kBAAkB,CAAC7C,IAAG,IAAKO,KAAK,CAACC,OAAO,CAACqC,kBAAkB,CAAC7C,IAAI,KAAK6C,kBAAkB,CAAC7C,IAAI,CAACU,MAAK,GAAI,CAAC,EAAE;YAC3G;YACA,MAAMoC,gBAAe,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;;YAEpCD,kBAAkB,CAAC7C,IAAI,CAAC+C,OAAO,CAACC,MAAK,IAAK;cACxC,IAAIA,MAAM,CAACC,MAAK,KAAM,SAAS,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACjD,IAAIE,MAAM,CAACC,MAAK,KAAM,MAAM,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACnD,IAAIE,MAAM,CAACC,MAAK,KAAM,QAAQ,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC5D,CAAC,CAAC;YAEFf,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEc,gBAAgB,CAAC;YACvE,OAAOA,gBAAgB;UACzB;QACF,EAAE,OAAOb,KAAK,EAAE;UACdF,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEC,KAAK,CAACiB,OAAO,CAAC;QACnE;;QAEA;QACA,IAAI;UACFnB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;UACzC,MAAMmB,eAAc,GAAI;YAAE,GAAGV;UAAiB,CAAC;UAE/C,MAAMI,kBAAiB,GAAI,MAAM3F,GAAG,CAACmE,GAAG,CAAC,wBAAwB,EAAE;YACjEa,MAAM,EAAEiB;UACV,CAAC,CAAC;UAEF,IAAIN,kBAAkB,CAAC7C,IAAG,IAAKO,KAAK,CAACC,OAAO,CAACqC,kBAAkB,CAAC7C,IAAI,KAAK6C,kBAAkB,CAAC7C,IAAI,CAACU,MAAK,GAAI,CAAC,EAAE;YAC3G;YACA,MAAMoC,gBAAe,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;;YAEpCD,kBAAkB,CAAC7C,IAAI,CAAC+C,OAAO,CAACC,MAAK,IAAK;cACxC,IAAIA,MAAM,CAACC,MAAK,KAAM,SAAS,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACjD,IAAIE,MAAM,CAACC,MAAK,KAAM,MAAM,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACnD,IAAIE,MAAM,CAACC,MAAK,KAAM,QAAQ,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC5D,CAAC,CAAC;YAEFf,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEc,gBAAgB,CAAC;YACtE,OAAOA,gBAAgB;UACzB;QACF,EAAE,OAAOb,KAAK,EAAE;UACdF,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEC,KAAK,CAACiB,OAAO,CAAC;QACjE;;QAEA;QACA,IAAI;UACFnB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;UAC1D,MAAMzD,KAAI,GAAItB,MAAM,CAAC,CAAC,CAACuB,MAAM,CAAC,YAAY,CAAC;UAC3C,MAAM4E,SAAQ,GAAInG,MAAM,CAAC,CAAC,CAAC0F,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAACnE,MAAM,CAAC,YAAY,CAAC;;UAElE;UACA,MAAM6E,aAAY,GAAI,MAAMnG,GAAG,CAACmE,GAAG,CAAC,oBAAoB9C,KAAK,EAAE,EAAE;YAC/D2D,MAAM,EAAE;cACNP,IAAI,EAAE/D,YAAY,CAACyB,KAAK;cACxB+C,OAAO,EAAEvE,eAAe,CAACwB;YAC3B;UACF,CAAC,CAAC;;UAEF;UACA,MAAMiE,iBAAgB,GAAI,MAAMpG,GAAG,CAACmE,GAAG,CAAC,oBAAoB+B,SAAS,EAAE,EAAE;YACvElB,MAAM,EAAE;cACNP,IAAI,EAAE/D,YAAY,CAACyB,KAAK;cACxB+C,OAAO,EAAEvE,eAAe,CAACwB;YAC3B;UACF,CAAC,CAAC;;UAEF;UACA,MAAMkE,YAAW,GAAI,CACnB,IAAIhD,KAAK,CAACC,OAAO,CAAC6C,aAAa,CAACrD,IAAI,IAAIqD,aAAa,CAACrD,IAAG,GAAI,EAAE,CAAC,EAChE,IAAIO,KAAK,CAACC,OAAO,CAAC8C,iBAAiB,CAACtD,IAAI,IAAIsD,iBAAiB,CAACtD,IAAG,GAAI,EAAE,EACxE;UAED,IAAIuD,YAAY,CAAC7C,MAAK,GAAI,CAAC,EAAE;YAC3B;YACA,MAAMoC,gBAAe,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;;YAEpCS,YAAY,CAACR,OAAO,CAACC,MAAK,IAAK;cAC7B,IAAIA,MAAM,CAACC,MAAK,KAAM,SAAS,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACjD,IAAIE,MAAM,CAACC,MAAK,KAAM,MAAM,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACnD,IAAIE,MAAM,CAACC,MAAK,KAAM,QAAQ,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC5D,CAAC,CAAC;YAEFf,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEc,gBAAgB,CAAC;YAC1E,OAAOA,gBAAgB;UACzB;QACF,EAAE,OAAOb,KAAK,EAAE;UACdF,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEC,KAAK,CAACiB,OAAO,CAAC;QACtE;;QAEA;QACA,IAAI;UACFnB,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;UACxE,MAAMZ,QAAO,GAAI,MAAMlE,GAAG,CAACmE,GAAG,CAAC,aAAa,EAAE;YAC5Ca,MAAM,EAAE;cACNP,IAAI,EAAE/D,YAAY,CAACyB,KAAK;cACxB+C,OAAO,EAAEvE,eAAe,CAACwB;YAC3B;UACF,CAAC,CAAC;UAEF,IAAI+B,QAAQ,CAACpB,IAAG,IAAKO,KAAK,CAACC,OAAO,CAACY,QAAQ,CAACpB,IAAI,KAAKoB,QAAQ,CAACpB,IAAI,CAACU,MAAK,GAAI,CAAC,EAAE;YAC7E;YACA,MAAMoC,gBAAe,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;;YAEpC1B,QAAQ,CAACpB,IAAI,CAAC+C,OAAO,CAACC,MAAK,IAAK;cAC9B,IAAIA,MAAM,CAACC,MAAK,KAAM,SAAS,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACjD,IAAIE,MAAM,CAACC,MAAK,KAAM,MAAM,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE,MACnD,IAAIE,MAAM,CAACC,MAAK,KAAM,QAAQ,EAAEH,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC5D,CAAC,CAAC;YAEFf,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEc,gBAAgB,CAAC;YAC3E,OAAOA,gBAAgB;UACzB;QACF,EAAE,OAAOb,KAAK,EAAE;UACdF,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,KAAK,CAACiB,OAAO,CAAC;QAC5D;;QAEA;QACA,IAAI;UACFnB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAC/C,MAAMZ,QAAO,GAAI,MAAMlE,GAAG,CAACmE,GAAG,CAAC,mBAAmB,EAAE;YAClDa,MAAM,EAAE;cACNP,IAAI,EAAE/D,YAAY,CAACyB,KAAK;cACxB+C,OAAO,EAAEvE,eAAe,CAACwB;YAC3B;UACF,CAAC,CAAC;UAEF,IAAI+B,QAAQ,CAACpB,IAAI,EAAE;YACjB,MAAMwD,KAAI,GAAIpC,QAAQ,CAACpB,IAAI;YAC3B,MAAMyD,YAAW,GAAI,CACnBD,KAAK,CAACE,OAAM,IAAK,CAAC,EAClBF,KAAK,CAACG,IAAG,IAAK,CAAC,EACfH,KAAK,CAACI,MAAK,IAAK,EACjB;YACD7B,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEyB,YAAY,CAAC;YAChE,IAAIA,YAAY,CAAC,CAAC,IAAI,KAAKA,YAAY,CAAC,CAAC,IAAI,KAAKA,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE;cACrE,OAAOA,YAAY;YACrB;UACF;QACF,EAAE,OAAOxB,KAAK,EAAE;UACdF,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,KAAK,CAACiB,OAAO,CAAC;QAC5D;;QAEA;QACAnB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;QACzD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAClB,EAAE,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MACpB;IACF,CAAC;IAED,MAAM4B,kBAAiB,GAAI,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF5F,SAAS,CAACoB,KAAI,GAAI,IAAI;QACtB0C,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE;UACnDL,IAAI,EAAE/D,YAAY,CAACyB,KAAK;UACxB+C,OAAO,EAAEvE,eAAe,CAACwB,KAAK;UAC9BqD,SAAS,EAAE5E,iBAAiB,CAACuB,KAAK;UAClCuD,OAAO,EAAE7E,eAAe,CAACsB;QAC3B,CAAC,CAAC;;QAEF;QACA,MAAMa,sBAAqB,GAAI,MAAMsC,mBAAmB,CAAC,CAAC;QAC1DT,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE9B,sBAAsB,CAAC;;QAEtE;QACA,MAAM4D,aAAY,GAAI,MAAM5G,GAAG,CAACmE,GAAG,CAAC,kBAAkB,EAAE;UACtDa,MAAM,EAAE;YACNP,IAAI,EAAE/D,YAAY,CAACyB,KAAK;YACxB+C,OAAO,EAAEvE,eAAe,CAACwB,KAAK;YAC9BqD,SAAS,EAAE5E,iBAAiB,CAACuB,KAAK;YAClCuD,OAAO,EAAE7E,eAAe,CAACsB;UAC3B;QACF,CAAC,CAAC;QAEFW,IAAI,CAACX,KAAI,GAAIyE,aAAa,CAAC9D,IAAG,IAAK,CAAC,CAAC;QACrC+B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEhC,IAAI,CAACX,KAAK,CAAC;;QAEpD;QACA,MAAM0E,YAAW,GACd/D,IAAI,CAACX,KAAK,CAACM,aAAY,GAAI,CAAC,IAC5BK,IAAI,CAACX,KAAK,CAACO,aAAY,GAAI,CAAC,IAC5BI,IAAI,CAACX,KAAK,CAACU,cAAa,GAAI,CAAC,IAC7BC,IAAI,CAACX,KAAK,CAACoB,iBAAgB,IAAKT,IAAI,CAACX,KAAK,CAACoB,iBAAiB,CAACC,MAAK,GAAI,CAAE;;QAE3E;QACA,IAAI,CAACqD,YAAW,KAAMnG,YAAY,CAACyB,KAAI,IAAKxB,eAAe,CAACwB,KAAK,CAAC,EAAE;UAClE0C,OAAO,CAACiC,IAAI,CAAC,wCAAwC,CAAC;QACxD;;QAEA;QACArE,aAAa,CAACN,KAAI,GAAIW,IAAI,CAACX,KAAK,CAACM,aAAY,IAAK,CAAC;QACnDC,aAAa,CAACP,KAAI,GAAIW,IAAI,CAACX,KAAK,CAACO,aAAY,IAAK,CAAC;QACnDG,cAAc,CAACV,KAAI,GAAIW,IAAI,CAACX,KAAK,CAACU,cAAa,IAAK,CAAC;QACrDD,YAAY,CAACT,KAAI,GAAIW,IAAI,CAACX,KAAK,CAACS,YAAW,IAAK,CAAC;;QAEjD;QACAE,IAAI,CAACX,KAAK,CAACa,sBAAqB,GAAIA,sBAAsB;;QAE1D;QACA,MAAM+D,eAAc,GAAI/D,sBAAsB,CAACgE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAA,GAAIC,CAAC,EAAE,CAAC,CAAC;QACzE,IAAIH,eAAc,GAAI,CAAC,EAAE;UACvB;UACA,MAAMI,iBAAgB,GAAInE,sBAAsB,CAAC,CAAC,IAAIA,sBAAsB,CAAC,CAAC,CAAC;UAC/EL,iBAAiB,CAACR,KAAI,GAAIiF,IAAI,CAACC,KAAK,CAAEF,iBAAgB,GAAIJ,eAAe,GAAI,GAAG,CAAC;QACnF,OAAO;UACLpE,iBAAiB,CAACR,KAAI,GAAI,CAAC;QAC7B;;QAEA;QACA,MAAMmF,mBAAmB,CAAC,CAAC;;QAE3B;QACAC,YAAY,CAACzE,IAAI,CAACX,KAAK,CAAC;QAExBnB,UAAU,CAACmB,KAAI,GAAI,IAAIqF,IAAI,CAAC,CAAC;MAC/B,EAAE,OAAOzC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,IAAIA,KAAK,CAACb,QAAQ,EAAE;UAClBW,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACb,QAAQ,CAACpB,IAAI,CAAC;QACvD;;QAEA;QACAA,IAAI,CAACX,KAAI,GAAI;UACXM,aAAa,EAAE,CAAC;UAChBC,aAAa,EAAE,CAAC;UAChBG,cAAc,EAAE,CAAC;UACjBG,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACjCL,iBAAiB,EAAE,CAAC;UACpBe,eAAe,EAAE,EAAE;UACnBH,iBAAiB,EAAE,EAAE;UACrBX,YAAY,EAAE,CAAC;UACf1B,QAAQ,EAAE;QACZ,CAAC;QAEDuB,aAAa,CAACN,KAAI,GAAI,CAAC;QACvBO,aAAa,CAACP,KAAI,GAAI,CAAC;QACvBU,cAAc,CAACV,KAAI,GAAI,CAAC;QACxBQ,iBAAiB,CAACR,KAAI,GAAI,CAAC;QAC3BS,YAAY,CAACT,KAAI,GAAI,CAAC;;QAEtB;QACAoF,YAAY,CAACzE,IAAI,CAACX,KAAK,CAAC;MAC1B,UAAU;QACRpB,SAAS,CAACoB,KAAI,GAAI,KAAK;MACzB;IACF,CAAC;;IAED;IACA,MAAMmF,mBAAkB,GAAI,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,MAAMG,gBAAe,GAAI;UACvBhD,IAAI,EAAE/D,YAAY,CAACyB,KAAK;UACxB+C,OAAO,EAAEvE,eAAe,CAACwB,KAAK;UAC9BqD,SAAS,EAAE5E,iBAAiB,CAACuB,KAAI,IAAKpC,MAAM,CAAC,CAAC,CAAC0F,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAACnE,MAAM,CAAC,YAAY,CAAC;UACxFoE,OAAO,EAAE7E,eAAe,CAACsB,KAAI,IAAKpC,MAAM,CAAC,CAAC,CAACuB,MAAM,CAAC,YAAY;QAChE,CAAC;QAEDuD,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE2C,gBAAgB,CAAC;;QAEtE;QACA,MAAMC,kBAAiB,GAAI,MAAM1H,GAAG,CAACmE,GAAG,CAAC,cAAc,EAAE;UACvDa,MAAM,EAAEyC;QACV,CAAC,CAAC;QAEF5C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE4C,kBAAkB,CAAC5E,IAAI,EAAEU,MAAK,IAAK,CAAC,CAAC;QAEnF,IAAIkE,kBAAkB,CAAC5E,IAAG,IAAKO,KAAK,CAACC,OAAO,CAACoE,kBAAkB,CAAC5E,IAAI,CAAC,EAAE;UACrE,MAAM6E,WAAU,GAAID,kBAAkB,CAAC5E,IAAI;;UAE3C;UACA,MAAMY,eAAc,GAAI;YACtB,MAAM,EAAE;cAAEI,KAAK,EAAE,CAAC;cAAE8D,UAAU,EAAE,CAAC;cAAEC,MAAM,EAAE;YAAG,CAAC;YAC/C,UAAU,EAAE;cAAE/D,KAAK,EAAE,CAAC;cAAE8D,UAAU,EAAE,CAAC;cAAEC,MAAM,EAAE;YAAG,CAAC;YACnD,kBAAkB,EAAE;cAAE/D,KAAK,EAAE,CAAC;cAAE8D,UAAU,EAAE,CAAC;cAAEC,MAAM,EAAE;YAAG;UAC5D,CAAC;;UAED;UACAF,WAAW,CAAC9B,OAAO,CAACiC,UAAS,IAAK;YAChC,MAAMjE,IAAG,GAAIiE,UAAU,CAACjE,IAAG,IAAK,OAAO;YACvC,IAAIH,eAAe,CAACG,IAAI,CAAC,EAAE;cACzBH,eAAe,CAACG,IAAI,CAAC,CAACC,KAAK,EAAE;;cAE7B;cACA,IAAIgE,UAAU,CAACD,MAAM,EAAE;gBACrB;gBACA,IAAIE,UAAS,GAAI,EAAE;gBACnB,IAAI1E,KAAK,CAACC,OAAO,CAACwE,UAAU,CAACD,MAAM,CAAC,EAAE;kBACpCE,UAAS,GAAID,UAAU,CAACD,MAAM;gBAChC,OAAO,IAAIC,UAAU,CAACD,MAAK,YAAaG,GAAG,EAAE;kBAC3CD,UAAS,GAAI1E,KAAK,CAAC4E,IAAI,CAACH,UAAU,CAACD,MAAM,CAACjE,MAAM,CAAC,CAAC,CAAC;gBACrD,OAAO,IAAI,OAAOkE,UAAU,CAACD,MAAK,KAAM,QAAQ,EAAE;kBAChD;kBACAE,UAAS,GAAIpE,MAAM,CAACC,MAAM,CAACkE,UAAU,CAACD,MAAM,CAAC;gBAC/C;gBAEAE,UAAU,CAAClC,OAAO,CAACqC,KAAI,IAAK;kBAC1B,IAAI,OAAOA,KAAI,KAAM,QAAQ,EAAE;oBAC7B,MAAMC,UAAS,GAAIL,UAAU,CAACM,QAAO,GAAKF,KAAI,GAAIJ,UAAU,CAACM,QAAQ,GAAI,GAAE,GAAIF,KAAK;oBACpFxE,eAAe,CAACG,IAAI,CAAC,CAAC+D,UAAS,IAAKO,UAAU;oBAC9CzE,eAAe,CAACG,IAAI,CAAC,CAACgE,MAAM,CAACQ,IAAI,CAACF,UAAU,CAAC;kBAC/C;gBACF,CAAC,CAAC;cACJ;YACF;UACF,CAAC,CAAC;;UAEF;UACArF,IAAI,CAACX,KAAK,CAACuB,eAAc,GAAIC,MAAM,CAAC2E,IAAI,CAAC5E,eAAe,CAAC,CAACa,GAAG,CAACV,IAAG,IAAK;YACpE,MAAM0E,QAAO,GAAI7E,eAAe,CAACG,IAAI,CAAC;YACtC,MAAMjB,YAAW,GAAI2F,QAAQ,CAACV,MAAM,CAACrE,MAAK,GAAI,IAC1C+E,QAAQ,CAACX,UAAS,GAAIW,QAAQ,CAACV,MAAM,CAACrE,MAAK,GAC3C,CAAC;YAEL,OAAO;cACLK,IAAI;cACJjB,YAAY,EAAEwE,IAAI,CAACC,KAAK,CAACzE,YAAY,CAAC;cACtCkB,KAAK,EAAEyE,QAAQ,CAACzE,KAAK;cACrB0E,cAAc,EAAED,QAAQ,CAACzE,KAAI,GAAI,IAAI,GAAE,GAAI;YAC7C,CAAC;UACH,CAAC,CAAC;;UAEF;UACAhB,IAAI,CAACX,KAAK,CAACoB,iBAAgB,GAAIoE,WAAU,CACtCjD,MAAM,CAACuC,CAAA,IAAKA,CAAC,CAACwB,IAAI,EAAE;UAAA,CACpB9D,IAAI,CAAC,CAACsC,CAAC,EAAEC,CAAC,KAAK,IAAIM,IAAI,CAACP,CAAC,CAACwB,IAAI,IAAI,IAAIjB,IAAI,CAACN,CAAC,CAACuB,IAAI,CAAC,EAAE;UAAA,CACpDlE,GAAG,CAACuD,UAAS,IAAK;YACjB;YACA,IAAIlF,YAAW,GAAI,CAAC;YACpB,IAAImF,UAAS,GAAI,EAAE;;YAEnB;YACA,IAAID,UAAU,CAACD,MAAM,EAAE;cACrB,IAAIxE,KAAK,CAACC,OAAO,CAACwE,UAAU,CAACD,MAAM,CAAC,EAAE;gBACpCE,UAAS,GAAID,UAAU,CAACD,MAAM;cAChC,OAAO,IAAIC,UAAU,CAACD,MAAK,YAAaG,GAAG,EAAE;gBAC3CD,UAAS,GAAI1E,KAAK,CAAC4E,IAAI,CAACH,UAAU,CAACD,MAAM,CAACjE,MAAM,CAAC,CAAC,CAAC;cACrD,OAAO,IAAI,OAAOkE,UAAU,CAACD,MAAK,KAAM,QAAQ,EAAE;gBAChDE,UAAS,GAAIpE,MAAM,CAACC,MAAM,CAACkE,UAAU,CAACD,MAAM,CAAC;cAC/C;;cAEA;cACA,MAAMa,WAAU,GAAIX,UAAU,CAACrD,MAAM,CAACwD,KAAI,IAAK,OAAOA,KAAI,KAAM,QAAQ,CAAC;cACzE,IAAIQ,WAAW,CAAClF,MAAK,GAAI,CAAC,EAAE;gBAC1B,MAAMoE,UAAS,GAAIc,WAAW,CAAC1B,MAAM,CAAC,CAAC2B,GAAG,EAAET,KAAK,KAAKS,GAAE,GAAIT,KAAK,EAAE,CAAC,CAAC;gBACrEtF,YAAW,GAAIkF,UAAU,CAACM,QAAO,GAC5BR,UAAS,GAAIc,WAAW,CAAClF,MAAK,GAAIsE,UAAU,CAACM,QAAQ,GAAI,GAAE,GAC5DR,UAAS,GAAIc,WAAW,CAAClF,MAAM;cACrC;YACF;YAEA,OAAO;cACLiF,IAAI,EAAEX,UAAU,CAACW,IAAI;cACrBG,KAAK,EAAEd,UAAU,CAAC3H,IAAG,IAAK2H,UAAU,CAACjE,IAAI;cACzCjB,YAAY,EAAEwE,IAAI,CAACC,KAAK,CAACzE,YAAY,CAAC;cACtCiB,IAAI,EAAEiE,UAAU,CAACjE;YACnB,CAAC;UACH,CAAC,CAAC;;UAEJ;UACA;UACA,MAAMgF,kBAAiB,GAAI,CAAC,CAAC;UAE7BlB,WAAW,CAAC9B,OAAO,CAACiC,UAAS,IAAK;YAChC,IAAIA,UAAU,CAAC5C,OAAO,EAAE;cACtB,IAAI,CAAC2D,kBAAkB,CAACf,UAAU,CAAC5C,OAAO,CAAC,EAAE;gBAC3C2D,kBAAkB,CAACf,UAAU,CAAC5C,OAAO,IAAI;kBACvC0C,UAAU,EAAE,CAAC;kBACbkB,UAAU,EAAE,CAAC;kBACbC,eAAe,EAAE,CAAC;kBAClBC,eAAe,EAAE;gBACnB,CAAC;cACH;;cAEA;cACA,IAAIjB,UAAS,GAAI,EAAE;cACnB,IAAID,UAAU,CAACD,MAAM,EAAE;gBACrB,IAAIxE,KAAK,CAACC,OAAO,CAACwE,UAAU,CAACD,MAAM,CAAC,EAAE;kBACpCE,UAAS,GAAID,UAAU,CAACD,MAAM;gBAChC,OAAO,IAAIC,UAAU,CAACD,MAAK,YAAaG,GAAG,EAAE;kBAC3CD,UAAS,GAAI1E,KAAK,CAAC4E,IAAI,CAACH,UAAU,CAACD,MAAM,CAACjE,MAAM,CAAC,CAAC,CAAC;gBACrD,OAAO,IAAI,OAAOkE,UAAU,CAACD,MAAK,KAAM,QAAQ,EAAE;kBAChDE,UAAS,GAAIpE,MAAM,CAACC,MAAM,CAACkE,UAAU,CAACD,MAAM,CAAC;gBAC/C;gBAEAE,UAAU,CAAClC,OAAO,CAACqC,KAAI,IAAK;kBAC1B,IAAI,OAAOA,KAAI,KAAM,QAAQ,EAAE;oBAC7B,MAAMC,UAAS,GAAIL,UAAU,CAACM,QAAO,GAAKF,KAAI,GAAIJ,UAAU,CAACM,QAAQ,GAAI,GAAE,GAAIF,KAAK;oBACpFW,kBAAkB,CAACf,UAAU,CAAC5C,OAAO,CAAC,CAAC0C,UAAS,IAAKO,UAAU;oBAC/DU,kBAAkB,CAACf,UAAU,CAAC5C,OAAO,CAAC,CAAC4D,UAAU,EAAE;kBACrD;gBACF,CAAC,CAAC;cACJ;YACF;UACF,CAAC,CAAC;;UAEF;UACA,IAAI;YACF,MAAMG,iBAAgB,GAAI,MAAMjJ,GAAG,CAACmE,GAAG,CAAC,wBAAwB,EAAE;cAChEa,MAAM,EAAE;gBAAEP,IAAI,EAAE/D,YAAY,CAACyB;cAAM;YACrC,CAAC,CAAC;YAEF,IAAI8G,iBAAiB,CAACnG,IAAI,EAAE;cAC1Ba,MAAM,CAACuF,OAAO,CAACD,iBAAiB,CAACnG,IAAI,CAAC,CAAC+C,OAAO,CAAC,CAAC,CAACX,OAAO,EAAEpC,IAAI,CAAC,KAAK;gBAClE,IAAI+F,kBAAkB,CAAC3D,OAAO,CAAC,EAAE;kBAC/B2D,kBAAkB,CAAC3D,OAAO,CAAC,CAACiE,cAAa,GAAIrG,IAAI,CAACsG,WAAU,IAAK,CAAC;gBACpE;cACF,CAAC,CAAC;YACJ;UACF,EAAE,OAAOrE,KAAK,EAAE;YACdF,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;UACrD;;UAEA;UACA,IAAInB,MAAM,CAAC2E,IAAI,CAACO,kBAAkB,CAAC,CAACrF,MAAK,GAAI,CAAC,EAAE;YAC9CV,IAAI,CAACX,KAAK,CAACjB,QAAO,GAAIyC,MAAM,CAAC2E,IAAI,CAACO,kBAAkB,CAAC,CAACtE,GAAG,CAACY,WAAU,IAAK;cACvE,MAAMD,OAAM,GAAI2D,kBAAkB,CAAC1D,WAAW,CAAC;cAC/C,MAAMvC,YAAW,GAAIsC,OAAO,CAAC4D,UAAS,GAAI,IACtC5D,OAAO,CAAC0C,UAAS,GAAI1C,OAAO,CAAC4D,UAAS,GACtC,CAAC;cACL,MAAMK,cAAa,GAAIjE,OAAO,CAACiE,cAAa,IAAK,CAAC;cAElD,OAAO;gBACLhJ,IAAI,EAAEgF,WAAW;gBACjBvC,YAAY,EAAEwE,IAAI,CAACC,KAAK,CAACzE,YAAY,CAAC;gBACtCuG,cAAc,EAAE/B,IAAI,CAACC,KAAK,CAAC8B,cAAc,CAAC;gBAC1CE,WAAW,EAAEjC,IAAI,CAACC,KAAK,CAACzE,YAAY,EAAE;cACxC,CAAC;YACH,CAAC,CAAC;UACJ;QACF;MACF,EAAE,OAAOmC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;QACAjC,IAAI,CAACX,KAAK,CAACuB,eAAc,GAAI,CAC3B;UAAEG,IAAI,EAAE,MAAM;UAAEjB,YAAY,EAAE,CAAC;UAAEkB,KAAK,EAAE;QAAE,CAAC,EAC3C;UAAED,IAAI,EAAE,UAAU;UAAEjB,YAAY,EAAE,CAAC;UAAEkB,KAAK,EAAE;QAAE,CAAC,EAC/C;UAAED,IAAI,EAAE,kBAAkB;UAAEjB,YAAY,EAAE,CAAC;UAAEkB,KAAK,EAAE;QAAE,EACvD;QACDhB,IAAI,CAACX,KAAK,CAACoB,iBAAgB,GAAI,EAAE;QACjCT,IAAI,CAACX,KAAK,CAACjB,QAAO,GAAI,EAAE;MAC1B;IACF,CAAC;IAED,MAAMqG,YAAW,GAAKzE,IAAI,IAAK;MAC7BwG,sBAAsB,CAACxG,IAAI,CAAC;MAC5ByG,yBAAyB,CAACzG,IAAI,CAAC;MAC/B0G,2BAA2B,CAAC1G,IAAI,CAAC;MACjC2G,oCAAoC,CAAC3G,IAAI,CAAC;IAC5C,CAAC;;IAED;IACA,MAAM4G,eAAc,GAAIA,CAAA,KAAM;MAC5B;MACA,MAAMC,MAAK,GAAI,CACbrJ,gBAAgB,CAAC6B,KAAK,EACtB5B,mBAAmB,CAAC4B,KAAK,EACzB3B,qBAAqB,CAAC2B,KAAK,EAC3B1B,8BAA8B,CAAC0B,KAAI,CACpC;;MAED;MACAwH,MAAM,CAAC9D,OAAO,CAAC+D,MAAK,IAAK;QACvB,IAAIA,MAAM,EAAE;UACV,MAAMC,GAAE,GAAID,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;UACnC,IAAID,GAAG,EAAE;YACP,MAAME,aAAY,GAAIlK,KAAK,CAACmK,QAAQ,CAACH,GAAG,CAAC;YACzC,IAAIE,aAAa,EAAE;cACjBA,aAAa,CAACE,OAAO,CAAC,CAAC;YACzB;UACF;QACF;MACF,CAAC,CAAC;;MAEF;MACA,MAAMC,SAAQ,GAAI;QAChBzH,aAAa,EAAE,CAAC;QAChBC,aAAa,EAAE,CAAC;QAChBG,cAAc,EAAE,CAAC;QACjBF,iBAAiB,EAAE,CAAC;QACpBC,YAAY,EAAE,CAAC;QACfI,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACjCU,eAAe,EAAE,CACf;UAAEG,IAAI,EAAE,MAAM;UAAEjB,YAAY,EAAE,CAAC;UAAEkB,KAAK,EAAE;QAAE,CAAC,EAC3C;UAAED,IAAI,EAAE,UAAU;UAAEjB,YAAY,EAAE,CAAC;UAAEkB,KAAK,EAAE;QAAE,CAAC,EAC/C;UAAED,IAAI,EAAE,kBAAkB;UAAEjB,YAAY,EAAE,CAAC;UAAEkB,KAAK,EAAE;QAAE,EACvD;QACDP,iBAAiB,EAAE,EAAE;QACrBrC,QAAQ,EAAE;MACZ,CAAC;;MAED;MACAqG,YAAY,CAAC2C,SAAS,CAAC;IACzB,CAAC;;IAED;IACA,MAAMC,UAAS,GAAK1B,IAAI,IAAK;MAC3B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MACpB,OAAO1I,MAAM,CAAC0I,IAAI,CAAC,CAACnH,MAAM,CAAC,qBAAqB,CAAC;IACnD,CAAC;;IAED;IACA,MAAM8I,gBAAe,GAAI,MAAAA,CAAA,KAAY;MACnCzJ,eAAe,CAACwB,KAAI,GAAI,EAAE;MAE1B,IAAIzB,YAAY,CAACyB,KAAK,EAAE;QACtB;QACA,MAAMyC,6BAA6B,CAAC,CAAC;MACvC,OAAO;QACL;QACA,MAAMX,qBAAqB,CAAC,CAAC;MAC/B;;MAEA;MACA,MAAM0C,kBAAkB,CAAC,CAAC;IAC5B,CAAC;;IAED;IACA,MAAM0D,mBAAkB,GAAI,MAAAA,CAAA,KAAY;MACtC;MACA1D,kBAAkB,CAAC,CAAC;IACtB,CAAC;;IAED;IACA,MAAM2D,kBAAiB,GAAIA,CAAA,KAAM;MAC/B3D,kBAAkB,CAAC,CAAC;IACtB,CAAC;;IAED;IACA,MAAM4D,YAAW,GAAIA,CAAA,KAAM;MACzB7J,YAAY,CAACyB,KAAI,GAAI,EAAE;MACvBxB,eAAe,CAACwB,KAAI,GAAI,EAAE;MAC1BvB,iBAAiB,CAACuB,KAAI,GAAI,EAAE;MAC5BtB,eAAe,CAACsB,KAAI,GAAI,EAAE;;MAE1B;MACA8B,qBAAqB,CAAC,CAAC,CAACuG,IAAI,CAAC,MAAM;QACjC7D,kBAAkB,CAAC,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAM8D,gBAAe,GAAIA,CAAA,KAAM;MAC7B,MAAMC,OAAM,GAAI,EAAC;MACjB,IAAIhK,YAAY,CAACyB,KAAK,EAAEuI,OAAO,CAACrC,IAAI,CAAC3H,YAAY,CAACyB,KAAK;MACvD,IAAIxB,eAAe,CAACwB,KAAK,EAAEuI,OAAO,CAACrC,IAAI,CAAC1H,eAAe,CAACwB,KAAK;;MAE7D;MACA,IAAIvB,iBAAiB,CAACuB,KAAI,IAAKtB,eAAe,CAACsB,KAAK,EAAE;QACpD,MAAMwI,cAAa,GAAI5K,MAAM,CAACa,iBAAiB,CAACuB,KAAK,CAAC,CAACb,MAAM,CAAC,OAAO;QACrE,MAAMsJ,YAAW,GAAI7K,MAAM,CAACc,eAAe,CAACsB,KAAK,CAAC,CAACb,MAAM,CAAC,aAAa;QACvEoJ,OAAO,CAACrC,IAAI,CAAC,GAAGsC,cAAc,MAAMC,YAAY,EAAE;MACpD,OAAO,IAAIhK,iBAAiB,CAACuB,KAAK,EAAE;QAClCuI,OAAO,CAACrC,IAAI,CAAC,QAAQtI,MAAM,CAACa,iBAAiB,CAACuB,KAAK,CAAC,CAACb,MAAM,CAAC,aAAa,CAAC,EAAE;MAC9E,OAAO,IAAIT,eAAe,CAACsB,KAAK,EAAE;QAChCuI,OAAO,CAACrC,IAAI,CAAC,SAAStI,MAAM,CAACc,eAAe,CAACsB,KAAK,CAAC,CAACb,MAAM,CAAC,aAAa,CAAC,EAAE;MAC7E;MAEA,OAAOoJ,OAAO,CAAClH,MAAK,GAAI,IAAIkH,OAAO,CAACG,IAAI,CAAC,KAAK,IAAI,aAAY;IAChE,CAAC;;IAED;IACA,MAAMvB,sBAAqB,GAAKxG,IAAI,IAAK;MACvC,IAAI,CAACxC,gBAAgB,CAAC6B,KAAK,EAAE;MAE7B,MAAM0H,GAAE,GAAIvJ,gBAAgB,CAAC6B,KAAK,CAAC2H,UAAU,CAAC,IAAI,CAAC;MACnD,IAAI,CAACD,GAAG,EAAE;;MAEV;MACA,MAAME,aAAY,GAAIlK,KAAK,CAACmK,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMa,gBAAe,GAAI,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;MACtD,IAAIC,cAAa,GAAIjI,IAAI,CAACE,sBAAqB,IAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;MAE7D;MACA,MAAMgI,oBAAmB,GAAID,cAAc,CAAC/D,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAA,GAAIC,CAAC,EAAE,CAAC,CAAC;MACtE,IAAI8D,oBAAmB,KAAM,CAAC,EAAE;QAC9B;QACAD,cAAa,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5B;;MAEA;MACAlG,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEiG,cAAc,CAAC;;MAElE;MACA,IAAIlL,KAAK,CAACgK,GAAG,EAAE;QACbhG,IAAI,EAAE,UAAU;QAChBf,IAAI,EAAE;UACJmI,MAAM,EAAEH,gBAAgB;UACxBI,QAAQ,EAAE,CAAC;YACTpI,IAAI,EAAEiI,cAAc;YACpBI,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;YAClDC,WAAW,EAAE,CAAC;YACdC,WAAW,EAAE;UACf,CAAC;QACH,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE,KAAK;UACXC,OAAO,EAAE;YACPC,MAAM,EAAE;cACRC,QAAQ,EAAE,QAAQ;cAChBX,MAAM,EAAE;gBACNY,aAAa,EAAE,IAAI;gBACrBC,OAAO,EAAE,EAAE;gBACTC,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF;YACF,CAAC;YACDC,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTC,KAAK,EAAE,SAAAA,CAASC,OAAO,EAAE;kBACzB,MAAMD,KAAI,GAAIC,OAAO,CAACD,KAAI,IAAK,EAAE;kBACjC,MAAMhK,KAAI,GAAIiK,OAAO,CAACC,GAAE,IAAK,CAAC;kBAC9B,MAAMC,KAAI,GAAIF,OAAO,CAACG,KAAK,CAACzJ,IAAI,CAACoI,QAAQ,CAAC,CAAC,CAAC,CAACpI,IAAI,CAACkE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAA,GAAIC,CAAC,EAAE,CAAC,CAAC;kBAC5E,MAAMiB,UAAS,GAAImE,KAAI,GAAI,IAAIlF,IAAI,CAACC,KAAK,CAAElF,KAAI,GAAImK,KAAK,GAAI,GAAG,IAAI,CAAC;kBACpE,OAAO,GAAGH,KAAK,KAAKhK,KAAK,KAAKgG,UAAU,IAAI;gBAC5C;cACF;YACF;UACF;QACF;MACJ,CAAC,CAAC;IACJ,CAAC;IAED,MAAMoB,yBAAwB,GAAKzG,IAAI,IAAK;MAC1C,IAAI,CAACvC,mBAAmB,CAAC4B,KAAK,EAAE;MAEhC,MAAM0H,GAAE,GAAItJ,mBAAmB,CAAC4B,KAAK,CAAC2H,UAAU,CAAC,IAAI,CAAC;MACtD,IAAI,CAACD,GAAG,EAAE;;MAEV;MACA,MAAME,aAAY,GAAIlK,KAAK,CAACmK,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMuC,cAAa,GAAI1J,IAAI,CAACY,eAAc,IAAK,EAAE;MACjD,MAAMuH,MAAK,GAAI,EAAE;MACjB,MAAMrH,MAAK,GAAI,EAAE;MACjB,MAAM6I,MAAK,GAAI,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MAEjF,IAAI;QACF;QACA,IAAIpJ,KAAK,CAACC,OAAO,CAACkJ,cAAc,CAAC,EAAE;UACjC;UACAA,cAAc,CAAC3G,OAAO,CAAC,CAAC6G,IAAI,EAAEC,KAAK,KAAK;YACtC,IAAID,IAAG,IAAK,OAAOA,IAAG,KAAM,QAAQ,EAAE;cACpCzB,MAAM,CAAC5C,IAAI,CAACqE,IAAI,CAAC7I,IAAG,IAAK,QAAQ8I,KAAI,GAAI,CAAC,EAAE,CAAC;cAC7C/I,MAAM,CAACyE,IAAI,CAACuE,UAAU,CAACF,IAAI,CAAC9J,YAAY,KAAK,CAAC,CAAC;YACjD;UACF,CAAC,CAAC;QACJ,OAAO,IAAI,OAAO4J,cAAa,KAAM,QAAO,IAAKA,cAAa,KAAM,IAAI,EAAE;UACxE;UACA7I,MAAM,CAACuF,OAAO,CAACsD,cAAc,CAAC,CAAC3G,OAAO,CAAC,CAAC,CAAChC,IAAI,EAAEf,IAAI,CAAC,EAAE6J,KAAK,KAAK;YAC9D1B,MAAM,CAAC5C,IAAI,CAACxE,IAAI,CAAC;YACjBD,MAAM,CAACyE,IAAI,CAACuE,UAAU,CAAC9J,IAAI,CAACF,YAAY,KAAK,CAAC,CAAC;UACjD,CAAC,CAAC;QACJ;;QAEA;QACA,IAAIqI,MAAM,CAACzH,MAAK,KAAM,CAAC,EAAE;UACvByH,MAAM,CAAC5C,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,kBAAkB,CAAC;UACnDzE,MAAM,CAACyE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACtB;MACF,EAAE,OAAOtD,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzD;QACAkG,MAAM,CAAC5C,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,kBAAkB,CAAC;QACnDzE,MAAM,CAACyE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACtB;;MAEA;MACA,IAAIxI,KAAK,CAACgK,GAAG,EAAE;QACbhG,IAAI,EAAE,KAAK;QACTf,IAAI,EAAE;UACNmI,MAAM,EAAEA,MAAM;UACZC,QAAQ,EAAE,CAAC;YACXiB,KAAK,EAAE,mBAAmB;YAC1BrJ,IAAI,EAAEc,MAAM;YACZuH,eAAe,EAAEsB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE5B,MAAM,CAACzH,MAAM,CAAC;YAC/C4H,WAAW,EAAE,CAAC;YACd0B,YAAY,EAAE,CAAC;YACfC,eAAe,EAAE;UACjB,CAAC;QACH,CAAC;QACDzB,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC5BE,OAAO,EAAE;YACPC,MAAM,EAAE;cACJqB,OAAO,EAAE;YACb,CAAC;YACDf,OAAO,EAAE;cACPC,SAAS,EAAE;gBACTC,KAAK,EAAE,SAAAA,CAASC,OAAO,EAAE;kBACvB,OAAO,kBAAkBA,OAAO,CAACC,GAAG,GAAG;gBACzC;cACF;YACA;UACF,CAAC;UACDY,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE,GAAG;cACRC,KAAK,EAAE;gBACLC,QAAQ,EAAE,SAAAA,CAASnL,KAAK,EAAE;kBACxB,OAAOA,KAAI,GAAI,GAAG;gBACpB;cACF;YACF;UACJ;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMqH,2BAA0B,GAAK1G,IAAI,IAAK;MAC5C,IAAI,CAACtC,qBAAqB,CAAC2B,KAAK,EAAE;MAElC,MAAM0H,GAAE,GAAIrJ,qBAAqB,CAAC2B,KAAK,CAAC2H,UAAU,CAAC,IAAI,CAAC;MACxD,IAAI,CAACD,GAAG,EAAE;;MAEV;MACA,MAAME,aAAY,GAAIlK,KAAK,CAACmK,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;MAE1C,IAAIsD,MAAK,GAAI,EAAE;MACf,IAAIzK,IAAI,CAACS,iBAAgB,IAAKF,KAAK,CAACC,OAAO,CAACR,IAAI,CAACS,iBAAiB,CAAC,EAAE;QACnEgK,MAAK,GAAIzK,IAAI,CAACS,iBAAiB,CAACgB,GAAG,CAACiJ,KAAI,KAAM;UAC5C/E,IAAI,EAAE,IAAIjB,IAAI,CAACgG,KAAK,CAAC/E,IAAI,CAAC;UAC1BtG,KAAK,EAAEyK,UAAU,CAACY,KAAK,CAAC5K,YAAW,IAAK4K,KAAK,CAACtF,KAAK,KAAK,CAAC;UACzD/H,IAAI,EAAEqN,KAAK,CAAC5E,KAAI,IAAK4E,KAAK,CAACrN,IAAG,IAAK;QACrC,CAAC,CAAC,CAAC,CAACwE,IAAI,CAAC,CAACsC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACwB,IAAG,GAAIvB,CAAC,CAACuB,IAAI,CAAC;MACrC;;MAEA;MACA,IAAI5I,KAAK,CAACgK,GAAG,EAAE;QACbhG,IAAI,EAAE,MAAM;QACZf,IAAI,EAAE;UACJmI,MAAM,EAAEsC,MAAM,CAAChJ,GAAG,CAACiJ,KAAI,IAAKzN,MAAM,CAACyN,KAAK,CAAC/E,IAAI,CAAC,CAACnH,MAAM,CAAC,aAAa,CAAC,CAAC;UACrE4J,QAAQ,EAAE,CAAC;YACTiB,KAAK,EAAE,eAAe;YACtBrJ,IAAI,EAAEyK,MAAM,CAAChJ,GAAG,CAACiJ,KAAI,IAAKA,KAAK,CAACrL,KAAK,CAAC;YACtCsL,WAAW,EAAE,mBAAmB;YAChCtC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,CAAC;YACdsC,OAAO,EAAE,GAAG;YACZC,IAAI,EAAE,IAAI;YACVC,WAAW,EAAE,CAAC;YACdC,oBAAoB,EAAE,mBAAmB;YACzCC,gBAAgB,EAAE;UACpB,CAAC;QACH,CAAC;QACDxC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UACxBE,OAAO,EAAE;YACTC,MAAM,EAAE;cACNqB,OAAO,EAAE,IAAI;cACbpB,QAAQ,EAAE;YACZ,CAAC;YACCK,OAAO,EAAE;cACPC,SAAS,EAAE;gBACXtD,KAAK,EAAGmF,YAAY,IAAK;kBACvB,IAAI,CAACA,YAAY,CAACvK,MAAK,IAAK,CAAC+J,MAAM,CAACQ,YAAY,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC,EAAE,OAAO,EAAE;kBACzE,MAAMR,KAAI,GAAID,MAAM,CAACQ,YAAY,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC;kBAC/C,OAAO,GAAGjO,MAAM,CAACyN,KAAK,CAAC/E,IAAI,CAAC,CAACnH,MAAM,CAAC,aAAa,CAAC,MAAMkM,KAAK,CAACrN,IAAI,EAAE;gBACtE,CAAC;gBACDgM,KAAK,EAAGC,OAAO,IAAK;kBAClB,OAAO,UAAUA,OAAO,CAACC,GAAG,CAAC4B,OAAO,CAAC,CAAC,CAAC,GAAG;gBAC5C;cACF;YACF;UACF,CAAC;UACDhB,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE,GAAG;cACRxE,KAAK,EAAE;gBACLoE,OAAO,EAAE,IAAI;gBACbkB,IAAI,EAAE;cACR;YACF,CAAC;YACDC,CAAC,EAAE;cACDd,KAAK,EAAE;gBACLe,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACf;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAM5E,oCAAmC,GAAK3G,IAAI,IAAK;MACrD,IAAI,CAACrC,8BAA8B,CAAC0B,KAAK,EAAE;MAE3C,MAAM0H,GAAE,GAAIpJ,8BAA8B,CAAC0B,KAAK,CAAC2H,UAAU,CAAC,IAAI,CAAC;MACjE,IAAI,CAACD,GAAG,EAAE;MAEV,MAAME,aAAY,GAAIlK,KAAK,CAACmK,QAAQ,CAACH,GAAG,CAAC;MACzC,IAAIE,aAAa,EAAEA,aAAa,CAACE,OAAO,CAAC,CAAC;;MAE1C;MACA,MAAMqE,YAAW,GAAI;QACnBC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZ,kBAAkB,EAAE;MACtB,CAAC;;MAED;MACA,IAAInL,KAAK,CAACC,OAAO,CAACR,IAAI,CAACS,iBAAiB,CAAC,EAAE;QACzCT,IAAI,CAACS,iBAAiB,CAACsC,OAAO,CAAC2H,KAAI,IAAK;UACtC,MAAM3J,IAAG,GAAI2J,KAAK,CAAC3J,IAAG,IAAK2J,KAAK,CAAC5E,KAAK;UACtC,IAAI/E,IAAG,IAAKyK,YAAY,EAAE;YACxBA,YAAY,CAACzK,IAAI,CAAC,CAACwE,IAAI,CAAC;cACtBI,IAAI,EAAE,IAAIjB,IAAI,CAACgG,KAAK,CAAC/E,IAAI,CAAC;cAC1BP,KAAK,EAAE0E,UAAU,CAACY,KAAK,CAAC5K,YAAW,IAAK4K,KAAK,CAACtF,KAAK,KAAK;YAC1D,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ;;MAEA;MACAvE,MAAM,CAAC2E,IAAI,CAACgG,YAAY,CAAC,CAACzI,OAAO,CAAChC,IAAG,IAAK;QACxCyK,YAAY,CAACzK,IAAI,CAAC,CAACc,IAAI,CAAC,CAACsC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACwB,IAAG,GAAIvB,CAAC,CAACuB,IAAI,CAAC;MACpD,CAAC,CAAC;;MAEF;MACA,MAAMgG,QAAO,GAAI,CAAC,GAAG,IAAInK,GAAG,CAC1BX,MAAM,CAACC,MAAM,CAAC0K,YAAY,EACvBI,IAAI,CAAC,EACLnK,GAAG,CAACmI,IAAG,IAAKA,IAAI,CAACjE,IAAI,CAC1B,CAAC,CAAC,CAAC9D,IAAI,CAAC,CAACsC,CAAC,EAAEC,CAAC,KAAKD,CAAA,GAAIC,CAAC,CAAC;;MAExB;MACA,MAAMgE,QAAO,GAAIvH,MAAM,CAACuF,OAAO,CAACoF,YAAY,CAAC,CAAC/J,GAAG,CAAC,CAAC,CAACV,IAAI,EAAEf,IAAI,CAAC,EAAE6J,KAAK,KAAK;QACzE,MAAMF,MAAK,GAAI,CACb,mBAAmB;QAAI;QACvB,mBAAmB;QAAI;QACvB,mBAAkB,CAAK;QAAA,CACxB;QACD,MAAMkC,KAAI,GAAIlC,MAAM,CAACE,KAAK,CAAC;QAE3B,OAAO;UACLR,KAAK,EAAEtI,IAAI;UACXf,IAAI,EAAE2L,QAAQ,CAAClK,GAAG,CAACkE,IAAG,IAAK;YACzB,MAAMmG,KAAI,GAAI9L,IAAI,CAAC+L,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACrG,IAAI,CAACsG,OAAO,CAAC,MAAMtG,IAAI,CAACsG,OAAO,CAAC,CAAC,CAAC;YACjE,OAAOH,KAAI,GAAIA,KAAK,CAAC1G,KAAI,GAAI,IAAI;UACnC,CAAC,CAAC;UACFuF,WAAW,EAAEkB,KAAK;UAClBxD,eAAe,EAAEwD,KAAK,CAACK,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC;UACpErB,IAAI,EAAE,IAAI;UACVD,OAAO,EAAE,GAAG;UACZE,WAAW,EAAE,CAAC;UACdE,gBAAgB,EAAE,CAAC;UACnBmB,QAAQ,EAAE,IAAG,CAAE;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAIpP,KAAK,CAACgK,GAAG,EAAE;QACbhG,IAAI,EAAE,MAAM;QACZf,IAAI,EAAE;UACJmI,MAAM,EAAEwD,QAAQ,CAAClK,GAAG,CAACkE,IAAG,IAAK1I,MAAM,CAAC0I,IAAI,CAAC,CAACnH,MAAM,CAAC,aAAa,CAAC,CAAC;UAChE4J;QACA,CAAC;QACDI,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC5B0D,WAAW,EAAE;YACXC,SAAS,EAAE,KAAK;YAChBC,IAAI,EAAE;UACN,CAAC;UACD1D,OAAO,EAAE;YACPC,MAAM,EAAE;cACRC,QAAQ,EAAE;YACV,CAAC;YACDK,OAAO,EAAE;cACPC,SAAS,EAAE;gBACXC,KAAK,EAAGC,OAAO,IAAK;kBAClB,MAAMjK,KAAI,GAAIiK,OAAO,CAACC,GAAE,KAAM,IAAG,GAAID,OAAO,CAACC,GAAG,CAAC4B,OAAO,CAAC,CAAC,IAAI,KAAK;kBACnE,OAAO,GAAG7B,OAAO,CAACiD,OAAO,CAAClD,KAAK,KAAKhK,KAAK,GAAG;gBAC9C;cACF;YACA;UACF,CAAC;UACD8K,MAAM,EAAE;YACRC,CAAC,EAAE;cACDC,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE,GAAG;cACNxE,KAAK,EAAE;gBACLoE,OAAO,EAAE,IAAI;gBACfkB,IAAI,EAAE;cACN;YACF,CAAC;YACHC,CAAC,EAAE;cACCd,KAAK,EAAE;gBACPe,WAAW,EAAE,EAAE;gBACfC,WAAW,EAAE;cACb;YACF;UACF;QACF;MACF,CAAC,CAAC;IACN,CAAC;;IAED;IACA,MAAMiB,gBAAe,GAAI,MAAAA,CAAA,KAAY;MACnC,IAAI;QACFvO,SAAS,CAACoB,KAAI,GAAI,IAAI;;QAEtB;QACAuH,eAAe,CAAC,CAAC;;QAEjB;QACA,MAAM/J,QAAQ,CAAC,CAAC;;QAEhB;QACA,MAAMgH,kBAAkB,CAAC,CAAC;;QAE1B;QACA3F,UAAU,CAACmB,KAAI,GAAI,IAAIqF,IAAI,CAAC,CAAC;MAC/B,EAAE,OAAOzC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,UAAU;QACRhE,SAAS,CAACoB,KAAI,GAAI,KAAK;MACzB;IACF,CAAC;IAED,MAAMoN,eAAc,GAAKC,SAAS,IAAK;MACrC,MAAMtK,OAAM,GAAIuK,QAAQ,CAACC,cAAc,CAACF,SAAS,CAAC;MAClD,IAAItK,OAAO,EAAE;QACXA,OAAO,CAACyK,cAAc,CAAC;UAAEC,QAAQ,EAAE;QAAS,CAAC,CAAC;MAChD;IACF,CAAC;;IAED;IACArQ,SAAS,CAAC,YAAY;MACpB,IAAI;QACF;QACA,MAAMI,QAAQ,CAAC,CAAC;;QAEhB;QACA+J,eAAe,CAAC,CAAC;;QAEjB;QACA1J,GAAG,CAAC6P,YAAY,CAAC3L,QAAQ,CAAC4L,GAAG,CAC3B5L,QAAO,IAAKA,QAAQ,EACpBa,KAAI,IAAK;UACP,IAAIA,KAAK,CAACb,QAAO,IAAKa,KAAK,CAACb,QAAQ,CAAC6B,MAAK,KAAM,GAAG,EAAE;YACnDlB,OAAO,CAACiC,IAAI,CAAC,2BAA2B/B,KAAK,CAACgL,MAAM,CAACC,GAAG,EAAE,CAAC;UAC7D;UACA,OAAOC,OAAO,CAACC,MAAM,CAACnL,KAAK,CAAC;QAC9B,CACF,CAAC;;QAED;QACA,IAAI1E,KAAK,CAACqB,KAAK,CAACC,IAAI,CAACF,KAAK,EAAE;UAC1BzB,GAAG,CAACqC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,IAAI,UAAUlC,KAAK,CAACqB,KAAK,CAACC,IAAI,CAACF,KAAK,EAAE;QACnF;;QAEA;QACA,MAAMwC,qBAAqB,CAAC,CAAC;;QAE7B;QACA,MAAM0C,kBAAkB,CAAC,CAAC;;QAE1B;QACA,IAAI1F,mBAAmB,CAACkB,KAAK,EAAE;UAC7BgO,aAAa,CAAClP,mBAAmB,CAACkB,KAAK,CAAC;QAC1C;;QAEA;QACAlB,mBAAmB,CAACkB,KAAI,GAAIiO,WAAW,CAAC,MAAM;UAC5C,IAAIX,QAAQ,CAACY,eAAc,KAAM,SAAS,EAAE;YAC1Cf,gBAAgB,CAAC,CAAC;UACpB;QACF,CAAC,EAAE,IAAI,EAAC,GAAI,IAAI,CAAC,EAAE;MACrB,EAAE,OAAOvK,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;QACA,MAAMpF,QAAQ,CAAC,CAAC;QAChB+J,eAAe,CAAC,CAAC;MACnB;IACF,CAAC,CAAC;;IAEF;IACAhK,WAAW,CAAC,MAAM;MAChB,IAAIuB,mBAAmB,CAACkB,KAAK,EAAE;QAC7BgO,aAAa,CAAClP,mBAAmB,CAACkB,KAAK,CAAC;MAC1C;IACF,CAAC,CAAC;;IAEF;IACA1C,KAAK,CAAC,CAACmB,iBAAiB,EAAEC,eAAe,CAAC,EAAE,MAAM;MAChD,IAAID,iBAAiB,CAACuB,KAAI,IAAKtB,eAAe,CAACsB,KAAK,EAAE;QACpD;QACA,MAAMmO,KAAI,GAAIvQ,MAAM,CAACa,iBAAiB,CAACuB,KAAK,CAAC;QAC7C,MAAMoO,GAAE,GAAIxQ,MAAM,CAACc,eAAe,CAACsB,KAAK,CAAC;QAEzC,IAAIoO,GAAG,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;UACvBzP,eAAe,CAACsB,KAAI,GAAIvB,iBAAiB,CAACuB,KAAK;QACjD;MACF;IACF,CAAC,CAAC;IAEF,OAAO;MACL7B,gBAAgB;MAChBC,mBAAmB;MACnBC,qBAAqB;MACrBC,8BAA8B;MAC9BC,YAAY;MACZC,eAAe;MACfO,QAAQ;MACRC,QAAQ;MACRC,cAAc;MACdG,SAAS;MACTK,QAAQ;MACRK,gBAAgB;MAChBQ,aAAa;MACbC,aAAa;MACbC,iBAAiB;MACjBC,YAAY;MACZC,cAAc;MACdE,iBAAiB;MACjBI,YAAY;MACZC,kBAAkB;MAClBK,iBAAiB;MACjBO,cAAc;MACdlD,kBAAkB;MAClBC,SAAS;MACTC,UAAU;MACVmJ,UAAU;MACVoF,eAAe;MACfnF,gBAAgB;MAChBC,mBAAmB;MACnBE,YAAY;MACZE,gBAAgB;MAChB6E,gBAAgB;MAChBrL,qBAAqB;MACrBrD,iBAAiB;MACjBC,eAAe;MACfQ;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
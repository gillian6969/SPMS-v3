{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, resolveComponent as _resolveComponent, createVNode as _createVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"greeting-section mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"greeting\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"d-flex gap-2 align-items-center\"\n};\nconst _hoisted_6 = {\n  class: \"dropdown\"\n};\nconst _hoisted_7 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_8 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_9 = {\n  class: \"mb-3\"\n};\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = {\n  class: \"mb-3\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = [\"value\"];\nconst _hoisted_14 = {\n  class: \"mb-3\"\n};\nconst _hoisted_15 = [\"disabled\"];\nconst _hoisted_16 = [\"value\"];\nconst _hoisted_17 = {\n  class: \"mb-3\"\n};\nconst _hoisted_18 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_19 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_20 = [\"max\"];\nconst _hoisted_21 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_22 = [\"max\"];\nconst _hoisted_23 = [\"disabled\"];\nconst _hoisted_24 = {\n  key: 0\n};\nconst _hoisted_25 = {\n  key: 1\n};\nconst _hoisted_26 = {\n  class: \"row g-4 mb-4\"\n};\nconst _hoisted_27 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_28 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_29 = {\n  class: \"card-info\"\n};\nconst _hoisted_30 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_31 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_32 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_33 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_34 = {\n  class: \"card-info\"\n};\nconst _hoisted_35 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_36 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_37 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_38 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_39 = {\n  class: \"card-info\"\n};\nconst _hoisted_40 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_41 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_42 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_43 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_44 = {\n  class: \"card-info\"\n};\nconst _hoisted_45 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_46 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_47 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_48 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_49 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_50 = {\n  class: \"chart-card\"\n};\nconst _hoisted_51 = {\n  class: \"card-body\"\n};\nconst _hoisted_52 = {\n  class: \"chart-container\"\n};\nconst _hoisted_53 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_54 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_55 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_56 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_57 = {\n  class: \"chart-card\"\n};\nconst _hoisted_58 = {\n  class: \"card-body\"\n};\nconst _hoisted_59 = {\n  class: \"chart-container\"\n};\nconst _hoisted_60 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_61 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_62 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_63 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_64 = {\n  class: \"chart-card\"\n};\nconst _hoisted_65 = {\n  class: \"card-body\"\n};\nconst _hoisted_66 = {\n  class: \"chart-container\"\n};\nconst _hoisted_67 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_68 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_69 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_70 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_71 = {\n  class: \"chart-card\"\n};\nconst _hoisted_72 = {\n  class: \"card-body\"\n};\nconst _hoisted_73 = {\n  class: \"chart-container\"\n};\nconst _hoisted_74 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_75 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_76 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_77 = {\n  class: \"card mb-4\"\n};\nconst _hoisted_78 = {\n  class: \"card-body\"\n};\nconst _hoisted_79 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_80 = {\n  class: \"table\"\n};\nconst _hoisted_81 = {\n  key: 0\n};\nconst _hoisted_82 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ExportGraphsModal = _resolveComponent(\"ExportGraphsModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Greeting Section \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h2\", _hoisted_3, \"Welcome, \" + _toDisplayString($setup.userName), 1 /* TEXT */), _cache[7] || (_cache[7] = _createElementVNode(\"p\", {\n    class: \"greeting-subtitle\"\n  }, \"Here's your dashboard overview\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_4, [_cache[22] || (_cache[22] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", _hoisted_7, [_cache[8] || (_cache[8] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_8, [_cache[19] || (_cache[19] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, [_cache[9] || (_cache[9] = _createStaticVNode(\"<option value=\\\"\\\" data-v-6900940c>All Years</option><option value=\\\"1st\\\" data-v-6900940c>1st Year</option><option value=\\\"2nd\\\" data-v-6900940c>2nd Year</option><option value=\\\"3rd\\\" data-v-6900940c>3rd Year</option><option value=\\\"4th\\\" data-v-6900940c>4th Year</option>\", 5)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_10);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[11] || (_cache[11] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_12), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_14, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[13] || (_cache[13] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_16);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_15), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_17, [_cache[17] || (_cache[17] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_20), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_21, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_22), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[20] || (_cache[20] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: $setup.loading\n  }, [$setup.loading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_24, _cache[18] || (_cache[18] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Loading...\")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_25, \"Apply Filters\"))], 8 /* PROPS */, _hoisted_23)])]), _createCommentVNode(\" Export Graphs Button \"), _cache[21] || (_cache[21] = _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    type: \"button\",\n    \"data-bs-toggle\": \"modal\",\n    \"data-bs-target\": \"#exportGraphsModal\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }), _createTextVNode(\" Export Graphs \")], -1 /* HOISTED */))])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_26, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_cache[25] || (_cache[25] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_29, [_cache[24] || (_cache[24] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, _toDisplayString($setup.totalStudents), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_31, _cache[23] || (_cache[23] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Sections Card \"), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"div\", _hoisted_33, [_cache[28] || (_cache[28] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_34, [_cache[27] || (_cache[27] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_35, _toDisplayString($setup.totalSections), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_36, _cache[26] || (_cache[26] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Subjects Card \"), _createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_cache[31] || (_cache[31] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-book\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_39, [_cache[30] || (_cache[30] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"My Subjects\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_40, _toDisplayString($setup.totalSubjects), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_41, _cache[29] || (_cache[29] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"div\", _hoisted_43, [_cache[34] || (_cache[34] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_44, [_cache[33] || (_cache[33] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Class Average\", -1 /* HOISTED */)), !$setup.loading && $setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_45, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_46, _cache[32] || (_cache[32] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_47, \"No data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_48, [_createCommentVNode(\" Attendance Distribution Chart (previously Performance Distribution) \"), _createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"div\", _hoisted_50, [_createElementVNode(\"div\", _hoisted_51, [_cache[36] || (_cache[36] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[37] || (_cache[37] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_52, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_53, _cache[35] || (_cache[35] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_54, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_55, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_56, [_createElementVNode(\"div\", _hoisted_57, [_createElementVNode(\"div\", _hoisted_58, [_cache[39] || (_cache[39] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[40] || (_cache[40] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_59, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_60, _cache[38] || (_cache[38] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_61, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_62, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_63, [_createElementVNode(\"div\", _hoisted_64, [_createElementVNode(\"div\", _hoisted_65, [_cache[42] || (_cache[42] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[43] || (_cache[43] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Class average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_66, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_67, _cache[41] || (_cache[41] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_68, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_69, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Performance \"), _createElementVNode(\"div\", _hoisted_70, [_createElementVNode(\"div\", _hoisted_71, [_createElementVNode(\"div\", _hoisted_72, [_cache[45] || (_cache[45] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[46] || (_cache[46] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_73, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_74, _cache[44] || (_cache[44] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_75, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_76, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])])]), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_77, [_createElementVNode(\"div\", _hoisted_78, [_cache[50] || (_cache[50] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, \"Recent Activity\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_79, [_createElementVNode(\"table\", _hoisted_80, [_cache[49] || (_cache[49] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Activity\"), _createElementVNode(\"th\", null, \"Details\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [$setup.loading ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_81, _cache[47] || (_cache[47] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }), _createTextVNode(\"Loading activities... \")], -1 /* HOISTED */)]))) : !$setup.hasActivity ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_82, _cache[48] || (_cache[48] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, \"No recent activity\", -1 /* HOISTED */)]))) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 2\n  }, _renderList($setup.recentActivities, activity => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: activity.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(activity.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.details), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])]), _createCommentVNode(\" Add the ExportGraphsModal component at the end of the template \"), _createVNode(_component_ExportGraphsModal, {\n    dashboardType: \"teacher\",\n    chartRefs: $setup.chartRefs,\n    filterInfo: {\n      year: $setup.selectedYear,\n      section: $setup.selectedSection,\n      subject: $setup.selectedSubject,\n      startDate: $setup.selectedStartDate,\n      endDate: $setup.selectedEndDate\n    }\n  }, null, 8 /* PROPS */, [\"chartRefs\", \"filterInfo\"])]);\n}","map":{"version":3,"names":["class","type","id","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","userName","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createTextVNode","getFilterDisplay","_hoisted_8","_hoisted_9","_cache","$event","selectedYear","onChange","args","handleYearChange","_createStaticVNode","_Fragment","_renderList","availableYears","year","value","_hoisted_10","_hoisted_11","selectedSection","disabled","sections","section","_hoisted_13","_hoisted_12","_hoisted_14","selectedSubject","subjects","subject","_hoisted_16","_hoisted_15","_hoisted_17","_hoisted_18","_hoisted_19","selectedStartDate","max","today","_hoisted_20","_hoisted_21","selectedEndDate","_hoisted_22","onClick","applyFilters","loading","_hoisted_24","_hoisted_25","_hoisted_23","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","totalStudents","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","totalSections","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","totalSubjects","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","hasPerformanceData","_hoisted_45","averageScore","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","hasAttendanceData","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","hasAssessmentData","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","_hoisted_80","_hoisted_81","colspan","hasActivity","_hoisted_82","recentActivities","activity","formatDate","date","details","_createVNode","_component_ExportGraphsModal","dashboardType","chartRefs","filterInfo"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <div class=\"d-flex gap-2 align-items-center\">\n        <!-- Combined Filter Dropdown -->\n        <div class=\"dropdown\">\n          <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n            <i class=\"fas fa-filter me-2\"></i>\n            {{ getFilterDisplay() }}\n          </button>\n          <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n            <h6 class=\"dropdown-header\">Filter Options</h6>\n            <div class=\"mb-3\">\n              <label class=\"form-label\">Academic Year</label>\n              <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n                <option value=\"\">All Years</option>\n                <option value=\"1st\">1st Year</option>\n                <option value=\"2nd\">2nd Year</option>\n                <option value=\"3rd\">3rd Year</option>\n                <option value=\"4th\">4th Year</option>\n                <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n              </select>\n            </div>\n            <div class=\"mb-3\">\n              <label class=\"form-label\">Section</label>\n              <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n                <option value=\"\">All Sections</option>\n                <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n              </select>\n            </div>\n            <div class=\"mb-3\">\n              <label class=\"form-label\">Subject</label>\n              <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n                <option value=\"\">All Subjects</option>\n                <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n              </select>\n            </div>\n            <div class=\"mb-3\">\n              <label class=\"form-label\">Date Range</label>\n              <div class=\"d-flex gap-2\">\n                <div class=\"flex-grow-1\">\n                  <label class=\"small text-muted\">From</label>\n                  <input \n                    type=\"date\" \n                    class=\"form-control form-control-sm\" \n                    v-model=\"selectedStartDate\"\n                    :max=\"today\"\n                  >\n                </div>\n                <div class=\"flex-grow-1\">\n                  <label class=\"small text-muted\">To</label>\n                  <input \n                    type=\"date\" \n                    class=\"form-control form-control-sm\" \n                    v-model=\"selectedEndDate\"\n                    :max=\"today\"\n                  >\n                </div>\n              </div>\n            </div>\n            <div class=\"dropdown-divider\"></div>\n            <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n              <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n              <span v-else>Apply Filters</span>\n            </button>\n          </div>\n        </div>\n        \n        <!-- Export Graphs Button -->\n        <button class=\"btn btn-outline-primary\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exportGraphsModal\">\n          <i class=\"fas fa-file-export me-2\"></i>\n          Export Graphs\n        </button>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n\n    <!-- Add the ExportGraphsModal component at the end of the template -->\n    <ExportGraphsModal \n      dashboardType=\"teacher\"\n      :chartRefs=\"chartRefs\"\n      :filterInfo=\"{\n        year: selectedYear,\n        section: selectedSection,\n        subject: selectedSubject,\n        startDate: selectedStartDate,\n        endDate: selectedEndDate\n      }\"\n    />\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport ExportGraphsModal from '@/components/ExportGraphsModal.vue'\n\nexport default {\n  name: 'TeacherDashboard',\n  components: {\n    ExportGraphsModal\n  },\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Chart references for PDF export\n    const chartRefs = ref({})\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        } else {\n          console.warn('No class records found or unexpected response format');\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [\n                attendanceStats.present || 0,\n                attendanceStats.late || 0,\n                attendanceStats.absent || 0\n              ];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        // For the assessment type chart, create dummy data for testing\n        // This data will be removed once the real API is working properly\n        const dummyAssessmentData = [\n          { type: 'Quiz', averageScore: 85, count: 12 },\n          { type: 'Activity', averageScore: 78, count: 8 },\n          { type: 'Performance Task', averageScore: 92, count: 5 }\n        ];\n        \n        // Debug assessmentTypes from API\n        console.log('Assessment types from API:', response.data.assessmentTypes);\n        \n        // Update assessment data for the assessment type chart\n        // Extract assessment data from the response\n        const assessmentData = [];\n        \n        // Process assessment type data from the dashboard API response\n        if (response.data.assessmentTypes) {\n          Object.keys(response.data.assessmentTypes).forEach(type => {\n            const typeData = response.data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          console.log('Processed assessment data:', assessmentData);\n          \n          if (assessmentData.length > 0) {\n            updateAssessmentTypeChart({ assessmentData });\n          } else {\n            // If API returned empty data, use dummy data for testing\n            console.log('Using dummy assessment data due to empty API response');\n            updateAssessmentTypeChart({ assessmentData: dummyAssessmentData });\n          }\n        } else {\n          // Fallback to dummy assessment types if no data provided\n          console.log('Using dummy assessment data due to missing API data');\n          updateAssessmentTypeChart({ assessmentData: dummyAssessmentData });\n        }\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n      \n      // Store chart reference for PDF export\n      chartRefs.value.performanceChart = performanceChart.value;\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          \n          // Get the count from the first matching assessment if available\n          const firstMatch = typeAssessments[0];\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n        \n        console.log('Processed assessment chart data:', assessmentData);\n      }\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ],\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n      \n      // Store chart reference for PDF export\n      chartRefs.value.assessmentTypeChart = assessmentTypeChart.value;\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n      \n      // Store chart reference for PDF export\n      chartRefs.value.performanceTrendChart = performanceTrendChart.value;\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n      \n      // Store chart reference for PDF export\n      chartRefs.value.assessmentTypePerformanceChart = assessmentTypePerformanceChart.value;\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initDummyData();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n      \n      // Store chart references\n      nextTick(() => {\n        chartRefs.value = {\n          performanceChart: performanceChart.value,\n          assessmentTypeChart: assessmentTypeChart.value,\n          performanceTrendChart: performanceTrendChart.value,\n          assessmentTypePerformanceChart: assessmentTypePerformanceChart.value\n        };\n      });\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartRefs\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
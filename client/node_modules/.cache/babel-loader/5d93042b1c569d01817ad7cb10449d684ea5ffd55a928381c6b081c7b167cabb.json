{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'StudentDashboard',\n  setup() {\n    const store = useStore();\n    const user = computed(() => store.state.auth.user);\n    const assessmentChart = ref(null);\n    const attendanceChart = ref(null);\n    const isLoading = ref(true);\n\n    // Data references\n    const assessments = ref([]);\n    const attendance = ref([]);\n\n    // Computed values\n    const subjectCount = computed(() => {\n      const subjects = new Set();\n      assessments.value.forEach(subject => {\n        subjects.add(subject.subject);\n      });\n      return subjects.size;\n    });\n    const assessmentCount = computed(() => {\n      let count = 0;\n      assessments.value.forEach(subject => {\n        count += subject.assessments.length;\n      });\n      return count;\n    });\n    const averageGrade = computed(() => {\n      let totalScore = 0;\n      let totalMaxScore = 0;\n      assessments.value.forEach(subject => {\n        subject.assessments.forEach(assessment => {\n          totalScore += assessment.score;\n          totalMaxScore += assessment.maxScore;\n        });\n      });\n      return totalMaxScore > 0 ? totalScore / totalMaxScore * 100 : 0;\n    });\n    const attendanceRate = computed(() => {\n      let presentCount = 0;\n      let totalCount = 0;\n      attendance.value.forEach(subject => {\n        subject.records.forEach(record => {\n          totalCount++;\n          if (record.status.toLowerCase() === 'present') {\n            presentCount++;\n          }\n        });\n      });\n      return totalCount > 0 ? presentCount / totalCount * 100 : 0;\n    });\n    const recentAssessments = computed(() => {\n      const allAssessments = [];\n      assessments.value.forEach(subject => {\n        subject.assessments.forEach(assessment => {\n          allAssessments.push({\n            ...assessment,\n            subject: subject.subject\n          });\n        });\n      });\n      return allAssessments.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);\n    });\n    const recentAttendance = computed(() => {\n      const allAttendance = [];\n      attendance.value.forEach(subject => {\n        subject.records.forEach(record => {\n          allAttendance.push({\n            ...record,\n            subject: subject.subject\n          });\n        });\n      });\n      return allAttendance.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);\n    });\n\n    // Methods\n    const formatDate = dateString => {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    };\n    const getStatusClass = status => {\n      const statusLower = status.toLowerCase();\n      if (statusLower === 'present') return 'status-present';\n      if (statusLower === 'late') return 'status-late';\n      if (statusLower === 'absent') return 'status-absent';\n      return '';\n    };\n    const createAssessmentChart = () => {\n      if (!assessmentChart.value) return;\n      const ctx = assessmentChart.value.getContext('2d');\n\n      // Collect data for chart\n      const subjects = [];\n      const scoreData = [];\n      const maxScoreData = [];\n      assessments.value.forEach(subject => {\n        let subjectTotalScore = 0;\n        let subjectTotalMaxScore = 0;\n        subject.assessments.forEach(assessment => {\n          subjectTotalScore += assessment.score;\n          subjectTotalMaxScore += assessment.maxScore;\n        });\n        subjects.push(subject.subject);\n        scoreData.push(subjectTotalScore / subjectTotalMaxScore * 100);\n        maxScoreData.push(100); // Max is always 100%\n      });\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: subjects,\n          datasets: [{\n            label: 'Your Score (%)',\n            data: scoreData,\n            backgroundColor: '#4299e1',\n            borderColor: '#3182ce',\n            borderWidth: 1\n          }, {\n            label: 'Max Score',\n            data: maxScoreData,\n            backgroundColor: '#a0aec0',\n            borderColor: '#718096',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            }\n          }\n        }\n      });\n    };\n    const createAttendanceChart = () => {\n      if (!attendanceChart.value) return;\n      const ctx = attendanceChart.value.getContext('2d');\n\n      // Count attendance status\n      let presentCount = 0;\n      let lateCount = 0;\n      let absentCount = 0;\n      attendance.value.forEach(subject => {\n        subject.records.forEach(record => {\n          const status = record.status.toLowerCase();\n          if (status === 'present') presentCount++;else if (status === 'late') lateCount++;else if (status === 'absent') absentCount++;\n        });\n      });\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: [presentCount, lateCount, absentCount],\n            backgroundColor: ['#48bb78', '#ecc94b', '#f56565'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }\n      });\n    };\n\n    // Fetch data\n    const fetchData = async () => {\n      isLoading.value = true;\n      try {\n        // Fetch assessment data\n        const assessmentResponse = await axios.get('/api/users/student/assessments', {\n          headers: {\n            Authorization: `Bearer ${store.state.auth.token}`\n          }\n        });\n        assessments.value = assessmentResponse.data;\n\n        // Fetch attendance data\n        const attendanceResponse = await axios.get('/api/users/student/attendance', {\n          headers: {\n            Authorization: `Bearer ${store.state.auth.token}`\n          }\n        });\n        attendance.value = attendanceResponse.data;\n\n        // Add fallback sample data if needed\n        if (assessments.value.length === 0) {\n          assessments.value = generateSampleAssessments();\n        }\n        if (attendance.value.length === 0) {\n          attendance.value = generateSampleAttendance();\n        }\n      } catch (error) {\n        console.error('Error fetching student data:', error);\n        // Add fallback sample data\n        assessments.value = generateSampleAssessments();\n        attendance.value = generateSampleAttendance();\n      } finally {\n        isLoading.value = false;\n        // Create charts after data is loaded\n        setTimeout(() => {\n          createAssessmentChart();\n          createAttendanceChart();\n        }, 100);\n      }\n    };\n\n    // Generate sample data for testing\n    const generateSampleAssessments = () => {\n      const subjects = ['Mathematics', 'English', 'Science', 'History'];\n      const types = ['Quiz', 'Exam', 'Project', 'Assignment'];\n      return subjects.map(subject => {\n        const assessmentCount = Math.floor(Math.random() * 3) + 2; // 2-4 assessments per subject\n\n        const subjectAssessments = [];\n        for (let i = 0; i < assessmentCount; i++) {\n          const maxScore = [10, 20, 50, 100][Math.floor(Math.random() * 4)];\n          const score = Math.floor(Math.random() * (maxScore * 0.6)) + maxScore * 0.3; // Score between 30% and 90%\n\n          subjectAssessments.push({\n            _id: `sample-${subject}-${i}`,\n            title: `${subject} ${types[Math.floor(Math.random() * types.length)]} ${i + 1}`,\n            type: types[Math.floor(Math.random() * types.length)],\n            maxScore: maxScore,\n            score: score,\n            date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n            teacherName: 'Sample Teacher'\n          });\n        }\n        return {\n          subject,\n          section: '1A',\n          teacher: 'Sample Teacher',\n          assessments: subjectAssessments\n        };\n      });\n    };\n    const generateSampleAttendance = () => {\n      const subjects = ['Mathematics', 'English', 'Science', 'History'];\n      const statuses = ['Present', 'Late', 'Absent'];\n      const statusWeights = [0.8, 0.15, 0.05]; // 80% Present, 15% Late, 5% Absent\n\n      return subjects.map(subject => {\n        const recordCount = Math.floor(Math.random() * 5) + 5; // 5-9 attendance records per subject\n\n        const attendanceRecords = [];\n        for (let i = 0; i < recordCount; i++) {\n          // Generate weighted random status\n          const rand = Math.random();\n          let statusIndex = 0;\n          let cumulativeWeight = 0;\n          for (let j = 0; j < statusWeights.length; j++) {\n            cumulativeWeight += statusWeights[j];\n            if (rand < cumulativeWeight) {\n              statusIndex = j;\n              break;\n            }\n          }\n          attendanceRecords.push({\n            _id: `sample-${subject}-${i}`,\n            date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n            status: statuses[statusIndex],\n            remarks: statuses[statusIndex] === 'Absent' ? 'Excused absence' : ''\n          });\n        }\n        return {\n          subject,\n          section: '1A',\n          teacher: 'Sample Teacher',\n          records: attendanceRecords\n        };\n      });\n    };\n    onMounted(() => {\n      fetchData();\n    });\n    return {\n      user,\n      assessmentChart,\n      attendanceChart,\n      isLoading,\n      subjectCount,\n      assessmentCount,\n      averageGrade,\n      attendanceRate,\n      recentAssessments,\n      recentAttendance,\n      formatDate,\n      getStatusClass\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","axios","Chart","name","setup","store","user","state","auth","assessmentChart","attendanceChart","isLoading","assessments","attendance","subjectCount","subjects","Set","value","forEach","subject","add","size","assessmentCount","count","length","averageGrade","totalScore","totalMaxScore","assessment","score","maxScore","attendanceRate","presentCount","totalCount","records","record","status","toLowerCase","recentAssessments","allAssessments","push","sort","a","b","Date","date","slice","recentAttendance","allAttendance","formatDate","dateString","toLocaleDateString","year","month","day","getStatusClass","statusLower","createAssessmentChart","ctx","getContext","scoreData","maxScoreData","subjectTotalScore","subjectTotalMaxScore","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","max","title","display","text","createAttendanceChart","lateCount","absentCount","plugins","legend","position","fetchData","assessmentResponse","get","headers","Authorization","token","attendanceResponse","generateSampleAssessments","generateSampleAttendance","error","console","setTimeout","types","map","Math","floor","random","subjectAssessments","i","_id","now","toISOString","teacherName","section","teacher","statuses","statusWeights","recordCount","attendanceRecords","rand","statusIndex","cumulativeWeight","j","remarks"],"sources":["D:\\au_dev\\client\\src\\views\\StudentDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"student-dashboard\">\r\n    <div class=\"greeting-section\">\r\n      <h2>Welcome, {{ user.firstName }}!</h2>\r\n      <p class=\"subtitle\">Here's your academic performance overview</p>\r\n    </div>\r\n\r\n    <!-- Stats Cards Row -->\r\n    <div class=\"stats-row\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-book\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Total Subjects</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">{{ subjectCount }}</div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-clipboard-check\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Assessments</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">{{ assessmentCount }}</div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chart-line\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Average Score</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">\r\n            {{ averageGrade ? averageGrade.toFixed(2) + '%' : 'No data' }}\r\n          </div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-check\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Attendance Rate</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">\r\n            {{ attendanceRate ? attendanceRate.toFixed(2) + '%' : 'No data' }}\r\n          </div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Recent Assessments Section -->\r\n    <div class=\"widget-row\">\r\n      <div class=\"widget-card\">\r\n        <div class=\"widget-header\">\r\n          <h3>Recent Assessments</h3>\r\n          <router-link to=\"/student/assessments\" class=\"view-all-link\">\r\n            View All <i class=\"fas fa-arrow-right\"></i>\r\n          </router-link>\r\n        </div>\r\n        <div v-if=\"isLoading\" class=\"loading-placeholder\">\r\n          <div class=\"spinner\"></div>\r\n          <p>Loading assessments...</p>\r\n        </div>\r\n        <div v-else-if=\"recentAssessments.length === 0\" class=\"no-data\">\r\n          <i class=\"fas fa-clipboard\"></i>\r\n          <p>No assessment data available</p>\r\n        </div>\r\n        <div v-else class=\"assessment-list\">\r\n          <table class=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Subject</th>\r\n                <th>Title</th>\r\n                <th>Type</th>\r\n                <th>Score</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"assessment in recentAssessments\" :key=\"assessment._id\">\r\n                <td>{{ formatDate(assessment.date) }}</td>\r\n                <td>{{ assessment.subject }}</td>\r\n                <td>{{ assessment.title }}</td>\r\n                <td>{{ assessment.type }}</td>\r\n                <td>\r\n                  <span class=\"score\">\r\n                    {{ assessment.score }} / {{ assessment.maxScore }}\r\n                    <span class=\"score-percent\">\r\n                      ({{ ((assessment.score / assessment.maxScore) * 100).toFixed(0) }}%)\r\n                    </span>\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Record Section -->\r\n    <div class=\"widget-row\">\r\n      <div class=\"widget-card\">\r\n        <div class=\"widget-header\">\r\n          <h3>Recent Attendance</h3>\r\n          <router-link to=\"/student/attendance\" class=\"view-all-link\">\r\n            View All <i class=\"fas fa-arrow-right\"></i>\r\n          </router-link>\r\n        </div>\r\n        <div v-if=\"isLoading\" class=\"loading-placeholder\">\r\n          <div class=\"spinner\"></div>\r\n          <p>Loading attendance records...</p>\r\n        </div>\r\n        <div v-else-if=\"recentAttendance.length === 0\" class=\"no-data\">\r\n          <i class=\"fas fa-calendar-check\"></i>\r\n          <p>No attendance data available</p>\r\n        </div>\r\n        <div v-else class=\"attendance-list\">\r\n          <table class=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Subject</th>\r\n                <th>Status</th>\r\n                <th>Remarks</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"record in recentAttendance\" :key=\"record._id\">\r\n                <td>{{ formatDate(record.date) }}</td>\r\n                <td>{{ record.subject }}</td>\r\n                <td>\r\n                  <span :class=\"['status-badge', getStatusClass(record.status)]\">\r\n                    {{ record.status }}\r\n                  </span>\r\n                </td>\r\n                <td>{{ record.remarks || '-' }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Charts -->\r\n    <div class=\"chart-row\">\r\n      <div class=\"chart-card\">\r\n        <h3>Assessment Performance</h3>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"assessmentChart\" id=\"assessmentChart\"></canvas>\r\n        </div>\r\n      </div>\r\n      <div class=\"chart-card\">\r\n        <h3>Attendance Overview</h3>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"attendanceChart\" id=\"attendanceChart\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport Chart from 'chart.js/auto'\r\n\r\nexport default {\r\n  name: 'StudentDashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    const user = computed(() => store.state.auth.user)\r\n    const assessmentChart = ref(null)\r\n    const attendanceChart = ref(null)\r\n    const isLoading = ref(true)\r\n    \r\n    // Data references\r\n    const assessments = ref([])\r\n    const attendance = ref([])\r\n    \r\n    // Computed values\r\n    const subjectCount = computed(() => {\r\n      const subjects = new Set()\r\n      assessments.value.forEach(subject => {\r\n        subjects.add(subject.subject)\r\n      })\r\n      return subjects.size\r\n    })\r\n    \r\n    const assessmentCount = computed(() => {\r\n      let count = 0\r\n      assessments.value.forEach(subject => {\r\n        count += subject.assessments.length\r\n      })\r\n      return count\r\n    })\r\n    \r\n    const averageGrade = computed(() => {\r\n      let totalScore = 0\r\n      let totalMaxScore = 0\r\n      \r\n      assessments.value.forEach(subject => {\r\n        subject.assessments.forEach(assessment => {\r\n          totalScore += assessment.score\r\n          totalMaxScore += assessment.maxScore\r\n        })\r\n      })\r\n      \r\n      return totalMaxScore > 0 ? (totalScore / totalMaxScore) * 100 : 0\r\n    })\r\n    \r\n    const attendanceRate = computed(() => {\r\n      let presentCount = 0\r\n      let totalCount = 0\r\n      \r\n      attendance.value.forEach(subject => {\r\n        subject.records.forEach(record => {\r\n          totalCount++\r\n          if (record.status.toLowerCase() === 'present') {\r\n            presentCount++\r\n          }\r\n        })\r\n      })\r\n      \r\n      return totalCount > 0 ? (presentCount / totalCount) * 100 : 0\r\n    })\r\n    \r\n    const recentAssessments = computed(() => {\r\n      const allAssessments = []\r\n      \r\n      assessments.value.forEach(subject => {\r\n        subject.assessments.forEach(assessment => {\r\n          allAssessments.push({\r\n            ...assessment,\r\n            subject: subject.subject\r\n          })\r\n        })\r\n      })\r\n      \r\n      return allAssessments\r\n        .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n        .slice(0, 5)\r\n    })\r\n    \r\n    const recentAttendance = computed(() => {\r\n      const allAttendance = []\r\n      \r\n      attendance.value.forEach(subject => {\r\n        subject.records.forEach(record => {\r\n          allAttendance.push({\r\n            ...record,\r\n            subject: subject.subject\r\n          })\r\n        })\r\n      })\r\n      \r\n      return allAttendance\r\n        .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n        .slice(0, 5)\r\n    })\r\n    \r\n    // Methods\r\n    const formatDate = (dateString) => {\r\n      const date = new Date(dateString)\r\n      return date.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      })\r\n    }\r\n    \r\n    const getStatusClass = (status) => {\r\n      const statusLower = status.toLowerCase()\r\n      if (statusLower === 'present') return 'status-present'\r\n      if (statusLower === 'late') return 'status-late'\r\n      if (statusLower === 'absent') return 'status-absent'\r\n      return ''\r\n    }\r\n    \r\n    const createAssessmentChart = () => {\r\n      if (!assessmentChart.value) return\r\n      \r\n      const ctx = assessmentChart.value.getContext('2d')\r\n      \r\n      // Collect data for chart\r\n      const subjects = []\r\n      const scoreData = []\r\n      const maxScoreData = []\r\n      \r\n      assessments.value.forEach(subject => {\r\n        let subjectTotalScore = 0\r\n        let subjectTotalMaxScore = 0\r\n        \r\n        subject.assessments.forEach(assessment => {\r\n          subjectTotalScore += assessment.score\r\n          subjectTotalMaxScore += assessment.maxScore\r\n        })\r\n        \r\n        subjects.push(subject.subject)\r\n        scoreData.push((subjectTotalScore / subjectTotalMaxScore) * 100)\r\n        maxScoreData.push(100) // Max is always 100%\r\n      })\r\n      \r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: subjects,\r\n          datasets: [\r\n            {\r\n              label: 'Your Score (%)',\r\n              data: scoreData,\r\n              backgroundColor: '#4299e1',\r\n              borderColor: '#3182ce',\r\n              borderWidth: 1\r\n            },\r\n            {\r\n              label: 'Max Score',\r\n              data: maxScoreData,\r\n              backgroundColor: '#a0aec0',\r\n              borderColor: '#718096',\r\n              borderWidth: 1\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Score (%)'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n    \r\n    const createAttendanceChart = () => {\r\n      if (!attendanceChart.value) return\r\n      \r\n      const ctx = attendanceChart.value.getContext('2d')\r\n      \r\n      // Count attendance status\r\n      let presentCount = 0\r\n      let lateCount = 0\r\n      let absentCount = 0\r\n      \r\n      attendance.value.forEach(subject => {\r\n        subject.records.forEach(record => {\r\n          const status = record.status.toLowerCase()\r\n          if (status === 'present') presentCount++\r\n          else if (status === 'late') lateCount++\r\n          else if (status === 'absent') absentCount++\r\n        })\r\n      })\r\n      \r\n      new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Present', 'Late', 'Absent'],\r\n          datasets: [\r\n            {\r\n              data: [presentCount, lateCount, absentCount],\r\n              backgroundColor: ['#48bb78', '#ecc94b', '#f56565'],\r\n              borderWidth: 1\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Fetch data\r\n    const fetchData = async () => {\r\n      isLoading.value = true\r\n      \r\n      try {\r\n        // Fetch assessment data\r\n        const assessmentResponse = await axios.get('/api/users/student/assessments', {\r\n          headers: {\r\n            Authorization: `Bearer ${store.state.auth.token}`\r\n          }\r\n        })\r\n        assessments.value = assessmentResponse.data\r\n        \r\n        // Fetch attendance data\r\n        const attendanceResponse = await axios.get('/api/users/student/attendance', {\r\n          headers: {\r\n            Authorization: `Bearer ${store.state.auth.token}`\r\n          }\r\n        })\r\n        attendance.value = attendanceResponse.data\r\n        \r\n        // Add fallback sample data if needed\r\n        if (assessments.value.length === 0) {\r\n          assessments.value = generateSampleAssessments()\r\n        }\r\n        \r\n        if (attendance.value.length === 0) {\r\n          attendance.value = generateSampleAttendance()\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching student data:', error)\r\n        // Add fallback sample data\r\n        assessments.value = generateSampleAssessments()\r\n        attendance.value = generateSampleAttendance()\r\n      } finally {\r\n        isLoading.value = false\r\n        // Create charts after data is loaded\r\n        setTimeout(() => {\r\n          createAssessmentChart()\r\n          createAttendanceChart()\r\n        }, 100)\r\n      }\r\n    }\r\n    \r\n    // Generate sample data for testing\r\n    const generateSampleAssessments = () => {\r\n      const subjects = ['Mathematics', 'English', 'Science', 'History']\r\n      const types = ['Quiz', 'Exam', 'Project', 'Assignment']\r\n      \r\n      return subjects.map(subject => {\r\n        const assessmentCount = Math.floor(Math.random() * 3) + 2 // 2-4 assessments per subject\r\n        \r\n        const subjectAssessments = []\r\n        for (let i = 0; i < assessmentCount; i++) {\r\n          const maxScore = [10, 20, 50, 100][Math.floor(Math.random() * 4)]\r\n          const score = Math.floor(Math.random() * (maxScore * 0.6)) + (maxScore * 0.3) // Score between 30% and 90%\r\n          \r\n          subjectAssessments.push({\r\n            _id: `sample-${subject}-${i}`,\r\n            title: `${subject} ${types[Math.floor(Math.random() * types.length)]} ${i + 1}`,\r\n            type: types[Math.floor(Math.random() * types.length)],\r\n            maxScore: maxScore,\r\n            score: score,\r\n            date: new Date(Date.now() - (Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString(),\r\n            teacherName: 'Sample Teacher'\r\n          })\r\n        }\r\n        \r\n        return {\r\n          subject,\r\n          section: '1A',\r\n          teacher: 'Sample Teacher',\r\n          assessments: subjectAssessments\r\n        }\r\n      })\r\n    }\r\n    \r\n    const generateSampleAttendance = () => {\r\n      const subjects = ['Mathematics', 'English', 'Science', 'History']\r\n      const statuses = ['Present', 'Late', 'Absent']\r\n      const statusWeights = [0.8, 0.15, 0.05] // 80% Present, 15% Late, 5% Absent\r\n      \r\n      return subjects.map(subject => {\r\n        const recordCount = Math.floor(Math.random() * 5) + 5 // 5-9 attendance records per subject\r\n        \r\n        const attendanceRecords = []\r\n        for (let i = 0; i < recordCount; i++) {\r\n          // Generate weighted random status\r\n          const rand = Math.random()\r\n          let statusIndex = 0\r\n          let cumulativeWeight = 0\r\n          \r\n          for (let j = 0; j < statusWeights.length; j++) {\r\n            cumulativeWeight += statusWeights[j]\r\n            if (rand < cumulativeWeight) {\r\n              statusIndex = j\r\n              break\r\n            }\r\n          }\r\n          \r\n          attendanceRecords.push({\r\n            _id: `sample-${subject}-${i}`,\r\n            date: new Date(Date.now() - (Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString(),\r\n            status: statuses[statusIndex],\r\n            remarks: statuses[statusIndex] === 'Absent' ? 'Excused absence' : ''\r\n          })\r\n        }\r\n        \r\n        return {\r\n          subject,\r\n          section: '1A',\r\n          teacher: 'Sample Teacher',\r\n          records: attendanceRecords\r\n        }\r\n      })\r\n    }\r\n    \r\n    onMounted(() => {\r\n      fetchData()\r\n    })\r\n    \r\n    return {\r\n      user,\r\n      assessmentChart,\r\n      attendanceChart,\r\n      isLoading,\r\n      subjectCount,\r\n      assessmentCount,\r\n      averageGrade,\r\n      attendanceRate,\r\n      recentAssessments,\r\n      recentAttendance,\r\n      formatDate,\r\n      getStatusClass\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.student-dashboard {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.greeting-section {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.greeting-section h2 {\r\n  font-size: 1.8rem;\r\n  color: #2d3748;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.subtitle {\r\n  color: #718096;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.stats-row {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 1rem;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  background: #ebf4ff;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.stat-icon i {\r\n  font-size: 1.5rem;\r\n  color: #4299e1;\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-content h3 {\r\n  font-size: 0.875rem;\r\n  color: #718096;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n}\r\n\r\n.widget-row {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.widget-card, .chart-card {\r\n  background: white;\r\n  border-radius: 1rem;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n  overflow: hidden;\r\n}\r\n\r\n.widget-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.widget-header h3 {\r\n  font-size: 1.25rem;\r\n  color: #2d3748;\r\n  margin: 0;\r\n}\r\n\r\n.view-all-link {\r\n  color: #4299e1;\r\n  font-size: 0.875rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  text-decoration: none;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.view-all-link:hover {\r\n  color: #2b6cb0;\r\n}\r\n\r\n.loading-placeholder {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 3rem;\r\n  color: #a0aec0;\r\n}\r\n\r\n.spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid #e2e8f0;\r\n  border-top-color: #4299e1;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n\r\n.no-data {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 3rem;\r\n  color: #a0aec0;\r\n}\r\n\r\n.no-data i {\r\n  font-size: 3rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.data-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.data-table th {\r\n  padding: 1rem;\r\n  text-align: left;\r\n  font-weight: 500;\r\n  color: #4a5568;\r\n  background: #f7fafc;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.data-table td {\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n}\r\n\r\n.data-table tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n.score {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-percent {\r\n  color: #718096;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.status-badge {\r\n  display: inline-block;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 1rem;\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-present {\r\n  background: #c6f6d5;\r\n  color: #2f855a;\r\n}\r\n\r\n.status-late {\r\n  background: #fefcbf;\r\n  color: #b7791f;\r\n}\r\n\r\n.status-absent {\r\n  background: #fed7d7;\r\n  color: #c53030;\r\n}\r\n\r\n.chart-row {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.chart-card h3 {\r\n  font-size: 1.25rem;\r\n  color: #2d3748;\r\n  margin: 0 0 1.5rem 0;\r\n}\r\n\r\n.chart-container {\r\n  height: 300px;\r\n}\r\n\r\n.skeleton-loader {\r\n  height: 1.5rem;\r\n  width: 100%;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: loading 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n@keyframes loading {\r\n  0% { background-position: 200% 0; }\r\n  100% { background-position: -200% 0; }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .stats-row {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  \r\n  .chart-row {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .stats-row {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .widget-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .data-table th,\r\n  .data-table td {\r\n    padding: 0.75rem 0.5rem;\r\n    font-size: 0.875rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
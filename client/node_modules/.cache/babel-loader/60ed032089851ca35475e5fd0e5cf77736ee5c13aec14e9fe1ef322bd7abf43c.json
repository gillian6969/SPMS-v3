{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"greeting-section mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"greeting\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown\"\n};\nconst _hoisted_6 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_7 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_8 = {\n  class: \"mb-3\"\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = [\"value\"];\nconst _hoisted_16 = {\n  class: \"mb-3\"\n};\nconst _hoisted_17 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_18 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_19 = [\"max\"];\nconst _hoisted_20 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_21 = [\"max\"];\nconst _hoisted_22 = [\"disabled\"];\nconst _hoisted_23 = {\n  key: 0\n};\nconst _hoisted_24 = {\n  key: 1\n};\nconst _hoisted_25 = {\n  class: \"row g-4 mb-4\"\n};\nconst _hoisted_26 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_27 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_28 = {\n  class: \"card-info\"\n};\nconst _hoisted_29 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_30 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_31 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_32 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_33 = {\n  class: \"card-info\"\n};\nconst _hoisted_34 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_35 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_36 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_37 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_38 = {\n  class: \"card-info\"\n};\nconst _hoisted_39 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_40 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_41 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_42 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_43 = {\n  class: \"card-info\"\n};\nconst _hoisted_44 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_45 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_46 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_47 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_48 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_49 = {\n  class: \"chart-card\"\n};\nconst _hoisted_50 = {\n  class: \"card-body\"\n};\nconst _hoisted_51 = {\n  key: 0,\n  class: \"d-flex justify-content-center py-5\"\n};\nconst _hoisted_52 = {\n  class: \"chart-container\"\n};\nconst _hoisted_53 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_54 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_55 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_56 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_57 = [\"disabled\"];\nconst _hoisted_58 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_59 = {\n  class: \"chart-card\"\n};\nconst _hoisted_60 = {\n  class: \"card-body\"\n};\nconst _hoisted_61 = {\n  key: 0,\n  class: \"d-flex justify-content-center py-5\"\n};\nconst _hoisted_62 = {\n  class: \"chart-container\"\n};\nconst _hoisted_63 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_64 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_65 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_66 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_67 = [\"disabled\"];\nconst _hoisted_68 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_69 = {\n  class: \"chart-card\"\n};\nconst _hoisted_70 = {\n  class: \"card-body\"\n};\nconst _hoisted_71 = {\n  key: 0,\n  class: \"d-flex justify-content-center py-5\"\n};\nconst _hoisted_72 = {\n  class: \"chart-container\"\n};\nconst _hoisted_73 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_74 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_75 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_76 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_77 = [\"disabled\"];\nconst _hoisted_78 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_79 = {\n  class: \"chart-card\"\n};\nconst _hoisted_80 = {\n  class: \"card-body\"\n};\nconst _hoisted_81 = {\n  key: 0,\n  class: \"d-flex justify-content-center py-5\"\n};\nconst _hoisted_82 = {\n  class: \"chart-container\"\n};\nconst _hoisted_83 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_84 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_85 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_86 = {\n  class: \"text-end mt-3\"\n};\nconst _hoisted_87 = [\"disabled\"];\nconst _hoisted_88 = {\n  class: \"card mb-4\"\n};\nconst _hoisted_89 = {\n  class: \"card-body\"\n};\nconst _hoisted_90 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_91 = {\n  class: \"table\"\n};\nconst _hoisted_92 = {\n  key: 0\n};\nconst _hoisted_93 = {\n  key: 1\n};\nconst _hoisted_94 = {\n  class: \"modal fade\",\n  id: \"reportModal\",\n  tabindex: \"-1\",\n  \"aria-labelledby\": \"reportModalLabel\",\n  \"aria-hidden\": \"true\",\n  ref: \"reportModal\"\n};\nconst _hoisted_95 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_96 = {\n  class: \"modal-content\"\n};\nconst _hoisted_97 = {\n  class: \"modal-body\"\n};\nconst _hoisted_98 = {\n  class: \"mb-3\"\n};\nconst _hoisted_99 = {\n  class: \"mb-3\"\n};\nconst _hoisted_100 = [\"max\"];\nconst _hoisted_101 = {\n  class: \"mb-3\"\n};\nconst _hoisted_102 = [\"max\"];\nconst _hoisted_103 = {\n  class: \"modal-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Greeting Section \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h2\", _hoisted_3, \"Welcome, \" + _toDisplayString($setup.userName), 1 /* TEXT */), _cache[15] || (_cache[15] = _createElementVNode(\"p\", {\n    class: \"greeting-subtitle\"\n  }, \"Here's your dashboard overview\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_4, [_cache[29] || (_cache[29] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", _hoisted_6, [_cache[16] || (_cache[16] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[27] || (_cache[27] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_cache[18] || (_cache[18] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, [_cache[17] || (_cache[17] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Years\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[20] || (_cache[20] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[19] || (_cache[19] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_11), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[22] || (_cache[22] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[21] || (_cache[21] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_15);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_14), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_16, [_cache[25] || (_cache[25] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_cache[23] || (_cache[23] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_19), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_20, [_cache[24] || (_cache[24] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_21), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[28] || (_cache[28] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: $setup.loading\n  }, [$setup.loading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_23, _cache[26] || (_cache[26] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Loading...\")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_24, \"Apply Filters\"))], 8 /* PROPS */, _hoisted_22)])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_25, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_cache[32] || (_cache[32] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_28, [_cache[31] || (_cache[31] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, _toDisplayString($setup.totalStudents), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_30, _cache[30] || (_cache[30] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Sections Card \"), _createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_cache[35] || (_cache[35] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_33, [_cache[34] || (_cache[34] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_34, _toDisplayString($setup.totalSections), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_35, _cache[33] || (_cache[33] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Subjects Card \"), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"div\", _hoisted_37, [_cache[38] || (_cache[38] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-book\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_38, [_cache[37] || (_cache[37] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"My Subjects\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_39, _toDisplayString($setup.totalSubjects), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_40, _cache[36] || (_cache[36] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"div\", _hoisted_42, [_cache[41] || (_cache[41] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_43, [_cache[40] || (_cache[40] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Class Average\", -1 /* HOISTED */)), !$setup.loading && $setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_44, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_45, _cache[39] || (_cache[39] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_46, \"No data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_47, [_createCommentVNode(\" Attendance Distribution Chart (previously Performance Distribution) \"), _createElementVNode(\"div\", _hoisted_48, [_createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"div\", _hoisted_50, [_cache[45] || (_cache[45] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[46] || (_cache[46] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns\", -1 /* HOISTED */)), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_51, _cache[42] || (_cache[42] = [_createElementVNode(\"div\", {\n    class: \"spinner-border\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_52, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_53, _cache[43] || (_cache[43] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_54, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_55, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_56, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $setup.openGenerateModal('attendance')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasAttendanceData || $setup.loading\n  }, _cache[44] || (_cache[44] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate Report \")]), 8 /* PROPS */, _hoisted_57)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_58, [_createElementVNode(\"div\", _hoisted_59, [_createElementVNode(\"div\", _hoisted_60, [_cache[50] || (_cache[50] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[51] || (_cache[51] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type\", -1 /* HOISTED */)), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_61, _cache[47] || (_cache[47] = [_createElementVNode(\"div\", {\n    class: \"spinner-border\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_62, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_63, _cache[48] || (_cache[48] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_64, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_65, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_66, [_createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $setup.openGenerateModal('assessmentType')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasAssessmentData || $setup.loading\n  }, _cache[49] || (_cache[49] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate Report \")]), 8 /* PROPS */, _hoisted_67)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_68, [_createElementVNode(\"div\", _hoisted_69, [_createElementVNode(\"div\", _hoisted_70, [_cache[55] || (_cache[55] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[56] || (_cache[56] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Class average scores across recent assessments\", -1 /* HOISTED */)), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_71, _cache[52] || (_cache[52] = [_createElementVNode(\"div\", {\n    class: \"spinner-border\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_72, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_73, _cache[53] || (_cache[53] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_74, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_75, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_76, [_createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $setup.openGenerateModal('performanceTrend')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasPerformanceData || $setup.loading\n  }, _cache[54] || (_cache[54] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate Report \")]), 8 /* PROPS */, _hoisted_77)])])])]), _createCommentVNode(\" Assessment Type Performance \"), _createElementVNode(\"div\", _hoisted_78, [_createElementVNode(\"div\", _hoisted_79, [_createElementVNode(\"div\", _hoisted_80, [_cache[60] || (_cache[60] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[61] || (_cache[61] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_81, _cache[57] || (_cache[57] = [_createElementVNode(\"div\", {\n    class: \"spinner-border\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_82, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_83, _cache[58] || (_cache[58] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_84, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_85, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_86, [_createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => $setup.openGenerateModal('assessmentTypePerformance')),\n    class: \"btn btn-sm btn-outline-success\",\n    disabled: !$setup.hasPerformanceData || $setup.loading\n  }, _cache[59] || (_cache[59] = [_createElementVNode(\"i\", {\n    class: \"fas fa-download me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Generate Report \")]), 8 /* PROPS */, _hoisted_87)])])])])]), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_88, [_createElementVNode(\"div\", _hoisted_89, [_cache[65] || (_cache[65] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, \"Recent Activity\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_90, [_createElementVNode(\"table\", _hoisted_91, [_cache[64] || (_cache[64] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Activity\"), _createElementVNode(\"th\", null, \"Details\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [$setup.loading ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_92, _cache[62] || (_cache[62] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }), _createTextVNode(\"Loading activities... \")], -1 /* HOISTED */)]))) : !$setup.hasActivity ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_93, _cache[63] || (_cache[63] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, \"No recent activity\", -1 /* HOISTED */)]))) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 2\n  }, _renderList($setup.recentActivities, activity => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: activity.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(activity.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.details), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])]), _createCommentVNode(\" Report Generation Modal \"), _createElementVNode(\"div\", _hoisted_94, [_createElementVNode(\"div\", _hoisted_95, [_createElementVNode(\"div\", _hoisted_96, [_cache[72] || (_cache[72] = _createElementVNode(\"div\", {\n    class: \"modal-header\"\n  }, [_createElementVNode(\"h5\", {\n    class: \"modal-title\",\n    id: \"reportModalLabel\"\n  }, \"Generate Report\"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    \"data-bs-dismiss\": \"modal\",\n    \"aria-label\": \"Close\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_97, [_createElementVNode(\"div\", _hoisted_98, [_cache[67] || (_cache[67] = _createElementVNode(\"label\", {\n    for: \"reportFormat\",\n    class: \"form-label\"\n  }, \"Report Format\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    id: \"reportFormat\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $setup.reportFormat = $event)\n  }, _cache[66] || (_cache[66] = [_createElementVNode(\"option\", {\n    value: \"excel\"\n  }, \"Excel (.xlsx)\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"pdf\"\n  }, \"PDF (.pdf)\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.reportFormat]])]), _createElementVNode(\"div\", _hoisted_99, [_cache[68] || (_cache[68] = _createElementVNode(\"label\", {\n    for: \"reportStartDate\",\n    class: \"form-label\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    id: \"reportStartDate\",\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => $setup.reportStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_100), [[_vModelText, $setup.reportStartDate]])]), _createElementVNode(\"div\", _hoisted_101, [_cache[69] || (_cache[69] = _createElementVNode(\"label\", {\n    for: \"reportEndDate\",\n    class: \"form-label\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    id: \"reportEndDate\",\n    \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => $setup.reportEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_102), [[_vModelText, $setup.reportEndDate]])]), _cache[70] || (_cache[70] = _createElementVNode(\"div\", {\n    class: \"alert alert-info\"\n  }, [_createElementVNode(\"small\", null, \"Report will include data for the selected date range. Default is last 30 days.\")], -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_103, [_cache[71] || (_cache[71] = _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary\",\n    \"data-bs-dismiss\": \"modal\"\n  }, \"Cancel\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    onClick: _cache[14] || (_cache[14] = (...args) => $setup.generateReport && $setup.generateReport(...args))\n  }, \"Generate\")])])])], 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","type","id","key","ref","tabindex","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","userName","_hoisted_4","_hoisted_5","_hoisted_6","_createTextVNode","getFilterDisplay","_hoisted_7","_hoisted_8","_cache","$event","selectedYear","onChange","args","handleYearChange","value","_renderList","availableYears","year","_hoisted_9","_hoisted_10","selectedSection","disabled","sections","section","_hoisted_12","_hoisted_11","_hoisted_13","selectedSubject","subjects","subject","_hoisted_15","_hoisted_14","_hoisted_16","_hoisted_17","_hoisted_18","selectedStartDate","max","today","_hoisted_19","_hoisted_20","selectedEndDate","_hoisted_21","onClick","applyFilters","loading","_hoisted_23","_hoisted_24","_hoisted_22","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","totalStudents","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","totalSections","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","totalSubjects","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","hasPerformanceData","_hoisted_44","averageScore","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","role","_hoisted_52","_hoisted_53","_hoisted_54","hasAttendanceData","_hoisted_55","_hoisted_56","openGenerateModal","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","hasAssessmentData","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","_hoisted_80","_hoisted_81","_hoisted_82","_hoisted_83","_hoisted_84","_hoisted_85","_hoisted_86","_hoisted_87","_hoisted_88","_hoisted_89","_hoisted_90","_hoisted_91","_hoisted_92","colspan","hasActivity","_hoisted_93","recentActivities","activity","formatDate","date","details","_hoisted_94","_hoisted_95","_hoisted_96","_hoisted_97","_hoisted_98","for","reportFormat","_hoisted_99","reportStartDate","_hoisted_100","_hoisted_101","reportEndDate","_hoisted_102","_hoisted_103","generateReport"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div v-if=\"loading\" class=\"d-flex justify-content-center py-5\">\n              <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"openGenerateModal('attendance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAttendanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate Report\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div v-if=\"loading\" class=\"d-flex justify-content-center py-5\">\n              <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"openGenerateModal('assessmentType')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasAssessmentData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate Report\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div v-if=\"loading\" class=\"d-flex justify-content-center py-5\">\n              <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"openGenerateModal('performanceTrend')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate Report\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div v-if=\"loading\" class=\"d-flex justify-content-center py-5\">\n              <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <button @click=\"openGenerateModal('assessmentTypePerformance')\" class=\"btn btn-sm btn-outline-success\" :disabled=\"!hasPerformanceData || loading\">\n                <i class=\"fas fa-download me-1\"></i> Generate Report\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Report Generation Modal -->\n  <div class=\"modal fade\" id=\"reportModal\" tabindex=\"-1\" aria-labelledby=\"reportModalLabel\" aria-hidden=\"true\" ref=\"reportModal\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"reportModalLabel\">Generate Report</h5>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"mb-3\">\n            <label for=\"reportFormat\" class=\"form-label\">Report Format</label>\n            <select class=\"form-select\" id=\"reportFormat\" v-model=\"reportFormat\">\n              <option value=\"excel\">Excel (.xlsx)</option>\n              <option value=\"pdf\">PDF (.pdf)</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"reportStartDate\" class=\"form-label\">Start Date</label>\n            <input type=\"date\" class=\"form-control\" id=\"reportStartDate\" v-model=\"reportStartDate\" :max=\"today\">\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"reportEndDate\" class=\"form-label\">End Date</label>\n            <input type=\"date\" class=\"form-control\" id=\"reportEndDate\" v-model=\"reportEndDate\" :max=\"today\">\n          </div>\n          <div class=\"alert alert-info\">\n            <small>Report will include data for the selected date range. Default is last 30 days.</small>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"generateReport\">Generate</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { saveAs } from 'file-saver'\nimport * as XLSX from 'xlsx'\nimport bootstrap from 'bootstrap/dist/js/bootstrap.bundle.min.js'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      try {\n      if (data.value && data.value.attendanceDistribution) {\n          // Check if we have an array and if any value is > 0\n          const distribution = data.value.attendanceDistribution;\n          if (Array.isArray(distribution) && distribution.length > 0) {\n            return distribution.some(val => {\n              const numVal = Number(val);\n              return !isNaN(numVal) && numVal > 0;\n            });\n          }\n        }\n        \n        // Also check chartData as a fallback\n        if (chartData.value && chartData.value.attendance) {\n          const attendance = chartData.value.attendance;\n          return !!(\n            (Number(attendance.present) > 0) || \n            (Number(attendance.late) > 0) || \n            (Number(attendance.absent) > 0)\n          );\n        }\n        \n      return false;\n      } catch (err) {\n        console.error('Error in hasAttendanceData:', err);\n        return false;\n      }\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n            \n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n      \n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters with URLSearchParams to ensure proper encoding\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n        \n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        \n        console.log(`Fetching ${chartType} data with params:`, Object.fromEntries(params));\n        \n        let endpoint;\n        let url;\n        \n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        url = `http://localhost:8000/api/${endpoint}?${params.toString()}`;\n        console.log(`Requesting URL: ${url}`);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log(`${chartType} data received:`, response.data);\n        \n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n        \n        // Update the specific chart\n        switch (chartType) {\n          case 'attendance':\n            if (response.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = response.data;\n              \n              // Ensure we have numbers for the chart\n              const present = parseInt(attendanceStats.present) || 0;\n              const late = parseInt(attendanceStats.late) || 0;\n              const absent = parseInt(attendanceStats.absent) || 0;\n              \n              console.log('Attendance stats for chart:', { present, late, absent });\n              \n              const formattedData = {\n                attendanceDistribution: [present, late, absent]\n              };\n              \n              // Update the attendance data in our main data store too\n              if (data.value) {\n                data.value.attendanceDistribution = formattedData.attendanceDistribution;\n              }\n              \n              updatePerformanceChart(formattedData);\n            }\n            break;\n          case 'assessmentType':\n            if (response.data && response.data.assessmentTypes) {\n              const assessmentData = [];\n              \n              Object.keys(response.data.assessmentTypes).forEach(type => {\n                const typeData = response.data.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  }\n                  \n                  assessmentData.push({\n                    type: type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                }\n              });\n              \n              updateAssessmentTypeChart({ assessmentData });\n            }\n            break;\n          case 'performanceTrend':\n            if (response.data) {\n              // Create performance trends data\n              const performanceTrends = Array.isArray(response.data) ? response.data\n                .filter(a => a.date) // Only include assessments with dates\n                .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n                .map(assessment => {\n                  // Calculate average score for this assessment\n                  let averageScore = 0;\n                  let scoreArray = [];\n                  \n                  if (assessment.scores) {\n                    if (Array.isArray(assessment.scores)) {\n                      scoreArray = assessment.scores;\n                    } else if (typeof assessment.scores === 'object') {\n                      scoreArray = Object.values(assessment.scores);\n                    }\n                    \n                    const validScores = scoreArray.filter(score => typeof score === 'number');\n                    if (validScores.length > 0) {\n                      const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                      averageScore = totalScore / validScores.length;\n                    }\n                  }\n                  \n                  return {\n                    date: assessment.date,\n                    score: averageScore,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  };\n                }) : [];\n              \n              updatePerformanceTrendChart(performanceTrends);\n            }\n            break;\n          case 'assessmentTypePerformance':\n            if (response.data) {\n              // Create performance trends data for assessment type performance\n              const performanceTrends = Array.isArray(response.data) ? response.data\n                .filter(a => a.date) // Only include assessments with dates\n                .map(assessment => ({\n                  date: assessment.date,\n                  score: assessment.averageScore || 0,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                })) : [];\n              \n              updateAssessmentTypePerformanceChart({\n                performanceTrends\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n        // If the chart type is attendance, ensure we update with empty data\n        if (chartType === 'attendance') {\n          updatePerformanceChart({\n            attendanceDistribution: [0, 0, 0]\n          });\n        }\n      }\n    };\n    \n    // Function to generate and download chart data\n    const generateChartData = async (chartType) => {\n      try {\n        console.log(`Generating Excel for ${chartType} chart`);\n        \n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        \n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n            \n            // Improved attendance data extraction with explicit type conversion\n            let present = 0, late = 0, absent = 0;\n            \n            // Try multiple data sources\n            if (chartData.value[chartType]) {\n              present = Number(chartData.value[chartType].present || 0);\n              late = Number(chartData.value[chartType].late || 0);\n              absent = Number(chartData.value[chartType].absent || 0);\n            } else if (data.value?.attendanceDistribution && Array.isArray(data.value.attendanceDistribution)) {\n              present = Number(data.value.attendanceDistribution[0] || 0);\n              late = Number(data.value.attendanceDistribution[1] || 0);\n              absent = Number(data.value.attendanceDistribution[2] || 0);\n            }\n            \n            console.log('Attendance data for export (processed):', { present, late, absent });\n            \n            // Create export data with explicit typing\n            dataToExport = [\n              {\n                'Status': 'Present',\n                'Count': present\n              },\n              {\n                'Status': 'Late',\n                'Count': late\n              },\n              {\n                'Status': 'Absent',\n                'Count': absent\n              }\n            ];\n            break;\n            \n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type data for export - improve data extraction\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  const avgScore = typeData.averageScore || \n                                  (typeData.scoreCount > 0 ? \n                                    (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0);\n                            \n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': avgScore,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  } else if (typeData.averageScore) {\n                    avgScore = typeData.averageScore;\n                  }\n                  \n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': avgScore,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            \n            // If still no data, look at chart data directly\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(assessmentTypeChart.value);\n                if (chart && chart.data?.datasets?.[0]?.data) {\n                  const labels = chart.data.labels || [];\n                  const scores = chart.data.datasets[0].data || [];\n                  \n                  labels.forEach((type, index) => {\n                    if (type && scores[index] !== undefined) {\n                      dataToExport.push({\n                        'Assessment Type': type,\n                        'Average Score': scores[index] || 0,\n                        'Count': 'N/A' // We don't have this information from the chart\n                      });\n                    }\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n            \n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format performance trend data for export - improve data extraction\n            if (Array.isArray(chartData.value[chartType])) {\n              // Use raw assessment data\n              dataToExport = chartData.value[chartType]\n                .filter(assessment => assessment.date)\n                .map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment': assessment.name || assessment.title || '',\n                  'Type': assessment.type || '',\n                  'Average Score': assessment.averageScore || assessment.score || 0\n                }));\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            \n            // If still no data, extract from chart\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(performanceTrendChart.value);\n                if (chart && chart.data?.datasets?.[0]?.data) {\n                  const labels = chart.data.labels || [];\n                  const scores = chart.data.datasets[0].data || [];\n                  \n                  labels.forEach((date, index) => {\n                    if (date && scores[index] !== undefined) {\n                      dataToExport.push({\n                        'Date': date,\n                        'Assessment': 'Assessment ' + (index + 1),\n                        'Average Score': scores[index] || 0\n                      });\n                    }\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n            \n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type performance data for export - improve data extraction\n            if (Array.isArray(chartData.value[chartType])) {\n              // Use chartData's raw assessment data\n              dataToExport = chartData.value[chartType]\n                .filter(assessment => assessment.date && assessment.type)\n                .map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment Type': assessment.type || '',\n                  'Assessment Name': assessment.name || assessment.title || '',\n                  'Average Score': assessment.averageScore || assessment.score || 0\n                }));\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value\n              dataToExport = data.value.performanceTrends\n                .filter(trend => trend.type)\n                .map(trend => ({\n                  'Date': moment(trend.date).format('YYYY-MM-DD'),\n                  'Assessment Type': trend.type || '',\n                  'Assessment Name': trend.name || trend.title || '',\n                  'Average Score': trend.score || trend.averageScore || 0\n                }));\n            }\n            \n            // If still no data, extract from chart\n            if (dataToExport.length === 0) {\n              try {\n                const chart = Chart.getChart(assessmentTypePerformanceChart.value);\n                if (chart && chart.data?.datasets) {\n                  const labels = chart.data.labels || [];\n                  const datasets = chart.data.datasets || [];\n                  \n                  datasets.forEach(dataset => {\n                    const type = dataset.label || 'Unknown';\n                    const data = dataset.data || [];\n                    \n                    labels.forEach((date, index) => {\n                      if (date && data[index] !== null && data[index] !== undefined) {\n                        dataToExport.push({\n                          'Date': date,\n                          'Assessment Type': type,\n                          'Assessment Name': 'Assessment ' + (index + 1),\n                          'Average Score': data[index] || 0\n                        });\n                      }\n                    });\n                  });\n                }\n              } catch (chartErr) {\n                console.error('Error extracting chart data:', chartErr);\n              }\n            }\n            break;\n            \n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          alert('No data available to generate report');\n          return;\n        }\n        \n        // Log the exact structure of data being exported\n        console.log('Data being exported:', JSON.stringify(dataToExport));\n        \n        // Create and download Excel file only\n        const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n        const excelData = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        saveAs(excelData, `${fileName}.xlsx`);\n        \n        console.log(`Data export completed for ${chartType}`);\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating report: ${error.message || 'Unknown error'}`);\n      }\n    };\n\n    // Enhanced fetchDashboardData function\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters with URLSearchParams for consistency\n        const params = new URLSearchParams();\n        \n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        \n        console.log('Fetching dashboard data with params:', Object.fromEntries(params));\n        \n        // Fetch dashboard stats\n        const url = `http://localhost:8000/api/dashboard/teacher/${teacherId}/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = \n          (response.data.totalStudents > 0) || \n          (response.data.totalSections > 0) || \n          (Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0)) ||\n          (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // ALWAYS fetch attendance data separately to ensure we have the latest\n        await fetchAttendanceData();\n        \n        // Fetch assessment data separately\n        await fetchAssessmentData();\n        \n        // After updating the charts, apply the default filter (month) to each chart\n        // This ensures the charts' data is consistent with the filter state\n        const endDate = moment().format('YYYY-MM-DD');\n        const startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        \n        await Promise.all([\n          fetchChartData('attendance', startDate, endDate),\n          fetchChartData('assessmentType', startDate, endDate),\n          fetchChartData('performanceTrend', startDate, endDate),\n          fetchChartData('assessmentTypePerformance', startDate, endDate)\n        ]);\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    // Add a dedicated function to fetch attendance data\n    const fetchAttendanceData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare attendance parameters\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        \n        // Add date range - default to last 30 days if not specified\n        params.append('startDate', selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'));\n        params.append('endDate', selectedEndDate.value || moment().format('YYYY-MM-DD'));\n        \n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        \n        console.log('Fetching attendance data with params:', Object.fromEntries(params));\n        const url = `http://localhost:8000/api/attendance/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        \n        const response = await axios.get(url, {\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n        console.log('Attendance data received:', response.data);\n        \n        if (response.data) {\n          // Store in chartData for export\n          chartData.value.attendance = response.data;\n          \n          // Parse attendance counts\n          const present = parseInt(response.data.present) || 0;\n          const late = parseInt(response.data.late) || 0;\n          const absent = parseInt(response.data.absent) || 0;\n          \n          // Update main data store\n          if (data.value) {\n            data.value.attendanceDistribution = [present, late, absent];\n          }\n          \n          // Update attendance chart\n            updatePerformanceChart({\n            attendanceDistribution: [present, late, absent]\n          });\n          \n          console.log('Attendance distribution updated:', [present, late, absent]);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n        \n        // Initialize with empty data on error\n        if (data.value) {\n          data.value.attendanceDistribution = [0, 0, 0];\n        }\n        \n        updatePerformanceChart({\n          attendanceDistribution: [0, 0, 0]\n        });\n        \n        return false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n      \n        // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n      \n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n      \n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      \n      console.log('Processed assessment chart data:', processedData);\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: processedData.scores,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ].slice(0, processedData.types.length),\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ].slice(0, processedData.types.length),\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    // Add new refs for report generation\n    const reportStartDate = ref(moment().subtract(30, 'days').format('YYYY-MM-DD'));\n    const reportEndDate = ref(moment().format('YYYY-MM-DD'));\n    const reportFormat = ref('excel'); // Add this property\n    const currentChartType = ref('');\n    let reportModal = null;\n\n    // Fix the date filter in the filter dropdown\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Function to open the generate report modal\n    const openGenerateModal = (chartType) => {\n      currentChartType.value = chartType;\n      \n      // Set default date range (last 30 days)\n      reportStartDate.value = moment().subtract(30, 'days').format('YYYY-MM-DD');\n      reportEndDate.value = moment().format('YYYY-MM-DD');\n      \n      // Initialize the modal if it hasn't been initialized yet\n      if (!reportModal) {\n        nextTick(() => {\n          // Use the reportModal element reference instead of generateReportModal\n          reportModal = new bootstrap.Modal(document.getElementById('reportModal'));\n          reportModal.show();\n        });\n      } else {\n        reportModal.show();\n      }\n    };\n\n    // Function to generate the report with selected date range\n    const generateReport = async () => {\n      if (!currentChartType.value) return;\n      \n      try {\n        const startDate = reportStartDate.value;\n        const endDate = reportEndDate.value;\n        \n        // Validate date range\n        if (!startDate || !endDate) {\n          alert('Please select both start and end dates');\n          return;\n        }\n        \n        if (moment(endDate).isBefore(moment(startDate))) {\n          alert('End date must be after start date');\n          return;\n        }\n        \n        console.log(`Generating report for ${currentChartType.value} from ${startDate} to ${endDate}`);\n        \n        // First fetch data for the selected date range\n        await fetchReportData(currentChartType.value, startDate, endDate);\n        \n        // Then generate the Excel file\n        await generateChartData(currentChartType.value);\n        \n        // Close the modal\n        reportModal.hide();\n      } catch (error) {\n        console.error('Error generating report:', error);\n        alert('Error generating report. Please try again.');\n      }\n    };\n\n    // Function to fetch data specifically for report generation\n    const fetchReportData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n        \n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        \n        console.log(`Fetching ${chartType} report data with params:`, Object.fromEntries(params));\n        \n        let endpoint;\n        \n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        const url = `http://localhost:8000/api/${endpoint}?${params.toString()}`;\n        console.log(`Requesting URL for report: ${url}`);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log(`${chartType} report data received:`, response.data);\n        \n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n        \n        return true;\n      } catch (error) {\n        console.error(`Error fetching ${chartType} report data:`, error);\n        return false;\n      }\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        \n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching assessment data with params:', params);\n        \n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({ assessmentData: [] });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = (data) => {\n      if (data) {\n        console.log('Assessment data received:', data);\n        \n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          \n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Activity': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Performance Task': { count: 0, totalScore: 0, scoreCount: 0 }\n          };\n          \n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n              \n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n          \n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 \n              ? (typeData.totalScore / typeData.scoreCount).toFixed(1) \n              : 0;\n            \n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n          \n          // Create performance trends data\n          const performanceTrends = data\n            .filter(a => a.date) // Only include assessments with dates\n            .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n            .map(assessment => {\n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: assessment.date,\n                score: averageScore,\n                name: assessment.name || assessment.title || assessment.type,\n                type: assessment.type\n              };\n            });\n          \n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initEmptyCharts();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n      \n      // Remove the reference to chartFilters\n      // Add default chart filter periods\n      // Object.keys(chartFilters.value).forEach(chartType => {\n      //   chartFilters.value[chartType].period = 'month';\n      // });\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      generateChartData,\n      // Add new report generation properties\n      reportStartDate,\n      reportEndDate,\n      reportFormat,\n      openGenerateModal,\n      generateReport,\n      currentChartType\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Chart Filters */\n.chart-filters {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n\n.date-filter-group {\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.date-filter-group .btn {\n  border-radius: 0;\n  font-size: 0.8rem;\n  padding: 0.3rem 0.75rem;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  background-color: white;\n  transition: all 0.2s ease;\n}\n\n.date-filter-group .btn:first-child {\n  border-radius: 8px 0 0 8px;\n}\n\n.date-filter-group .btn:last-child {\n  border-radius: 0 8px 8px 0;\n}\n\n.date-filter-group .btn.btn-primary {\n  background-color: #003366;\n  color: white;\n  border-color: #003366;\n}\n\n.date-filter-group .btn.btn-outline-primary:hover {\n  background-color: #f8fafc;\n  color: #003366;\n  border-color: #003366;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  __name: 'SSPDashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const surveyAverageChart = ref(null);\n    const surveyDistributionChart = ref(null);\n\n    // Data refs\n    const failingStudents = ref(0);\n    const completedSurveys = ref(0);\n    const surveyData = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Loading states\n    const loadingSurveyData = ref(false);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Remove unused computed properties and only keep what's needed\n    const hasSurveyData = computed(() => surveyData.value.length > 0);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        // Get failing students count directly from failing students list\n        try {\n          const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n\n          // Get completed surveys to exclude those students\n          const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          const completedSurveyIds = new Set();\n          if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n            completedSurveysResponse.data.forEach(survey => {\n              completedSurveyIds.add(survey.studentId);\n            });\n\n            // Set completed surveys count\n            completedSurveys.value = completedSurveysResponse.data.length;\n\n            // Also store survey data for visualization\n            surveyData.value = completedSurveysResponse.data;\n          } else {\n            completedSurveys.value = 0;\n            surveyData.value = [];\n          }\n\n          // Filter out students who have completed surveys\n          const failingStudentList = failingListResponse.data?.list || [];\n          if (Array.isArray(failingStudentList)) {\n            const filteredCount = failingStudentList.filter(student => !completedSurveyIds.has(student.info._id)).length;\n            failingStudents.value = filteredCount;\n          } else {\n            failingStudents.value = 0;\n          }\n        } catch (error) {\n          console.error('Error fetching failing students:', error);\n          failingStudents.value = 0;\n          completedSurveys.value = 0;\n          surveyData.value = [];\n        }\n\n        // Log survey data\n        console.log('Survey Data:', surveyData.value);\n\n        // Only update survey charts\n        nextTick(() => {\n          createSurveyAverageChart();\n          createSurveyDistributionChart();\n        });\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Reset data on error\n        failingStudents.value = 0;\n        completedSurveys.value = 0;\n        surveyData.value = [];\n\n        // Update just survey average chart with empty data\n        nextTick(() => {\n          createSurveyAverageChart();\n          createSurveyDistributionChart();\n        });\n      }\n    };\n    const createSurveyAverageChart = () => {\n      console.log('Starting survey average chart creation...');\n      if (!surveyAverageChart.value) {\n        console.error('Survey average chart reference not found');\n        return;\n      }\n      const ctx = surveyAverageChart.value.getContext('2d');\n      if (!ctx) {\n        console.error('Could not get 2d context for survey average chart');\n        return;\n      }\n      console.log('Creating survey average chart with data:', surveyData.value);\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        console.log('Destroying existing chart');\n        existingChart.destroy();\n      }\n\n      // For testing/demo: Use sample data if no actual data exists\n      if (!surveyData.value || surveyData.value.length === 0) {\n        console.log('No survey data available, creating sample chart');\n        const sampleLabels = ['Academic Problems', 'Financial Issues', 'Social Difficulties', 'Health Concerns', 'Family Problems'];\n        const sampleScores = [3.8, 2.5, 3.2, 1.7, 2.9];\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: sampleLabels,\n            datasets: [{\n              label: 'Average Score (Sample Data)',\n              data: sampleScores,\n              backgroundColor: 'rgba(59, 130, 246, 0.8)',\n              borderColor: 'rgba(59, 130, 246, 1)',\n              borderWidth: 1,\n              borderRadius: 5\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: context => {\n                    return `Average Score: ${context.raw}`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 5,\n                title: {\n                  display: true,\n                  text: 'Average Score (1-5)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Extract questions and calculate average scores\n      const questionLabels = [];\n      const questionScores = [];\n\n      // Collect all unique questions\n      const allQuestions = new Set();\n      surveyData.value.forEach(survey => {\n        if (survey.responses && Array.isArray(survey.responses)) {\n          survey.responses.forEach(response => {\n            if (response.question) {\n              allQuestions.add(response.question);\n            }\n          });\n        }\n      });\n      console.log('Found questions:', allQuestions);\n\n      // Sort questions alphabetically for consistent display\n      const sortedQuestions = [...allQuestions].sort();\n\n      // If no questions found, show sample data\n      if (sortedQuestions.length === 0) {\n        console.log('No questions found in survey data, using sample data');\n        const sampleLabels = ['Academic Problems', 'Financial Issues', 'Social Difficulties', 'Health Concerns', 'Family Problems'];\n        const sampleScores = [3.8, 2.5, 3.2, 1.7, 2.9];\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: sampleLabels,\n            datasets: [{\n              label: 'Average Score (Sample Data)',\n              data: sampleScores,\n              backgroundColor: 'rgba(59, 130, 246, 0.8)',\n              borderColor: 'rgba(59, 130, 246, 1)',\n              borderWidth: 1,\n              borderRadius: 5\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: context => {\n                    return `Average Score: ${context.raw}`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 5,\n                title: {\n                  display: true,\n                  text: 'Average Score (1-5)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Calculate average score for each question\n      sortedQuestions.forEach(question => {\n        let totalScore = 0;\n        let count = 0;\n        surveyData.value.forEach(survey => {\n          if (survey.responses && Array.isArray(survey.responses)) {\n            survey.responses.forEach(response => {\n              if (response.question === question && response.answer !== undefined && !isNaN(response.answer)) {\n                totalScore += Number(response.answer);\n                count++;\n              }\n            });\n          }\n        });\n        const averageScore = count > 0 ? totalScore / count : 0;\n        questionLabels.push(question.length > 30 ? question.substring(0, 30) + '...' : question);\n        questionScores.push(parseFloat(averageScore.toFixed(2)));\n      });\n      console.log('Chart data prepared:', {\n        labels: questionLabels,\n        data: questionScores\n      });\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: questionLabels,\n          datasets: [{\n            label: 'Average Score',\n            data: questionScores,\n            backgroundColor: 'rgba(59, 130, 246, 0.8)',\n            borderColor: 'rgba(59, 130, 246, 1)',\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                title: tooltipItems => {\n                  // Show full question text in tooltip\n                  const index = tooltipItems[0].dataIndex;\n                  return sortedQuestions[index] || questionLabels[index];\n                },\n                label: context => {\n                  return `Average Score: ${context.raw}`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 5,\n              title: {\n                display: true,\n                text: 'Average Score (1-5)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Create pie chart for survey response distribution by severity level\n    const createSurveyDistributionChart = () => {\n      console.log('Starting survey distribution chart creation...');\n      if (!surveyDistributionChart.value) {\n        console.error('Survey distribution chart reference not found');\n        return;\n      }\n      const ctx = surveyDistributionChart.value.getContext('2d');\n      if (!ctx) {\n        console.error('Could not get 2d context for survey distribution chart');\n        return;\n      }\n      console.log('Creating survey distribution chart with data:', surveyData.value);\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        console.log('Destroying existing distribution chart');\n        existingChart.destroy();\n      }\n\n      // For testing/demo: Always use sample data to ensure chart is visible\n      const sampleData = [25, 40, 20, 15]; // High, Medium, Low, Minimal\n\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['High Priority', 'Medium Priority', 'Low Priority', 'Minimal Concern'],\n          datasets: [{\n            data: sampleData,\n            backgroundColor: ['rgba(239, 68, 68, 0.8)',\n            // Red (High)\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow (Medium)\n            'rgba(59, 130, 246, 0.8)',\n            // Blue (Low)\n            'rgba(52, 211, 153, 0.8)' // Green (Minimal)\n            ],\n            borderColor: ['rgba(239, 68, 68, 1)', 'rgba(251, 191, 36, 1)', 'rgba(59, 130, 246, 1)', 'rgba(52, 211, 153, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = sampleData.reduce((a, b) => a + b, 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n\n    // Watch surveyData for changes to update charts\n    watch(surveyData, () => {\n      loadingSurveyData.value = true;\n\n      // Use nextTick to ensure DOM is updated\n      nextTick(() => {\n        try {\n          createSurveyAverageChart();\n          createSurveyDistributionChart();\n        } catch (error) {\n          console.error('Error creating survey charts:', error);\n        } finally {\n          loadingSurveyData.value = false;\n        }\n      });\n    }, {\n      deep: true\n    });\n    onMounted(async () => {\n      console.log('SSP Dashboard mounted');\n      await fetchDashboardData();\n\n      // Initialize charts\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n\n      // Set up watchers for filters\n      watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], async () => {\n        console.log('Filters changed, refreshing data');\n        await fetchDashboardData();\n      });\n    });\n    const __returned__ = {\n      store,\n      surveyAverageChart,\n      surveyDistributionChart,\n      failingStudents,\n      completedSurveys,\n      surveyData,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loadingSurveyData,\n      getTeacherId,\n      hasSurveyData,\n      fetchTeacherSectionsAndSubjects,\n      handleYearChange,\n      getFilterDisplay,\n      fetchDashboardData,\n      createSurveyAverageChart,\n      createSurveyDistributionChart,\n      formatDate,\n      applyFilters,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      nextTick,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get axios() {\n        return axios;\n      },\n      get moment() {\n        return moment;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","store","surveyAverageChart","surveyDistributionChart","failingStudents","completedSurveys","surveyData","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","loadingSurveyData","getTeacherId","user","state","auth","_id","console","error","hasSurveyData","value","length","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","startDate","endDate","failingListResponse","completedSurveysResponse","completedSurveyIds","Array","isArray","forEach","survey","add","studentId","failingStudentList","list","filteredCount","filter","student","has","info","createSurveyAverageChart","createSurveyDistributionChart","response","ctx","getContext","existingChart","getChart","destroy","sampleLabels","sampleScores","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","borderRadius","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","raw","scales","y","beginAtZero","max","title","text","x","ticks","maxRotation","minRotation","questionLabels","questionScores","allQuestions","responses","question","sortedQuestions","totalScore","count","answer","undefined","isNaN","Number","averageScore","substring","parseFloat","toFixed","tooltipItems","index","dataIndex","sampleData","cutout","position","boxWidth","padding","total","reduce","a","b","percentage","formatDate","date","applyFilters","setItem","removeItem","start","end","isBefore","deep"],"sources":["D:/au_dev/client/src/views/SSPDashboard.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst store = useStore()\nconst surveyAverageChart = ref(null)\nconst surveyDistributionChart = ref(null)\n\n// Data refs\nconst failingStudents = ref(0)\nconst completedSurveys = ref(0)\nconst surveyData = ref([])\nconst sections = ref([])\nconst subjects = ref([])\n\n// Filter refs\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\nconst selectedStartDate = ref('')\nconst selectedEndDate = ref('')\nconst today = computed(() => moment().format('YYYY-MM-DD'))\n\n// Loading states\nconst loadingSurveyData = ref(false)\n\n// Get teacher ID from store\nconst getTeacherId = () => {\n  const user = store.state.auth.user\n  if (!user || !user._id) {\n    console.error('No teacher ID found in store')\n    return null\n  }\n  return user._id\n}\n\n// Remove unused computed properties and only keep what's needed\nconst hasSurveyData = computed(() => surveyData.value.length > 0)\n\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\n  try {\n    const teacherId = getTeacherId()\n    if (!teacherId) return\n\n    const token = store.state.auth.token\n    console.log('Fetching sections and subjects for:', { teacherId, year })\n\n    // First get all class records to extract sections\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n      params: { \n        teacherId,\n        year \n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n\n    if (recordsResponse.data) {\n      // Extract unique sections and subjects\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n      \n      sections.value = uniqueSections.sort()\n      subjects.value = uniqueSubjects.sort()\n      \n      console.log('Loaded sections and subjects:', {\n        sections: sections.value,\n        subjects: subjects.value\n      })\n    }\n  } catch (error) {\n    console.error('Error fetching teacher sections and subjects:', error)\n    sections.value = []\n    subjects.value = []\n  }\n}\n\nconst handleYearChange = async () => {\n  selectedSection.value = ''\n  selectedSubject.value = ''\n  if (selectedYear.value) {\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\n  } else {\n    sections.value = []\n    subjects.value = []\n  }\n  await fetchDashboardData()\n}\n\nconst getFilterDisplay = () => {\n  const filters = []\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n  if (selectedSection.value) filters.push(selectedSection.value)\n  if (selectedSubject.value) filters.push(selectedSubject.value)\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n}\n\nconst fetchDashboardData = async () => {\n  try {\n    const teacherId = getTeacherId();\n    if (!teacherId) {\n      console.error('No teacher ID found');\n      return;\n    }\n\n    const token = store.state.auth.token;\n    if (!token) {\n      console.error('No auth token found');\n      return;\n    }\n\n    console.log('Fetching dashboard data with params:', {\n      teacherId,\n      year: selectedYear.value,\n      section: selectedSection.value,\n      subject: selectedSubject.value,\n      startDate: selectedStartDate.value,\n      endDate: selectedEndDate.value\n    });\n\n    // Get failing students count directly from failing students list\n    try {\n      const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      // Get completed surveys to exclude those students\n      const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      const completedSurveyIds = new Set();\n      if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n        completedSurveysResponse.data.forEach(survey => {\n          completedSurveyIds.add(survey.studentId);\n        });\n        \n        // Set completed surveys count\n        completedSurveys.value = completedSurveysResponse.data.length;\n        \n        // Also store survey data for visualization\n        surveyData.value = completedSurveysResponse.data;\n      } else {\n        completedSurveys.value = 0;\n        surveyData.value = [];\n      }\n      \n      // Filter out students who have completed surveys\n      const failingStudentList = failingListResponse.data?.list || [];\n      if (Array.isArray(failingStudentList)) {\n        const filteredCount = failingStudentList.filter(student => \n          !completedSurveyIds.has(student.info._id)\n        ).length;\n        \n        failingStudents.value = filteredCount;\n      } else {\n        failingStudents.value = 0;\n      }\n    } catch (error) {\n      console.error('Error fetching failing students:', error);\n      failingStudents.value = 0;\n      completedSurveys.value = 0;\n      surveyData.value = [];\n    }\n\n    // Log survey data\n    console.log('Survey Data:', surveyData.value);\n\n    // Only update survey charts\n    nextTick(() => {\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n    });\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n    }\n    \n    // Reset data on error\n    failingStudents.value = 0;\n    completedSurveys.value = 0;\n    surveyData.value = [];\n    \n    // Update just survey average chart with empty data\n    nextTick(() => {\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n    });\n  }\n}\n\nconst createSurveyAverageChart = () => {\n  console.log('Starting survey average chart creation...');\n  if (!surveyAverageChart.value) {\n    console.error('Survey average chart reference not found');\n    return;\n  }\n  \n  const ctx = surveyAverageChart.value.getContext('2d');\n  if (!ctx) {\n    console.error('Could not get 2d context for survey average chart');\n    return;\n  }\n\n  console.log('Creating survey average chart with data:', surveyData.value);\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    console.log('Destroying existing chart');\n    existingChart.destroy();\n  }\n\n  // For testing/demo: Use sample data if no actual data exists\n  if (!surveyData.value || surveyData.value.length === 0) {\n    console.log('No survey data available, creating sample chart');\n    \n    const sampleLabels = ['Academic Problems', 'Financial Issues', 'Social Difficulties', 'Health Concerns', 'Family Problems'];\n    const sampleScores = [3.8, 2.5, 3.2, 1.7, 2.9];\n    \n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: sampleLabels,\n        datasets: [{\n          label: 'Average Score (Sample Data)',\n          data: sampleScores,\n          backgroundColor: 'rgba(59, 130, 246, 0.8)',\n          borderColor: 'rgba(59, 130, 246, 1)',\n          borderWidth: 1,\n          borderRadius: 5\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (context) => {\n                return `Average Score: ${context.raw}`;\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            max: 5,\n            title: { display: true, text: 'Average Score (1-5)' }\n          },\n          x: {\n            ticks: {\n              maxRotation: 45,\n              minRotation: 45\n            }\n          }\n        }\n      }\n    });\n    return;\n  }\n\n  // Extract questions and calculate average scores\n  const questionLabels = [];\n  const questionScores = [];\n  \n  // Collect all unique questions\n  const allQuestions = new Set();\n  surveyData.value.forEach(survey => {\n    if (survey.responses && Array.isArray(survey.responses)) {\n      survey.responses.forEach(response => {\n        if (response.question) {\n          allQuestions.add(response.question);\n        }\n      });\n    }\n  });\n  \n  console.log('Found questions:', allQuestions);\n  \n  // Sort questions alphabetically for consistent display\n  const sortedQuestions = [...allQuestions].sort();\n  \n  // If no questions found, show sample data\n  if (sortedQuestions.length === 0) {\n    console.log('No questions found in survey data, using sample data');\n    \n    const sampleLabels = ['Academic Problems', 'Financial Issues', 'Social Difficulties', 'Health Concerns', 'Family Problems'];\n    const sampleScores = [3.8, 2.5, 3.2, 1.7, 2.9];\n    \n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: sampleLabels,\n        datasets: [{\n          label: 'Average Score (Sample Data)',\n          data: sampleScores,\n          backgroundColor: 'rgba(59, 130, 246, 0.8)',\n          borderColor: 'rgba(59, 130, 246, 1)',\n          borderWidth: 1,\n          borderRadius: 5\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (context) => {\n                return `Average Score: ${context.raw}`;\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            max: 5,\n            title: { display: true, text: 'Average Score (1-5)' }\n          },\n          x: {\n            ticks: {\n              maxRotation: 45,\n              minRotation: 45\n            }\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Calculate average score for each question\n  sortedQuestions.forEach(question => {\n    let totalScore = 0;\n    let count = 0;\n    \n    surveyData.value.forEach(survey => {\n      if (survey.responses && Array.isArray(survey.responses)) {\n        survey.responses.forEach(response => {\n          if (response.question === question && response.answer !== undefined && !isNaN(response.answer)) {\n            totalScore += Number(response.answer);\n            count++;\n          }\n        });\n      }\n    });\n    \n    const averageScore = count > 0 ? totalScore / count : 0;\n    questionLabels.push(question.length > 30 ? question.substring(0, 30) + '...' : question);\n    questionScores.push(parseFloat(averageScore.toFixed(2)));\n  });\n  \n  console.log('Chart data prepared:', { labels: questionLabels, data: questionScores });\n  \n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: questionLabels,\n      datasets: [{\n        label: 'Average Score',\n        data: questionScores,\n        backgroundColor: 'rgba(59, 130, 246, 0.8)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: { display: false },\n        tooltip: {\n          callbacks: {\n            title: (tooltipItems) => {\n              // Show full question text in tooltip\n              const index = tooltipItems[0].dataIndex;\n              return sortedQuestions[index] || questionLabels[index];\n            },\n            label: (context) => {\n              return `Average Score: ${context.raw}`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 5,\n          title: { display: true, text: 'Average Score (1-5)' }\n        },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create pie chart for survey response distribution by severity level\nconst createSurveyDistributionChart = () => {\n  console.log('Starting survey distribution chart creation...');\n  if (!surveyDistributionChart.value) {\n    console.error('Survey distribution chart reference not found');\n    return;\n  }\n  \n  const ctx = surveyDistributionChart.value.getContext('2d');\n  if (!ctx) {\n    console.error('Could not get 2d context for survey distribution chart');\n    return;\n  }\n\n  console.log('Creating survey distribution chart with data:', surveyData.value);\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    console.log('Destroying existing distribution chart');\n    existingChart.destroy();\n  }\n\n  // For testing/demo: Always use sample data to ensure chart is visible\n  const sampleData = [25, 40, 20, 15]; // High, Medium, Low, Minimal\n  \n  new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: ['High Priority', 'Medium Priority', 'Low Priority', 'Minimal Concern'],\n      datasets: [{\n        data: sampleData,\n        backgroundColor: [\n          'rgba(239, 68, 68, 0.8)',    // Red (High)\n          'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n          'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n          'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n        ],\n        borderColor: [\n          'rgba(239, 68, 68, 1)',\n          'rgba(251, 191, 36, 1)',\n          'rgba(59, 130, 246, 1)',\n          'rgba(52, 211, 153, 1)'\n        ],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      cutout: '60%',\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 15,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = sampleData.reduce((a, b) => a + b, 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${context.label}: ${value} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n\nconst formatDate = (date) => {\n  return moment(date).format('MMM D, YYYY')\n}\n\nconst applyFilters = async () => {\n  // Save selected values to localStorage\n  if (selectedYear.value) {\n    localStorage.setItem('selectedYear', selectedYear.value)\n  } else {\n    localStorage.removeItem('selectedYear')\n  }\n\n  if (selectedSection.value) {\n    localStorage.setItem('selectedSection', selectedSection.value)\n  } else {\n    localStorage.removeItem('selectedSection')\n  }\n\n  if (selectedSubject.value) {\n    localStorage.setItem('selectedSubject', selectedSubject.value)\n  } else {\n    localStorage.removeItem('selectedSubject')\n  }\n\n  await fetchDashboardData()\n}\n\n// Watch for filter changes\nwatch(selectedYear, handleYearChange)\nwatch([selectedSection, selectedSubject], applyFilters)\nwatch([selectedStartDate, selectedEndDate], () => {\n  if (selectedStartDate.value && selectedEndDate.value) {\n    // Validate date range\n    const start = moment(selectedStartDate.value);\n    const end = moment(selectedEndDate.value);\n    \n    if (end.isBefore(start)) {\n      selectedEndDate.value = selectedStartDate.value;\n    }\n    \n    fetchDashboardData();\n  }\n})\n\n// Watch surveyData for changes to update charts\nwatch(surveyData, () => {\n  loadingSurveyData.value = true;\n  \n  // Use nextTick to ensure DOM is updated\n  nextTick(() => {\n    try {\n      createSurveyAverageChart();\n      createSurveyDistributionChart();\n    } catch (error) {\n      console.error('Error creating survey charts:', error);\n    } finally {\n      loadingSurveyData.value = false;\n    }\n  });\n}, { deep: true })\n\nonMounted(async () => {\n  console.log('SSP Dashboard mounted');\n  await fetchDashboardData();\n  \n  // Initialize charts\n  createSurveyAverageChart();\n  createSurveyDistributionChart();\n  \n  // Set up watchers for filters\n  watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], async () => {\n    console.log('Filters changed, refreshing data');\n    await fetchDashboardData();\n  });\n});\n</script>\n\n<template>\n  <div class=\"dashboard-container\">\n    <!-- Welcome Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ store.state.auth.user?.firstName || 'User' }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Filters -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          \n          <div class=\"mb-3\">\n            <label for=\"yearFilter\" class=\"form-label\">Year</label>\n            <select id=\"yearFilter\" class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"sectionFilter\" class=\"form-label\">Section</label>\n            <select id=\"sectionFilter\" class=\"form-select\" v-model=\"selectedSection\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"subjectFilter\" class=\"form-label\">Subject</label>\n            <select id=\"subjectFilter\" class=\"form-select\" v-model=\"selectedSubject\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          \n          <div class=\"dropdown-divider\"></div>\n          \n          <div class=\"mb-3\">\n            <label for=\"startDateFilter\" class=\"form-label\">Start Date</label>\n            <input type=\"date\" id=\"startDateFilter\" class=\"form-control\" v-model=\"selectedStartDate\" :max=\"selectedEndDate || today\">\n          </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"endDateFilter\" class=\"form-label\">End Date</label>\n            <input type=\"date\" id=\"endDateFilter\" class=\"form-control\" v-model=\"selectedEndDate\" :min=\"selectedStartDate\" :max=\"today\">\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row mb-4 g-3\">\n      <!-- Failing Students Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container bg-danger\">\n            <i class=\"fas fa-exclamation-triangle\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Failing Students</h3>\n            <div class=\"stat-value\">{{ failingStudents }}</div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Total Surveys Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container bg-success\">\n            <i class=\"fas fa-clipboard-check\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Completed Surveys</h3>\n            <div class=\"stat-value\">{{ completedSurveys }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Survey Average Scores Chart -->\n    <div class=\"row mb-4\">\n      <div class=\"col-md-6\">\n        <div class=\"chart-card\">\n          <h3 class=\"card-title\">\n            <i class=\"fas fa-chart-bar me-2\"></i>\n            Survey Average Scores\n          </h3>\n          <div class=\"chart-container\">\n            <div v-if=\"loadingSurveyData\" class=\"no-data-message\">\n              <div class=\"spinner-border text-primary spinner-border-sm me-2\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n              Loading survey data...\n            </div>\n            <div v-else-if=\"!hasSurveyData\" class=\"no-data-message\">\n              <i class=\"fas fa-info-circle me-2\"></i>\n              No survey data available for the selected filters.\n            </div>\n            <canvas ref=\"surveyAverageChart\"></canvas>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Survey Response Distribution Chart -->\n      <div class=\"col-md-6\">\n        <div class=\"chart-card\">\n          <h3 class=\"card-title\">\n            <i class=\"fas fa-chart-pie me-2\"></i>\n            Survey Response Distribution\n          </h3>\n          <p class=\"chart-description\">Distribution of student issues by priority level</p>\n          <div class=\"chart-container\">\n            <div v-if=\"loadingSurveyData\" class=\"no-data-message\">\n              <div class=\"spinner-border text-primary spinner-border-sm me-2\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n              Loading survey data...\n            </div>\n            <div v-else-if=\"!hasSurveyData\" class=\"no-data-message\">\n              <i class=\"fas fa-info-circle me-2\"></i>\n              No survey data available for the selected filters.\n            </div>\n            <canvas ref=\"surveyDistributionChart\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.dashboard-container {\n  padding: 1.5rem;\n  background-color: #f8fafc;\n}\n\n.welcome-section {\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.page-title {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n}\n\n.welcome-message {\n  color: #64748b;\n  font-size: 1rem;\n  margin-bottom: 0;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 10px;\n  padding: 1.25rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  height: 100%;\n  transition: transform 0.15s ease, box-shadow 0.15s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 48px;\n  height: 48px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.bg-danger {\n  background-color: #ef4444;\n}\n\n.bg-success {\n  background-color: #10b981;\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.25rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.25rem 0;\n  font-weight: 500;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: #0f172a;\n  line-height: 1.2;\n}\n\n.chart-container {\n  position: relative;\n  height: 450px;\n  width: 100%;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 1.25rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: #0f172a;\n  margin-bottom: 1.25rem;\n  display: flex;\n  align-items: center;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.625rem 1rem;\n  font-size: 0.875rem;\n  color: #0f172a;\n  width: auto;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 6px;\n  font-weight: 500;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 280px;\n  padding: 1rem;\n  border: none;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 10px 15px rgba(0, 0, 0, 0.05);\n  border-radius: 8px;\n}\n\n.dropdown-header {\n  color: #0f172a;\n  font-weight: 600;\n  padding: 0;\n  margin-bottom: 1rem;\n  font-size: 0.9375rem;\n}\n\n.form-label {\n  font-weight: 500;\n  color: #475569;\n  margin-bottom: 0.375rem;\n  font-size: 0.8125rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  padding: 0.5rem;\n  font-size: 0.875rem;\n  color: #0f172a;\n  background-color: #fff;\n  transition: all 0.15s ease;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);\n}\n\n@media (max-width: 768px) {\n  .dashboard-container {\n    padding: 1rem;\n  }\n  \n  .chart-container {\n    height: 300px;\n  }\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
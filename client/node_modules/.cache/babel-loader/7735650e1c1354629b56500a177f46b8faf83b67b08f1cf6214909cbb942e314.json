{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const sectionChart = ref(null);\n    const selectedYear = ref('');\n    const selectedSection = ref('');\n    const selectedSubject = ref('');\n    const dashboardContainer = ref(null);\n    const isLoading = ref(false);\n    const lastUpdate = ref(null);\n    const autoRefreshInterval = ref(null);\n    const sections = ref([]);\n    const subjects = ref([]);\n    const availableYears = ref(['1st', '2nd', '3rd', '4th']);\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead);\n    const token = computed(() => store.state.auth.token);\n\n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n\n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value || selectedSubject.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, newToken => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, {\n      immediate: true\n    });\n\n    // Dashboard stats\n    const totalStudents = ref(0);\n    const totalTeachers = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const activeSections = ref(0);\n    const data = ref(null);\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasScoreData = computed(() => {\n      return data.value?.averageScore > 0;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch sections and subjects\n    const fetchSectionsAndSubjects = async (year = '') => {\n      try {\n        const response = await api.get('/department/sections-subjects-by-teacher', {\n          params: {\n            year\n          }\n        });\n        if (response.data) {\n          // Extract unique sections and subjects with teacher info\n          sections.value = response.data.sections || [];\n          subjects.value = response.data.subjects || [];\n        }\n      } catch (error) {\n        console.error('Error fetching sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n\n        // Fetch basic stats\n        const statsResponse = await api.get('/dashboard/stats', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        data.value = statsResponse.data;\n\n        // Update basic stats\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n\n        // Fetch attendance data\n        const attendanceResponse = await api.get('/dashboard/attendance', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        if (attendanceResponse.data) {\n          // Update attendance stats\n          data.value.attendanceDistribution = attendanceResponse.data.distribution || [0, 0, 0];\n          data.value.averageAttendance = attendanceResponse.data.average || 0;\n          averageAttendance.value = data.value.averageAttendance;\n        }\n\n        // Fetch assessment data\n        const assessmentResponse = await api.get('/dashboard/assessments', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        if (assessmentResponse.data) {\n          // Update assessment stats\n          data.value.assessmentTypes = assessmentResponse.data.types || [];\n          data.value.performanceTrends = assessmentResponse.data.trends || [];\n          data.value.averageScore = assessmentResponse.data.average || 0;\n          averageScore.value = data.value.averageScore;\n        }\n\n        // Fetch section performance data\n        const sectionResponse = await api.get('/dashboard/section-performance', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        if (sectionResponse.data) {\n          data.value.sections = sectionResponse.data.sections || [];\n        }\n\n        // Update charts with new data\n        if (data.value) {\n          updateCharts(data.value);\n        }\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const updateCharts = data => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateSectionChart(data);\n    };\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: [{\n          type: 'Quiz',\n          averageScore: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0\n        }]\n      });\n      updatePerformanceTrendChart([]);\n      updateSectionChart({\n        sections: []\n      });\n    };\n\n    // Format date for display\n    const formatDate = date => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = () => {\n      // If a section is selected, filter subjects by that section\n      if (selectedSection.value) {\n        fetchSubjectsBySection(selectedYear.value, selectedSection.value);\n      } else {\n        // If no section selected, fetch all subjects for the year\n        fetchSectionsAndSubjects(selectedYear.value);\n      }\n      fetchDashboardData();\n    };\n\n    // Fetch subjects for a specific section\n    const fetchSubjectsBySection = async (year, section) => {\n      try {\n        const response = await api.get('/department/subjects-by-section', {\n          params: {\n            year,\n            section\n          }\n        });\n        if (response.data) {\n          subjects.value = response.data.subjects || [];\n        }\n      } catch (error) {\n        console.error('Error fetching subjects by section:', error);\n        subjects.value = [];\n      }\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      sections.value = [];\n      subjects.value = [];\n      fetchDashboardData();\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) {\n        // Find the section object to get teacher name\n        const sectionObj = sections.value.find(s => s.name === selectedSection.value);\n        if (sectionObj && sectionObj.teacherName) {\n          filters.push(`${selectedSection.value} (${sectionObj.teacherName})`);\n        } else {\n          filters.push(selectedSection.value);\n        }\n      }\n      if (selectedSubject.value) {\n        // Find the subject object to get teacher name\n        const subjectObj = subjects.value.find(s => s.name === selectedSubject.value);\n        if (subjectObj && subjectObj.teacherName) {\n          filters.push(`${selectedSubject.value} (${subjectObj.teacherName})`);\n        } else {\n          filters.push(selectedSubject.value);\n        }\n      }\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = data => {\n      if (performanceChart.value) {\n        const ctx = performanceChart.value.getContext('2d');\n\n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n\n        // Attendance status distribution data\n        const attendanceLabels = ['Present', 'Late', 'Absent'];\n        const attendanceData = data.attendanceDistribution || [0, 0, 0];\n\n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: attendanceLabels,\n            datasets: [{\n              data: attendanceData,\n              backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n              borderWidth: 0,\n              hoverOffset: 4\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            cutout: '70%',\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const label = context.label || '';\n                    const value = context.raw || 0;\n                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                    const percentage = total > 0 ? Math.round(value / total * 100) : 0;\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const updateAssessmentTypeChart = data => {\n      if (assessmentTypeChart.value) {\n        const ctx = assessmentTypeChart.value.getContext('2d');\n\n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n\n        // Assessment types data\n        const assessmentData = data.assessmentTypes || [];\n        const labels = [];\n        const values = [];\n        const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n\n        // Extract assessment types data\n        if (Array.isArray(assessmentData)) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            labels.push(item.type);\n            values.push(item.averageScore);\n          });\n        } else {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            labels.push(type);\n            values.push(data.averageScore || 0);\n          });\n        }\n\n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Average Score (%)',\n              data: values,\n              backgroundColor: colors,\n              borderWidth: 0,\n              borderRadius: 6,\n              maxBarThickness: 50\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    return `Average Score: ${context.raw}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function (value) {\n                    return value + '%';\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const updatePerformanceTrendChart = data => {\n      if (performanceTrendChart.value) {\n        const ctx = performanceTrendChart.value.getContext('2d');\n\n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n\n        // Performance trends data\n        const performanceTrends = data.performanceTrends || [];\n        const labels = [];\n        const scores = [];\n\n        // Extract performance trends data\n        performanceTrends.forEach(item => {\n          // Format date if available\n          const date = item.date ? moment(item.date).format('MMM D') : '';\n          // Use assessment title or date as label\n          labels.push(item.title ? `${item.title} (${date})` : date);\n          scores.push(item.averageScore || 0);\n        });\n\n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Average Score',\n              data: scores,\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderColor: '#3b82f6',\n              borderWidth: 2,\n              tension: 0.4,\n              fill: true,\n              pointBackgroundColor: '#3b82f6',\n              pointRadius: 4,\n              pointHoverRadius: 6\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    return `Average Score: ${context.raw}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function (value) {\n                    return value + '%';\n                  }\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const updateSectionChart = data => {\n      if (sectionChart.value) {\n        const ctx = sectionChart.value.getContext('2d');\n\n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n\n        // Section performance data\n        const sectionData = data.sections || [];\n        const labels = [];\n        const performanceData = [];\n        const attendanceData = [];\n\n        // Extract section performance data\n        sectionData.forEach(section => {\n          labels.push(section.name);\n          performanceData.push(section.averageScore || 0);\n          attendanceData.push(section.attendanceRate || 0);\n        });\n\n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Average Score',\n              data: performanceData,\n              backgroundColor: '#3b82f6',\n              borderWidth: 0,\n              borderRadius: 6,\n              maxBarThickness: 30\n            }, {\n              label: 'Attendance Rate',\n              data: attendanceData,\n              backgroundColor: '#10b981',\n              borderWidth: 0,\n              borderRadius: 6,\n              maxBarThickness: 30\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const label = context.dataset.label || '';\n                    const value = context.raw || 0;\n                    return `${label}: ${value}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function (value) {\n                    return value + '%';\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const refreshDashboard = () => {\n      fetchDashboardData();\n    };\n    const scrollToSection = sectionId => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    };\n\n    // Auto-refresh logic\n    const setupAutoRefresh = () => {\n      // Clear any existing interval\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n\n      // Set new interval (every 5 minutes)\n      autoRefreshInterval.value = setInterval(() => {\n        fetchDashboardData();\n      }, 5 * 60 * 1000);\n    };\n\n    // Fetch data on component mount\n    onMounted(async () => {\n      try {\n        // Initialize with dummy data while loading\n        nextTick(() => {\n          initDummyData();\n        });\n\n        // Fetch sections and subjects\n        if (selectedYear.value) {\n          await fetchSectionsAndSubjects(selectedYear.value);\n        }\n\n        // Fetch dashboard data\n        await fetchDashboardData();\n        setupAutoRefresh();\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      sectionChart,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      handleFilterChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","onUnmounted","nextTick","useStore","Chart","axios","moment","api","create","baseURL","name","setup","store","performanceChart","assessmentTypeChart","performanceTrendChart","sectionChart","selectedYear","selectedSection","selectedSubject","dashboardContainer","isLoading","lastUpdate","autoRefreshInterval","sections","subjects","availableYears","isCITHead","getters","token","state","auth","userName","user","firstName","lastName","trim","hasActiveFilters","Boolean","value","newToken","defaults","headers","common","immediate","totalStudents","totalTeachers","averageAttendance","averageScore","activeSections","data","hasAttendanceData","attendanceDistribution","some","val","hasScoreData","hasPerformanceData","Array","isArray","performanceTrends","length","hasAssessmentData","assessmentTypes","Object","values","type","count","assessmentTypeDistribution","hasSectionData","fetchSectionsAndSubjects","year","response","get","params","error","console","fetchDashboardData","statsResponse","section","subject","attendanceResponse","distribution","average","assessmentResponse","types","trends","sectionResponse","updateCharts","Date","updatePerformanceChart","updateAssessmentTypeChart","updatePerformanceTrendChart","updateSectionChart","initDummyData","assessmentData","formatDate","date","format","handleYearChange","handleSectionChange","fetchSubjectsBySection","handleFilterChange","clearFilters","getFilterDisplay","filters","push","sectionObj","find","s","teacherName","subjectObj","join","ctx","getContext","chart","destroy","attendanceLabels","attendanceData","labels","datasets","backgroundColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","position","usePointStyle","padding","font","size","tooltip","callbacks","label","context","raw","total","reduce","a","b","percentage","Math","round","colors","forEach","item","index","entries","borderRadius","maxBarThickness","display","scales","y","beginAtZero","max","ticks","callback","scores","title","borderColor","tension","fill","pointBackgroundColor","pointRadius","pointHoverRadius","x","maxRotation","minRotation","sectionData","performanceData","attendanceRate","dataset","refreshDashboard","scrollToSection","sectionId","document","getElementById","scrollIntoView","behavior","setupAutoRefresh","clearInterval","setInterval"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, Dean {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Computer and Information Technology Department Dashboard</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }} Year</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" @change=\"handleSectionChange\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section.id\" :value=\"section.name\">\n                {{ section.name }} - {{ section.teacherName || 'No Teacher Assigned' }}\n              </option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" @change=\"handleFilterChange\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject.id\" :value=\"subject.name\">\n                {{ subject.name }} - {{ subject.teacherName || 'No Teacher Assigned' }}\n              </option>\n            </select>\n          </div>\n          <div class=\"d-flex justify-content-between\">\n            <button class=\"btn btn-outline-secondary\" @click=\"clearFilters\">Clear Filters</button>\n            <button class=\"btn btn-primary\" @click=\"refreshDashboard\">Apply</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Last Updated -->\n      <div class=\"last-update-badge\" v-if=\"lastUpdate\">\n        Last updated: {{ formatDate(lastUpdate) }}\n        <button class=\"btn btn-refresh ms-2\" @click=\"refreshDashboard\" title=\"Refresh Dashboard\">\n          <i class=\"fas fa-sync-alt\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Teachers Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard-teacher\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Teachers</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalTeachers }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Active Sections Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-users\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ activeSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Performance Stats -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Average Attendance Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-clock\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasAttendanceData\">{{ averageAttendance }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Average Score Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Score</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasScoreData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns across the department</p>\n            <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !isLoading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type across the department</p>\n            <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !isLoading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Department average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Section Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-users me-2\"></i>\n              Section Performance\n            </h5>\n            <p class=\"chart-description\">Comparison of performance across different sections</p>\n            <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"sectionChart\"></canvas>\n              <p v-if=\"!hasSectionData && !isLoading\" class=\"no-data-message\">No section data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\n\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const sectionChart = ref(null)\n    const selectedYear = ref('')\n    const selectedSection = ref('')\n    const selectedSubject = ref('')\n    const dashboardContainer = ref(null)\n    const isLoading = ref(false)\n    const lastUpdate = ref(null)\n    const autoRefreshInterval = ref(null)\n    const sections = ref([])\n    const subjects = ref([])\n    const availableYears = ref(['1st', '2nd', '3rd', '4th'])\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead)\n    const token = computed(() => store.state.auth.token)\n    \n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n    \n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value || selectedSubject.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, (newToken) => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, { immediate: true });\n\n    // Dashboard stats\n    const totalStudents = ref(0)\n    const totalTeachers = ref(0)\n    const averageAttendance = ref(0)\n    const averageScore = ref(0)\n    const activeSections = ref(0)\n    const data = ref(null)\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasScoreData = computed(() => {\n      return data.value?.averageScore > 0;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch sections and subjects\n    const fetchSectionsAndSubjects = async (year = '') => {\n      try {\n        const response = await api.get('/department/sections-subjects-by-teacher', {\n          params: { year }\n        });\n        \n        if (response.data) {\n          // Extract unique sections and subjects with teacher info\n          sections.value = response.data.sections || [];\n          subjects.value = response.data.subjects || [];\n        }\n      } catch (error) {\n        console.error('Error fetching sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Fetch basic stats\n        const statsResponse = await api.get('/dashboard/stats', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        \n        data.value = statsResponse.data;\n        \n        // Update basic stats\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n        \n        // Fetch attendance data\n        const attendanceResponse = await api.get('/dashboard/attendance', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        \n        if (attendanceResponse.data) {\n          // Update attendance stats\n          data.value.attendanceDistribution = attendanceResponse.data.distribution || [0, 0, 0];\n          data.value.averageAttendance = attendanceResponse.data.average || 0;\n          averageAttendance.value = data.value.averageAttendance;\n        }\n        \n        // Fetch assessment data\n        const assessmentResponse = await api.get('/dashboard/assessments', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        \n        if (assessmentResponse.data) {\n          // Update assessment stats\n          data.value.assessmentTypes = assessmentResponse.data.types || [];\n          data.value.performanceTrends = assessmentResponse.data.trends || [];\n          data.value.averageScore = assessmentResponse.data.average || 0;\n          averageScore.value = data.value.averageScore;\n        }\n        \n        // Fetch section performance data\n        const sectionResponse = await api.get('/dashboard/section-performance', {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          }\n        });\n        \n        if (sectionResponse.data) {\n          data.value.sections = sectionResponse.data.sections || [];\n        }\n        \n        // Update charts with new data\n        if (data.value) {\n          updateCharts(data.value);\n        }\n        \n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    const updateCharts = (data) => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateSectionChart(data);\n    };\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      updateSectionChart({ sections: [] });\n    };\n\n    // Format date for display\n    const formatDate = (date) => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      if (selectedYear.value) {\n        await fetchSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      \n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = () => {\n      // If a section is selected, filter subjects by that section\n      if (selectedSection.value) {\n        fetchSubjectsBySection(selectedYear.value, selectedSection.value);\n      } else {\n        // If no section selected, fetch all subjects for the year\n        fetchSectionsAndSubjects(selectedYear.value);\n      }\n      \n      fetchDashboardData();\n    };\n\n    // Fetch subjects for a specific section\n    const fetchSubjectsBySection = async (year, section) => {\n      try {\n        const response = await api.get('/department/subjects-by-section', {\n          params: { year, section }\n        });\n        \n        if (response.data) {\n          subjects.value = response.data.subjects || [];\n        }\n      } catch (error) {\n        console.error('Error fetching subjects by section:', error);\n        subjects.value = [];\n      }\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      sections.value = [];\n      subjects.value = [];\n      fetchDashboardData();\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      \n      if (selectedSection.value) {\n        // Find the section object to get teacher name\n        const sectionObj = sections.value.find(s => s.name === selectedSection.value);\n        if (sectionObj && sectionObj.teacherName) {\n          filters.push(`${selectedSection.value} (${sectionObj.teacherName})`);\n        } else {\n          filters.push(selectedSection.value);\n        }\n      }\n      \n      if (selectedSubject.value) {\n        // Find the subject object to get teacher name\n        const subjectObj = subjects.value.find(s => s.name === selectedSubject.value);\n        if (subjectObj && subjectObj.teacherName) {\n          filters.push(`${selectedSubject.value} (${subjectObj.teacherName})`);\n        } else {\n          filters.push(selectedSubject.value);\n        }\n      }\n      \n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = (data) => {\n      if (performanceChart.value) {\n        const ctx = performanceChart.value.getContext('2d');\n        \n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n        \n        // Attendance status distribution data\n        const attendanceLabels = ['Present', 'Late', 'Absent'];\n        const attendanceData = data.attendanceDistribution || [0, 0, 0];\n        \n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: attendanceLabels,\n            datasets: [{\n              data: attendanceData,\n              backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n              borderWidth: 0,\n              hoverOffset: 4\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            cutout: '70%',\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    const label = context.label || '';\n                    const value = context.raw || 0;\n                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (assessmentTypeChart.value) {\n        const ctx = assessmentTypeChart.value.getContext('2d');\n        \n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n        \n        // Assessment types data\n        const assessmentData = data.assessmentTypes || [];\n        const labels = [];\n        const values = [];\n        const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n        \n        // Extract assessment types data\n        if (Array.isArray(assessmentData)) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            labels.push(item.type);\n            values.push(item.averageScore);\n          });\n        } else {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            labels.push(type);\n            values.push(data.averageScore || 0);\n          });\n        }\n        \n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Average Score (%)',\n              data: values,\n              backgroundColor: colors,\n              borderWidth: 0,\n              borderRadius: 6,\n              maxBarThickness: 50\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    return `Average Score: ${context.raw}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function(value) {\n                    return value + '%';\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (performanceTrendChart.value) {\n        const ctx = performanceTrendChart.value.getContext('2d');\n        \n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n        \n        // Performance trends data\n        const performanceTrends = data.performanceTrends || [];\n        const labels = [];\n        const scores = [];\n        \n        // Extract performance trends data\n        performanceTrends.forEach(item => {\n          // Format date if available\n          const date = item.date ? moment(item.date).format('MMM D') : '';\n          // Use assessment title or date as label\n          labels.push(item.title ? `${item.title} (${date})` : date);\n          scores.push(item.averageScore || 0);\n        });\n        \n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Average Score',\n              data: scores,\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderColor: '#3b82f6',\n              borderWidth: 2,\n              tension: 0.4,\n              fill: true,\n              pointBackgroundColor: '#3b82f6',\n              pointRadius: 4,\n              pointHoverRadius: 6\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    return `Average Score: ${context.raw}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function(value) {\n                    return value + '%';\n                  }\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const updateSectionChart = (data) => {\n      if (sectionChart.value) {\n        const ctx = sectionChart.value.getContext('2d');\n        \n        // Dispose of existing chart if it exists\n        if (ctx.chart) {\n          ctx.chart.destroy();\n        }\n        \n        // Section performance data\n        const sectionData = data.sections || [];\n        const labels = [];\n        const performanceData = [];\n        const attendanceData = [];\n        \n        // Extract section performance data\n        sectionData.forEach(section => {\n          labels.push(section.name);\n          performanceData.push(section.averageScore || 0);\n          attendanceData.push(section.attendanceRate || 0);\n        });\n        \n        // Create chart\n        ctx.chart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [\n              {\n                label: 'Average Score',\n                data: performanceData,\n                backgroundColor: '#3b82f6',\n                borderWidth: 0,\n                borderRadius: 6,\n                maxBarThickness: 30\n              },\n              {\n                label: 'Attendance Rate',\n                data: attendanceData,\n                backgroundColor: '#10b981',\n                borderWidth: 0,\n                borderRadius: 6,\n                maxBarThickness: 30\n              }\n            ]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    const label = context.dataset.label || '';\n                    const value = context.raw || 0;\n                    return `${label}: ${value}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function(value) {\n                    return value + '%';\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const refreshDashboard = () => {\n      fetchDashboardData();\n    };\n\n    const scrollToSection = (sectionId) => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({ behavior: 'smooth' });\n      }\n    };\n\n    // Auto-refresh logic\n    const setupAutoRefresh = () => {\n      // Clear any existing interval\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n      \n      // Set new interval (every 5 minutes)\n      autoRefreshInterval.value = setInterval(() => {\n        fetchDashboardData();\n      }, 5 * 60 * 1000);\n    };\n\n    // Fetch data on component mount\n    onMounted(async () => {\n      try {\n        // Initialize with dummy data while loading\n        nextTick(() => {\n          initDummyData();\n        });\n        \n        // Fetch sections and subjects\n        if (selectedYear.value) {\n          await fetchSectionsAndSubjects(selectedYear.value);\n        }\n        \n        // Fetch dashboard data\n        await fetchDashboardData();\n        setupAutoRefresh();\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      sectionChart,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      handleFilterChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.last-update-badge {\n  font-size: 0.85rem;\n  color: #64748b;\n  display: flex;\n  align-items: center;\n}\n\n.btn-refresh {\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #4a5568;\n  padding: 0.5rem;\n  border-radius: 8px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.btn-refresh:hover {\n  background: #f7fafc;\n  color: #2d3748;\n  border-color: #cbd5e1;\n}\n\n/* Dashboard Cards */\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n/* Chart Cards */\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .greeting {\n    font-size: 1.75rem;\n  }\n  \n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n  \n  .chart-container {\n    height: 300px;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
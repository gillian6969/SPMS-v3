{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'StudentAttendance',\n  setup() {\n    const store = useStore();\n    const isLoading = ref(true);\n    const attendance = ref([]);\n    const attendanceChart = ref(null);\n\n    // Filters\n    const searchQuery = ref('');\n    const filterSubject = ref('');\n    const filterStatus = ref('');\n    const sortOption = ref('date-desc');\n    const startDate = ref('');\n    const endDate = ref('');\n    const currentPage = ref(1);\n    const recordsPerPage = 10;\n\n    // Get today's date for max date input\n    const today = new Date().toISOString().split('T')[0];\n\n    // Fetch attendance data\n    const fetchAttendance = async () => {\n      isLoading.value = true;\n      try {\n        const response = await axios.get('/api/users/student/attendance', {\n          headers: {\n            Authorization: `Bearer ${store.state.auth.token}`\n          }\n        });\n        attendance.value = response.data;\n\n        // Add fallback sample data if needed\n        if (attendance.value.length === 0) {\n          attendance.value = generateSampleAttendance();\n        }\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n        // Fallback to sample data\n        attendance.value = generateSampleAttendance();\n      } finally {\n        isLoading.value = false;\n        // Create chart after data is loaded\n        setTimeout(() => {\n          createAttendanceChart();\n        }, 100);\n      }\n    };\n\n    // Generate sample data for testing\n    const generateSampleAttendance = () => {\n      const subjects = ['Mathematics', 'English', 'Science', 'History'];\n      const statuses = ['Present', 'Late', 'Absent'];\n      const statusWeights = [0.8, 0.15, 0.05]; // 80% Present, 15% Late, 5% Absent\n\n      return subjects.map(subject => {\n        const recordCount = Math.floor(Math.random() * 10) + 15; // 15-24 attendance records per subject\n\n        const attendanceRecords = [];\n        for (let i = 0; i < recordCount; i++) {\n          // Generate weighted random status\n          const rand = Math.random();\n          let statusIndex = 0;\n          let cumulativeWeight = 0;\n          for (let j = 0; j < statusWeights.length; j++) {\n            cumulativeWeight += statusWeights[j];\n            if (rand < cumulativeWeight) {\n              statusIndex = j;\n              break;\n            }\n          }\n          attendanceRecords.push({\n            _id: `sample-${subject}-${i}`,\n            date: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString(),\n            status: statuses[statusIndex],\n            remarks: statuses[statusIndex] === 'Absent' ? 'Excused absence' : ''\n          });\n        }\n        return {\n          subject,\n          section: '1A',\n          teacher: 'Sample Teacher',\n          records: attendanceRecords\n        };\n      });\n    };\n\n    // Available filter options\n    const availableSubjects = computed(() => {\n      const subjects = new Set();\n      attendance.value.forEach(subject => {\n        subjects.add(subject.subject);\n      });\n      return [...subjects];\n    });\n\n    // Process all records into a flat array\n    const allRecords = computed(() => {\n      const records = [];\n      attendance.value.forEach(subject => {\n        subject.records.forEach(record => {\n          records.push({\n            id: record._id,\n            date: record.date,\n            status: record.status,\n            remarks: record.remarks,\n            subject: subject.subject,\n            section: subject.section,\n            teacher: subject.teacher\n          });\n        });\n      });\n      return records;\n    });\n\n    // Filter records\n    const filteredRecords = computed(() => {\n      let filtered = [...allRecords.value];\n\n      // Filter by search query\n      if (searchQuery.value) {\n        const query = searchQuery.value.toLowerCase();\n        filtered = filtered.filter(record => record.subject.toLowerCase().includes(query) || record.section.toLowerCase().includes(query));\n      }\n\n      // Filter by subject\n      if (filterSubject.value) {\n        filtered = filtered.filter(record => record.subject === filterSubject.value);\n      }\n\n      // Filter by status\n      if (filterStatus.value) {\n        filtered = filtered.filter(record => record.status.toLowerCase() === filterStatus.value.toLowerCase());\n      }\n\n      // Filter by date range\n      if (startDate.value) {\n        const start = new Date(startDate.value);\n        filtered = filtered.filter(record => new Date(record.date) >= start);\n      }\n      if (endDate.value) {\n        const end = new Date(endDate.value);\n        end.setHours(23, 59, 59, 999); // End of the day\n        filtered = filtered.filter(record => new Date(record.date) <= end);\n      }\n\n      // Sort records\n      if (sortOption.value === 'date-desc') {\n        filtered.sort((a, b) => new Date(b.date) - new Date(a.date));\n      } else if (sortOption.value === 'date-asc') {\n        filtered.sort((a, b) => new Date(a.date) - new Date(b.date));\n      }\n      return filtered;\n    });\n\n    // Pagination\n    const totalPages = computed(() => Math.ceil(filteredRecords.value.length / recordsPerPage));\n    const paginatedRecords = computed(() => {\n      const startIndex = (currentPage.value - 1) * recordsPerPage;\n      return filteredRecords.value.slice(startIndex, startIndex + recordsPerPage);\n    });\n\n    // Monitor filter changes to reset pagination\n    const resetPagination = () => {\n      currentPage.value = 1;\n    };\n\n    // Watch for filter changes\n    const setupWatchers = () => {\n      // Simple watch implementation since we don't have Vue's watch\n      const watchRefs = [searchQuery, filterSubject, filterStatus, startDate, endDate, sortOption];\n      const oldValues = watchRefs.map(ref => ref.value);\n      const checkForChanges = () => {\n        for (let i = 0; i < watchRefs.length; i++) {\n          if (watchRefs[i].value !== oldValues[i]) {\n            resetPagination();\n            oldValues[i] = watchRefs[i].value;\n          }\n        }\n      };\n\n      // Check every 100ms for changes\n      setInterval(checkForChanges, 100);\n    };\n\n    // Attendance statistics\n    const presentCount = computed(() => {\n      return allRecords.value.filter(record => record.status.toLowerCase() === 'present').length;\n    });\n    const lateCount = computed(() => {\n      return allRecords.value.filter(record => record.status.toLowerCase() === 'late').length;\n    });\n    const absentCount = computed(() => {\n      return allRecords.value.filter(record => record.status.toLowerCase() === 'absent').length;\n    });\n    const totalAttendance = computed(() => allRecords.value.length);\n    const presentPercentage = computed(() => {\n      return totalAttendance.value === 0 ? 0 : Math.round(presentCount.value / totalAttendance.value * 100);\n    });\n    const latePercentage = computed(() => {\n      return totalAttendance.value === 0 ? 0 : Math.round(lateCount.value / totalAttendance.value * 100);\n    });\n    const absentPercentage = computed(() => {\n      return totalAttendance.value === 0 ? 0 : Math.round(absentCount.value / totalAttendance.value * 100);\n    });\n\n    // Create attendance chart\n    const createAttendanceChart = () => {\n      if (!attendanceChart.value) return;\n      const ctx = attendanceChart.value.getContext('2d');\n\n      // Calculate attendance by subject\n      const subjects = availableSubjects.value;\n      const presentData = [];\n      const lateData = [];\n      const absentData = [];\n      subjects.forEach(subject => {\n        const subjectRecords = allRecords.value.filter(record => record.subject === subject);\n        const total = subjectRecords.length;\n        if (total === 0) {\n          presentData.push(0);\n          lateData.push(0);\n          absentData.push(0);\n        } else {\n          const present = subjectRecords.filter(record => record.status.toLowerCase() === 'present').length;\n          const late = subjectRecords.filter(record => record.status.toLowerCase() === 'late').length;\n          const absent = subjectRecords.filter(record => record.status.toLowerCase() === 'absent').length;\n          presentData.push(present / total * 100);\n          lateData.push(late / total * 100);\n          absentData.push(absent / total * 100);\n        }\n      });\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: subjects,\n          datasets: [{\n            label: 'Present',\n            data: presentData,\n            backgroundColor: '#48bb78',\n            borderColor: '#38a169',\n            borderWidth: 1\n          }, {\n            label: 'Late',\n            data: lateData,\n            backgroundColor: '#ecc94b',\n            borderColor: '#d69e2e',\n            borderWidth: 1\n          }, {\n            label: 'Absent',\n            data: absentData,\n            backgroundColor: '#f56565',\n            borderColor: '#e53e3e',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Percentage (%)'\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Helper methods\n    const formatDate = dateString => {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        weekday: 'short'\n      });\n    };\n    const getStatusClass = status => {\n      const statusLower = status.toLowerCase();\n      if (statusLower === 'present') return 'status-present';\n      if (statusLower === 'late') return 'status-late';\n      if (statusLower === 'absent') return 'status-absent';\n      return '';\n    };\n    const clearDateFilter = () => {\n      startDate.value = '';\n      endDate.value = '';\n    };\n    onMounted(() => {\n      fetchAttendance();\n      setupWatchers();\n    });\n    return {\n      isLoading,\n      searchQuery,\n      filterSubject,\n      filterStatus,\n      sortOption,\n      startDate,\n      endDate,\n      currentPage,\n      attendance,\n      attendanceChart,\n      availableSubjects,\n      filteredRecords,\n      paginatedRecords,\n      totalPages,\n      presentCount,\n      lateCount,\n      absentCount,\n      totalAttendance,\n      presentPercentage,\n      latePercentage,\n      absentPercentage,\n      formatDate,\n      getStatusClass,\n      clearDateFilter,\n      today\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","axios","Chart","name","setup","store","isLoading","attendance","attendanceChart","searchQuery","filterSubject","filterStatus","sortOption","startDate","endDate","currentPage","recordsPerPage","today","Date","toISOString","split","fetchAttendance","value","response","get","headers","Authorization","state","auth","token","data","length","generateSampleAttendance","error","console","setTimeout","createAttendanceChart","subjects","statuses","statusWeights","map","subject","recordCount","Math","floor","random","attendanceRecords","i","rand","statusIndex","cumulativeWeight","j","push","_id","date","now","status","remarks","section","teacher","records","availableSubjects","Set","forEach","add","allRecords","record","id","filteredRecords","filtered","query","toLowerCase","filter","includes","start","end","setHours","sort","a","b","totalPages","ceil","paginatedRecords","startIndex","slice","resetPagination","setupWatchers","watchRefs","oldValues","checkForChanges","setInterval","presentCount","lateCount","absentCount","totalAttendance","presentPercentage","round","latePercentage","absentPercentage","ctx","getContext","presentData","lateData","absentData","subjectRecords","total","present","late","absent","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","x","stacked","y","beginAtZero","max","title","display","text","formatDate","dateString","toLocaleDateString","year","month","day","weekday","getStatusClass","statusLower","clearDateFilter"],"sources":["D:\\au_dev\\client\\src\\views\\StudentAttendance.vue"],"sourcesContent":["<template>\r\n  <div class=\"student-attendance\">\r\n    <div class=\"page-header\">\r\n      <h2>Attendance Records</h2>\r\n      <p class=\"subtitle\">View your class attendance history</p>\r\n    </div>\r\n\r\n    <!-- Search and Filter Controls -->\r\n    <div class=\"controls\">\r\n      <div class=\"search-box\">\r\n        <i class=\"fas fa-search\"></i>\r\n        <input \r\n          type=\"text\" \r\n          v-model=\"searchQuery\" \r\n          placeholder=\"Search by subject...\"\r\n          class=\"search-input\"\r\n        >\r\n      </div>\r\n      \r\n      <div class=\"filter-box\">\r\n        <select v-model=\"filterSubject\" class=\"filter-select\">\r\n          <option value=\"\">All Subjects</option>\r\n          <option v-for=\"subject in availableSubjects\" :key=\"subject\" :value=\"subject\">\r\n            {{ subject }}\r\n          </option>\r\n        </select>\r\n        \r\n        <select v-model=\"filterStatus\" class=\"filter-select\">\r\n          <option value=\"\">All Status</option>\r\n          <option value=\"present\">Present</option>\r\n          <option value=\"late\">Late</option>\r\n          <option value=\"absent\">Absent</option>\r\n        </select>\r\n        \r\n        <select v-model=\"sortOption\" class=\"filter-select\">\r\n          <option value=\"date-desc\">Newest First</option>\r\n          <option value=\"date-asc\">Oldest First</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Stats Cards -->\r\n    <div class=\"stats-row\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon present-icon\">\r\n          <i class=\"fas fa-check\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Present</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">{{ presentCount }} ({{ presentPercentage }}%)</div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon late-icon\">\r\n          <i class=\"fas fa-clock\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Late</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">{{ lateCount }} ({{ latePercentage }}%)</div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon absent-icon\">\r\n          <i class=\"fas fa-times\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Absent</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">{{ absentCount }} ({{ absentPercentage }}%)</div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon total-icon\">\r\n          <i class=\"fas fa-list\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3>Total</h3>\r\n          <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalAttendance }}</div>\r\n          <div class=\"skeleton-loader\" v-else></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Chart -->\r\n    <div class=\"chart-row\">\r\n      <div class=\"chart-card\">\r\n        <h3>Attendance Overview</h3>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"attendanceChart\" id=\"attendanceChart\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Records Table -->\r\n    <div class=\"table-card\">\r\n      <div class=\"card-header\">\r\n        <h3>Attendance Records</h3>\r\n        <div class=\"date-filter\">\r\n          <div class=\"date-picker\">\r\n            <label>From:</label>\r\n            <input \r\n              type=\"date\" \r\n              v-model=\"startDate\" \r\n              class=\"date-input\"\r\n              :max=\"today\"\r\n            >\r\n          </div>\r\n          <div class=\"date-picker\">\r\n            <label>To:</label>\r\n            <input \r\n              type=\"date\" \r\n              v-model=\"endDate\" \r\n              class=\"date-input\"\r\n              :max=\"today\"\r\n            >\r\n          </div>\r\n          <button class=\"filter-btn\" @click=\"clearDateFilter\">\r\n            <i class=\"fas fa-times\"></i> Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"isLoading\" class=\"loading-container\">\r\n        <div class=\"spinner\"></div>\r\n        <p>Loading attendance records...</p>\r\n      </div>\r\n\r\n      <div v-else-if=\"filteredRecords.length === 0\" class=\"no-data\">\r\n        <i class=\"fas fa-calendar-times\"></i>\r\n        <p v-if=\"searchQuery || filterSubject || filterStatus || startDate || endDate\">\r\n          No attendance records match your filters. Try adjusting your search criteria.\r\n        </p>\r\n        <p v-else>\r\n          No attendance records available. Check back later!\r\n        </p>\r\n      </div>\r\n\r\n      <div v-else class=\"attendance-table-wrapper\">\r\n        <table class=\"attendance-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Subject</th>\r\n              <th>Section</th>\r\n              <th>Status</th>\r\n              <th>Remarks</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"record in paginatedRecords\" :key=\"record.id\">\r\n              <td>{{ formatDate(record.date) }}</td>\r\n              <td>{{ record.subject }}</td>\r\n              <td>{{ record.section }}</td>\r\n              <td>\r\n                <span :class=\"['status-badge', getStatusClass(record.status)]\">\r\n                  {{ record.status }}\r\n                </span>\r\n              </td>\r\n              <td>{{ record.remarks || '-' }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- Pagination -->\r\n        <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n          <button \r\n            class=\"page-btn\" \r\n            :disabled=\"currentPage === 1\"\r\n            @click=\"currentPage--\"\r\n          >\r\n            <i class=\"fas fa-chevron-left\"></i>\r\n          </button>\r\n          \r\n          <div class=\"page-numbers\">\r\n            Page {{ currentPage }} of {{ totalPages }}\r\n          </div>\r\n          \r\n          <button \r\n            class=\"page-btn\" \r\n            :disabled=\"currentPage === totalPages\"\r\n            @click=\"currentPage++\"\r\n          >\r\n            <i class=\"fas fa-chevron-right\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport Chart from 'chart.js/auto'\r\n\r\nexport default {\r\n  name: 'StudentAttendance',\r\n  setup() {\r\n    const store = useStore()\r\n    const isLoading = ref(true)\r\n    const attendance = ref([])\r\n    const attendanceChart = ref(null)\r\n    \r\n    // Filters\r\n    const searchQuery = ref('')\r\n    const filterSubject = ref('')\r\n    const filterStatus = ref('')\r\n    const sortOption = ref('date-desc')\r\n    const startDate = ref('')\r\n    const endDate = ref('')\r\n    const currentPage = ref(1)\r\n    const recordsPerPage = 10\r\n    \r\n    // Get today's date for max date input\r\n    const today = new Date().toISOString().split('T')[0]\r\n    \r\n    // Fetch attendance data\r\n    const fetchAttendance = async () => {\r\n      isLoading.value = true\r\n      try {\r\n        const response = await axios.get('/api/users/student/attendance', {\r\n          headers: {\r\n            Authorization: `Bearer ${store.state.auth.token}`\r\n          }\r\n        })\r\n        attendance.value = response.data\r\n        \r\n        // Add fallback sample data if needed\r\n        if (attendance.value.length === 0) {\r\n          attendance.value = generateSampleAttendance()\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching attendance data:', error)\r\n        // Fallback to sample data\r\n        attendance.value = generateSampleAttendance()\r\n      } finally {\r\n        isLoading.value = false\r\n        // Create chart after data is loaded\r\n        setTimeout(() => {\r\n          createAttendanceChart()\r\n        }, 100)\r\n      }\r\n    }\r\n    \r\n    // Generate sample data for testing\r\n    const generateSampleAttendance = () => {\r\n      const subjects = ['Mathematics', 'English', 'Science', 'History']\r\n      const statuses = ['Present', 'Late', 'Absent']\r\n      const statusWeights = [0.8, 0.15, 0.05] // 80% Present, 15% Late, 5% Absent\r\n      \r\n      return subjects.map(subject => {\r\n        const recordCount = Math.floor(Math.random() * 10) + 15 // 15-24 attendance records per subject\r\n        \r\n        const attendanceRecords = []\r\n        for (let i = 0; i < recordCount; i++) {\r\n          // Generate weighted random status\r\n          const rand = Math.random()\r\n          let statusIndex = 0\r\n          let cumulativeWeight = 0\r\n          \r\n          for (let j = 0; j < statusWeights.length; j++) {\r\n            cumulativeWeight += statusWeights[j]\r\n            if (rand < cumulativeWeight) {\r\n              statusIndex = j\r\n              break\r\n            }\r\n          }\r\n          \r\n          attendanceRecords.push({\r\n            _id: `sample-${subject}-${i}`,\r\n            date: new Date(Date.now() - (Math.random() * 90 * 24 * 60 * 60 * 1000)).toISOString(),\r\n            status: statuses[statusIndex],\r\n            remarks: statuses[statusIndex] === 'Absent' ? 'Excused absence' : ''\r\n          })\r\n        }\r\n        \r\n        return {\r\n          subject,\r\n          section: '1A',\r\n          teacher: 'Sample Teacher',\r\n          records: attendanceRecords\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Available filter options\r\n    const availableSubjects = computed(() => {\r\n      const subjects = new Set()\r\n      attendance.value.forEach(subject => {\r\n        subjects.add(subject.subject)\r\n      })\r\n      return [...subjects]\r\n    })\r\n    \r\n    // Process all records into a flat array\r\n    const allRecords = computed(() => {\r\n      const records = []\r\n      \r\n      attendance.value.forEach(subject => {\r\n        subject.records.forEach(record => {\r\n          records.push({\r\n            id: record._id,\r\n            date: record.date,\r\n            status: record.status,\r\n            remarks: record.remarks,\r\n            subject: subject.subject,\r\n            section: subject.section,\r\n            teacher: subject.teacher\r\n          })\r\n        })\r\n      })\r\n      \r\n      return records\r\n    })\r\n    \r\n    // Filter records\r\n    const filteredRecords = computed(() => {\r\n      let filtered = [...allRecords.value]\r\n      \r\n      // Filter by search query\r\n      if (searchQuery.value) {\r\n        const query = searchQuery.value.toLowerCase()\r\n        filtered = filtered.filter(record => \r\n          record.subject.toLowerCase().includes(query) ||\r\n          record.section.toLowerCase().includes(query)\r\n        )\r\n      }\r\n      \r\n      // Filter by subject\r\n      if (filterSubject.value) {\r\n        filtered = filtered.filter(record => record.subject === filterSubject.value)\r\n      }\r\n      \r\n      // Filter by status\r\n      if (filterStatus.value) {\r\n        filtered = filtered.filter(record => \r\n          record.status.toLowerCase() === filterStatus.value.toLowerCase()\r\n        )\r\n      }\r\n      \r\n      // Filter by date range\r\n      if (startDate.value) {\r\n        const start = new Date(startDate.value)\r\n        filtered = filtered.filter(record => new Date(record.date) >= start)\r\n      }\r\n      \r\n      if (endDate.value) {\r\n        const end = new Date(endDate.value)\r\n        end.setHours(23, 59, 59, 999) // End of the day\r\n        filtered = filtered.filter(record => new Date(record.date) <= end)\r\n      }\r\n      \r\n      // Sort records\r\n      if (sortOption.value === 'date-desc') {\r\n        filtered.sort((a, b) => new Date(b.date) - new Date(a.date))\r\n      } else if (sortOption.value === 'date-asc') {\r\n        filtered.sort((a, b) => new Date(a.date) - new Date(b.date))\r\n      }\r\n      \r\n      return filtered\r\n    })\r\n    \r\n    // Pagination\r\n    const totalPages = computed(() => \r\n      Math.ceil(filteredRecords.value.length / recordsPerPage)\r\n    )\r\n    \r\n    const paginatedRecords = computed(() => {\r\n      const startIndex = (currentPage.value - 1) * recordsPerPage\r\n      return filteredRecords.value.slice(startIndex, startIndex + recordsPerPage)\r\n    })\r\n    \r\n    // Monitor filter changes to reset pagination\r\n    const resetPagination = () => {\r\n      currentPage.value = 1\r\n    }\r\n    \r\n    // Watch for filter changes\r\n    const setupWatchers = () => {\r\n      // Simple watch implementation since we don't have Vue's watch\r\n      const watchRefs = [searchQuery, filterSubject, filterStatus, startDate, endDate, sortOption]\r\n      const oldValues = watchRefs.map(ref => ref.value)\r\n      \r\n      const checkForChanges = () => {\r\n        for (let i = 0; i < watchRefs.length; i++) {\r\n          if (watchRefs[i].value !== oldValues[i]) {\r\n            resetPagination()\r\n            oldValues[i] = watchRefs[i].value\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Check every 100ms for changes\r\n      setInterval(checkForChanges, 100)\r\n    }\r\n    \r\n    // Attendance statistics\r\n    const presentCount = computed(() => {\r\n      return allRecords.value.filter(record => \r\n        record.status.toLowerCase() === 'present'\r\n      ).length\r\n    })\r\n    \r\n    const lateCount = computed(() => {\r\n      return allRecords.value.filter(record => \r\n        record.status.toLowerCase() === 'late'\r\n      ).length\r\n    })\r\n    \r\n    const absentCount = computed(() => {\r\n      return allRecords.value.filter(record => \r\n        record.status.toLowerCase() === 'absent'\r\n      ).length\r\n    })\r\n    \r\n    const totalAttendance = computed(() => allRecords.value.length)\r\n    \r\n    const presentPercentage = computed(() => {\r\n      return totalAttendance.value === 0 ? 0 : \r\n        Math.round((presentCount.value / totalAttendance.value) * 100)\r\n    })\r\n    \r\n    const latePercentage = computed(() => {\r\n      return totalAttendance.value === 0 ? 0 : \r\n        Math.round((lateCount.value / totalAttendance.value) * 100)\r\n    })\r\n    \r\n    const absentPercentage = computed(() => {\r\n      return totalAttendance.value === 0 ? 0 : \r\n        Math.round((absentCount.value / totalAttendance.value) * 100)\r\n    })\r\n    \r\n    // Create attendance chart\r\n    const createAttendanceChart = () => {\r\n      if (!attendanceChart.value) return\r\n      \r\n      const ctx = attendanceChart.value.getContext('2d')\r\n      \r\n      // Calculate attendance by subject\r\n      const subjects = availableSubjects.value\r\n      const presentData = []\r\n      const lateData = []\r\n      const absentData = []\r\n      \r\n      subjects.forEach(subject => {\r\n        const subjectRecords = allRecords.value.filter(record => record.subject === subject)\r\n        const total = subjectRecords.length\r\n        \r\n        if (total === 0) {\r\n          presentData.push(0)\r\n          lateData.push(0)\r\n          absentData.push(0)\r\n        } else {\r\n          const present = subjectRecords.filter(record => \r\n            record.status.toLowerCase() === 'present'\r\n          ).length\r\n          \r\n          const late = subjectRecords.filter(record => \r\n            record.status.toLowerCase() === 'late'\r\n          ).length\r\n          \r\n          const absent = subjectRecords.filter(record => \r\n            record.status.toLowerCase() === 'absent'\r\n          ).length\r\n          \r\n          presentData.push((present / total) * 100)\r\n          lateData.push((late / total) * 100)\r\n          absentData.push((absent / total) * 100)\r\n        }\r\n      })\r\n      \r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: subjects,\r\n          datasets: [\r\n            {\r\n              label: 'Present',\r\n              data: presentData,\r\n              backgroundColor: '#48bb78',\r\n              borderColor: '#38a169',\r\n              borderWidth: 1\r\n            },\r\n            {\r\n              label: 'Late',\r\n              data: lateData,\r\n              backgroundColor: '#ecc94b',\r\n              borderColor: '#d69e2e',\r\n              borderWidth: 1\r\n            },\r\n            {\r\n              label: 'Absent',\r\n              data: absentData,\r\n              backgroundColor: '#f56565',\r\n              borderColor: '#e53e3e',\r\n              borderWidth: 1\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            x: {\r\n              stacked: true,\r\n            },\r\n            y: {\r\n              stacked: true,\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Percentage (%)'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Helper methods\r\n    const formatDate = (dateString) => {\r\n      const date = new Date(dateString)\r\n      return date.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        weekday: 'short'\r\n      })\r\n    }\r\n    \r\n    const getStatusClass = (status) => {\r\n      const statusLower = status.toLowerCase()\r\n      if (statusLower === 'present') return 'status-present'\r\n      if (statusLower === 'late') return 'status-late'\r\n      if (statusLower === 'absent') return 'status-absent'\r\n      return ''\r\n    }\r\n    \r\n    const clearDateFilter = () => {\r\n      startDate.value = ''\r\n      endDate.value = ''\r\n    }\r\n    \r\n    onMounted(() => {\r\n      fetchAttendance()\r\n      setupWatchers()\r\n    })\r\n    \r\n    return {\r\n      isLoading,\r\n      searchQuery,\r\n      filterSubject,\r\n      filterStatus,\r\n      sortOption,\r\n      startDate,\r\n      endDate,\r\n      currentPage,\r\n      attendance,\r\n      attendanceChart,\r\n      availableSubjects,\r\n      filteredRecords,\r\n      paginatedRecords,\r\n      totalPages,\r\n      presentCount,\r\n      lateCount,\r\n      absentCount,\r\n      totalAttendance,\r\n      presentPercentage,\r\n      latePercentage,\r\n      absentPercentage,\r\n      formatDate,\r\n      getStatusClass,\r\n      clearDateFilter,\r\n      today\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.student-attendance {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.page-header h2 {\r\n  font-size: 1.8rem;\r\n  color: #2d3748;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.subtitle {\r\n  color: #718096;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.controls {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.search-box {\r\n  flex: 1;\r\n  min-width: 300px;\r\n  position: relative;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 0.75rem 1rem 0.75rem 2.5rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #e2e8f0;\r\n  background: white;\r\n  font-size: 1rem;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.search-input:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n  outline: none;\r\n}\r\n\r\n.search-box i {\r\n  position: absolute;\r\n  left: 1rem;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  color: #a0aec0;\r\n}\r\n\r\n.filter-box {\r\n  display: flex;\r\n  gap: 0.75rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.filter-select {\r\n  padding: 0.75rem 1rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid #e2e8f0;\r\n  background: white;\r\n  font-size: 0.875rem;\r\n  color: #4a5568;\r\n  min-width: 150px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.filter-select:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n  outline: none;\r\n}\r\n\r\n.stats-row {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 1rem;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.stat-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.present-icon {\r\n  background: #c6f6d5;\r\n  color: #2f855a;\r\n}\r\n\r\n.late-icon {\r\n  background: #fefcbf;\r\n  color: #b7791f;\r\n}\r\n\r\n.absent-icon {\r\n  background: #fed7d7;\r\n  color: #c53030;\r\n}\r\n\r\n.total-icon {\r\n  background: #e9d8fd;\r\n  color: #6b46c1;\r\n}\r\n\r\n.stat-icon i {\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-content h3 {\r\n  font-size: 0.875rem;\r\n  color: #718096;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n}\r\n\r\n.chart-row {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 1rem;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.chart-card h3 {\r\n  font-size: 1.25rem;\r\n  color: #2d3748;\r\n  margin: 0 0 1.5rem 0;\r\n}\r\n\r\n.chart-container {\r\n  height: 300px;\r\n}\r\n\r\n.table-card {\r\n  background: white;\r\n  border-radius: 1rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\r\n  overflow: hidden;\r\n}\r\n\r\n.card-header {\r\n  padding: 1.5rem;\r\n  background: #f7fafc;\r\n  border-bottom: 1px solid #edf2f7;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n}\r\n\r\n.card-header h3 {\r\n  font-size: 1.25rem;\r\n  color: #2d3748;\r\n  margin: 0;\r\n}\r\n\r\n.date-filter {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.date-picker {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.date-picker label {\r\n  font-size: 0.875rem;\r\n  color: #4a5568;\r\n}\r\n\r\n.date-input {\r\n  padding: 0.5rem;\r\n  border-radius: 0.375rem;\r\n  border: 1px solid #e2e8f0;\r\n  font-size: 0.875rem;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.date-input:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n  outline: none;\r\n}\r\n\r\n.filter-btn {\r\n  padding: 0.5rem 1rem;\r\n  background: #f7fafc;\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 0.375rem;\r\n  color: #4a5568;\r\n  font-size: 0.875rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.filter-btn:hover {\r\n  background: #edf2f7;\r\n}\r\n\r\n.attendance-table-wrapper {\r\n  overflow-x: auto;\r\n}\r\n\r\n.attendance-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.attendance-table th {\r\n  padding: 1rem;\r\n  text-align: left;\r\n  font-weight: 500;\r\n  color: #4a5568;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.attendance-table td {\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n}\r\n\r\n.attendance-table tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n.status-badge {\r\n  display: inline-block;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 1rem;\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-present {\r\n  background: #c6f6d5;\r\n  color: #2f855a;\r\n}\r\n\r\n.status-late {\r\n  background: #fefcbf;\r\n  color: #b7791f;\r\n}\r\n\r\n.status-absent {\r\n  background: #fed7d7;\r\n  color: #c53030;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5rem;\r\n  color: #a0aec0;\r\n}\r\n\r\n.spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid #e2e8f0;\r\n  border-top-color: #4299e1;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n\r\n.no-data {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5rem;\r\n  color: #a0aec0;\r\n  text-align: center;\r\n}\r\n\r\n.no-data i {\r\n  font-size: 3rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  padding: 1.5rem;\r\n  border-top: 1px solid #edf2f7;\r\n}\r\n\r\n.page-btn {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 0.375rem;\r\n  border: 1px solid #e2e8f0;\r\n  background: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.page-btn:hover:not(:disabled) {\r\n  background: #edf2f7;\r\n}\r\n\r\n.page-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.page-numbers {\r\n  font-size: 0.875rem;\r\n  color: #4a5568;\r\n}\r\n\r\n.skeleton-loader {\r\n  height: 1.25rem;\r\n  width: 100%;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: loading 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n@keyframes loading {\r\n  0% { background-position: 200% 0; }\r\n  100% { background-position: -200% 0; }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .controls,\r\n  .date-filter {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .filter-box,\r\n  .date-picker {\r\n    width: 100%;\r\n  }\r\n  \r\n  .filter-select,\r\n  .date-input {\r\n    width: 100%;\r\n  }\r\n  \r\n  .card-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
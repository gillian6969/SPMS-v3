{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"all-survey-stat\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-center py-4\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"text-center py-4\"\n};\nconst _hoisted_4 = {\n  key: 2,\n  class: \"survey-charts row g-4\"\n};\nconst _hoisted_5 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_6 = {\n  class: \"chart-container\"\n};\nconst _hoisted_7 = {\n  ref: \"problemTypesChart\"\n};\nconst _hoisted_8 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_9 = {\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  ref: \"severityLevelsChart\"\n};\nconst _hoisted_11 = {\n  class: \"col-md-12\"\n};\nconst _hoisted_12 = {\n  class: \"chart-container\"\n};\nconst _hoisted_13 = {\n  ref: \"responseRatesChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"mt-2\"\n  }, \"Loading survey statistics...\", -1 /* HOISTED */)]))) : $setup.noData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[1] || (_cache[1] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-pie fa-3x text-muted mb-3\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"h5\", null, \"No Survey Data Available\", -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"text-muted\"\n  }, \"No survey responses have been submitted yet.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" Problem Types Distribution \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[2] || (_cache[2] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Problem Types Distribution\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_7, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" Severity Levels \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_cache[3] || (_cache[3] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Severity Levels Distribution\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_10, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" Response Rates Chart \"), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_cache[4] || (_cache[4] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Survey Response Rates\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_13, null, 512 /* NEED_PATCH */)])])]))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","$setup","loading","_hoisted_2","_cache","_createElementVNode","role","noData","_hoisted_3","_hoisted_4","_createCommentVNode","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13"],"sources":["D:\\au_dev\\client\\src\\components\\AllSurveyStat.vue"],"sourcesContent":["<template>\n  <div class=\"all-survey-stat\">\n    <div v-if=\"loading\" class=\"text-center py-4\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <p class=\"mt-2\">Loading survey statistics...</p>\n    </div>\n    \n    <div v-else-if=\"noData\" class=\"text-center py-4\">\n      <i class=\"fas fa-chart-pie fa-3x text-muted mb-3\"></i>\n      <h5>No Survey Data Available</h5>\n      <p class=\"text-muted\">No survey responses have been submitted yet.</p>\n    </div>\n    \n    <div v-else class=\"survey-charts row g-4\">\n      <!-- Problem Types Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-container\">\n          <h6 class=\"chart-title\">Problem Types Distribution</h6>\n          <canvas ref=\"problemTypesChart\"></canvas>\n        </div>\n      </div>\n      \n      <!-- Severity Levels -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-container\">\n          <h6 class=\"chart-title\">Severity Levels Distribution</h6>\n          <canvas ref=\"severityLevelsChart\"></canvas>\n        </div>\n      </div>\n      \n      <!-- Response Rates Chart -->\n      <div class=\"col-md-12\">\n        <div class=\"chart-container\">\n          <h6 class=\"chart-title\">Survey Response Rates</h6>\n          <canvas ref=\"responseRatesChart\"></canvas>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport axios from 'axios'\nimport Chart from 'chart.js/auto'\nimport moment from 'moment'\n\nconst store = useStore()\nconst loading = ref(true)\nconst noData = ref(false)\nconst problemTypesChart = ref(null)\nconst severityLevelsChart = ref(null)\nconst responseRatesChart = ref(null)\nconst surveys = ref([])\nconst problemCounts = ref({})\nconst severityCounts = ref({\n  high: 0,\n  medium: 0,\n  low: 0,\n  minimal: 0\n})\n\n// Get severity level based on score\nconst getSeverityLevel = (score) => {\n  if (score >= 7) return 'high';\n  if (score >= 5) return 'medium';\n  if (score >= 3) return 'low';\n  return 'minimal';\n}\n\n// Fetch all submitted surveys and process for statistics\nconst fetchSurveyData = async () => {\n  try {\n    loading.value = true\n    const token = store.state.auth.token\n    \n    // Get all completed surveys from the survey collection\n    const response = await axios.get('http://localhost:8000/api/survey/submitted', {\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n    \n    console.log('Fetching survey data from API:', response.data)\n    \n    if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n      console.log('Survey data received:', response.data)\n      surveys.value = response.data\n      noData.value = false\n      processSurveyData()\n    } else {\n      console.log('No survey data found, creating sample data')\n      createSampleData()\n    }\n  } catch (error) {\n    console.error('Error fetching survey data:', error)\n    createSampleData()\n  } finally {\n    loading.value = false\n  }\n}\n\n// Create sample data if API returns no data\nconst createSampleData = () => {\n  // Create sample problem counts\n  problemCounts.value = {\n    'Academic': 3,\n    'Financial': 2,\n    'Personal': 5,\n    'Health': 1,\n    'Social': 4\n  }\n  \n  // Create sample severity counts\n  severityCounts.value = {\n    high: 3,\n    medium: 4,\n    low: 6,\n    minimal: 2\n  }\n  \n  // Create sample monthly data\n  const currentMonth = moment().format('MMM YYYY')\n  const lastMonth = moment().subtract(1, 'month').format('MMM YYYY')\n  const twoMonthsAgo = moment().subtract(2, 'month').format('MMM YYYY')\n  \n  const monthlyData = {}\n  monthlyData[twoMonthsAgo] = 2\n  monthlyData[lastMonth] = 5\n  monthlyData[currentMonth] = 8\n  \n  // Create charts with sample data\n  renderProblemTypesChart(true)\n  renderSeverityLevelsChart(true)\n  renderResponseRatesChart(monthlyData)\n  \n  noData.value = false\n}\n\n// Process survey data to generate statistics\nconst processSurveyData = () => {\n  // Reset counts\n  problemCounts.value = {}\n  severityCounts.value = {\n    high: 0,\n    medium: 0,\n    low: 0,\n    minimal: 0\n  }\n  \n  // Process each survey\n  surveys.value.forEach(survey => {\n    // Count problem types and their severity\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        // Count problem types\n        if (stat.type) {\n          if (!problemCounts.value[stat.type]) {\n            problemCounts.value[stat.type] = 0\n          }\n          problemCounts.value[stat.type]++\n        }\n        \n        // Count severity levels\n        const severityLevel = getSeverityLevel(stat.average || 0)\n        severityCounts.value[severityLevel]++\n      })\n    }\n  })\n  \n  console.log('Processed problem counts:', problemCounts.value)\n  console.log('Processed severity counts:', severityCounts.value)\n  \n  // Group surveys by month\n  const monthlyData = {}\n  surveys.value.forEach(survey => {\n    const date = moment(survey.createdAt || survey.updatedAt)\n    const monthKey = date.format('MMM YYYY')\n    \n    if (!monthlyData[monthKey]) {\n      monthlyData[monthKey] = 0\n    }\n    \n    monthlyData[monthKey]++\n  })\n  \n  // Create charts after processing data\n  renderProblemTypesChart()\n  renderSeverityLevelsChart()\n  renderResponseRatesChart(monthlyData)\n}\n\n// Create problem types distribution chart\nconst renderProblemTypesChart = (useSampleData = false) => {\n  if (!problemTypesChart.value) return\n  \n  const ctx = problemTypesChart.value.getContext('2d')\n  if (!ctx) return\n  \n  const existingChart = Chart.getChart(ctx)\n  if (existingChart) existingChart.destroy()\n  \n  let problemTypes = Object.keys(problemCounts.value)\n  let problemData = Object.values(problemCounts.value)\n  \n  // If no data or using sample data, and previous check didn't create sample data\n  if ((problemTypes.length === 0 || useSampleData) && !Object.keys(problemCounts.value).length) {\n    problemTypes = ['Academic', 'Financial', 'Personal', 'Health', 'Social']\n    problemData = [3, 2, 5, 1, 4]\n  }\n  \n  // Chart colors\n  const colors = [\n    'rgba(54, 162, 235, 0.7)',   // Blue\n    'rgba(255, 99, 132, 0.7)',   // Red\n    'rgba(255, 206, 86, 0.7)',   // Yellow\n    'rgba(75, 192, 192, 0.7)',   // Green\n    'rgba(153, 102, 255, 0.7)',  // Purple\n    'rgba(255, 159, 64, 0.7)'    // Orange\n  ]\n  \n  // Create chart\n  new Chart(ctx, {\n    type: 'pie',\n    data: {\n      labels: problemTypes,\n      datasets: [{\n        data: problemData,\n        backgroundColor: colors.slice(0, problemTypes.length),\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 12,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0\n              const total = problemData.reduce((a, b) => a + b, 0)\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0\n              return `${context.label}: ${value} (${percentage}%)`\n            }\n          }\n        }\n      }\n    }\n  })\n}\n\n// Create severity levels distribution chart\nconst renderSeverityLevelsChart = (useSampleData = false) => {\n  if (!severityLevelsChart.value) return\n  \n  const ctx = severityLevelsChart.value.getContext('2d')\n  if (!ctx) return\n  \n  const existingChart = Chart.getChart(ctx)\n  if (existingChart) existingChart.destroy()\n  \n  const labels = ['High', 'Medium', 'Low', 'Minimal']\n  \n  let data = [\n    severityCounts.value.high,\n    severityCounts.value.medium,\n    severityCounts.value.low,\n    severityCounts.value.minimal\n  ]\n  \n  // Use sample data if specified and no real data\n  if (useSampleData && data.every(val => val === 0)) {\n    data = [3, 4, 6, 2]\n  }\n  \n  // Chart colors\n  const colors = [\n    'rgba(220, 53, 69, 0.7)',   // High (red)\n    'rgba(255, 193, 7, 0.7)',   // Medium (yellow)\n    'rgba(13, 110, 253, 0.7)',  // Low (blue)\n    'rgba(25, 135, 84, 0.7)'    // Minimal (green)\n  ]\n  \n  // Create chart\n  new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: colors,\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 12,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0\n              const total = data.reduce((a, b) => a + b, 0)\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0\n              return `${context.label}: ${value} (${percentage}%)`\n            }\n          }\n        }\n      }\n    }\n  })\n}\n\n// Create response rates chart (by month)\nconst renderResponseRatesChart = (monthlyData = {}) => {\n  if (!responseRatesChart.value) return\n  \n  const ctx = responseRatesChart.value.getContext('2d')\n  if (!ctx) return\n  \n  const existingChart = Chart.getChart(ctx)\n  if (existingChart) existingChart.destroy()\n  \n  // If no data provided, use sample data\n  if (Object.keys(monthlyData).length === 0) {\n    const currentMonth = moment().format('MMM YYYY')\n    const lastMonth = moment().subtract(1, 'month').format('MMM YYYY')\n    const twoMonthsAgo = moment().subtract(2, 'month').format('MMM YYYY')\n    \n    monthlyData = {}\n    monthlyData[twoMonthsAgo] = 2\n    monthlyData[lastMonth] = 5\n    monthlyData[currentMonth] = 8\n  }\n  \n  // Sort months chronologically\n  const sortedMonths = Object.keys(monthlyData).sort((a, b) => {\n    return moment(a, 'MMM YYYY').diff(moment(b, 'MMM YYYY'))\n  })\n  \n  const responseData = sortedMonths.map(month => monthlyData[month])\n  \n  // Create chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: sortedMonths,\n      datasets: [{\n        label: 'Survey Responses',\n        data: responseData,\n        backgroundColor: 'rgba(75, 192, 192, 0.7)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => `${context.raw} survey${context.raw !== 1 ? 's' : ''}`\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            stepSize: 1,\n            precision: 0\n          },\n          title: {\n            display: true,\n            text: 'Number of Responses'\n          }\n        }\n      }\n    }\n  })\n}\n\n// Initialize component\nonMounted(() => {\n  fetchSurveyData()\n})\n</script>\n\n<style scoped>\n.all-survey-stat {\n  padding: 1rem;\n  background-color: white;\n  border-radius: 8px;\n}\n\n.chart-container {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  height: 300px;\n  position: relative;\n}\n\n.chart-title {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #2d3748;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\ncanvas {\n  max-height: 100%;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAD9BC,GAAA;EAEwBD,KAAK,EAAC;;;EAF9BC,GAAA;EAS4BD,KAAK,EAAC;;;EATlCC,GAAA;EAegBD,KAAK,EAAC;;;EAEXA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAiB;;EAElBE,GAAG,EAAC;AAAmB;;EAK9BF,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAiB;;EAElBE,GAAG,EAAC;AAAqB;;EAKhCF,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAiB;;EAElBE,GAAG,EAAC;AAAoB;;uBAnCxCC,mBAAA,CAuCM,OAvCNC,UAuCM,GAtCOC,MAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAKM,OALNI,UAKM,EAAAC,MAAA,QAAAA,MAAA,OAJJC,mBAAA,CAEM;IAFDT,KAAK,EAAC,6BAA6B;IAACU,IAAI,EAAC;MAC5CD,mBAAA,CAA+C;IAAzCT,KAAK,EAAC;EAAiB,GAAC,YAAU,E,qBAE1CS,mBAAA,CAAgD;IAA7CT,KAAK,EAAC;EAAM,GAAC,8BAA4B,oB,MAG9BK,MAAA,CAAAM,MAAM,I,cAAtBR,mBAAA,CAIM,OAJNS,UAIM,EAAAJ,MAAA,QAAAA,MAAA,OAHJC,mBAAA,CAAsD;IAAnDT,KAAK,EAAC;EAAwC,4BACjDS,mBAAA,CAAiC,YAA7B,0BAAwB,qBAC5BA,mBAAA,CAAsE;IAAnET,KAAK,EAAC;EAAY,GAAC,8CAA4C,oB,qBAGpEG,mBAAA,CAwBM,OAxBNU,UAwBM,GAvBJC,mBAAA,gCAAmC,EACnCL,mBAAA,CAKM,OALNM,UAKM,GAJJN,mBAAA,CAGM,OAHNO,UAGM,G,0BAFJP,mBAAA,CAAuD;IAAnDT,KAAK,EAAC;EAAa,GAAC,4BAA0B,sBAClDS,mBAAA,CAAyC,UAAzCQ,UAAyC,8B,KAI7CH,mBAAA,qBAAwB,EACxBL,mBAAA,CAKM,OALNS,UAKM,GAJJT,mBAAA,CAGM,OAHNU,UAGM,G,0BAFJV,mBAAA,CAAyD;IAArDT,KAAK,EAAC;EAAa,GAAC,8BAA4B,sBACpDS,mBAAA,CAA2C,UAA3CW,WAA2C,8B,KAI/CN,mBAAA,0BAA6B,EAC7BL,mBAAA,CAKM,OALNY,WAKM,GAJJZ,mBAAA,CAGM,OAHNa,WAGM,G,0BAFJb,mBAAA,CAAkD;IAA9CT,KAAK,EAAC;EAAa,GAAC,uBAAqB,sBAC7CS,mBAAA,CAA0C,UAA1Cc,WAA0C,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
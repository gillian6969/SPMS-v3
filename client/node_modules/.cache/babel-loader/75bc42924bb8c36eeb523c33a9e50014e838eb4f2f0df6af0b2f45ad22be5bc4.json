{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\",\n  ref: \"dashboardContainer\"\n};\nconst _hoisted_2 = {\n  class: \"filter-section mb-4\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"d-flex gap-3 align-items-center\"\n};\nconst _hoisted_4 = {\n  class: \"filter-group\"\n};\nconst _hoisted_5 = {\n  id: \"analytics\",\n  class: \"analytics-grid mb-4\"\n};\nconst _hoisted_6 = {\n  class: \"stat-card\"\n};\nconst _hoisted_7 = {\n  class: \"stat-content\"\n};\nconst _hoisted_8 = {\n  class: \"stat-value\"\n};\nconst _hoisted_9 = {\n  class: \"stat-card\"\n};\nconst _hoisted_10 = {\n  class: \"stat-content\"\n};\nconst _hoisted_11 = {\n  class: \"stat-value\"\n};\nconst _hoisted_12 = {\n  class: \"stat-card\"\n};\nconst _hoisted_13 = {\n  class: \"stat-content\"\n};\nconst _hoisted_14 = {\n  class: \"stat-value\"\n};\nconst _hoisted_15 = {\n  class: \"performance-grid mb-4\"\n};\nconst _hoisted_16 = {\n  class: \"stat-card\"\n};\nconst _hoisted_17 = {\n  class: \"stat-content\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_19 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_20 = {\n  class: \"stat-card\"\n};\nconst _hoisted_21 = {\n  class: \"stat-content\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_23 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_24 = {\n  class: \"charts-grid mb-4\"\n};\nconst _hoisted_25 = {\n  class: \"chart-card\"\n};\nconst _hoisted_26 = {\n  class: \"chart-container\"\n};\nconst _hoisted_27 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_28 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_29 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_30 = {\n  class: \"chart-card\"\n};\nconst _hoisted_31 = {\n  class: \"chart-container\"\n};\nconst _hoisted_32 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_33 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_34 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_35 = {\n  class: \"charts-grid mb-4\"\n};\nconst _hoisted_36 = {\n  class: \"chart-card\"\n};\nconst _hoisted_37 = {\n  class: \"chart-container\"\n};\nconst _hoisted_38 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_39 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_40 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_41 = {\n  class: \"chart-card\"\n};\nconst _hoisted_42 = {\n  class: \"chart-container\"\n};\nconst _hoisted_43 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_44 = {\n  ref: \"sectionChart\"\n};\nconst _hoisted_45 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Year Filter \"), _createElementVNode(\"div\", _hoisted_2, [$setup.isCITHead ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, _cache[3] || (_cache[3] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-22ba47ca>All Academic Years</option><option value=\\\"1st\\\" data-v-22ba47ca>1st Year</option><option value=\\\"2nd\\\" data-v-22ba47ca>2nd Year</option><option value=\\\"3rd\\\" data-v-22ba47ca>3rd Year</option><option value=\\\"4th\\\" data-v-22ba47ca>4th Year</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"button\", {\n    class: \"btn btn-refresh\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.refreshDashboard && $setup.refreshDashboard(...args))\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"i\", {\n    class: \"fas fa-sync-alt\"\n  }, null, -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h3\", _hoisted_8, _toDisplayString($setup.totalStudents), 1 /* TEXT */), _cache[5] || (_cache[5] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Total Students\", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_9, [_cache[8] || (_cache[8] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard-teacher\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"h3\", _hoisted_11, _toDisplayString($setup.totalTeachers), 1 /* TEXT */), _cache[7] || (_cache[7] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Total Teachers\", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_12, [_cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-users\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"h3\", _hoisted_14, _toDisplayString($setup.activeSections), 1 /* TEXT */), _cache[9] || (_cache[9] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Active Sections\", -1 /* HOISTED */))])])]), _createCommentVNode(\" Performance Stats \"), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, [_cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clock\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [$setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_18, _toDisplayString($setup.averageAttendance) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _cache[11] || (_cache[11] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Average Attendance\", -1 /* HOISTED */)), !$setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_19, \"No data available\")) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_20, [_cache[14] || (_cache[14] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_21, [$setup.hasScoreData ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_22, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _cache[13] || (_cache[13] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Average Score\", -1 /* HOISTED */)), !$setup.hasScoreData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_23, \"No data available\")) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_24, [_createCommentVNode(\" Attendance Distribution Chart \"), _createElementVNode(\"div\", _hoisted_25, [_cache[16] || (_cache[16] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[17] || (_cache[17] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_26, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, _cache[15] || (_cache[15] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_28, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_29, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_30, [_cache[19] || (_cache[19] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[20] || (_cache[20] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_31, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, _cache[18] || (_cache[18] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_33, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_34, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Performance Trend & Section Performance \"), _createElementVNode(\"div\", _hoisted_35, [_createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_36, [_cache[22] || (_cache[22] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[23] || (_cache[23] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Department average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_37, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_38, _cache[21] || (_cache[21] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_39, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_40, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" Section Performance \"), _createElementVNode(\"div\", _hoisted_41, [_cache[25] || (_cache[25] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-users me-2\"\n  }), _createTextVNode(\" Section Performance \")], -1 /* HOISTED */)), _cache[26] || (_cache[26] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Comparison of performance across different sections\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_42, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_43, _cache[24] || (_cache[24] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_44, null, 512 /* NEED_PATCH */), !$setup.hasSectionData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_45, \"No section data available\")) : _createCommentVNode(\"v-if\", true)])])])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","key","id","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","$setup","isCITHead","_hoisted_3","_hoisted_4","_cache","$event","selectedYear","onChange","args","handleYearChange","_createStaticVNode","onClick","refreshDashboard","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_toDisplayString","totalStudents","_hoisted_9","_hoisted_10","_hoisted_11","totalTeachers","_hoisted_12","_hoisted_13","_hoisted_14","activeSections","_hoisted_15","_hoisted_16","_hoisted_17","hasAttendanceData","_hoisted_18","averageAttendance","_hoisted_19","_hoisted_20","_hoisted_21","hasScoreData","_hoisted_22","averageScore","_hoisted_23","_hoisted_24","_hoisted_25","_createTextVNode","_hoisted_26","isLoading","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","hasAssessmentData","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","hasPerformanceData","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","hasSectionData","_hoisted_45"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\r\n    <!-- Year Filter -->\r\n    <div class=\"filter-section mb-4\">\r\n      <div v-if=\"isCITHead\" class=\"d-flex gap-3 align-items-center\">\r\n        <div class=\"filter-group\">\r\n          <select class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n            <option value=\"\">All Academic Years</option>\r\n            <option value=\"1st\">1st Year</option>\r\n            <option value=\"2nd\">2nd Year</option>\r\n            <option value=\"3rd\">3rd Year</option>\r\n            <option value=\"4th\">4th Year</option>\r\n          </select>\r\n        </div>\r\n        <button class=\"btn btn-refresh\" @click=\"refreshDashboard\">\r\n          <i class=\"fas fa-sync-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Analytics Cards -->\r\n    <div id=\"analytics\" class=\"analytics-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-graduate\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalStudents }}</h3>\r\n          <p class=\"stat-label\">Total Students</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chalkboard-teacher\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalTeachers }}</h3>\r\n          <p class=\"stat-label\">Total Teachers</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-users\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ activeSections }}</h3>\r\n          <p class=\"stat-label\">Active Sections</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Stats -->\r\n    <div class=\"performance-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-clock\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</h3>\r\n          <p class=\"stat-label\">Average Attendance</p>\r\n          <p v-if=\"!hasAttendanceData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chart-line\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasScoreData\">{{ averageScore }}%</h3>\r\n          <p class=\"stat-label\">Average Score</p>\r\n          <p v-if=\"!hasScoreData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Row -->\r\n    <div class=\"charts-grid mb-4\">\r\n      <!-- Attendance Distribution Chart -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-calendar-check me-2\"></i>\r\n          Attendance Distribution\r\n        </h5>\r\n        <p class=\"chart-description\">Breakdown of student attendance patterns</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"performanceChart\"></canvas>\r\n          <p v-if=\"!hasAttendanceData && !isLoading\" class=\"no-data-message\">No attendance data available</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Assessment Type Distribution -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-tasks me-2\"></i>\r\n          Assessment Performance Analysis\r\n        </h5>\r\n        <p class=\"chart-description\">Average scores by assessment type</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"assessmentTypeChart\"></canvas>\r\n          <p v-if=\"!hasAssessmentData && !isLoading\" class=\"no-data-message\">No assessment data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Trend & Section Performance -->\r\n    <div class=\"charts-grid mb-4\">\r\n      <!-- Performance Trend Chart -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-chart-line me-2\"></i>\r\n          Performance Trends Over Time\r\n        </h5>\r\n        <p class=\"chart-description\">Department average scores across recent assessments</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"performanceTrendChart\"></canvas>\r\n          <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Section Performance -->\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">\r\n          <i class=\"fas fa-users me-2\"></i>\r\n          Section Performance\r\n        </h5>\r\n        <p class=\"chart-description\">Comparison of performance across different sections</p>\r\n        <div class=\"chart-container\">\r\n          <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <i class=\"fas fa-spinner fa-spin\"></i>\r\n            <p>Loading chart data...</p>\r\n          </div>\r\n          <canvas ref=\"sectionChart\"></canvas>\r\n          <p v-if=\"!hasSectionData && !isLoading\" class=\"no-data-message\">No section data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api'\r\n});\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    const performanceChart = ref(null)\r\n    const assessmentTypeChart = ref(null)\r\n    const performanceTrendChart = ref(null)\r\n    const sectionChart = ref(null)\r\n    const selectedYear = ref('')\r\n    const dashboardContainer = ref(null)\r\n    const isLoading = ref(false)\r\n    const lastUpdate = ref(null)\r\n    const autoRefreshInterval = ref(null)\r\n\r\n    // Computed properties\r\n    const isCITHead = computed(() => store.getters.isCITHead)\r\n    const token = computed(() => store.state.auth.token)\r\n\r\n    // Set auth token for all requests\r\n    watch(token, (newToken) => {\r\n      if (newToken) {\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n      }\r\n    }, { immediate: true });\r\n\r\n    // Dashboard stats\r\n    const totalStudents = ref(0)\r\n    const totalTeachers = ref(0)\r\n    const averageAttendance = ref(0)\r\n    const averageScore = ref(0)\r\n    const activeSections = ref(0)\r\n    const data = ref(null)\r\n\r\n    // Computed properties for data availability\r\n    const hasAttendanceData = computed(() => {\r\n      if (data.value && data.value.attendanceDistribution) {\r\n        return data.value.attendanceDistribution.some(val => val > 0);\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const hasScoreData = computed(() => {\r\n      return data.value?.averageScore > 0;\r\n    });\r\n\r\n    const hasPerformanceData = computed(() => {\r\n      // Check if we have any assessment or performance data\r\n      if (data.value) {\r\n        // Check for averageScore > 0\r\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\r\n          return true;\r\n        }\r\n        \r\n        // Check for performance trends\r\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const hasAssessmentData = computed(() => {\r\n      if (data.value) {\r\n        // Check directly in assessmentTypes\r\n        if (data.value.assessmentTypes) {\r\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\r\n          return assessmentTypes.some(type => type.count > 0);\r\n        }\r\n        \r\n        // Fallback to assessmentTypeDistribution\r\n        if (data.value.assessmentTypeDistribution) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const hasSectionData = computed(() => {\r\n      return data.value?.sections?.length > 0;\r\n    });\r\n\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        isLoading.value = true;\r\n        const response = await api.get('/dashboard/stats', {\r\n          params: {\r\n            year: selectedYear.value\r\n          }\r\n        });\r\n\r\n        data.value = response.data;\r\n        \r\n        // Update stats\r\n        totalStudents.value = data.value.totalStudents || 0;\r\n        totalTeachers.value = data.value.totalTeachers || 0;\r\n        averageAttendance.value = data.value.averageAttendance || 0;\r\n        averageScore.value = data.value.averageScore || 0;\r\n        activeSections.value = data.value.activeSections || 0;\r\n\r\n        // Update charts with new data\r\n        if (data.value) {\r\n          updateCharts(data.value);\r\n        }\r\n        \r\n        lastUpdate.value = new Date();\r\n      } catch (error) {\r\n        console.error('Failed to fetch dashboard data:', error);\r\n        if (error.response) {\r\n          console.error('Error response:', error.response.data);\r\n        }\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    };\r\n\r\n    const updateCharts = (data) => {\r\n      updatePerformanceChart(data);\r\n      updateAssessmentTypeChart(data);\r\n      updatePerformanceTrendChart(data);\r\n      updateSectionChart(data);\r\n    };\r\n\r\n    // Initialize dummy data for charts when no data is available\r\n    const initDummyData = () => {\r\n      updatePerformanceChart({\r\n        attendanceDistribution: [0, 0, 0]\r\n      });\r\n      \r\n      updateAssessmentTypeChart({\r\n        assessmentData: [\r\n          { type: 'Quiz', averageScore: 0 },\r\n          { type: 'Activity', averageScore: 0 },\r\n          { type: 'Performance Task', averageScore: 0 }\r\n        ]\r\n      });\r\n      \r\n      updatePerformanceTrendChart([]);\r\n      updateSectionChart({ sections: [] });\r\n    };\r\n\r\n    // Attendance Distribution Chart\r\n    const updatePerformanceChart = (data) => {\r\n      if (!performanceChart.value) return;\r\n\r\n      const ctx = performanceChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Get attendance distribution or use default values\r\n      const attendanceData = data.attendanceDistribution || [0, 0, 0];\r\n\r\n      new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Present', 'Late', 'Absent'],\r\n          datasets: [{\r\n            data: attendanceData,\r\n            backgroundColor: [\r\n              'rgba(52, 211, 153, 0.8)',  // Green for Present\r\n              'rgba(251, 191, 36, 0.8)',  // Yellow for Late\r\n              'rgba(239, 68, 68, 0.8)',   // Red for Absent\r\n            ],\r\n            borderColor: [\r\n              'rgb(16, 185, 129)',\r\n              'rgb(245, 158, 11)',\r\n              'rgb(220, 38, 38)',\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom',\r\n              labels: {\r\n                font: {\r\n                  size: 12\r\n                },\r\n                padding: 15\r\n              }\r\n            }\r\n          },\r\n          cutout: '60%',\r\n          layout: {\r\n            padding: 20\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Assessment Type Chart\r\n    const updateAssessmentTypeChart = (data) => {\r\n      if (!assessmentTypeChart.value) return;\r\n      \r\n      const ctx = assessmentTypeChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Process incoming data to restructure it\r\n      let assessmentData = {};\r\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\r\n      \r\n      // Initialize default data structure if proper data isn't available\r\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\r\n        // Sample data structure for fallback\r\n        assessmentData = {\r\n          assessmentTypes: assessmentTypes,\r\n          averageScores: {},\r\n          totalCounts: {}\r\n        };\r\n        \r\n        assessmentTypes.forEach(type => {\r\n          assessmentData.averageScores[type] = 0;\r\n          assessmentData.totalCounts[type] = 0;\r\n        });\r\n      } else {\r\n        // Process actual data\r\n        assessmentData = {\r\n          assessmentTypes: assessmentTypes,\r\n          averageScores: {},\r\n          totalCounts: {}\r\n        };\r\n        \r\n        // Calculate average scores per assessment type\r\n        assessmentTypes.forEach(type => {\r\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\r\n          const totalCount = typeAssessments.length;\r\n          \r\n          // Get the count from the first matching assessment if available\r\n          const firstMatch = typeAssessments[0];\r\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\r\n          \r\n          if (totalCount > 0) {\r\n            // Calculate average score\r\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\r\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\r\n          } else {\r\n            assessmentData.averageScores[type] = 0;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Create a simple bar chart showing average scores\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: assessmentTypes,\r\n          datasets: [\r\n            {\r\n              label: 'Average Score (%)',\r\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\r\n              backgroundColor: [\r\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\r\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\r\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\r\n              ],\r\n              borderColor: [\r\n                'rgb(15, 140, 80)',\r\n                'rgb(45, 110, 220)',\r\n                'rgb(220, 160, 20)',\r\n              ],\r\n              borderWidth: 1,\r\n              borderRadius: 6,\r\n              barPercentage: 0.6\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.05)'\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Average Score (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              },\r\n              ticks: {\r\n                font: {\r\n                  size: 12\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                display: false\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Performance Trend Chart\r\n    const updatePerformanceTrendChart = (data) => {\r\n      if (!performanceTrendChart.value) return;\r\n      \r\n      const ctx = performanceTrendChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Check and normalize data\r\n      let performanceTrends = [];\r\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\r\n        performanceTrends = data.performanceTrends.slice(0, 10);  // Take last 10 assessments\r\n      }\r\n\r\n      // Sort by date (oldest first for chronological order)\r\n      performanceTrends.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n      // Format dates and handle missing data\r\n      const labels = performanceTrends.map(item => {\r\n        const date = new Date(item.date);\r\n        return `${date.getMonth() + 1}/${date.getDate()}`;\r\n      });\r\n      \r\n      const scoreData = performanceTrends.map(item => item.score);\r\n\r\n      new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Average Score (%)',\r\n              data: scoreData,\r\n              borderColor: 'rgb(59, 130, 246)',\r\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n              tension: 0.3,\r\n              fill: true,\r\n              pointBackgroundColor: 'rgb(59, 130, 246)',\r\n              pointBorderColor: '#fff',\r\n              pointBorderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 6\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.05)'\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Score (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                display: false\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n              align: 'end',\r\n              labels: {\r\n                boxWidth: 10,\r\n                usePointStyle: true,\r\n                pointStyle: 'circle'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  return `Score: ${context.parsed.y}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Section Performance Chart (Keep this chart from the original Dashboard)\r\n    const updateSectionChart = (data) => {\r\n      if (!sectionChart.value) return;\r\n      \r\n      const ctx = sectionChart.value.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      const existingChart = Chart.getChart(ctx);\r\n      if (existingChart) existingChart.destroy();\r\n\r\n      // Check if there is section data\r\n      if (!data.sections || !Array.isArray(data.sections) || data.sections.length === 0) {\r\n        // Draw empty chart with message\r\n        new Chart(ctx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: ['No Data'],\r\n            datasets: [{\r\n              data: [0],\r\n              backgroundColor: 'rgba(229, 231, 235, 0.5)',\r\n              borderColor: 'rgb(209, 213, 219)',\r\n              borderWidth: 1\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                max: 100\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              }\r\n            }\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Process section data\r\n      const labels = data.sections.map(section => section.name);\r\n      const scoreData = data.sections.map(section => section.averageScore);\r\n      const attendanceData = data.sections.map(section => section.attendanceRate);\r\n      \r\n      // Create multi-dataset bar chart\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Average Score',\r\n              data: scoreData,\r\n              backgroundColor: 'rgba(59, 130, 246, 0.6)',\r\n              borderColor: 'rgb(37, 99, 235)',\r\n              borderWidth: 1,\r\n              borderRadius: 4,\r\n              barPercentage: 0.6,\r\n              categoryPercentage: 0.7\r\n            },\r\n            {\r\n              label: 'Attendance Rate',\r\n              data: attendanceData,\r\n              backgroundColor: 'rgba(52, 211, 153, 0.6)',\r\n              borderColor: 'rgb(16, 185, 129)',\r\n              borderWidth: 1,\r\n              borderRadius: 4,\r\n              barPercentage: 0.6,\r\n              categoryPercentage: 0.7\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.05)'\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Percentage (%)',\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                }\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                display: false\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n              align: 'end',\r\n              labels: {\r\n                boxWidth: 12,\r\n                usePointStyle: true,\r\n                pointStyle: 'circle'\r\n              }\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.parsed.y}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // Handle year change and refresh dashboard\r\n    const handleYearChange = () => {\r\n      fetchDashboardData();\r\n    };\r\n\r\n    const refreshDashboard = () => {\r\n      fetchDashboardData();\r\n    };\r\n\r\n    const scrollToSection = (sectionId) => {\r\n      const section = document.getElementById(sectionId);\r\n      if (section) {\r\n        section.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    };\r\n\r\n    // Auto-refresh logic\r\n    const setupAutoRefresh = () => {\r\n      // Clear any existing interval\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value);\r\n      }\r\n      \r\n      // Set new interval (every 5 minutes)\r\n      autoRefreshInterval.value = setInterval(() => {\r\n        fetchDashboardData();\r\n      }, 5 * 60 * 1000);\r\n    };\r\n\r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      fetchDashboardData();\r\n      setupAutoRefresh();\r\n      \r\n      // Initialize with dummy data while loading\r\n      nextTick(() => {\r\n        initDummyData();\r\n      });\r\n    });\r\n\r\n    // Clean up on component unmount\r\n    onUnmounted(() => {\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value);\r\n      }\r\n    });\r\n\r\n    return {\r\n      performanceChart,\r\n      assessmentTypeChart,\r\n      performanceTrendChart,\r\n      sectionChart,\r\n      selectedYear,\r\n      isCITHead,\r\n      totalStudents,\r\n      totalTeachers,\r\n      averageAttendance,\r\n      averageScore,\r\n      activeSections,\r\n      hasAttendanceData,\r\n      hasScoreData,\r\n      hasPerformanceData,\r\n      hasAssessmentData,\r\n      hasSectionData,\r\n      dashboardContainer,\r\n      isLoading,\r\n      lastUpdate,\r\n      scrollToSection,\r\n      handleYearChange,\r\n      refreshDashboard\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 1.5rem;\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n.filter-section {\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.form-select {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.5rem 2.5rem 0.5rem 1rem;\r\n  font-size: 0.95rem;\r\n  color: #2d3748;\r\n  background-color: white;\r\n  transition: all 0.2s ease;\r\n  min-width: 200px;\r\n}\r\n\r\n.form-select:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n}\r\n\r\n.btn-refresh {\r\n  background: white;\r\n  border: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-refresh:hover {\r\n  background: #f7fafc;\r\n  color: #2d3748;\r\n  border-color: #cbd5e1;\r\n}\r\n\r\n/* Analytics Grid */\r\n.analytics-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.performance-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.charts-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Stat Cards */\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.25rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  background: #003366;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n  margin: 0;\r\n  line-height: 1.2;\r\n}\r\n\r\n.stat-label {\r\n  color: #718096;\r\n  font-size: 0.95rem;\r\n  margin: 0;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n/* Chart Cards */\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.chart-title {\r\n  color: #2d3748;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 300px;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #a0aec0;\r\n  font-size: 0.95rem;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  color: #a0aec0;\r\n  font-size: 0.875rem;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .analytics-grid,\r\n  .performance-grid,\r\n  .charts-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .stat-card {\r\n    padding: 1.25rem;\r\n  }\r\n\r\n  .stat-value {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
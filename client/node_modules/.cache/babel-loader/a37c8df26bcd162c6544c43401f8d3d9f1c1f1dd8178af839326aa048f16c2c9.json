{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown\"\n};\nconst _hoisted_4 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_6 = {\n  class: \"mb-3\"\n};\nconst _hoisted_7 = [\"value\"];\nconst _hoisted_8 = {\n  class: \"mb-3\"\n};\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = {\n  class: \"mb-3\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = [\"value\"];\nconst _hoisted_14 = {\n  class: \"mb-3\"\n};\nconst _hoisted_15 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_16 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_17 = [\"max\"];\nconst _hoisted_18 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_19 = [\"max\"];\nconst _hoisted_20 = [\"disabled\"];\nconst _hoisted_21 = {\n  key: 0\n};\nconst _hoisted_22 = {\n  key: 1\n};\nconst _hoisted_23 = {\n  class: \"row g-4\"\n};\nconst _hoisted_24 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_25 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_26 = {\n  class: \"card-info\"\n};\nconst _hoisted_27 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_28 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_29 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_30 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_31 = {\n  class: \"card-info\"\n};\nconst _hoisted_32 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_33 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_34 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_35 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_36 = {\n  class: \"card-info\"\n};\nconst _hoisted_37 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_38 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_39 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_40 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_41 = {\n  class: \"card-info\"\n};\nconst _hoisted_42 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_43 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_44 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_45 = {\n  class: \"row mb-4 mt-4\"\n};\nconst _hoisted_46 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_47 = {\n  class: \"chart-card\"\n};\nconst _hoisted_48 = {\n  class: \"card-body\"\n};\nconst _hoisted_49 = {\n  class: \"chart-container\"\n};\nconst _hoisted_50 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_51 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_52 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_53 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_54 = {\n  class: \"chart-card\"\n};\nconst _hoisted_55 = {\n  class: \"card-body\"\n};\nconst _hoisted_56 = {\n  class: \"chart-container\"\n};\nconst _hoisted_57 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_58 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_59 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_60 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_61 = {\n  class: \"chart-card\"\n};\nconst _hoisted_62 = {\n  class: \"card-body\"\n};\nconst _hoisted_63 = {\n  class: \"chart-container\"\n};\nconst _hoisted_64 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_65 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_66 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_67 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_68 = {\n  class: \"chart-card\"\n};\nconst _hoisted_69 = {\n  class: \"card-body\"\n};\nconst _hoisted_70 = {\n  class: \"chart-container\"\n};\nconst _hoisted_71 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_72 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_73 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_74 = {\n  class: \"card mb-4\"\n};\nconst _hoisted_75 = {\n  class: \"card-body\"\n};\nconst _hoisted_76 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_77 = {\n  class: \"table\"\n};\nconst _hoisted_78 = {\n  key: 0\n};\nconst _hoisted_79 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[20] || (_cache[20] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", _hoisted_4, [_cache[7] || (_cache[7] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[18] || (_cache[18] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Years\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_8, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[10] || (_cache[10] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_10);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_9), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[12] || (_cache[12] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_12), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_14, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_17), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_18, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_19), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: $setup.loading\n  }, [$setup.loading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_21, _cache[17] || (_cache[17] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Loading...\")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_22, \"Apply Filters\"))], 8 /* PROPS */, _hoisted_20)])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_23, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"div\", _hoisted_25, [_cache[23] || (_cache[23] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_26, [_cache[22] || (_cache[22] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, _toDisplayString($setup.totalStudents), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_28, _cache[21] || (_cache[21] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Sections Card \"), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_cache[26] || (_cache[26] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_31, [_cache[25] || (_cache[25] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, _toDisplayString($setup.totalSections), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_33, _cache[24] || (_cache[24] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Subjects Card \"), _createElementVNode(\"div\", _hoisted_34, [_createElementVNode(\"div\", _hoisted_35, [_cache[29] || (_cache[29] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-book\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_36, [_cache[28] || (_cache[28] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"My Subjects\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_37, _toDisplayString($setup.totalSubjects), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_38, _cache[27] || (_cache[27] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_39, [_createElementVNode(\"div\", _hoisted_40, [_cache[32] || (_cache[32] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_41, [_cache[31] || (_cache[31] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Class Average\", -1 /* HOISTED */)), !$setup.loading && $setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_42, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_43, _cache[30] || (_cache[30] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_44, \"No data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_45, [_createCommentVNode(\" Attendance Distribution Chart (previously Performance Distribution) \"), _createElementVNode(\"div\", _hoisted_46, [_createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"div\", _hoisted_48, [_cache[34] || (_cache[34] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[35] || (_cache[35] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_49, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_50, _cache[33] || (_cache[33] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_51, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_52, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_53, [_createElementVNode(\"div\", _hoisted_54, [_createElementVNode(\"div\", _hoisted_55, [_cache[37] || (_cache[37] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[38] || (_cache[38] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_56, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_57, _cache[36] || (_cache[36] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_58, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_59, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_60, [_createElementVNode(\"div\", _hoisted_61, [_createElementVNode(\"div\", _hoisted_62, [_cache[40] || (_cache[40] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[41] || (_cache[41] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Class average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_63, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_64, _cache[39] || (_cache[39] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_65, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_66, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Performance \"), _createElementVNode(\"div\", _hoisted_67, [_createElementVNode(\"div\", _hoisted_68, [_createElementVNode(\"div\", _hoisted_69, [_cache[43] || (_cache[43] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[44] || (_cache[44] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_70, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_71, _cache[42] || (_cache[42] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_72, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_73, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])])]), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_74, [_createElementVNode(\"div\", _hoisted_75, [_cache[48] || (_cache[48] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, \"Recent Activity\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_76, [_createElementVNode(\"table\", _hoisted_77, [_cache[47] || (_cache[47] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Activity\"), _createElementVNode(\"th\", null, \"Details\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [$setup.loading ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_78, _cache[45] || (_cache[45] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }), _createTextVNode(\"Loading activities... \")], -1 /* HOISTED */)]))) : !$setup.hasActivity ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_79, _cache[46] || (_cache[46] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, \"No recent activity\", -1 /* HOISTED */)]))) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 2\n  }, _renderList($setup.recentActivities, activity => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: activity.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(activity.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.details), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_createTextVNode","_toDisplayString","$setup","getFilterDisplay","_hoisted_5","_hoisted_6","_cache","$event","selectedYear","onChange","args","handleYearChange","value","_Fragment","_renderList","availableYears","year","_hoisted_7","_hoisted_8","selectedSection","disabled","sections","section","_hoisted_10","_hoisted_9","_hoisted_11","selectedSubject","subjects","subject","_hoisted_13","_hoisted_12","_hoisted_14","_hoisted_15","_hoisted_16","selectedStartDate","max","today","_hoisted_17","_hoisted_18","selectedEndDate","_hoisted_19","onClick","applyFilters","loading","_hoisted_21","_hoisted_22","_hoisted_20","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","totalStudents","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","totalSections","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","totalSubjects","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","hasPerformanceData","_hoisted_42","averageScore","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","hasAttendanceData","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","hasAssessmentData","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","colspan","hasActivity","_hoisted_79","recentActivities","activity","formatDate","date","details"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4 mt-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        } else {\n          console.warn('No class records found or unexpected response format');\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          averageScore.value = isNaN(scoreValue) ? 0 : scoreValue.toFixed(1);\n        } else {\n          averageScore.value = 0;\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (hasAttendanceData.value) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          if (response.data && !response.data.attendanceDistribution) {\n            try {\n              const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n                params: {\n                  teacherId,\n                  year: selectedYear.value,\n                  section: selectedSection.value,\n                  subject: selectedSubject.value,\n                  startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                  endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n                },\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              if (attendanceResponse.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = attendanceResponse.data;\n                response.data.attendanceDistribution = [\n                  attendanceStats.present || 0,\n                  attendanceStats.late || 0,\n                  attendanceStats.absent || 0\n                ];\n                data.value = response.data;\n                updatePerformanceChart(response.data);\n              }\n            } catch (err) {\n              console.error('Error fetching attendance data:', err);\n              updatePerformanceChart({\n                attendanceDistribution: [0, 0, 0]\n              });\n            }\n          } else {\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        // Update assessment data for the assessment type chart\n        // Extract assessment data from the response\n        const assessmentData = [];\n        \n        // Process assessment type data from the dashboard API response\n        if (response.data.assessmentTypes) {\n          Object.keys(response.data.assessmentTypes).forEach(type => {\n            const typeData = response.data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          console.log('Processed assessment data:', assessmentData);\n          updateAssessmentTypeChart({ assessmentData });\n        } else {\n          // Fallback to standard assessment types if no data provided\n          updateAssessmentTypeChart({\n            assessmentData: [\n              { type: 'Quiz', averageScore: 0, count: 0 },\n              { type: 'Activity', averageScore: 0, count: 0 },\n              { type: 'Performance Task', averageScore: 0, count: 0 }\n            ]\n          });\n        }\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          \n          // Get the count from the first matching assessment if available\n          const firstMatch = typeAssessments[0];\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n        \n        console.log('Processed assessment chart data:', assessmentData);\n      }\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ],\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initDummyData();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwD;;EAI5DA,KAAK,EAAC;AAAU;;EACXA,KAAK,EAAC,gCAAgC;EAACC,IAAI,EAAC,QAAQ;EAACC,EAAE,EAAC,gBAAgB;EAAC,gBAAc,EAAC,UAAU;EAAC,eAAa,EAAC;;;EAIpHF,KAAK,EAAC,+BAA+B;EAAC,iBAAe,EAAC;;;EAEpDA,KAAK,EAAC;AAAM;mBAb3B;;EAoBeA,KAAK,EAAC;AAAM;mBApB3B;oBAAA;;EA2BeA,KAAK,EAAC;AAAM;oBA3B3B;oBAAA;;EAkCeA,KAAK,EAAC;AAAM;;EAEVA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAa;oBArCtC;;EA8CmBA,KAAK,EAAC;AAAa;oBA9CtC;oBAAA;;EAAAG,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAmESH,KAAK,EAAC;AAAS;;EAEbA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAgB;;EAIpBA,KAAK,EAAC;AAAW;;EA1EhCG,GAAA;EA4EiBH,KAAK,EAAC;;;EA5EvBG,GAAA;EA6EiBH,KAAK,EAAC;;;EAMZA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAgB;;EAIpBA,KAAK,EAAC;AAAW;;EAxFhCG,GAAA;EA0FiBH,KAAK,EAAC;;;EA1FvBG,GAAA;EA2FiBH,KAAK,EAAC;;;EAMZA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAgB;;EAIpBA,KAAK,EAAC;AAAW;;EAtGhCG,GAAA;EAwGiBH,KAAK,EAAC;;;EAxGvBG,GAAA;EAyGiBH,KAAK,EAAC;;;EAMZA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAgB;;EAIpBA,KAAK,EAAC;AAAW;;EApHhCG,GAAA;EAsHiBH,KAAK,EAAC;;;EAtHvBG,GAAA;EAuHiBH,KAAK,EAAC;;;EAvHvBG,GAAA;EAwHiBH,KAAK,EAAC;;;EAOdA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAW;;EAMfA,KAAK,EAAC;AAAiB;;EAzIxCG,GAAA;EA0IkCH,KAAK,EAAC;;;EAIlBI,GAAG,EAAC;AAAkB;;EA9I5CD,GAAA;EA+IuDH,KAAK,EAAC;;;EAOlDA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAW;;EAMfA,KAAK,EAAC;AAAiB;;EA9JxCG,GAAA;EA+JkCH,KAAK,EAAC;;;EAIlBI,GAAG,EAAC;AAAqB;;EAnK/CD,GAAA;EAoKuDH,KAAK,EAAC;;;EAOlDA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAW;;EAMfA,KAAK,EAAC;AAAiB;;EAnLxCG,GAAA;EAoLkCH,KAAK,EAAC;;;EAIlBI,GAAG,EAAC;AAAuB;;EAxLjDD,GAAA;EAyLwDH,KAAK,EAAC;;;EAOnDA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAW;;EAMfA,KAAK,EAAC;AAAiB;;EAxMxCG,GAAA;EAyMkCH,KAAK,EAAC;;;EAIlBI,GAAG,EAAC;AAAgC;;EA7M1DD,GAAA;EA8MwDH,KAAK,EAAC;;;EAQrDA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAkB;;EACpBA,KAAK,EAAC;AAAO;;EA1N9BG,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEE,mBAAA,CAoPM,OApPNC,UAoPM,GAnPJC,mBAAA,CA8DM,OA9DNC,UA8DM,G,4BA7DJD,mBAAA,CAAiC;IAA7BP,KAAK,EAAC;EAAiB,6BAE3BS,mBAAA,8BAAiC,EACjCF,mBAAA,CAyDM,OAzDNG,UAyDM,GAxDJH,mBAAA,CAGS,UAHTI,UAGS,G,0BAFPJ,mBAAA,CAAkC;IAA/BP,KAAK,EAAC;EAAoB,6BARvCY,gBAAA,CAQ4C,GAClC,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,gBAAgB,mB,GAErBR,mBAAA,CAmDM,OAnDNS,UAmDM,G,4BAlDJT,mBAAA,CAA+C;IAA3CP,KAAK,EAAC;EAAiB,GAAC,gBAAc,sBAC1CO,mBAAA,CAMM,OANNU,UAMM,G,0BALJV,mBAAA,CAA+C;IAAxCP,KAAK,EAAC;EAAY,GAAC,eAAa,sB,gBACvCO,mBAAA,CAGS;IAHDP,KAAK,EAAC,kBAAkB;IAf5C,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAesDL,MAAA,CAAAM,YAAY,GAAAD,MAAA;IAAGE,QAAM,EAAAH,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAER,MAAA,CAAAS,gBAAA,IAAAT,MAAA,CAAAS,gBAAA,IAAAD,IAAA,CAAgB;gCAC/Ef,mBAAA,CAAmC;IAA3BiB,KAAK,EAAC;EAAE,GAAC,WAAS,uB,kBAC1BnB,mBAAA,CAAoFoB,SAAA,QAjBlGC,WAAA,CAiBqCZ,MAAA,CAAAa,cAAc,EAAtBC,IAAI;yBAAnBvB,mBAAA,CAAoF;MAA5CF,GAAG,EAAEyB,IAAI;MAAGJ,KAAK,EAAEI;wBAASA,IAAI,wBAjBtFC,UAAA;2FAesDf,MAAA,CAAAM,YAAY,E,KAKxDb,mBAAA,CAMM,OANNuB,UAMM,G,4BALJvB,mBAAA,CAAyC;IAAlCP,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCO,mBAAA,CAGS;IAHDP,KAAK,EAAC,kBAAkB;IAtB5C,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAsBsDL,MAAA,CAAAiB,eAAe,GAAAZ,MAAA;IAAGa,QAAQ,GAAGlB,MAAA,CAAAM;kCACrEb,mBAAA,CAAsC;IAA9BiB,KAAK,EAAC;EAAE,GAAC,cAAY,uB,kBAC7BnB,mBAAA,CAA0FoB,SAAA,QAxBxGC,WAAA,CAwBwCZ,MAAA,CAAAmB,QAAQ,EAAnBC,OAAO;yBAAtB7B,mBAAA,CAA0F;MAArDF,GAAG,EAAE+B,OAAO;MAAGV,KAAK,EAAEU;wBAAYA,OAAO,wBAxB5FC,WAAA;kDAAAC,UAAA,I,gBAsBsDtB,MAAA,CAAAiB,eAAe,E,KAK3DxB,mBAAA,CAMM,OANN8B,WAMM,G,4BALJ9B,mBAAA,CAAyC;IAAlCP,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCO,mBAAA,CAGS;IAHDP,KAAK,EAAC,kBAAkB;IA7B5C,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA6BsDL,MAAA,CAAAwB,eAAe,GAAAnB,MAAA;IAAGa,QAAQ,GAAGlB,MAAA,CAAAM;kCACrEb,mBAAA,CAAsC;IAA9BiB,KAAK,EAAC;EAAE,GAAC,cAAY,uB,kBAC7BnB,mBAAA,CAA0FoB,SAAA,QA/BxGC,WAAA,CA+BwCZ,MAAA,CAAAyB,QAAQ,EAAnBC,OAAO;yBAAtBnC,mBAAA,CAA0F;MAArDF,GAAG,EAAEqC,OAAO;MAAGhB,KAAK,EAAEgB;wBAAYA,OAAO,wBA/B5FC,WAAA;kDAAAC,WAAA,I,gBA6BsD5B,MAAA,CAAAwB,eAAe,E,KAK3D/B,mBAAA,CAsBM,OAtBNoC,WAsBM,G,4BArBJpC,mBAAA,CAA4C;IAArCP,KAAK,EAAC;EAAY,GAAC,YAAU,sBACpCO,mBAAA,CAmBM,OAnBNqC,WAmBM,GAlBJrC,mBAAA,CAQM,OARNsC,WAQM,G,4BAPJtC,mBAAA,CAA4C;IAArCP,KAAK,EAAC;EAAkB,GAAC,MAAI,sB,gBACpCO,mBAAA,CAKC;IAJCN,IAAI,EAAC,MAAM;IACXD,KAAK,EAAC,8BAA8B;IAzCtD,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA0C2BL,MAAA,CAAAgC,iBAAiB,GAAA3B,MAAA;IACzB4B,GAAG,EAAEjC,MAAA,CAAAkC;0BA3CxBC,WAAA,I,cA0C2BnC,MAAA,CAAAgC,iBAAiB,E,KAI9BvC,mBAAA,CAQM,OARN2C,WAQM,G,4BAPJ3C,mBAAA,CAA0C;IAAnCP,KAAK,EAAC;EAAkB,GAAC,IAAE,sB,gBAClCO,mBAAA,CAKC;IAJCN,IAAI,EAAC,MAAM;IACXD,KAAK,EAAC,8BAA8B;IAlDtD,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAmD2BL,MAAA,CAAAqC,eAAe,GAAAhC,MAAA;IACvB4B,GAAG,EAAEjC,MAAA,CAAAkC;0BApDxBI,WAAA,I,cAmD2BtC,MAAA,CAAAqC,eAAe,E,qCAMhC5C,mBAAA,CAAoC;IAA/BP,KAAK,EAAC;EAAkB,6BAC7BO,mBAAA,CAGS;IAHDP,KAAK,EAAC,uBAAuB;IAAEqD,OAAK,EAAAnC,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAER,MAAA,CAAAwC,YAAA,IAAAxC,MAAA,CAAAwC,YAAA,IAAAhC,IAAA,CAAY;IAAGU,QAAQ,EAAElB,MAAA,CAAAyC;MACzDzC,MAAA,CAAAyC,OAAO,I,cAAnBlD,mBAAA,CAAiF,QA3D7FmD,WAAA,EAAAtC,MAAA,SAAAA,MAAA,QA2DiCX,mBAAA,CAA2C;IAAxCP,KAAK,EAAC;EAA6B,4BA3DvEY,gBAAA,CA2D4E,YAAU,E,qBAC1EP,mBAAA,CAAiC,QA5D7CoD,WAAA,EA4DyB,eAAa,G,iBA5DtCC,WAAA,E,OAkEIjD,mBAAA,qBAAwB,EACxBF,mBAAA,CAyDM,OAzDNoD,WAyDM,GAxDJlD,mBAAA,yBAA4B,EAC5BF,mBAAA,CAWM,OAXNqD,WAWM,GAVJrD,mBAAA,CASM,OATNsD,WASM,G,4BARJtD,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACzBO,mBAAA,CAAoC;IAAjCP,KAAK,EAAC;EAAsB,G,sBAEjCO,mBAAA,CAIM,OAJNuD,WAIM,G,4BAHJvD,mBAAA,CAA0C;IAAtCP,KAAK,EAAC;EAAY,GAAC,gBAAc,sB,CACNc,MAAA,CAAAyC,OAAO,I,cAAtClD,mBAAA,CAAiE,OAAjE0D,WAAiE,EAAAlD,gBAAA,CAAtBC,MAAA,CAAAkD,aAAa,qB,cACxD3D,mBAAA,CAAmF,OAAnF4D,WAAmF,EAAA/C,MAAA,SAAAA,MAAA,QAA5CX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,2B,WAK9ES,mBAAA,yBAA4B,EAC5BF,mBAAA,CAWM,OAXN2D,WAWM,GAVJ3D,mBAAA,CASM,OATN4D,WASM,G,4BARJ5D,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACzBO,mBAAA,CAAiC;IAA9BP,KAAK,EAAC;EAAmB,G,sBAE9BO,mBAAA,CAIM,OAJN6D,WAIM,G,4BAHJ7D,mBAAA,CAA2C;IAAvCP,KAAK,EAAC;EAAY,GAAC,iBAAe,sB,CACPc,MAAA,CAAAyC,OAAO,I,cAAtClD,mBAAA,CAAiE,OAAjEgE,WAAiE,EAAAxD,gBAAA,CAAtBC,MAAA,CAAAwD,aAAa,qB,cACxDjE,mBAAA,CAAmF,OAAnFkE,WAAmF,EAAArD,MAAA,SAAAA,MAAA,QAA5CX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,2B,WAK9ES,mBAAA,yBAA4B,EAC5BF,mBAAA,CAWM,OAXNiE,WAWM,GAVJjE,mBAAA,CASM,OATNkE,WASM,G,4BARJlE,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACzBO,mBAAA,CAA2B;IAAxBP,KAAK,EAAC;EAAa,G,sBAExBO,mBAAA,CAIM,OAJNmE,WAIM,G,4BAHJnE,mBAAA,CAAuC;IAAnCP,KAAK,EAAC;EAAY,GAAC,aAAW,sB,CACHc,MAAA,CAAAyC,OAAO,I,cAAtClD,mBAAA,CAAiE,OAAjEsE,WAAiE,EAAA9D,gBAAA,CAAtBC,MAAA,CAAA8D,aAAa,qB,cACxDvE,mBAAA,CAAmF,OAAnFwE,WAAmF,EAAA3D,MAAA,SAAAA,MAAA,QAA5CX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,2B,WAK9ES,mBAAA,wBAA2B,EAC3BF,mBAAA,CAYM,OAZNuE,WAYM,GAXJvE,mBAAA,CAUM,OAVNwE,WAUM,G,4BATJxE,mBAAA,CAEM;IAFDP,KAAK,EAAC;EAAgB,IACzBO,mBAAA,CAAiC;IAA9BP,KAAK,EAAC;EAAmB,G,sBAE9BO,mBAAA,CAKM,OALNyE,WAKM,G,4BAJJzE,mBAAA,CAAyC;IAArCP,KAAK,EAAC;EAAY,GAAC,eAAa,sB,CACLc,MAAA,CAAAyC,OAAO,IAAIzC,MAAA,CAAAmE,kBAAkB,I,cAA5D5E,mBAAA,CAAuF,OAAvF6E,WAAuF,EAAArE,gBAAA,CAAtBC,MAAA,CAAAqE,YAAY,IAAG,GAAC,mBACtCrE,MAAA,CAAAyC,OAAO,I,cAAlDlD,mBAAA,CAAgG,OAAhG+E,WAAgG,EAAAlE,MAAA,SAAAA,MAAA,QAA5CX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,2B,qBACrFK,mBAAA,CAAmD,OAAnDgF,WAAmD,EAAvB,mBAAiB,G,SAMrD5E,mBAAA,gBAAmB,EACnBF,mBAAA,CAoFM,OApFN+E,WAoFM,GAnFJ7E,mBAAA,yEAA4E,EAC5EF,mBAAA,CAkBM,OAlBNgF,WAkBM,GAjBJhF,mBAAA,CAgBM,OAhBNiF,WAgBM,GAfJjF,mBAAA,CAcM,OAdNkF,WAcM,G,4BAbJlF,mBAAA,CAGK;IAHDP,KAAK,EAAC;EAAY,IACpBO,mBAAA,CAA0C;IAAvCP,KAAK,EAAC;EAA4B,IArInDY,gBAAA,CAqIwD,2BAE5C,E,kDACAL,mBAAA,CAAyE;IAAtEP,KAAK,EAAC;EAAmB,GAAC,0CAAwC,sBACrEO,mBAAA,CAOM,OAPNmF,WAOM,GANO5E,MAAA,CAAAyC,OAAO,I,cAAlBlD,mBAAA,CAGM,OAHNsF,WAGM,EAAAzE,MAAA,SAAAA,MAAA,QAFJX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,4BACjCO,mBAAA,CAA4B,WAAzB,uBAAqB,oB,MA5IxCE,mBAAA,gBA8IcF,mBAAA,CAAwC,UAAxCqF,WAAwC,+B,CAC9B9E,MAAA,CAAA+E,iBAAiB,KAAK/E,MAAA,CAAAyC,OAAO,I,cAAvClD,mBAAA,CAAiG,KAAjGyF,WAAiG,EAAhC,8BAA4B,KA/I3GrF,mBAAA,e,SAqJMA,mBAAA,kCAAqC,EACrCF,mBAAA,CAkBM,OAlBNwF,WAkBM,GAjBJxF,mBAAA,CAgBM,OAhBNyF,WAgBM,GAfJzF,mBAAA,CAcM,OAdN0F,WAcM,G,4BAbJ1F,mBAAA,CAGK;IAHDP,KAAK,EAAC;EAAY,IACpBO,mBAAA,CAAiC;IAA9BP,KAAK,EAAC;EAAmB,IA1J1CY,gBAAA,CA0J+C,mCAEnC,E,kDACAL,mBAAA,CAAkE;IAA/DP,KAAK,EAAC;EAAmB,GAAC,mCAAiC,sBAC9DO,mBAAA,CAOM,OAPN2F,WAOM,GANOpF,MAAA,CAAAyC,OAAO,I,cAAlBlD,mBAAA,CAGM,OAHN8F,WAGM,EAAAjF,MAAA,SAAAA,MAAA,QAFJX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,4BACjCO,mBAAA,CAA4B,WAAzB,uBAAqB,oB,MAjKxCE,mBAAA,gBAmKcF,mBAAA,CAA2C,UAA3C6F,WAA2C,+B,CACjCtF,MAAA,CAAAuF,iBAAiB,KAAKvF,MAAA,CAAAyC,OAAO,I,cAAvClD,mBAAA,CAAiG,KAAjGiG,WAAiG,EAAhC,8BAA4B,KApK3G7F,mBAAA,e,SA0KMA,mBAAA,6BAAgC,EAChCF,mBAAA,CAkBM,OAlBNgG,WAkBM,GAjBJhG,mBAAA,CAgBM,OAhBNiG,WAgBM,GAfJjG,mBAAA,CAcM,OAdNkG,WAcM,G,4BAbJlG,mBAAA,CAGK;IAHDP,KAAK,EAAC;EAAY,IACpBO,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,IA/K/CY,gBAAA,CA+KoD,gCAExC,E,kDACAL,mBAAA,CAA+E;IAA5EP,KAAK,EAAC;EAAmB,GAAC,gDAA8C,sBAC3EO,mBAAA,CAOM,OAPNmG,WAOM,GANO5F,MAAA,CAAAyC,OAAO,I,cAAlBlD,mBAAA,CAGM,OAHNsG,WAGM,EAAAzF,MAAA,SAAAA,MAAA,QAFJX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,4BACjCO,mBAAA,CAA4B,WAAzB,uBAAqB,oB,MAtLxCE,mBAAA,gBAwLcF,mBAAA,CAA6C,UAA7CqG,WAA6C,+B,CACnC9F,MAAA,CAAAmE,kBAAkB,KAAKnE,MAAA,CAAAyC,OAAO,I,cAAxClD,mBAAA,CAAmG,KAAnGwG,WAAmG,EAAjC,+BAA6B,KAzL7GpG,mBAAA,e,SA+LMA,mBAAA,iCAAoC,EACpCF,mBAAA,CAkBM,OAlBNuG,WAkBM,GAjBJvG,mBAAA,CAgBM,OAhBNwG,WAgBM,GAfJxG,mBAAA,CAcM,OAdNyG,WAcM,G,4BAbJzG,mBAAA,CAGK;IAHDP,KAAK,EAAC;EAAY,IACpBO,mBAAA,CAA0C;IAAvCP,KAAK,EAAC;EAA4B,IApMnDY,gBAAA,CAoMwD,kCAE5C,E,kDACAL,mBAAA,CAAkG;IAA/FP,KAAK,EAAC;EAAmB,GAAC,mEAAiE,sBAC9FO,mBAAA,CAOM,OAPN0G,WAOM,GANOnG,MAAA,CAAAyC,OAAO,I,cAAlBlD,mBAAA,CAGM,OAHN6G,WAGM,EAAAhG,MAAA,SAAAA,MAAA,QAFJX,mBAAA,CAAsC;IAAnCP,KAAK,EAAC;EAAwB,4BACjCO,mBAAA,CAA4B,WAAzB,uBAAqB,oB,MA3MxCE,mBAAA,gBA6McF,mBAAA,CAAsD,UAAtD4G,WAAsD,+B,CAC5CrG,MAAA,CAAAmE,kBAAkB,KAAKnE,MAAA,CAAAyC,OAAO,I,cAAxClD,mBAAA,CAAmG,KAAnG+G,WAAmG,EAAjC,+BAA6B,KA9M7G3G,mBAAA,e,WAqNIA,mBAAA,qBAAwB,EACxBF,mBAAA,CA8BM,OA9BN8G,WA8BM,GA7BJ9G,mBAAA,CA4BM,OA5BN+G,WA4BM,G,4BA3BJ/G,mBAAA,CAA2C;IAAvCP,KAAK,EAAC;EAAY,GAAC,iBAAe,sBACtCO,mBAAA,CAyBM,OAzBNgH,WAyBM,GAxBJhH,mBAAA,CAuBQ,SAvBRiH,WAuBQ,G,4BAtBNjH,mBAAA,CAMQ,gBALNA,mBAAA,CAIK,aAHHA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAgB,YAAZ,SAAO,E,wBAGfA,mBAAA,CAcQ,gBAbIO,MAAA,CAAAyC,OAAO,I,cAAjBlD,mBAAA,CAIK,MAvOnBoH,WAAA,EAAAvG,MAAA,SAAAA,MAAA,QAoOgBX,mBAAA,CAEK;IAFDmH,OAAO,EAAC,GAAG;IAAC1H,KAAK,EAAC;MACpBO,mBAAA,CAA2C;IAAxCP,KAAK,EAAC;EAA6B,IArOxDY,gBAAA,CAqO6D,wBAC7C,E,2BAEcE,MAAA,CAAA6G,WAAW,I,cAA3BtH,mBAAA,CAEK,MA1OnBuH,WAAA,EAAA1G,MAAA,SAAAA,MAAA,QAyOgBX,mBAAA,CAA2D;IAAvDmH,OAAO,EAAC,GAAG;IAAC1H,KAAK,EAAC;KAAc,oBAAkB,oB,yBAExDK,mBAAA,CAIKoB,SAAA;IA/OnBtB,GAAA;EAAA,GAAAuB,WAAA,CA2O4CZ,MAAA,CAAA+G,gBAAgB,EAA5BC,QAAQ;yBAA1BzH,mBAAA,CAIK;MAJ4CF,GAAG,EAAE2H,QAAQ,CAAC5H;QAC7DK,mBAAA,CAAwC,YAAAM,gBAAA,CAAjCC,MAAA,CAAAiH,UAAU,CAACD,QAAQ,CAACE,IAAI,mBAC/BzH,mBAAA,CAA4B,YAAAM,gBAAA,CAArBiH,QAAQ,CAAC7H,IAAI,kBACpBM,mBAAA,CAA+B,YAAAM,gBAAA,CAAxBiH,QAAQ,CAACG,OAAO,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
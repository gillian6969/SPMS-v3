{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport { Bar } from 'vue-chartjs';\n\n// Create axios instance with correct base URL\n\nexport default {\n  __name: 'StudentSurveyStat',\n  props: {\n    _id: String,\n    surveyForm: Array\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const api = axios.create({\n      baseURL: 'http://localhost:8081/api',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const props = __props;\n    const mySurvey = ref([]);\n    const data = ref({});\n    ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n    onUnmounted(() => {\n      mySurvey.value = [];\n      data.value = {};\n    });\n    onMounted(async () => {\n      const surveyResponse = await api.get(`/survey/stats`, {\n        params: {\n          _id: props._id\n        }\n      });\n      mySurvey.value = surveyResponse.data;\n      data.value = {\n        labels: mySurvey.value?.map(s => s.type + ' Problem') || 'Not available',\n        datasets: [{\n          label: 'Average Score Survey',\n          backgroundColor: '#f87979',\n          data: mySurvey.value?.map(s => s.average) || []\n        }]\n      };\n    });\n    const options = ref({\n      //   responsive: true ,\n      //   maintainAspectRatio: false\n    });\n\n    // Render the radar chart\n    const renderSurveyChart = () => {\n      if (!surveyChart.value) return;\n      const ctx = surveyChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Extract data from survey stats\n      let labels = [];\n      let data = [];\n      if (surveyData.value?.surveyStats && Array.isArray(surveyData.value.surveyStats)) {\n        surveyData.value.surveyStats.forEach(stat => {\n          if (stat.type && !isNaN(stat.average)) {\n            labels.push(stat.type);\n            data.push(stat.average);\n          }\n        });\n      }\n\n      // If no valid data, use sample data\n      if (labels.length === 0) {\n        labels = ['Academic', 'Financial', 'Personal', 'Health', 'Social'];\n        data = [7.2, 5.8, 3.5, 2.1, 4.6];\n      }\n\n      // Calculate colors based on severity\n      const backgroundColors = data.map(value => {\n        if (value >= 7) return 'rgba(220, 53, 69, 0.7)'; // High (red)\n        if (value >= 5) return 'rgba(255, 193, 7, 0.7)'; // Medium (yellow)\n        if (value >= 3) return 'rgba(13, 110, 253, 0.7)'; // Low (blue)\n        return 'rgba(25, 135, 84, 0.7)'; // Minimal (green)\n      });\n\n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Problem Severity',\n            data: data,\n            backgroundColor: backgroundColors,\n            borderColor: backgroundColors.map(color => color.replace('0.7', '1')),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          indexAxis: 'y',\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 10,\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              callbacks: {\n                title: context => {\n                  return context[0].label + ' Problems';\n                },\n                label: context => {\n                  const value = context.raw;\n                  let severity = 'Minimal';\n                  if (value >= 7) severity = 'High';else if (value >= 5) severity = 'Medium';else if (value >= 3) severity = 'Low';\n                  return `Severity: ${value.toFixed(1)} (${severity})`;\n                }\n              }\n            }\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              max: 10,\n              title: {\n                display: true,\n                text: 'Severity Score (0-10)'\n              }\n            }\n          }\n        }\n      });\n    };\n    const __returned__ = {\n      api,\n      props,\n      mySurvey,\n      data,\n      options,\n      renderSurveyChart,\n      get axios() {\n        return axios;\n      },\n      get ChartJS() {\n        return ChartJS;\n      },\n      get Title() {\n        return Title;\n      },\n      get Tooltip() {\n        return Tooltip;\n      },\n      get Legend() {\n        return Legend;\n      },\n      get BarElement() {\n        return BarElement;\n      },\n      get CategoryScale() {\n        return CategoryScale;\n      },\n      get LinearScale() {\n        return LinearScale;\n      },\n      onMounted,\n      onUnmounted,\n      ref,\n      get Bar() {\n        return Bar;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["axios","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","onMounted","onUnmounted","ref","Bar","api","create","baseURL","headers","props","__props","mySurvey","data","register","value","surveyResponse","get","params","_id","labels","map","s","type","datasets","label","backgroundColor","average","options","renderSurveyChart","surveyChart","ctx","getContext","existingChart","getChart","destroy","surveyData","surveyStats","Array","isArray","forEach","stat","isNaN","push","length","backgroundColors","borderColor","color","replace","borderWidth","responsive","maintainAspectRatio","indexAxis","plugins","legend","display","tooltip","padding","titleFont","size","weight","bodyFont","callbacks","title","context","raw","severity","toFixed","scales","x","beginAtZero","max","text"],"sources":["D:/au_dev/client/src/components/StudentSurveyStat.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"mySurvey.length\">\r\n        <Bar :data=\"data\" :options=\"options\" />\r\n    </div>\r\n    <div  v-else>\r\n        <h4>No data available!</h4>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport {\r\n    Chart as ChartJS,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarElement,\r\n    CategoryScale,\r\n    LinearScale\r\n} from 'chart.js'\r\nimport { onMounted, onUnmounted, ref } from 'vue'\r\nimport { Bar } from 'vue-chartjs'\r\n\r\n// Create axios instance with correct base URL\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8081/api',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nconst props = defineProps({\r\n    _id: String,\r\n    surveyForm : Array\r\n})\r\nconst mySurvey = ref([]);\r\nconst data = ref({})\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)\r\nonUnmounted(() => {\r\n    mySurvey.value = [];\r\n    data.value = {};\r\n})\r\nonMounted(async () => {\r\n    const surveyResponse = await api.get(`/survey/stats`,{\r\n        params: {\r\n            _id : props._id\r\n        }\r\n    })\r\n    \r\n    mySurvey.value = surveyResponse.data;\r\n    data.value = {\r\n        labels: mySurvey.value?.map(s => s.type + ' Problem') || 'Not available',\r\n        datasets: [\r\n            {\r\n                label: 'Average Score Survey',\r\n                backgroundColor: '#f87979',\r\n                data: mySurvey.value?.map(s => s.average) || []\r\n            },\r\n        ]\r\n    }\r\n})\r\n\r\n\r\nconst options = ref({\r\n    //   responsive: true ,\r\n    //   maintainAspectRatio: false\r\n})\r\n\r\n// Render the radar chart\r\nconst renderSurveyChart = () => {\r\n  if (!surveyChart.value) return;\r\n  \r\n  const ctx = surveyChart.value.getContext('2d');\r\n  if (!ctx) return;\r\n  \r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) existingChart.destroy();\r\n  \r\n  // Extract data from survey stats\r\n  let labels = [];\r\n  let data = [];\r\n  \r\n  if (surveyData.value?.surveyStats && Array.isArray(surveyData.value.surveyStats)) {\r\n    surveyData.value.surveyStats.forEach(stat => {\r\n      if (stat.type && !isNaN(stat.average)) {\r\n        labels.push(stat.type);\r\n        data.push(stat.average);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // If no valid data, use sample data\r\n  if (labels.length === 0) {\r\n    labels = ['Academic', 'Financial', 'Personal', 'Health', 'Social'];\r\n    data = [7.2, 5.8, 3.5, 2.1, 4.6];\r\n  }\r\n  \r\n  // Calculate colors based on severity\r\n  const backgroundColors = data.map(value => {\r\n    if (value >= 7) return 'rgba(220, 53, 69, 0.7)';  // High (red)\r\n    if (value >= 5) return 'rgba(255, 193, 7, 0.7)';  // Medium (yellow)\r\n    if (value >= 3) return 'rgba(13, 110, 253, 0.7)'; // Low (blue)\r\n    return 'rgba(25, 135, 84, 0.7)';                 // Minimal (green)\r\n  });\r\n  \r\n  // Create chart\r\n  new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: labels,\r\n      datasets: [{\r\n        label: 'Problem Severity',\r\n        data: data,\r\n        backgroundColor: backgroundColors,\r\n        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),\r\n        borderWidth: 1\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      indexAxis: 'y',\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          padding: 10,\r\n          titleFont: {\r\n            size: 14,\r\n            weight: 'bold'\r\n          },\r\n          bodyFont: {\r\n            size: 13\r\n          },\r\n          callbacks: {\r\n            title: (context) => {\r\n              return context[0].label + ' Problems';\r\n            },\r\n            label: (context) => {\r\n              const value = context.raw;\r\n              let severity = 'Minimal';\r\n              if (value >= 7) severity = 'High';\r\n              else if (value >= 5) severity = 'Medium';\r\n              else if (value >= 3) severity = 'Low';\r\n              \r\n              return `Severity: ${value.toFixed(1)} (${severity})`;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          beginAtZero: true,\r\n          max: 10,\r\n          title: {\r\n            display: true,\r\n            text: 'Severity Score (0-10)'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
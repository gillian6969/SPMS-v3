{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown\"\n};\nconst _hoisted_4 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_6 = {\n  class: \"mb-3\"\n};\nconst _hoisted_7 = {\n  class: \"mb-3\"\n};\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_15 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_16 = [\"max\"];\nconst _hoisted_17 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_18 = [\"max\"];\nconst _hoisted_19 = {\n  class: \"row g-4\"\n};\nconst _hoisted_20 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_21 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_22 = {\n  class: \"card-info\"\n};\nconst _hoisted_23 = {\n  class: \"stat-value\"\n};\nconst _hoisted_24 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_25 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_26 = {\n  class: \"card-info\"\n};\nconst _hoisted_27 = {\n  class: \"stat-value\"\n};\nconst _hoisted_28 = {\n  class: \"row mt-4\"\n};\nconst _hoisted_29 = {\n  class: \"col-12\"\n};\nconst _hoisted_30 = {\n  class: \"chart-card\"\n};\nconst _hoisted_31 = {\n  class: \"card-body\"\n};\nconst _hoisted_32 = {\n  key: 0,\n  class: \"text-center py-4\"\n};\nconst _hoisted_33 = {\n  key: 1,\n  class: \"text-center py-4\"\n};\nconst _hoisted_34 = {\n  key: 2\n};\nconst _hoisted_35 = {\n  class: \"survey-stats\"\n};\nconst _hoisted_36 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_37 = {\n  class: \"table table-hover stats-table\"\n};\nconst _hoisted_38 = {\n  class: \"problem-type\"\n};\nconst _hoisted_39 = {\n  class: \"d-flex align-items-center\"\n};\nconst _hoisted_40 = {\n  class: \"progress flex-grow-1 me-2\",\n  style: {\n    \"height\": \"8px\"\n  }\n};\nconst _hoisted_41 = {\n  class: \"recommendation\"\n};\nconst _hoisted_42 = {\n  class: \"survey-visualization row g-4 mt-4\"\n};\nconst _hoisted_43 = {\n  class: \"col-12\"\n};\nconst _hoisted_44 = {\n  class: \"chart-container\"\n};\nconst _hoisted_45 = {\n  ref: \"surveyStatsChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[17] || (_cache[17] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", _hoisted_4, [_cache[5] || (_cache[5] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[15] || (_cache[15] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: $setup.handleYearChange\n  }, _cache[6] || (_cache[6] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-487c7cc4>All Years</option><option value=\\\"1st\\\" data-v-487c7cc4>1st Year</option><option value=\\\"2nd\\\" data-v-487c7cc4>2nd Year</option><option value=\\\"3rd\\\" data-v-487c7cc4>3rd Year</option><option value=\\\"4th\\\" data-v-487c7cc4>4th Year</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_7, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_8), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[10] || (_cache[10] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_11), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_16), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_17, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_18), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[16] || (_cache[16] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: $setup.applyFilters\n  }, \"Apply Filters\")])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_19, [_createCommentVNode(\" Failing Students Card \"), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-exclamation-triangle\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_22, [_cache[18] || (_cache[18] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Failing Students\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_23, _toDisplayString($setup.failingStudents), 1 /* TEXT */)])])]), _createCommentVNode(\" Completed Surveys Card \"), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"div\", _hoisted_25, [_cache[21] || (_cache[21] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-poll\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_26, [_cache[20] || (_cache[20] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Completed Surveys\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_27, _toDisplayString($setup.completedSurveys), 1 /* TEXT */)])])])]), _createCommentVNode(\" Survey Statistics \"), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[27] || (_cache[27] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-pie me-2\"\n  }), _createTextVNode(\" Survey Statistics \")], -1 /* HOISTED */)), $setup.loadingSurveyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, _cache[22] || (_cache[22] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading survey data...\")], -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"mt-2\"\n  }, \"Loading survey statistics...\", -1 /* HOISTED */)]))) : !$setup.hasSurveyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, _cache[23] || (_cache[23] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-bar fa-3x text-muted mb-3\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"h5\", null, \"No Survey Data Available\", -1 /* HOISTED */), _createElementVNode(\"p\", {\n    class: \"text-muted\"\n  }, \"No survey responses have been submitted yet.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_34, [_createElementVNode(\"div\", _hoisted_35, [_createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"table\", _hoisted_37, [_cache[24] || (_cache[24] = _createElementVNode(\"thead\", {\n    class: \"table-light\"\n  }, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Problem Type\"), _createElementVNode(\"th\", null, \"Average Score\"), _createElementVNode(\"th\", null, \"Severity\"), _createElementVNode(\"th\", null, \"Recommendation\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.averageSurveyStats, (stat, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"span\", _hoisted_38, _toDisplayString(stat.type), 1 /* TEXT */)]), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_39, [_createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"div\", {\n      class: _normalizeClass([\"progress-bar\", $setup.getSeverityClass(stat.average)]),\n      style: _normalizeStyle(`width: ${Math.min(stat.average * 10, 100)}%`)\n    }, null, 6 /* CLASS, STYLE */)]), _createElementVNode(\"span\", null, _toDisplayString(stat.average.toFixed(2)), 1 /* TEXT */)])]), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      class: _normalizeClass([\"badge\", $setup.getSeverityBadgeClass(stat.average)])\n    }, _toDisplayString($setup.getSeverityLabel(stat.average)), 3 /* TEXT, CLASS */)]), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", _hoisted_41, _toDisplayString($setup.getRecommendation(stat.average)), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _cache[25] || (_cache[25] = _createElementVNode(\"div\", {\n    class: \"text-muted survey-note mt-3\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-info-circle me-1\"\n  }), _createElementVNode(\"small\", null, \"Higher scores indicate more significant student concerns in that problem area.\")], -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"div\", _hoisted_43, [_createElementVNode(\"div\", _hoisted_44, [_cache[26] || (_cache[26] = _createElementVNode(\"h6\", {\n    class: \"chart-title\"\n  }, \"Average Problem Severity\", -1 /* HOISTED */)), _createElementVNode(\"canvas\", _hoisted_45, null, 512 /* NEED_PATCH */)])])])]))])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","style","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_createTextVNode","_toDisplayString","$setup","getFilterDisplay","_hoisted_5","_hoisted_6","_cache","$event","selectedYear","onChange","handleYearChange","_createStaticVNode","_hoisted_7","selectedSection","disabled","value","_Fragment","_renderList","sections","section","_hoisted_9","_hoisted_8","_hoisted_10","selectedSubject","subjects","subject","_hoisted_12","_hoisted_11","_hoisted_13","_hoisted_14","_hoisted_15","selectedStartDate","max","today","_hoisted_16","_hoisted_17","selectedEndDate","_hoisted_18","onClick","applyFilters","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","failingStudents","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","completedSurveys","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","loadingSurveyData","_hoisted_32","role","hasSurveyData","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","averageSurveyStats","stat","index","_hoisted_38","_hoisted_39","_hoisted_40","_normalizeClass","getSeverityClass","average","_normalizeStyle","Math","min","toFixed","getSeverityBadgeClass","getSeverityLabel","_hoisted_41","getRecommendation","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45"],"sources":["D:\\au_dev\\client\\src\\views\\SSPDashboard.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport AllSurveyStat from '../components/AllSurveyStat.vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst store = useStore()\nconst performanceChart = ref(null)\nconst attendanceChart = ref(null)\nconst assessmentTypeChart = ref(null)\nconst performanceTrendChart = ref(null)\nconst quizzesChart = ref(null)\nconst assessmentTypePerformanceChart = ref(null)\nconst problemByYearChart = ref(null)\nconst severityDistributionChart = ref(null)\nconst surveyStatsChart = ref(null)\n\n// Data refs\nconst totalStudents = ref(0)\nconst totalSections = ref(0)\nconst totalSubjects = ref(0)\nconst failingStudents = ref(0)\nconst completedSurveys = ref(0)\nconst averageScore = ref(0)\nconst assessmentCompletion = ref(0)\nconst recentActivities = ref([])\nconst sections = ref([])\nconst subjects = ref([])\nconst quizzesGrades = ref([]);\nconst surveyData = ref([]);\n\n// Filter refs\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\nconst selectedStartDate = ref('')\nconst selectedEndDate = ref('')\nconst today = computed(() => moment().format('YYYY-MM-DD'))\n\n// Loading states\nconst loadingSurveyData = ref(false)\n\n// Get teacher ID from store\nconst getTeacherId = () => {\n  const user = store.state.auth.user\n  if (!user || !user._id) {\n    console.error('No teacher ID found in store')\n    return null\n  }\n  return user._id\n}\n\n// Computed properties for data availability\nconst hasPerformanceData = computed(() => averageScore.value > 0)\nconst hasAssessmentData = computed(() => assessmentCompletion.value > 0)\nconst hasActivity = computed(() => recentActivities.value.length > 0)\nconst hasSurveyData = computed(() => surveyData.value.length > 0)\n\n// Calculated average survey statistics\nconst averageSurveyStats = computed(() => {\n  if (!surveyData.value || !Array.isArray(surveyData.value) || surveyData.value.length === 0) {\n    return [];\n  }\n  \n  // Collect all problem types and their scores across all surveys\n  const problemsData = {};\n  \n  surveyData.value.forEach(survey => {\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        if (!problemsData[stat.type]) {\n          problemsData[stat.type] = {\n            totalScore: 0,\n            count: 0\n          };\n        }\n        \n        problemsData[stat.type].totalScore += stat.average || 0;\n        problemsData[stat.type].count += 1;\n      });\n    }\n  });\n  \n  // Calculate average for each problem type\n  return Object.entries(problemsData).map(([type, data]) => ({\n    type,\n    average: data.count > 0 ? data.totalScore / data.count : 0\n  })).sort((a, b) => b.average - a.average); // Sort by average score descending\n});\n\n// Get severity class for progress bar\nconst getSeverityClass = (score) => {\n  if (score >= 7) return 'bg-danger';\n  if (score >= 5) return 'bg-warning';\n  if (score >= 3) return 'bg-info';\n  return 'bg-success';\n}\n\n// Get severity badge class\nconst getSeverityBadgeClass = (score) => {\n  if (score >= 7) return 'bg-danger';\n  if (score >= 5) return 'bg-warning';\n  if (score >= 3) return 'bg-info';\n  return 'bg-success';\n}\n\n// Get severity label\nconst getSeverityLabel = (score) => {\n  if (score >= 7) return 'High';\n  if (score >= 5) return 'Medium';\n  if (score >= 3) return 'Low';\n  return 'Minimal';\n}\n\n// Get recommendation\nconst getRecommendation = (score) => {\n  if (score >= 7) return 'Immediate attention required';\n  if (score >= 5) return 'Consider additional support';\n  if (score >= 3) return 'Monitor closely';\n  return 'No concerns';\n}\n\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\n  try {\n    const teacherId = getTeacherId()\n    if (!teacherId) return\n\n    const token = store.state.auth.token\n    console.log('Fetching sections and subjects for:', { teacherId, year })\n\n    // First get all class records to extract sections\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n      params: { \n        teacherId,\n        year \n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n\n    if (recordsResponse.data) {\n      // Extract unique sections and subjects\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n      \n      sections.value = uniqueSections.sort()\n      subjects.value = uniqueSubjects.sort()\n      \n      console.log('Loaded sections and subjects:', {\n        sections: sections.value,\n        subjects: subjects.value\n      })\n    }\n  } catch (error) {\n    console.error('Error fetching teacher sections and subjects:', error)\n    sections.value = []\n    subjects.value = []\n  }\n}\n\nconst handleYearChange = async () => {\n  selectedSection.value = ''\n  selectedSubject.value = ''\n  if (selectedYear.value) {\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\n  } else {\n    sections.value = []\n    subjects.value = []\n  }\n  await fetchDashboardData()\n}\n\nconst getFilterDisplay = () => {\n  const filters = []\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n  if (selectedSection.value) filters.push(selectedSection.value)\n  if (selectedSubject.value) filters.push(selectedSubject.value)\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n}\n\n// Fetch survey data from the API\nconst fetchSurveyData = async () => {\n  loadingSurveyData.value = true;\n  \n  try {\n    const token = store.state.auth.token;\n    let url = 'http://localhost:8000/api/surveys/completed';\n    \n    // Apply filters if selected\n    const params = {};\n    if (selectedYear.value) params.year = selectedYear.value;\n    if (selectedSection.value) params.section = selectedSection.value;\n    if (selectedStartDate.value && selectedEndDate.value) {\n      params.startDate = selectedStartDate.value;\n      params.endDate = selectedEndDate.value;\n    }\n    \n    const response = await axios.get(url, {\n      params,\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n    \n    // Process survey data\n    if (response.data && Array.isArray(response.data)) {\n      surveyData.value = response.data;\n      completedSurveys.value = response.data.length;\n      console.log('Loaded survey data:', surveyData.value);\n      \n      // Create charts\n      nextTick(() => {\n        createProblemByYearChart();\n        createSeverityDistributionChart();\n        createSurveyStatsChart();\n      });\n    } else {\n      console.warn('Invalid survey data format:', response.data);\n      surveyData.value = [];\n      completedSurveys.value = 0;\n    }\n  } catch (error) {\n    console.error('Error fetching survey data:', error);\n    surveyData.value = [];\n    completedSurveys.value = 0;\n  } finally {\n    loadingSurveyData.value = false;\n  }\n};\n\nconst fetchDashboardData = async () => {\n  try {\n    const teacherId = getTeacherId();\n    if (!teacherId) return;\n    \n    const token = store.state.auth.token;\n    \n    // Prepare query parameters\n    const params = { teacherId };\n    if (selectedYear.value) params.year = selectedYear.value;\n    if (selectedSection.value) params.section = selectedSection.value;\n    if (selectedSubject.value) params.subject = selectedSubject.value;\n    if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n    if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n    \n    console.log('Fetching dashboard data with params:', params);\n    \n    const response = await axios.get('http://localhost:8000/api/teacher-dashboard-data', {\n      params,\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n    \n    // Update data refs\n    totalStudents.value = response.data.totalStudents || 0;\n    totalSections.value = response.data.totalSections || 0;\n    totalSubjects.value = response.data.totalSubjects || 0;\n    failingStudents.value = response.data.failingStudents || 0;\n    assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n    recentActivities.value = Array.isArray(response.data.recentActivities) \n      ? response.data.recentActivities \n      : [];\n      \n    // Also fetch survey data\n    await fetchSurveyData();\n    \n    // Update charts with the fetched data\n    if (Array.isArray(response.data.performanceDistribution)) {\n      updatePerformanceChart({\n        performanceDistribution: response.data.performanceDistribution\n      });\n    } else {\n      console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n      updatePerformanceChart({\n        performanceDistribution: [0, 0, 0, 0, 0]\n      });\n    }\n\n    if (response.data.assessmentCompletion?.byType) {\n      updateAssessmentTypeChart([\n        { type: 'Quiz', percentage: response.data.assessmentCompletion.byType.quiz || 0 },\n        { type: 'Activity', percentage: response.data.assessmentCompletion.byType.activity || 0 },\n        { type: 'Performance Task', percentage: response.data.assessmentCompletion.byType.performanceTask || 0 }\n      ]);\n    } else {\n      console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n      updateAssessmentTypeChart([\n        { type: 'Quiz', percentage: 0 },\n        { type: 'Activity', percentage: 0 },\n        { type: 'Performance Task', percentage: 0 }\n      ]);\n    }\n\n    if (Array.isArray(response.data.performanceTrends)) {\n      updatePerformanceTrendChart(response.data.performanceTrends);\n    } else {\n      console.warn('Invalid performance trends data:', response.data.performanceTrends);\n      updatePerformanceTrendChart([]);\n    }\n\n    if (response.data.assessmentCompletion?.byType) {\n      updateAssessmentTypePerformanceChart(response.data);\n    } else {\n      console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n      updateAssessmentTypePerformanceChart({\n        assessmentCompletion: {\n          byType: {\n            quiz: 0,\n            activity: 0,\n            performancetask: 0\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n    }\n    \n    // Reset data on error\n    totalStudents.value = 0;\n    totalSections.value = 0;\n    totalSubjects.value = 0;\n    failingStudents.value = 0;\n    averageScore.value = 0;\n    assessmentCompletion.value = 0;\n    recentActivities.value = [];\n    \n    // Update charts with empty data\n    updatePerformanceChart({\n      performanceDistribution: [0, 0, 0, 0, 0]\n    });\n    updateAssessmentTypeChart([\n      { type: 'Quiz', percentage: 0 },\n      { type: 'Activity', percentage: 0 },\n      { type: 'Performance Task', percentage: 0 }\n    ]);\n    updatePerformanceTrendChart([]);\n    updateAssessmentTypePerformanceChart({\n      assessmentCompletion: {\n        byType: {\n          quiz: 0,\n          activity: 0,\n          performancetask: 0\n        }\n      }\n    });\n    \n    // Also try to fetch survey data\n    fetchSurveyData().catch(err => {\n      console.error('Error fetching survey data after dashboard error:', err);\n    });\n  }\n}\n\nconst updatePerformanceChart = (data) => {\n  if (!performanceChart.value) return;\n  \n  const ctx = performanceChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process performance distribution data\n  const performanceData = Array.isArray(data.performanceDistribution) \n    ? data.performanceDistribution \n    : [0, 0, 0, 0, 0];\n  \n  console.log('Performance distribution data:', performanceData);\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n      datasets: [{\n        label: 'Number of Students',\n        data: performanceData,\n        backgroundColor: [\n          'rgba(52, 211, 153, 0.8)',  // Green for highest\n          'rgba(59, 130, 246, 0.8)',  // Blue\n          'rgba(251, 191, 36, 0.8)',  // Yellow\n          'rgba(251, 146, 60, 0.8)',  // Orange\n          'rgba(239, 68, 68, 0.8)'    // Red for lowest\n        ],\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${value} students (${percentage}%)`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            stepSize: 1\n          },\n          title: {\n            display: true,\n            text: 'Number of Students'\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updateAssessmentTypeChart = (data) => {\n  if (!assessmentTypeChart.value) return;\n  \n  const ctx = assessmentTypeChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process the assessment type distribution data\n  const labels = data.labels || [];\n  const datasets = data.datasets || [];\n  \n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: datasets.map((dataset, index) => ({\n        label: dataset.type,\n        data: dataset.data,\n        backgroundColor: [\n          'rgba(52, 211, 153, 0.8)',  // Green\n          'rgba(59, 130, 246, 0.8)',  // Blue\n          'rgba(251, 191, 36, 0.8)'   // Yellow\n        ][index],\n        borderWidth: 1\n      }))\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          stacked: true,\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        },\n        y: {\n          stacked: true,\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Number of Assessments'\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => `${context.dataset.label}: ${context.raw || 0} assessments`\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updatePerformanceTrendChart = (data) => {\n  if (!performanceTrendChart.value) {\n    console.warn('Performance trend chart reference not found');\n    return;\n  }\n  \n  const ctx = performanceTrendChart.value.getContext('2d');\n  if (!ctx) {\n    console.warn('Could not get 2d context for performance trend chart');\n    return;\n  }\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    existingChart.destroy();\n  }\n\n  // Ensure data is valid\n  const validData = Array.isArray(data) ? data : [];\n  console.log('Creating performance trend chart with data:', validData);\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n      datasets: [{\n        label: 'Average Score',\n        data: validData.map(d => Number(d.score) || 0),\n        borderColor: '#4CAF50',\n        backgroundColor: 'rgba(76, 175, 80, 0.1)',\n        tension: 0.4,\n        fill: true,\n        pointRadius: 4,\n        pointHoverRadius: 6\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const dataPoint = validData[context.dataIndex];\n              return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          ticks: {\n            stepSize: 20,\n            font: {\n              size: 12\n            }\n          },\n          title: {\n            display: true,\n            text: 'Average Score (%)',\n            font: {\n              size: 14,\n              weight: 'bold'\n            }\n          }\n        },\n        x: {\n          ticks: {\n            font: {\n              size: 12\n            },\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updateAssessmentTypePerformanceChart = (data) => {\n  if (!assessmentTypePerformanceChart.value) return;\n  \n  const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process the performance trends data by assessment type\n  const trendsByType = {\n    Quiz: [],\n    Activity: [],\n    'Performance Task': []\n  };\n\n  // Process performance trends data\n  if (Array.isArray(data.performanceTrends)) {\n    data.performanceTrends.forEach(trend => {\n      const type = trend.type || trend.name;\n      if (type in trendsByType) {\n        trendsByType[type].push({\n          date: new Date(trend.date),\n          score: parseFloat(trend.score) || 0\n        });\n      }\n    });\n  }\n\n  // Sort data points by date for each type\n  Object.keys(trendsByType).forEach(type => {\n    trendsByType[type].sort((a, b) => a.date - b.date);\n  });\n\n  // Get unique dates across all types\n  const allDates = [...new Set(\n    Object.values(trendsByType)\n      .flat()\n      .map(item => item.date)\n  )].sort((a, b) => a - b);\n\n  // Create datasets\n  const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n    const colors = [\n      'rgb(52, 211, 153)',   // Green for Quiz\n      'rgb(59, 130, 246)',   // Blue for Activity\n      'rgb(251, 191, 36)'    // Yellow for Performance Task\n    ];\n    const color = colors[index];\n\n    return {\n      label: type,\n      data: allDates.map(date => {\n        const point = data.find(d => d.date.getTime() === date.getTime());\n        return point ? point.score : null;\n      }),\n      borderColor: color,\n      backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n      fill: true,\n      tension: 0.4,\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      spanGaps: true // This will connect points even if there are null values\n    };\n  });\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n      datasets\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        intersect: false,\n        mode: 'index'\n      },\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n              return `${context.dataset.label}: ${value}%`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          title: {\n            display: true,\n            text: 'Score (%)'\n          }\n        },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\nconst formatDate = (date) => {\n  return moment(date).format('MMM D, YYYY')\n}\n\nconst applyFilters = async () => {\n  // Store filters in localStorage\n  if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value);\n  if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value);\n  if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value);\n  \n  // Fetch data with the new filters\n  await fetchDashboardData();\n  await fetchSurveyData();\n}\n\n// Watch for filter changes\nwatch(selectedYear, handleYearChange)\nwatch([selectedSection, selectedSubject], applyFilters)\nwatch([selectedStartDate, selectedEndDate], () => {\n  if (selectedStartDate.value && selectedEndDate.value) {\n    // Validate date range\n    const start = moment(selectedStartDate.value);\n    const end = moment(selectedEndDate.value);\n    \n    if (end.isBefore(start)) {\n      selectedEndDate.value = selectedStartDate.value;\n    }\n    \n    fetchDashboardData();\n  }\n})\n\n// Watch surveyData for changes to update charts\nwatch(surveyData, () => {\n  loadingSurveyData.value = true;\n  \n  // Use nextTick to ensure DOM is updated\n  nextTick(() => {\n    try {\n      createProblemByYearChart();\n      createSeverityDistributionChart();\n    } catch (error) {\n      console.error('Error creating survey charts:', error);\n    } finally {\n      loadingSurveyData.value = false;\n    }\n  });\n}, { deep: true })\n\n// Initialize on page load\nonMounted(async () => {\n  // Get user info - check if the User is authorized\n  const user = store.state.auth.user;\n  if (user && store.state.auth.token) {\n    try {\n      // Fetch available sections/subjects for filtering\n      await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      \n      // Fetch dashboard data\n      await fetchDashboardData();\n      \n      // Fetch survey data separately to ensure it's loaded\n      await fetchSurveyData();\n      \n      // Initialize problem by year and severity charts\n      nextTick(() => {\n        createProblemByYearChart();\n        createSeverityDistributionChart();\n        createSurveyStatsChart();\n      });\n      \n      // Fetch grades data for each subject\n      const resp = await axios.get(`http://localhost:8000/api/subjects/grade`)\n      resp.data.forEach(datas => {\n        // Calculate average of failing grades (<=50)\n        let temp = 0\n        let counter = 0;\n        Object.entries(datas.scores).forEach(([id, score]) => {\n          if(score <= 50){\n            temp = temp + score;\n            counter++;\n          }\n        })\n        quizzesGrades.value.push({average : Number((temp / counter).toFixed(2)) || 0, subject : datas.subject});\n      });\n      \n    } catch (error) {\n      console.error('Error during initialization:', error);\n    }\n  } else {\n    console.error('No user ID or token found');\n  }\n})\n\n// Create chart for problem types by year level\nconst createProblemByYearChart = () => {\n  if (!problemByYearChart.value) return;\n  \n  const ctx = problemByYearChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!surveyData.value || surveyData.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['1st Year', '2nd Year', '3rd Year', '4th Year'],\n        datasets: [\n          { label: 'Academic', data: [0, 0, 0, 0], backgroundColor: 'rgba(54, 162, 235, 0.7)' },\n          { label: 'Financial', data: [0, 0, 0, 0], backgroundColor: 'rgba(255, 99, 132, 0.7)' },\n          { label: 'Personal', data: [0, 0, 0, 0], backgroundColor: 'rgba(255, 206, 86, 0.7)' },\n          { label: 'Health', data: [0, 0, 0, 0], backgroundColor: 'rgba(75, 192, 192, 0.7)' },\n          { label: 'Social', data: [0, 0, 0, 0], backgroundColor: 'rgba(153, 102, 255, 0.7)' }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: { stacked: true },\n          y: { \n            stacked: true,\n            beginAtZero: true,\n            title: { display: true, text: 'Number of Problems' }\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Process data - group problem types by year\n  const problemTypesByYear = {\n    '1st': {},\n    '2nd': {},\n    '3rd': {},\n    '4th': {},\n    '5th': {},\n    '6th': {}\n  };\n  \n  // Collect all unique problem types\n  const allProblemTypes = new Set();\n  \n  // Process all surveys and their stats\n  surveyData.value.forEach(survey => {\n    const yearLevel = survey.year || 'Unknown';\n    \n    if (!problemTypesByYear[yearLevel]) {\n      problemTypesByYear[yearLevel] = {};\n    }\n    \n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        const problemType = stat.type;\n        allProblemTypes.add(problemType);\n        \n        if (!problemTypesByYear[yearLevel][problemType]) {\n          problemTypesByYear[yearLevel][problemType] = 0;\n        }\n        \n        problemTypesByYear[yearLevel][problemType]++;\n      });\n    }\n  });\n  \n  // Convert to chart data format\n  const problemTypesArray = Array.from(allProblemTypes);\n  const yearsArray = Object.keys(problemTypesByYear).filter(year => \n    year !== 'Unknown' && Object.keys(problemTypesByYear[year]).length > 0\n  );\n  \n  // Create datasets for each problem type\n  const datasets = problemTypesArray.map((problemType, index) => {\n    const colors = [\n      'rgba(54, 162, 235, 0.7)',   // Blue\n      'rgba(255, 99, 132, 0.7)',   // Red\n      'rgba(255, 206, 86, 0.7)',   // Yellow\n      'rgba(75, 192, 192, 0.7)',   // Green\n      'rgba(153, 102, 255, 0.7)',  // Purple\n      'rgba(255, 159, 64, 0.7)'    // Orange\n    ];\n    \n    return {\n      label: problemType,\n      data: yearsArray.map(year => problemTypesByYear[year][problemType] || 0),\n      backgroundColor: colors[index % colors.length]\n    };\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: yearsArray,\n      datasets: datasets\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { stacked: true },\n        y: { \n          stacked: true,\n          beginAtZero: true,\n          title: { display: true, text: 'Number of Problems' }\n        }\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              return `${context.dataset.label}: ${value} problems`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create chart for problem severity distribution\nconst createSeverityDistributionChart = () => {\n  if (!severityDistributionChart.value) return;\n  \n  const ctx = severityDistributionChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!surveyData.value || surveyData.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels: ['High', 'Medium', 'Low', 'Minimal'],\n        datasets: [{\n          data: [0, 0, 0, 0],\n          backgroundColor: [\n            'rgba(239, 68, 68, 0.8)',    // Red (High)\n            'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n            'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n            'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n          ]\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right'\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Process data - count problems by severity\n  const severityCounts = {\n    High: 0,\n    Medium: 0,\n    Low: 0,\n    Minimal: 0\n  };\n  \n  // Process all surveys and their stats\n  surveyData.value.forEach(survey => {\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        const average = stat.average || 0;\n        \n        if (average >= 7) {\n          severityCounts.High++;\n        } else if (average >= 5) {\n          severityCounts.Medium++;\n        } else if (average >= 3) {\n          severityCounts.Low++;\n        } else {\n          severityCounts.Minimal++;\n        }\n      });\n    }\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: ['High', 'Medium', 'Low', 'Minimal'],\n      datasets: [{\n        data: [\n          severityCounts.High,\n          severityCounts.Medium,\n          severityCounts.Low,\n          severityCounts.Minimal\n        ],\n        backgroundColor: [\n          'rgba(239, 68, 68, 0.8)',    // Red (High)\n          'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n          'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n          'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n        ]\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 15,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = Object.values(severityCounts).reduce((sum, val) => sum + val, 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${context.label}: ${value} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create survey stats chart\nconst createSurveyStatsChart = () => {\n  if (!surveyStatsChart.value) return;\n  \n  const ctx = surveyStatsChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!averageSurveyStats.value || averageSurveyStats.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['No data available'],\n        datasets: [{\n          label: 'Average Severity',\n          data: [0],\n          backgroundColor: 'rgba(54, 162, 235, 0.7)'\n        }]\n      },\n      options: {\n        indexAxis: 'y',\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: { \n            beginAtZero: true,\n            max: 10,\n            title: { display: true, text: 'Average Severity (0-10)' }\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Sort data by severity (highest to lowest)\n  const sortedStats = [...averageSurveyStats.value].sort((a, b) => b.average - a.average);\n  \n  // Create arrays for chart data\n  const labels = sortedStats.map(stat => stat.type);\n  const data = sortedStats.map(stat => stat.average);\n  \n  // Create color array based on severity\n  const backgroundColors = data.map(value => {\n    if (value >= 7) return 'rgba(220, 53, 69, 0.7)';     // High - danger\n    if (value >= 5) return 'rgba(255, 193, 7, 0.7)';     // Medium - warning\n    if (value >= 3) return 'rgba(23, 162, 184, 0.7)';    // Low - info\n    return 'rgba(40, 167, 69, 0.7)';                    // Minimal - success\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Average Severity',\n        data: data,\n        backgroundColor: backgroundColors,\n        borderWidth: 1\n      }]\n    },\n    options: {\n      indexAxis: 'y',\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { \n          beginAtZero: true,\n          max: 10,\n          title: { display: true, text: 'Average Severity (0-10)' }\n        }\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const severity = getSeverityLabel(value);\n              return `Severity: ${value.toFixed(2)} (${severity})`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n</script>\n\n<template>\n    <div class=\"dashboard\">\n        <div class=\"d-flex justify-content-between align-items-center mb-4\">\n            <h2 class=\"dashboard-title\"></h2>\n\n            <!-- Combined Filter Dropdown -->\n            <div class=\"dropdown\">\n                <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\"\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                    <i class=\"fas fa-filter me-2\"></i>\n                    {{ getFilterDisplay() }}\n                </button>\n                <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n                    <h6 class=\"dropdown-header\">Filter Options</h6>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Academic Year</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n                            <option value=\"\">All Years</option>\n                            <option value=\"1st\">1st Year</option>\n                            <option value=\"2nd\">2nd Year</option>\n                            <option value=\"3rd\">3rd Year</option>\n                            <option value=\"4th\">4th Year</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Section</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n                            <option value=\"\">All Sections</option>\n                            <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Subject</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n                            <option value=\"\">All Subjects</option>\n                            <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Date Range</label>\n                        <div class=\"d-flex gap-2\">\n                            <div class=\"flex-grow-1\">\n                                <label class=\"small text-muted\">From</label>\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedStartDate\"\n                                    :max=\"today\">\n                            </div>\n                            <div class=\"flex-grow-1\">\n                                <label class=\"small text-muted\">To</label>\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedEndDate\"\n                                    :max=\"today\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"dropdown-divider\"></div>\n                    <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n                </div>\n            </div>\n        </div>\n\n        <!-- Analytics Cards -->\n        <div class=\"row g-4\">\n            <!-- Failing Students Card -->\n            <div class=\"col-md-6\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-exclamation-triangle\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">Failing Students</h3>\n                        <div class=\"stat-value\">{{ failingStudents }}</div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Completed Surveys Card -->\n            <div class=\"col-md-6\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-poll\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">Completed Surveys</h3>\n                        <div class=\"stat-value\">{{ completedSurveys }}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Survey Statistics -->\n        <div class=\"row mt-4\">\n            <div class=\"col-12\">\n                <div class=\"chart-card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">\n                            <i class=\"fas fa-chart-pie me-2\"></i>\n                            Survey Statistics\n                        </h5>\n                        \n                        <div v-if=\"loadingSurveyData\" class=\"text-center py-4\">\n                            <div class=\"spinner-border text-primary\" role=\"status\">\n                                <span class=\"visually-hidden\">Loading survey data...</span>\n                            </div>\n                            <p class=\"mt-2\">Loading survey statistics...</p>\n                        </div>\n                        \n                        <div v-else-if=\"!hasSurveyData\" class=\"text-center py-4\">\n                            <i class=\"fas fa-chart-bar fa-3x text-muted mb-3\"></i>\n                            <h5>No Survey Data Available</h5>\n                            <p class=\"text-muted\">No survey responses have been submitted yet.</p>\n                        </div>\n                        \n                        <div v-else>\n                            <div class=\"survey-stats\">\n                                <div class=\"table-responsive\">\n                                    <table class=\"table table-hover stats-table\">\n                                        <thead class=\"table-light\">\n                                            <tr>\n                                                <th>Problem Type</th>\n                                                <th>Average Score</th>\n                                                <th>Severity</th>\n                                                <th>Recommendation</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr v-for=\"(stat, index) in averageSurveyStats\" :key=\"index\">\n                                                <td>\n                                                    <span class=\"problem-type\">{{ stat.type }}</span>\n                                                </td>\n                                                <td>\n                                                    <div class=\"d-flex align-items-center\">\n                                                        <div class=\"progress flex-grow-1 me-2\" style=\"height: 8px;\">\n                                                            <div \n                                                                class=\"progress-bar\" \n                                                                :class=\"getSeverityClass(stat.average)\"\n                                                                :style=\"`width: ${Math.min(stat.average * 10, 100)}%`\"\n                                                            ></div>\n                                                        </div>\n                                                        <span>{{ stat.average.toFixed(2) }}</span>\n                                                    </div>\n                                                </td>\n                                                <td>\n                                                    <span \n                                                        class=\"badge\" \n                                                        :class=\"getSeverityBadgeClass(stat.average)\"\n                                                    >\n                                                        {{ getSeverityLabel(stat.average) }}\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    <span class=\"recommendation\">{{ getRecommendation(stat.average) }}</span>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                                <div class=\"text-muted survey-note mt-3\">\n                                    <i class=\"fas fa-info-circle me-1\"></i>\n                                    <small>Higher scores indicate more significant student concerns in that problem area.</small>\n                                </div>\n                            </div>\n                            \n                            <div class=\"survey-visualization row g-4 mt-4\">\n                                <div class=\"col-12\">\n                                    <div class=\"chart-container\">\n                                        <h6 class=\"chart-title\">Average Problem Severity</h6>\n                                        <canvas ref=\"surveyStatsChart\"></canvas>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 1.5rem;\n  letter-spacing: -0.3px;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n    padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Chart filter refs\n    const chartFilters = ref({\n      attendance: {\n        period: 'month'\n      },\n      assessmentType: {\n        period: 'month'\n      },\n      performanceTrend: {\n        period: 'month'\n      },\n      assessmentTypePerformance: {\n        period: 'month'\n      }\n    });\n\n    // Chart data storage\n    const chartData = ref({\n      attendance: null,\n      assessmentType: null,\n      performanceTrend: null,\n      assessmentTypePerformance: null\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n\n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n\n          // Save available years\n          availableYears.value = uniqueYears.sort();\n\n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n\n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n\n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n\n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n\n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n\n        // Prepare query parameters\n        const params = {};\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        console.log('Fetching dashboard data with params:', params);\n\n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n\n        // Store complete data for reference\n        data.value = response.data;\n\n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = response.data.totalStudents > 0 || response.data.totalSections > 0 || Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0) || Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0;\n\n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n\n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n\n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n\n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [attendanceStats.present || 0, attendanceStats.late || 0, attendanceStats.absent || 0];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n\n        // Fetch assessment data separately\n        await fetchAssessmentData();\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) ? data.attendanceDistribution.slice(0, 3) : [0, 0, 0];\n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for late\n            'rgba(239, 68, 68, 0.8)' // Red for absent\n            ],\n            borderColor: ['rgb(15, 140, 80)',\n            // Darker borders for contrast\n            'rgb(220, 160, 20)', 'rgb(220, 50, 50)'],\n            borderWidth: 1,\n            hoverOffset: 15\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n\n      // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n\n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n\n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      console.log('Processed assessment chart data:', processedData);\n\n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: processedData.scores,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Quiz\n            'rgba(59, 130, 246, 0.8)',\n            // Blue for Activity\n            'rgba(251, 191, 36, 0.8)' // Yellow for Performance Task\n            ].slice(0, processedData.types.length),\n            borderColor: ['rgb(15, 140, 80)', 'rgb(45, 110, 220)', 'rgb(220, 160, 20)'].slice(0, processedData.types.length),\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        console.log('Fetching assessment data with params:', params);\n\n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({\n          assessmentData: []\n        });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = data => {\n      if (data) {\n        console.log('Assessment data received:', data);\n\n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            },\n            'Activity': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            },\n            'Performance Task': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            }\n          };\n\n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n\n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n\n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 ? (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0;\n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n\n          // Create performance trends data\n          const performanceTrends = data.filter(a => a.date) // Only include assessments with dates\n          .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n          .map(assessment => {\n            // Calculate average score for this assessment\n            let averageScore = 0;\n            let scoreArray = [];\n            if (assessment.scores) {\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (typeof assessment.scores === 'object') {\n                scoreArray = Object.values(assessment.scores);\n              }\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              if (validScores.length > 0) {\n                const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                averageScore = totalScore / validScores.length;\n              }\n            }\n            return {\n              date: assessment.date,\n              score: averageScore,\n              name: assessment.name || assessment.title || assessment.type,\n              type: assessment.type\n            };\n          });\n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n\n    // Function to generate and download chart data\n    const generateChartData = async (chartType, exportType = 'excel') => {\n      try {\n        console.log(`Generating ${exportType} for ${chartType} chart with period: ${chartFilters.value[chartType]?.period}`);\n\n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n\n        // Get the date range from chart filters\n        const startDate = chartFilters.value[chartType]?.startDate || moment().subtract(30, 'days').format('YYYY-MM-DD');\n        const endDate = chartFilters.value[chartType]?.endDate || moment().format('YYYY-MM-DD');\n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n\n            // Try to fetch the latest attendance data directly for export\n            try {\n              console.log('Fetching attendance data directly for export');\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n\n              // Make a direct API call to get attendance stats\n              const response = await axios.get('http://localhost:8000/api/attendance/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              console.log('Got attendance data for export:', response.data);\n              const stats = response.data;\n              dataToExport = [{\n                'Status': 'Present',\n                'Count': stats.present || 0,\n                'Percentage': `${stats.presentRate || 0}%`\n              }, {\n                'Status': 'Late',\n                'Count': stats.late || 0,\n                'Percentage': `${stats.lateRate || 0}%`\n              }, {\n                'Status': 'Absent',\n                'Count': stats.absent || 0,\n                'Percentage': `${stats.absentRate || 0}%`\n              }];\n            } catch (apiError) {\n              // Fallback code...\n            }\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            try {\n              // Get assessment type data for export\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n\n              // Try to get data from assessments/stats endpoint\n              const response = await axios.get('http://localhost:8000/api/assessments/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              console.log('Assessment type data for export:', response.data);\n\n              // Process the assessment types data\n              if (response.data && response.data.assessmentTypes) {\n                const assessmentTypes = response.data.assessmentTypes;\n                dataToExport = Object.entries(assessmentTypes).map(([type, data]) => {\n                  const avgScore = data.scoreCount > 0 ? (data.totalScore / data.scoreCount).toFixed(2) : '0.00';\n                  return {\n                    'Assessment Type': type,\n                    'Count': data.count || 0,\n                    'Average Score (%)': avgScore\n                  };\n                });\n              } else {\n                // If no data was found, create empty dataset\n                dataToExport = [{\n                  'Assessment Type': 'Quiz',\n                  'Count': 0,\n                  'Average Score (%)': '0.00'\n                }, {\n                  'Assessment Type': 'Activity',\n                  'Count': 0,\n                  'Average Score (%)': '0.00'\n                }, {\n                  'Assessment Type': 'Performance Task',\n                  'Count': 0,\n                  'Average Score (%)': '0.00'\n                }];\n              }\n            } catch (error) {\n              // Create a default empty dataset\n              dataToExport = [{\n                'Assessment Type': 'Quiz',\n                'Count': 0,\n                'Average Score (%)': '0.00'\n              }, {\n                'Assessment Type': 'Activity',\n                'Count': 0,\n                'Average Score (%)': '0.00'\n              }, {\n                'Assessment Type': 'Performance Task',\n                'Count': 0,\n                'Average Score (%)': '0.00'\n              }];\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trend_${moment().format('YYYY-MM-DD')}`;\n            try {\n              // Get performance trend data for export\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n\n              // Try to get data from assessments/stats endpoint\n              const response = await axios.get('http://localhost:8000/api/assessments/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              console.log('Performance trend data for export:', response.data);\n\n              // Process the performance trends data\n              if (response.data && response.data.performanceTrends && response.data.performanceTrends.length > 0) {\n                dataToExport = response.data.performanceTrends.map(trend => ({\n                  'Date': moment(trend.date).format('YYYY-MM-DD'),\n                  'Assessment': trend.name,\n                  'Type': trend.type,\n                  'Average Score (%)': parseFloat(trend.score).toFixed(2)\n                }));\n              } else if (data.value && data.value.performanceTrends && data.value.performanceTrends.length > 0) {\n                // Fallback to data from the dashboard\n                dataToExport = data.value.performanceTrends.map(trend => ({\n                  'Date': moment(trend.date).format('YYYY-MM-DD'),\n                  'Assessment': trend.name,\n                  'Type': trend.type,\n                  'Average Score (%)': parseFloat(trend.score).toFixed(2)\n                }));\n              } else {\n                // If no data was found, create an empty row\n                dataToExport = [{\n                  'Date': moment().format('YYYY-MM-DD'),\n                  'Assessment': 'No data',\n                  'Type': '-',\n                  'Average Score (%)': '0.00'\n                }];\n              }\n            } catch (error) {\n              console.error('Error fetching performance trend data:', error);\n\n              // Create a default empty dataset\n              dataToExport = [{\n                'Date': moment().format('YYYY-MM-DD'),\n                'Assessment': 'No data',\n                'Type': '-',\n                'Average Score (%)': '0.00'\n              }];\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_type_performance_${moment().format('YYYY-MM-DD')}`;\n            try {\n              // Get assessment type performance data for export\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n\n              // Try to get data from assessments/stats endpoint\n              const response = await axios.get('http://localhost:8000/api/assessments/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              console.log('Assessment type performance data for export:', response.data);\n\n              // Process the performance trends data by assessment type\n              if (response.data && response.data.performanceTrends && response.data.performanceTrends.length > 0) {\n                // Group by date and type\n                const trendsMap = {};\n                response.data.performanceTrends.forEach(trend => {\n                  const dateStr = moment(trend.date).format('YYYY-MM-DD');\n                  if (!trendsMap[dateStr]) {\n                    trendsMap[dateStr] = {};\n                  }\n                  trendsMap[dateStr][trend.type] = parseFloat(trend.score).toFixed(2);\n                });\n\n                // Convert to array for export\n                dataToExport = Object.keys(trendsMap).map(date => {\n                  const rowData = {\n                    'Date': date\n                  };\n\n                  // Add columns for each assessment type\n                  const types = ['Quiz', 'Activity', 'Performance Task'];\n                  types.forEach(type => {\n                    rowData[`${type} Score (%)`] = trendsMap[date][type] || '-';\n                  });\n                  return rowData;\n                });\n\n                // Sort by date\n                dataToExport.sort((a, b) => moment(a.Date).diff(moment(b.Date)));\n              } else {\n                // If no data was found, create an empty row\n                dataToExport = [{\n                  'Date': moment().format('YYYY-MM-DD'),\n                  'Quiz Score (%)': '-',\n                  'Activity Score (%)': '-',\n                  'Performance Task Score (%)': '-'\n                }];\n              }\n            } catch (error) {\n              console.error('Error fetching assessment type performance data:', error);\n\n              // Create a default empty dataset\n              dataToExport = [{\n                'Date': moment().format('YYYY-MM-DD'),\n                'Quiz Score (%)': '-',\n                'Activity Score (%)': '-',\n                'Performance Task Score (%)': '-'\n              }];\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n\n        // Check if we have data to export\n        if (!dataToExport || dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          alert(`No data available to generate ${chartType} report`);\n          return;\n        }\n        if (exportType === 'excel') {\n          // Create and download Excel file\n          const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n          const workbook = XLSX.utils.book_new();\n          XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n          const excelBuffer = XLSX.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array'\n          });\n          const excelData = new Blob([excelBuffer], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          });\n          saveAs(excelData, `${fileName}.xlsx`);\n          console.log(`Excel data exported for ${chartType}`);\n        } else if (exportType === 'pdf') {\n          try {\n            // Create and download PDF file\n            const doc = new jsPDF();\n\n            // Add title\n            let title = '';\n            switch (chartType) {\n              case 'attendance':\n                title = 'Attendance Distribution';\n                break;\n              case 'assessmentType':\n                title = 'Assessment Performance Analysis';\n                break;\n              case 'performanceTrend':\n                title = 'Performance Trends Over Time';\n                break;\n              case 'assessmentTypePerformance':\n                title = 'Performance by Assessment Type';\n                break;\n            }\n            doc.setFontSize(16);\n            doc.text(title, 14, 16);\n\n            // Add date range to the header\n            doc.setFontSize(10);\n            doc.text(`Date Range: ${moment(startDate).format('MMM D, YYYY')} - ${moment(endDate).format('MMM D, YYYY')}`, 14, 24);\n\n            // Add filters used\n            let filterText = 'Filters: ';\n            if (selectedYear.value) filterText += `Year: ${selectedYear.value}, `;\n            if (selectedSection.value) filterText += `Section: ${selectedSection.value}, `;\n            if (selectedSubject.value) filterText += `Subject: ${selectedSubject.value}`;\n            doc.text(filterText, 14, 30);\n\n            // Add date of generation\n            doc.text(`Generated on: ${moment().format('MMMM D, YYYY')}`, 14, 36);\n\n            // Extract column headers from data\n            if (dataToExport.length > 0) {\n              // Get column headers\n              const headers = Object.keys(dataToExport[0]);\n\n              // Create table data\n              const tableData = dataToExport.map(row => headers.map(key => row[key]));\n\n              // Add table with autotable\n              try {\n                doc.autoTable({\n                  startY: 42,\n                  head: [headers],\n                  body: tableData,\n                  styles: {\n                    fontSize: 10\n                  },\n                  headStyles: {\n                    fillColor: [0, 51, 102]\n                  },\n                  alternateRowStyles: {\n                    fillColor: [240, 244, 248]\n                  }\n                });\n              } catch (tableError) {\n                console.error('Error creating table:', tableError);\n\n                // Fallback to simple text\n                let y = 42;\n                headers.forEach((header, i) => {\n                  doc.text(header, 14 + i * 50, y);\n                });\n                y += 10;\n                dataToExport.forEach(row => {\n                  headers.forEach((header, i) => {\n                    doc.text(String(row[header]), 14 + i * 50, y);\n                  });\n                  y += 10;\n                });\n              }\n\n              // Save PDF\n              doc.save(`${fileName}.pdf`);\n              console.log(`PDF data exported for ${chartType}`);\n            } else {\n              console.error('No data to include in PDF');\n              alert('Could not generate PDF: No data available');\n            }\n          } catch (pdfError) {\n            console.error('Error generating PDF:', pdfError);\n            alert(`Error generating PDF: ${pdfError.message}`);\n          }\n        }\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating ${chartType} report: ${error.message}`);\n      }\n    };\n\n    // Function to apply date filter to a specific chart\n    const applyChartDateFilter = (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n      chartFilters.value[chartType].period = period;\n\n      // Get date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n\n      // Store the date range in the chart filters\n      chartFilters.value[chartType].startDate = startDate;\n      chartFilters.value[chartType].endDate = endDate;\n\n      // Refresh the specific chart data\n      fetchChartData(chartType);\n    };\n\n    // Function to fetch chart data for a specific chart\n    const fetchChartData = async chartType => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Base params include teacher ID and any active filters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n\n        // Add date range based on the chart's period filter\n        const period = chartFilters.value[chartType]?.period || 'month';\n        const endDate = moment().format('YYYY-MM-DD');\n        let startDate;\n        switch (period) {\n          case 'day':\n            startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n            break;\n          case 'week':\n            startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n            break;\n          case 'month':\n          default:\n            startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n            break;\n        }\n\n        // Store the date range in the chart filters\n        chartFilters.value[chartType].startDate = startDate;\n        chartFilters.value[chartType].endDate = endDate;\n        params.startDate = startDate;\n        params.endDate = endDate;\n        console.log(`Fetching ${chartType} data with params:`, params);\n\n        // Different endpoint based on chart type\n        let endpoint;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            console.error(`Unknown chart type: ${chartType}`);\n            return;\n        }\n        try {\n          const response = await axios.get(`http://localhost:8000/api/${endpoint}`, {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n\n          // Store the chart data\n          chartData.value[chartType] = response.data;\n          console.log(`${chartType} data received:`, response.data);\n\n          // Update the specific chart\n          switch (chartType) {\n            case 'attendance':\n              if (response.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = response.data;\n                data.value.attendanceDistribution = [attendanceStats.present || 0, attendanceStats.late || 0, attendanceStats.absent || 0];\n                console.log('Attendance distribution data:', data.value.attendanceDistribution);\n                updatePerformanceChart(data.value);\n              }\n              break;\n            case 'assessmentType':\n              if (response.data && response.data.assessmentTypes) {\n                // Process assessment type data for chart\n                const assessmentData = [];\n                Object.entries(response.data.assessmentTypes).forEach(([type, typeData]) => {\n                  const avgScore = typeData.scoreCount > 0 ? typeData.totalScore / typeData.scoreCount : 0;\n                  assessmentData.push({\n                    type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                });\n                updateAssessmentTypeChart({\n                  assessmentData\n                });\n              } else {\n                // Handle empty data\n                updateAssessmentTypeChart({\n                  assessmentData: []\n                });\n              }\n              break;\n            case 'performanceTrend':\n              if (response.data && response.data.performanceTrends) {\n                updatePerformanceTrendChart(response.data.performanceTrends);\n              } else {\n                updatePerformanceTrendChart([]);\n              }\n              break;\n            case 'assessmentTypePerformance':\n              if (response.data && response.data.performanceTrends) {\n                updateAssessmentTypePerformanceChart({\n                  performanceTrends: response.data.performanceTrends\n                });\n              } else {\n                updateAssessmentTypePerformanceChart({\n                  performanceTrends: []\n                });\n              }\n              break;\n          }\n        } catch (error) {\n          console.error(` Error calling API for ${endpoint}:`, error);\n\n          // For assessment endpoints, try fallback to basic /assessments endpoint\n          if (chartType !== 'attendance') {\n            try {\n              console.log(`Trying fallback to basic /assessments endpoint for ${chartType}`);\n              const response = await axios.get('http://localhost:8000/api/assessments', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n\n              // Process raw assessment data based on chart type\n              if (Array.isArray(response.data) && response.data.length > 0) {\n                console.log(`Processing ${response.data.length} assessments from fallback endpoint`);\n                switch (chartType) {\n                  case 'assessmentType':\n                    processAssessmentResponse(response.data);\n                    break;\n                  case 'performanceTrend':\n                  case 'assessmentTypePerformance':\n                    // Create performance trends from raw assessments\n                    const performanceTrends = response.data.filter(a => a.date).sort((a, b) => new Date(a.date) - new Date(b.date)).map(assessment => {\n                      // Calculate average score\n                      let totalScore = 0;\n                      let scoreCount = 0;\n                      if (assessment.scores) {\n                        if (typeof assessment.scores === 'object' && !Array.isArray(assessment.scores)) {\n                          const scores = Object.values(assessment.scores).filter(s => typeof s === 'number');\n                          if (scores.length > 0) {\n                            totalScore = scores.reduce((sum, score) => sum + score, 0);\n                            scoreCount = scores.length;\n                          }\n                        }\n                      }\n                      const avgScore = scoreCount > 0 ? totalScore / scoreCount : 0;\n                      return {\n                        date: assessment.date,\n                        score: avgScore,\n                        name: assessment.name || assessment.title || `${assessment.type} ${assessment.number}`,\n                        type: assessment.type\n                      };\n                    });\n                    if (chartType === 'performanceTrend') {\n                      updatePerformanceTrendChart(performanceTrends);\n                    } else {\n                      updateAssessmentTypePerformanceChart({\n                        performanceTrends\n                      });\n                    }\n                    break;\n                }\n              } else {\n                console.log(`No assessment data from fallback endpoint for ${chartType}`);\n                // Handle the case of no data for each chart type\n                switch (chartType) {\n                  case 'assessmentType':\n                    updateAssessmentTypeChart({\n                      assessmentData: []\n                    });\n                    break;\n                  case 'performanceTrend':\n                    updatePerformanceTrendChart([]);\n                    break;\n                  case 'assessmentTypePerformance':\n                    updateAssessmentTypePerformanceChart({\n                      performanceTrends: []\n                    });\n                    break;\n                }\n              }\n            } catch (fallbackError) {\n              console.error(`Fallback to /assessments also failed for ${chartType}:`, fallbackError);\n              // Handle the case of no data for each chart type\n              switch (chartType) {\n                case 'assessmentType':\n                  updateAssessmentTypeChart({\n                    assessmentData: []\n                  });\n                  break;\n                case 'performanceTrend':\n                  updatePerformanceTrendChart([]);\n                  break;\n                case 'assessmentTypePerformance':\n                  updateAssessmentTypePerformanceChart({\n                    performanceTrends: []\n                  });\n                  break;\n              }\n            }\n          } else {\n            // Handle attendance errors\n            chartData.value[chartType] = {\n              present: 0,\n              late: 0,\n              absent: 0,\n              total: 0\n            };\n            data.value.attendanceDistribution = [0, 0, 0];\n            updatePerformanceChart(data.value);\n          }\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n      }\n    };\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initEmptyCharts();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","saveAs","XLSX","jsPDF","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","chartFilters","attendance","period","assessmentType","performanceTrend","assessmentTypePerformance","chartData","availableYears","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","data","value","attendanceDistribution","some","val","hasPerformanceData","Array","isArray","performanceTrends","length","assessmentTypes","Object","values","type","count","hasAssessmentData","assessmentTypeDistribution","hasActivity","loading","userName","firstName","lastName","trim","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueYears","Set","map","record","filter","Boolean","sort","filteredRecords","section","subject","uniqueSections","uniqueSubjects","warn","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initEmptyCharts","updatePerformanceChart","updateAssessmentTypeChart","assessmentData","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","startDate","endDate","response","hasValidData","hasOwnProperty","scoreValue","parseFloat","isNaN","toFixed","attendanceResponse","subtract","attendanceStats","present","late","absent","err","fetchAssessmentData","ctx","getContext","existingChart","getChart","destroy","attendanceData","slice","totalAttendance","reduce","a","b","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","display","position","padding","font","size","tooltip","callbacks","label","context","raw","total","percentage","titleFont","weight","bodyFont","cornerRadius","layout","top","right","bottom","left","processedData","types","scores","counts","availableTypes","item","forEach","typeData","find","borderRadius","barPercentage","scales","y","beginAtZero","max","grid","color","title","text","ticks","x","dataset","afterLabel","dataIndex","validData","d","date","Number","score","tension","fill","pointRadius","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","trendsByType","Quiz","Activity","trend","Date","keys","allDates","flat","entries","index","colors","point","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore","assessmentResponse","processAssessmentResponse","avgScore","scoreCount","totalScore","assessment","scoreArray","validScores","sum","generateChartData","chartType","exportType","dataToExport","fileName","stats","presentRate","lateRate","absentRate","apiError","trendsMap","dateStr","rowData","diff","Error","alert","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","excelData","Blob","doc","setFontSize","filterText","tableData","row","key","autoTable","startY","head","body","styles","fontSize","headStyles","fillColor","alternateRowStyles","tableError","header","i","String","save","pdfError","message","applyChartDateFilter","fetchChartData","endpoint","s","number","fallbackError"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            \n            <!-- Date filter buttons for attendance chart -->\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('attendance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters.attendance.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('attendance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters.attendance.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('attendance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters.attendance.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            \n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n            \n            <!-- Generate button for attendance chart -->\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"attendanceExportDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasAttendanceData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu\" aria-labelledby=\"attendanceExportDropdown\">\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('attendance', 'excel')\">Excel</button></li>\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('attendance', 'pdf')\">PDF</button></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            \n            <!-- Date filter buttons for assessment type chart -->\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentType', 'day')\" :class=\"['btn', 'btn-sm', chartFilters.assessmentType.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'week')\" :class=\"['btn', 'btn-sm', chartFilters.assessmentType.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'month')\" :class=\"['btn', 'btn-sm', chartFilters.assessmentType.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            \n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n            \n            <!-- Generate button for assessment type chart -->\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"assessmentTypeExportDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasAssessmentData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu\" aria-labelledby=\"assessmentTypeExportDropdown\">\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('assessmentType', 'excel')\">Excel</button></li>\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('assessmentType', 'pdf')\">PDF</button></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            \n            <!-- Date filter buttons for performance trend chart -->\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('performanceTrend', 'day')\" :class=\"['btn', 'btn-sm', chartFilters.performanceTrend.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'week')\" :class=\"['btn', 'btn-sm', chartFilters.performanceTrend.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'month')\" :class=\"['btn', 'btn-sm', chartFilters.performanceTrend.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            \n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            \n            <!-- Generate button for performance trend chart -->\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"performanceTrendExportDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasPerformanceData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu\" aria-labelledby=\"performanceTrendExportDropdown\">\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('performanceTrend', 'excel')\">Excel</button></li>\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('performanceTrend', 'pdf')\">PDF</button></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            \n            <!-- Date filter buttons for assessment type performance chart -->\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters.assessmentTypePerformance.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters.assessmentTypePerformance.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters.assessmentTypePerformance.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            \n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            \n            <!-- Generate button for assessment type performance chart -->\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"assessmentTypePerformanceExportDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasPerformanceData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu\" aria-labelledby=\"assessmentTypePerformanceExportDropdown\">\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('assessmentTypePerformance', 'excel')\">Excel</button></li>\n                  <li><button class=\"dropdown-item\" @click=\"generateChartData('assessmentTypePerformance', 'pdf')\">PDF</button></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { saveAs } from 'file-saver'\nimport * as XLSX from 'xlsx'\nimport jsPDF from 'jspdf'\nimport 'jspdf-autotable'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Chart filter refs\n    const chartFilters = ref({\n      attendance: { period: 'month' },\n      assessmentType: { period: 'month' },\n      performanceTrend: { period: 'month' },\n      assessmentTypePerformance: { period: 'month' }\n    })\n\n    // Chart data storage\n    const chartData = ref({\n      attendance: null,\n      assessmentType: null,\n      performanceTrend: null,\n      assessmentTypePerformance: null\n    })\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n            \n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n      \n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = \n          (response.data.totalStudents > 0) || \n          (response.data.totalSections > 0) || \n          (Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0)) ||\n          (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [\n                attendanceStats.present || 0,\n                attendanceStats.late || 0,\n                attendanceStats.absent || 0\n              ];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Fetch assessment data separately\n        await fetchAssessmentData();\n        \n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n      \n      // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n      \n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n      \n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      \n      console.log('Processed assessment chart data:', processedData);\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: processedData.scores,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ].slice(0, processedData.types.length),\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ].slice(0, processedData.types.length),\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        \n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching assessment data with params:', params);\n        \n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({ assessmentData: [] });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = (data) => {\n      if (data) {\n        console.log('Assessment data received:', data);\n        \n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          \n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Activity': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Performance Task': { count: 0, totalScore: 0, scoreCount: 0 }\n          };\n          \n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n              \n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n          \n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 \n              ? (typeData.totalScore / typeData.scoreCount).toFixed(1) \n              : 0;\n            \n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n          \n          // Create performance trends data\n          const performanceTrends = data\n            .filter(a => a.date) // Only include assessments with dates\n            .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n            .map(assessment => {\n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: assessment.date,\n                score: averageScore,\n                name: assessment.name || assessment.title || assessment.type,\n                type: assessment.type\n              };\n            });\n          \n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n\n    // Function to generate and download chart data\n    const generateChartData = async (chartType, exportType = 'excel') => {\n      try {\n        console.log(`Generating ${exportType} for ${chartType} chart with period: ${chartFilters.value[chartType]?.period}`);\n        \n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        \n        // Get the date range from chart filters\n        const startDate = chartFilters.value[chartType]?.startDate || moment().subtract(30, 'days').format('YYYY-MM-DD');\n        const endDate = chartFilters.value[chartType]?.endDate || moment().format('YYYY-MM-DD');\n        \n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n            \n            // Try to fetch the latest attendance data directly for export\n            try {\n              console.log('Fetching attendance data directly for export');\n              const teacherId = getTeacherId();\n              \n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n              \n              // Make a direct API call to get attendance stats\n              const response = await axios.get('http://localhost:8000/api/attendance/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              console.log('Got attendance data for export:', response.data);\n              \n              const stats = response.data;\n              dataToExport = [\n                {\n                  'Status': 'Present',\n                  'Count': stats.present || 0,\n                  'Percentage': `${stats.presentRate || 0}%`\n                },\n                {\n                  'Status': 'Late',\n                  'Count': stats.late || 0,\n                  'Percentage': `${stats.lateRate || 0}%`\n                },\n                {\n                  'Status': 'Absent',\n                  'Count': stats.absent || 0,\n                  'Percentage': `${stats.absentRate || 0}%`\n                }\n              ];\n            } catch (apiError) {\n              // Fallback code...\n            }\n            break;\n          \n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            \n            try {\n              // Get assessment type data for export\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n              \n              // Try to get data from assessments/stats endpoint\n              const response = await axios.get('http://localhost:8000/api/assessments/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              console.log('Assessment type data for export:', response.data);\n              \n              // Process the assessment types data\n              if (response.data && response.data.assessmentTypes) {\n                const assessmentTypes = response.data.assessmentTypes;\n                \n                dataToExport = Object.entries(assessmentTypes).map(([type, data]) => {\n                  const avgScore = data.scoreCount > 0 \n                    ? (data.totalScore / data.scoreCount).toFixed(2) \n                    : '0.00';\n                  \n                  return {\n                    'Assessment Type': type,\n                    'Count': data.count || 0,\n                    'Average Score (%)': avgScore\n                  };\n                });\n              } else {\n                // If no data was found, create empty dataset\n                dataToExport = [\n                  { 'Assessment Type': 'Quiz', 'Count': 0, 'Average Score (%)': '0.00' },\n                  { 'Assessment Type': 'Activity', 'Count': 0, 'Average Score (%)': '0.00' },\n                  { 'Assessment Type': 'Performance Task', 'Count': 0, 'Average Score (%)': '0.00' }\n                ];\n              }\n            } catch (error) {\n              // Create a default empty dataset\n              dataToExport = [\n                { 'Assessment Type': 'Quiz', 'Count': 0, 'Average Score (%)': '0.00' },\n                { 'Assessment Type': 'Activity', 'Count': 0, 'Average Score (%)': '0.00' },\n                { 'Assessment Type': 'Performance Task', 'Count': 0, 'Average Score (%)': '0.00' }\n              ];\n            }\n            break;\n          \n          case 'performanceTrend':\n            fileName = `performance_trend_${moment().format('YYYY-MM-DD')}`;\n            \n            try {\n              // Get performance trend data for export\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n              \n              // Try to get data from assessments/stats endpoint\n              const response = await axios.get('http://localhost:8000/api/assessments/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              console.log('Performance trend data for export:', response.data);\n              \n              // Process the performance trends data\n              if (response.data && response.data.performanceTrends && response.data.performanceTrends.length > 0) {\n                dataToExport = response.data.performanceTrends.map(trend => ({\n                  'Date': moment(trend.date).format('YYYY-MM-DD'),\n                  'Assessment': trend.name,\n                  'Type': trend.type,\n                  'Average Score (%)': parseFloat(trend.score).toFixed(2)\n                }));\n              } else if (data.value && data.value.performanceTrends && data.value.performanceTrends.length > 0) {\n                // Fallback to data from the dashboard\n                dataToExport = data.value.performanceTrends.map(trend => ({\n                  'Date': moment(trend.date).format('YYYY-MM-DD'),\n                  'Assessment': trend.name,\n                  'Type': trend.type,\n                  'Average Score (%)': parseFloat(trend.score).toFixed(2)\n                }));\n              } else {\n                // If no data was found, create an empty row\n                dataToExport = [\n                  { 'Date': moment().format('YYYY-MM-DD'), 'Assessment': 'No data', 'Type': '-', 'Average Score (%)': '0.00' }\n                ];\n              }\n            } catch (error) {\n              console.error('Error fetching performance trend data:', error);\n              \n              // Create a default empty dataset\n              dataToExport = [\n                { 'Date': moment().format('YYYY-MM-DD'), 'Assessment': 'No data', 'Type': '-', 'Average Score (%)': '0.00' }\n              ];\n            }\n            break;\n          \n          case 'assessmentTypePerformance':\n            fileName = `assessment_type_performance_${moment().format('YYYY-MM-DD')}`;\n            \n            try {\n              // Get assessment type performance data for export\n              const teacherId = getTeacherId();\n              const params = {\n                teacherId,\n                year: selectedYear.value || '',\n                section: selectedSection.value || '',\n                subject: selectedSubject.value || '',\n                startDate,\n                endDate\n              };\n              \n              // Try to get data from assessments/stats endpoint\n              const response = await axios.get('http://localhost:8000/api/assessments/stats', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              console.log('Assessment type performance data for export:', response.data);\n              \n              // Process the performance trends data by assessment type\n              if (response.data && response.data.performanceTrends && response.data.performanceTrends.length > 0) {\n                // Group by date and type\n                const trendsMap = {};\n                \n                response.data.performanceTrends.forEach(trend => {\n                  const dateStr = moment(trend.date).format('YYYY-MM-DD');\n                  if (!trendsMap[dateStr]) {\n                    trendsMap[dateStr] = {};\n                  }\n                  \n                  trendsMap[dateStr][trend.type] = parseFloat(trend.score).toFixed(2);\n                });\n                \n                // Convert to array for export\n                dataToExport = Object.keys(trendsMap).map(date => {\n                  const rowData = { 'Date': date };\n                  \n                  // Add columns for each assessment type\n                  const types = ['Quiz', 'Activity', 'Performance Task'];\n                  types.forEach(type => {\n                    rowData[`${type} Score (%)`] = trendsMap[date][type] || '-';\n                  });\n                  \n                  return rowData;\n                });\n                \n                // Sort by date\n                dataToExport.sort((a, b) => moment(a.Date).diff(moment(b.Date)));\n              } else {\n                // If no data was found, create an empty row\n                dataToExport = [\n                  { \n                    'Date': moment().format('YYYY-MM-DD'), \n                    'Quiz Score (%)': '-', \n                    'Activity Score (%)': '-', \n                    'Performance Task Score (%)': '-' \n                  }\n                ];\n              }\n            } catch (error) {\n              console.error('Error fetching assessment type performance data:', error);\n              \n              // Create a default empty dataset\n              dataToExport = [\n                { \n                  'Date': moment().format('YYYY-MM-DD'), \n                  'Quiz Score (%)': '-', \n                  'Activity Score (%)': '-', \n                  'Performance Task Score (%)': '-' \n                }\n              ];\n            }\n            break;\n          \n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Check if we have data to export\n        if (!dataToExport || dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          alert(`No data available to generate ${chartType} report`);\n          return;\n        }\n        \n        if (exportType === 'excel') {\n          // Create and download Excel file\n          const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n          const workbook = XLSX.utils.book_new();\n          XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n          const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n          const excelData = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n          saveAs(excelData, `${fileName}.xlsx`);\n          \n          console.log(`Excel data exported for ${chartType}`);\n        } else if (exportType === 'pdf') {\n          try {\n            // Create and download PDF file\n            const doc = new jsPDF();\n            \n            // Add title\n            let title = '';\n            switch (chartType) {\n              case 'attendance':\n                title = 'Attendance Distribution';\n                break;\n              case 'assessmentType':\n                title = 'Assessment Performance Analysis';\n                break;\n              case 'performanceTrend':\n                title = 'Performance Trends Over Time';\n                break;\n              case 'assessmentTypePerformance':\n                title = 'Performance by Assessment Type';\n                break;\n            }\n            \n            doc.setFontSize(16);\n            doc.text(title, 14, 16);\n            \n            // Add date range to the header\n            doc.setFontSize(10);\n            doc.text(`Date Range: ${moment(startDate).format('MMM D, YYYY')} - ${moment(endDate).format('MMM D, YYYY')}`, 14, 24);\n            \n            // Add filters used\n            let filterText = 'Filters: ';\n            if (selectedYear.value) filterText += `Year: ${selectedYear.value}, `;\n            if (selectedSection.value) filterText += `Section: ${selectedSection.value}, `;\n            if (selectedSubject.value) filterText += `Subject: ${selectedSubject.value}`;\n            \n            doc.text(filterText, 14, 30);\n            \n            // Add date of generation\n            doc.text(`Generated on: ${moment().format('MMMM D, YYYY')}`, 14, 36);\n            \n            // Extract column headers from data\n            if (dataToExport.length > 0) {\n              // Get column headers\n              const headers = Object.keys(dataToExport[0]);\n              \n              // Create table data\n              const tableData = dataToExport.map(row => headers.map(key => row[key]));\n              \n              // Add table with autotable\n              try {\n                doc.autoTable({\n                  startY: 42,\n                  head: [headers],\n                  body: tableData,\n                  styles: { fontSize: 10 },\n                  headStyles: { fillColor: [0, 51, 102] },\n                  alternateRowStyles: { fillColor: [240, 244, 248] }\n                });\n              } catch (tableError) {\n                console.error('Error creating table:', tableError);\n                \n                // Fallback to simple text\n                let y = 42;\n                headers.forEach((header, i) => {\n                  doc.text(header, 14 + (i * 50), y);\n                });\n                \n                y += 10;\n                \n                dataToExport.forEach(row => {\n                  headers.forEach((header, i) => {\n                    doc.text(String(row[header]), 14 + (i * 50), y);\n                  });\n                  y += 10;\n                });\n              }\n              \n              // Save PDF\n              doc.save(`${fileName}.pdf`);\n              \n              console.log(`PDF data exported for ${chartType}`);\n            } else {\n              console.error('No data to include in PDF');\n              alert('Could not generate PDF: No data available');\n            }\n          } catch (pdfError) {\n            console.error('Error generating PDF:', pdfError);\n            alert(`Error generating PDF: ${pdfError.message}`);\n          }\n        }\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating ${chartType} report: ${error.message}`);\n      }\n    };\n\n    // Function to apply date filter to a specific chart\n    const applyChartDateFilter = (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n      chartFilters.value[chartType].period = period;\n      \n      // Get date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      \n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n      \n      // Store the date range in the chart filters\n      chartFilters.value[chartType].startDate = startDate;\n      chartFilters.value[chartType].endDate = endDate;\n      \n      // Refresh the specific chart data\n      fetchChartData(chartType);\n    };\n\n    // Function to fetch chart data for a specific chart\n    const fetchChartData = async (chartType) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Base params include teacher ID and any active filters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        \n        // Add date range based on the chart's period filter\n        const period = chartFilters.value[chartType]?.period || 'month';\n        const endDate = moment().format('YYYY-MM-DD');\n        let startDate;\n        \n        switch (period) {\n          case 'day':\n            startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n            break;\n          case 'week':\n            startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n            break;\n          case 'month':\n          default:\n            startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n            break;\n        }\n        \n        // Store the date range in the chart filters\n        chartFilters.value[chartType].startDate = startDate;\n        chartFilters.value[chartType].endDate = endDate;\n        \n        params.startDate = startDate;\n        params.endDate = endDate;\n        \n        console.log(`Fetching ${chartType} data with params:`, params);\n        \n        // Different endpoint based on chart type\n        let endpoint;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            console.error(`Unknown chart type: ${chartType}`);\n            return;\n        }\n        \n        try {\n          const response = await axios.get(`http://localhost:8000/api/${endpoint}`, {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          // Store the chart data\n          chartData.value[chartType] = response.data;\n          console.log(`${chartType} data received:`, response.data);\n          \n          // Update the specific chart\n          switch (chartType) {\n            case 'attendance':\n              if (response.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = response.data;\n                data.value.attendanceDistribution = [\n                  attendanceStats.present || 0,\n                  attendanceStats.late || 0,\n                  attendanceStats.absent || 0\n                ];\n                \n                console.log('Attendance distribution data:', data.value.attendanceDistribution);\n                updatePerformanceChart(data.value);\n              }\n              break;\n            case 'assessmentType':\n              if (response.data && response.data.assessmentTypes) {\n                // Process assessment type data for chart\n                const assessmentData = [];\n                Object.entries(response.data.assessmentTypes).forEach(([type, typeData]) => {\n                  const avgScore = typeData.scoreCount > 0 \n                    ? (typeData.totalScore / typeData.scoreCount) \n                    : 0;\n                  \n                  assessmentData.push({\n                    type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                });\n                \n                updateAssessmentTypeChart({ assessmentData });\n              } else {\n                // Handle empty data\n                updateAssessmentTypeChart({ assessmentData: [] });\n              }\n              break;\n            case 'performanceTrend':\n              if (response.data && response.data.performanceTrends) {\n                updatePerformanceTrendChart(response.data.performanceTrends);\n              } else {\n                updatePerformanceTrendChart([]);\n              }\n              break;\n            case 'assessmentTypePerformance':\n              if (response.data && response.data.performanceTrends) {\n                updateAssessmentTypePerformanceChart({\n                  performanceTrends: response.data.performanceTrends\n                });\n              } else {\n                updateAssessmentTypePerformanceChart({ performanceTrends: [] });\n              }\n              break;\n          }\n        } catch (error) {\n          console.error(` Error calling API for ${endpoint}:`, error);\n          \n          // For assessment endpoints, try fallback to basic /assessments endpoint\n          if (chartType !== 'attendance') {\n            try {\n              console.log(`Trying fallback to basic /assessments endpoint for ${chartType}`);\n              const response = await axios.get('http://localhost:8000/api/assessments', {\n                params,\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              // Process raw assessment data based on chart type\n              if (Array.isArray(response.data) && response.data.length > 0) {\n                console.log(`Processing ${response.data.length} assessments from fallback endpoint`);\n                \n                switch (chartType) {\n                  case 'assessmentType':\n                    processAssessmentResponse(response.data);\n                    break;\n                  case 'performanceTrend':\n                  case 'assessmentTypePerformance':\n                    // Create performance trends from raw assessments\n                    const performanceTrends = response.data\n                      .filter(a => a.date)\n                      .sort((a, b) => new Date(a.date) - new Date(b.date))\n                      .map(assessment => {\n                        // Calculate average score\n                        let totalScore = 0;\n                        let scoreCount = 0;\n                        \n                        if (assessment.scores) {\n                          if (typeof assessment.scores === 'object' && !Array.isArray(assessment.scores)) {\n                            const scores = Object.values(assessment.scores).filter(s => typeof s === 'number');\n                            if (scores.length > 0) {\n                              totalScore = scores.reduce((sum, score) => sum + score, 0);\n                              scoreCount = scores.length;\n                            }\n                          }\n                        }\n                        \n                        const avgScore = scoreCount > 0 ? (totalScore / scoreCount) : 0;\n                        \n                        return {\n                          date: assessment.date,\n                          score: avgScore,\n                          name: assessment.name || assessment.title || `${assessment.type} ${assessment.number}`,\n                          type: assessment.type\n                        };\n                      });\n                    \n                    if (chartType === 'performanceTrend') {\n                      updatePerformanceTrendChart(performanceTrends);\n                    } else {\n                      updateAssessmentTypePerformanceChart({ performanceTrends });\n                    }\n                    break;\n                }\n              } else {\n                console.log(`No assessment data from fallback endpoint for ${chartType}`);\n                // Handle the case of no data for each chart type\n                switch (chartType) {\n                  case 'assessmentType':\n                    updateAssessmentTypeChart({ assessmentData: [] });\n                    break;\n                  case 'performanceTrend':\n                    updatePerformanceTrendChart([]);\n                    break;\n                  case 'assessmentTypePerformance':\n                    updateAssessmentTypePerformanceChart({ performanceTrends: [] });\n                    break;\n                }\n              }\n            } catch (fallbackError) {\n              console.error(`Fallback to /assessments also failed for ${chartType}:`, fallbackError);\n              // Handle the case of no data for each chart type\n              switch (chartType) {\n                case 'assessmentType':\n                  updateAssessmentTypeChart({ assessmentData: [] });\n                  break;\n                case 'performanceTrend':\n                  updatePerformanceTrendChart([]);\n                  break;\n                case 'assessmentTypePerformance':\n                  updateAssessmentTypePerformanceChart({ performanceTrends: [] });\n                  break;\n              }\n            }\n          } else {\n            // Handle attendance errors\n            chartData.value[chartType] = { present: 0, late: 0, absent: 0, total: 0 };\n            data.value.attendanceDistribution = [0, 0, 0];\n            updatePerformanceChart(data.value);\n          }\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n      }\n    };\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initEmptyCharts();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Chart Filter Styles */\n.chart-filters {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 1rem;\n}\n\n.date-filter-group {\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.date-filter-group .btn {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0;\n}\n\n.date-filter-group .btn:first-child {\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n\n.date-filter-group .btn:last-child {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
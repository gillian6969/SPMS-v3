{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, normalizeClass as _normalizeClass, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"greeting-section mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"greeting\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown\"\n};\nconst _hoisted_6 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_7 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_8 = {\n  class: \"mb-3\"\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = [\"value\"];\nconst _hoisted_16 = {\n  class: \"mb-3\"\n};\nconst _hoisted_17 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_18 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_19 = [\"max\"];\nconst _hoisted_20 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_21 = [\"max\"];\nconst _hoisted_22 = [\"disabled\"];\nconst _hoisted_23 = {\n  key: 0\n};\nconst _hoisted_24 = {\n  key: 1\n};\nconst _hoisted_25 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_26 = {\n  class: \"col-12\"\n};\nconst _hoisted_27 = {\n  class: \"date-filter-card\"\n};\nconst _hoisted_28 = {\n  class: \"card-body\"\n};\nconst _hoisted_29 = {\n  class: \"d-flex flex-wrap align-items-center\"\n};\nconst _hoisted_30 = {\n  class: \"date-filter-buttons me-3 mb-2\"\n};\nconst _hoisted_31 = {\n  key: 0,\n  class: \"date-custom-inputs d-flex flex-wrap mb-2\"\n};\nconst _hoisted_32 = {\n  class: \"input-group me-2\",\n  style: {\n    \"max-width\": \"200px\"\n  }\n};\nconst _hoisted_33 = [\"max\"];\nconst _hoisted_34 = {\n  class: \"input-group\",\n  style: {\n    \"max-width\": \"200px\"\n  }\n};\nconst _hoisted_35 = [\"max\", \"min\"];\nconst _hoisted_36 = {\n  class: \"ms-auto mb-2\"\n};\nconst _hoisted_37 = {\n  key: 0,\n  class: \"text-muted\"\n};\nconst _hoisted_38 = {\n  class: \"row g-4 mb-4\"\n};\nconst _hoisted_39 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_40 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_41 = {\n  class: \"card-info\"\n};\nconst _hoisted_42 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_43 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_44 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_45 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_46 = {\n  class: \"card-info\"\n};\nconst _hoisted_47 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_48 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_49 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_50 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_51 = {\n  class: \"card-info\"\n};\nconst _hoisted_52 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_53 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_54 = {\n  class: \"col-md-3\"\n};\nconst _hoisted_55 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_56 = {\n  class: \"card-info\"\n};\nconst _hoisted_57 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_58 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_59 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_60 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_61 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_62 = {\n  class: \"chart-card\"\n};\nconst _hoisted_63 = {\n  class: \"card-body\"\n};\nconst _hoisted_64 = {\n  class: \"chart-container\"\n};\nconst _hoisted_65 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_66 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_67 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_68 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_69 = {\n  class: \"chart-card\"\n};\nconst _hoisted_70 = {\n  class: \"card-body\"\n};\nconst _hoisted_71 = {\n  class: \"chart-container\"\n};\nconst _hoisted_72 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_73 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_74 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_75 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_76 = {\n  class: \"chart-card\"\n};\nconst _hoisted_77 = {\n  class: \"card-body\"\n};\nconst _hoisted_78 = {\n  class: \"chart-container\"\n};\nconst _hoisted_79 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_80 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_81 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_82 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_83 = {\n  class: \"chart-card\"\n};\nconst _hoisted_84 = {\n  class: \"card-body\"\n};\nconst _hoisted_85 = {\n  class: \"chart-container\"\n};\nconst _hoisted_86 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_87 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_88 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_89 = {\n  class: \"card mb-4\"\n};\nconst _hoisted_90 = {\n  class: \"card-body\"\n};\nconst _hoisted_91 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_92 = {\n  class: \"table\"\n};\nconst _hoisted_93 = {\n  key: 0\n};\nconst _hoisted_94 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Greeting Section \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h2\", _hoisted_3, \"Welcome, \" + _toDisplayString($setup.userName), 1 /* TEXT */), _cache[13] || (_cache[13] = _createElementVNode(\"p\", {\n    class: \"greeting-subtitle\"\n  }, \"Here's your dashboard overview\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_4, [_cache[27] || (_cache[27] = _createElementVNode(\"h2\", {\n    class: \"dashboard-title\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", _hoisted_6, [_cache[14] || (_cache[14] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[25] || (_cache[25] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, [_cache[15] || (_cache[15] = _createStaticVNode(\"<option value=\\\"\\\" data-v-6900940c>All Years</option><option value=\\\"1st\\\" data-v-6900940c>1st Year</option><option value=\\\"2nd\\\" data-v-6900940c>2nd Year</option><option value=\\\"3rd\\\" data-v-6900940c>3rd Year</option><option value=\\\"4th\\\" data-v-6900940c>4th Year</option>\", 5)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[18] || (_cache[18] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[17] || (_cache[17] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_11), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[20] || (_cache[20] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedYear\n  }, [_cache[19] || (_cache[19] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.subjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_15);\n  }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_14), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_16, [_cache[23] || (_cache[23] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_cache[21] || (_cache[21] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_19), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_20, [_cache[22] || (_cache[22] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_21), [[_vModelText, $setup.selectedEndDate]])])])]), _cache[26] || (_cache[26] = _createElementVNode(\"div\", {\n    class: \"dropdown-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary w-100\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: $setup.loading\n  }, [$setup.loading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_23, _cache[24] || (_cache[24] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Loading...\")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_24, \"Apply Filters\"))], 8 /* PROPS */, _hoisted_22)])])]), _createCommentVNode(\" Add date filter component and enable legends for all charts \"), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_cache[30] || (_cache[30] = _createElementVNode(\"h5\", {\n    class: \"card-title mb-3\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar me-2\"\n  }), _createTextVNode(\" Chart Date Range \")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $setup.setDateRange('1week')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === '1week' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Last Week \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => $setup.setDateRange('2weeks')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === '2weeks' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Last 2 Weeks \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => $setup.setDateRange('1month')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === '1month' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Last Month \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = $event => $setup.setDateRange('custom')),\n    class: _normalizeClass(['btn', $setup.selectedDateRange === 'custom' ? 'btn-primary' : 'btn-outline-primary'])\n  }, \" Custom \", 2 /* CLASS */)]), $setup.selectedDateRange === 'custom' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_cache[28] || (_cache[28] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $setup.customStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_33), [[_vModelText, $setup.customStartDate]])]), _createElementVNode(\"div\", _hoisted_34, [_cache[29] || (_cache[29] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => $setup.customEndDate = $event),\n    max: $setup.today,\n    min: $setup.customStartDate\n  }, null, 8 /* PROPS */, _hoisted_35), [[_vModelText, $setup.customEndDate]])])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_36, [$setup.selectedDateRange && $setup.selectedDateRange !== 'all' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_37, \" Showing data from \" + _toDisplayString($setup.formatDateShort($setup.currentDateRange.start)) + \" to \" + _toDisplayString($setup.formatDateShort($setup.currentDateRange.end)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])])])])]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_38, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_39, [_createElementVNode(\"div\", _hoisted_40, [_cache[33] || (_cache[33] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_41, [_cache[32] || (_cache[32] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_42, _toDisplayString($setup.totalStudents), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_43, _cache[31] || (_cache[31] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Sections Card \"), _createElementVNode(\"div\", _hoisted_44, [_createElementVNode(\"div\", _hoisted_45, [_cache[36] || (_cache[36] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_46, [_cache[35] || (_cache[35] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_47, _toDisplayString($setup.totalSections), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_48, _cache[34] || (_cache[34] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Subjects Card \"), _createElementVNode(\"div\", _hoisted_49, [_createElementVNode(\"div\", _hoisted_50, [_cache[39] || (_cache[39] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-book\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_51, [_cache[38] || (_cache[38] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"My Subjects\", -1 /* HOISTED */)), !$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_52, _toDisplayString($setup.totalSubjects), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_53, _cache[37] || (_cache[37] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_54, [_createElementVNode(\"div\", _hoisted_55, [_cache[42] || (_cache[42] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_56, [_cache[41] || (_cache[41] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Class Average\", -1 /* HOISTED */)), !$setup.loading && $setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_57, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_58, _cache[40] || (_cache[40] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_59, \"No data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_60, [_createCommentVNode(\" Attendance Distribution Chart (previously Performance Distribution) \"), _createElementVNode(\"div\", _hoisted_61, [_createElementVNode(\"div\", _hoisted_62, [_createElementVNode(\"div\", _hoisted_63, [_cache[44] || (_cache[44] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[45] || (_cache[45] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_64, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_65, _cache[43] || (_cache[43] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_66, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_67, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_68, [_createElementVNode(\"div\", _hoisted_69, [_createElementVNode(\"div\", _hoisted_70, [_cache[47] || (_cache[47] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[48] || (_cache[48] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_71, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_72, _cache[46] || (_cache[46] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_73, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_74, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_75, [_createElementVNode(\"div\", _hoisted_76, [_createElementVNode(\"div\", _hoisted_77, [_cache[50] || (_cache[50] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[51] || (_cache[51] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Class average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_78, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_79, _cache[49] || (_cache[49] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_80, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_81, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Performance \"), _createElementVNode(\"div\", _hoisted_82, [_createElementVNode(\"div\", _hoisted_83, [_createElementVNode(\"div\", _hoisted_84, [_cache[53] || (_cache[53] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[54] || (_cache[54] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_85, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_86, _cache[52] || (_cache[52] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_87, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.loading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_88, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])])]), _createCommentVNode(\" Recent Activity \"), _createElementVNode(\"div\", _hoisted_89, [_createElementVNode(\"div\", _hoisted_90, [_cache[58] || (_cache[58] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, \"Recent Activity\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_91, [_createElementVNode(\"table\", _hoisted_92, [_cache[57] || (_cache[57] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Activity\"), _createElementVNode(\"th\", null, \"Details\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [$setup.loading ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_93, _cache[55] || (_cache[55] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }), _createTextVNode(\"Loading activities... \")], -1 /* HOISTED */)]))) : !$setup.hasActivity ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_94, _cache[56] || (_cache[56] = [_createElementVNode(\"td\", {\n    colspan: \"3\",\n    class: \"text-center\"\n  }, \"No recent activity\", -1 /* HOISTED */)]))) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 2\n  }, _renderList($setup.recentActivities, activity => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: activity.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(activity.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(activity.details), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])]);\n}","map":{"version":3,"names":["class","type","id","key","style","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","userName","_hoisted_4","_hoisted_5","_hoisted_6","_createTextVNode","getFilterDisplay","_hoisted_7","_hoisted_8","_cache","$event","selectedYear","onChange","args","handleYearChange","_createStaticVNode","_Fragment","_renderList","availableYears","year","value","_hoisted_9","_hoisted_10","selectedSection","disabled","sections","section","_hoisted_12","_hoisted_11","_hoisted_13","selectedSubject","subjects","subject","_hoisted_15","_hoisted_14","_hoisted_16","_hoisted_17","_hoisted_18","selectedStartDate","max","today","_hoisted_19","_hoisted_20","selectedEndDate","_hoisted_21","onClick","applyFilters","loading","_hoisted_23","_hoisted_24","_hoisted_22","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","setDateRange","_normalizeClass","selectedDateRange","_hoisted_31","_hoisted_32","customStartDate","_hoisted_33","_hoisted_34","customEndDate","min","_hoisted_35","_hoisted_36","_hoisted_37","formatDateShort","currentDateRange","start","end","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","totalStudents","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","totalSections","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","totalSubjects","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","hasPerformanceData","_hoisted_57","averageScore","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","hasAttendanceData","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","hasAssessmentData","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","_hoisted_80","_hoisted_81","_hoisted_82","_hoisted_83","_hoisted_84","_hoisted_85","_hoisted_86","_hoisted_87","_hoisted_88","_hoisted_89","_hoisted_90","_hoisted_91","_hoisted_92","_hoisted_93","colspan","hasActivity","_hoisted_94","recentActivities","activity","formatDate","date","details"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Add date filter component and enable legends for all charts -->\n    <div class=\"row mb-4\">\n      <div class=\"col-12\">\n        <div class=\"date-filter-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title mb-3\">\n              <i class=\"fas fa-calendar me-2\"></i>\n              Chart Date Range\n            </h5>\n            <div class=\"d-flex flex-wrap align-items-center\">\n              <div class=\"date-filter-buttons me-3 mb-2\">\n                <button @click=\"setDateRange('1week')\" :class=\"['btn', selectedDateRange === '1week' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Last Week\n                </button>\n                <button @click=\"setDateRange('2weeks')\" :class=\"['btn', selectedDateRange === '2weeks' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Last 2 Weeks\n                </button>\n                <button @click=\"setDateRange('1month')\" :class=\"['btn', selectedDateRange === '1month' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Last Month\n                </button>\n                <button @click=\"setDateRange('custom')\" :class=\"['btn', selectedDateRange === 'custom' ? 'btn-primary' : 'btn-outline-primary']\">\n                  Custom\n                </button>\n              </div>\n              <div v-if=\"selectedDateRange === 'custom'\" class=\"date-custom-inputs d-flex flex-wrap mb-2\">\n                <div class=\"input-group me-2\" style=\"max-width: 200px;\">\n                  <span class=\"input-group-text\">From</span>\n                  <input type=\"date\" class=\"form-control\" v-model=\"customStartDate\" :max=\"today\">\n                </div>\n                <div class=\"input-group\" style=\"max-width: 200px;\">\n                  <span class=\"input-group-text\">To</span>\n                  <input type=\"date\" class=\"form-control\" v-model=\"customEndDate\" :max=\"today\" :min=\"customStartDate\">\n                </div>\n              </div>\n              <div class=\"ms-auto mb-2\">\n                <span class=\"text-muted\" v-if=\"selectedDateRange && selectedDateRange !== 'all'\">\n                  Showing data from {{ formatDateShort(currentDateRange.start) }} to {{ formatDateShort(currentDateRange.end) }}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Add date filter refs\n    const selectedDateRange = ref(localStorage.getItem('selectedDateRange') || 'all');\n    const customStartDate = ref('');\n    const customEndDate = ref('');\n    \n    // Computed property for current date range\n    const currentDateRange = computed(() => {\n      const end = moment();\n      let start = moment();\n      \n      switch (selectedDateRange.value) {\n        case '1week':\n          start = moment().subtract(1, 'weeks');\n          break;\n        case '2weeks':\n          start = moment().subtract(2, 'weeks');\n          break;\n        case '1month':\n          start = moment().subtract(1, 'month');\n          break;\n        case 'custom':\n          if (customStartDate.value && customEndDate.value) {\n            start = moment(customStartDate.value);\n            end = moment(customEndDate.value).endOf('day');\n          }\n          break;\n        case 'all':\n        default:\n          // Use all available data\n          start = moment().subtract(1, 'year');\n          break;\n      }\n      \n      return {\n        start: start.toDate(),\n        end: end.toDate(),\n        startStr: start.format('YYYY-MM-DD'),\n        endStr: end.format('YYYY-MM-DD')\n      };\n    });\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        } else {\n          console.warn('No class records found or unexpected response format');\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: currentDateRange.value.startStr,\n          endDate: currentDateRange.value.endStr\n        };\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (response.data.attendanceDistribution && Array.isArray(response.data.attendanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          try {\n            const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n              params: {\n                teacherId,\n                year: selectedYear.value,\n                section: selectedSection.value,\n                subject: selectedSubject.value,\n                startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (attendanceResponse.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = attendanceResponse.data;\n              response.data.attendanceDistribution = [\n                attendanceStats.present || 0,\n                attendanceStats.late || 0,\n                attendanceStats.absent || 0\n              ];\n              data.value = response.data;\n              updatePerformanceChart(response.data);\n            }\n          } catch (err) {\n            console.error('Error fetching attendance data:', err);\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        // For the assessment type chart, create dummy data for testing\n        // This data will be removed once the real API is working properly\n        const dummyAssessmentData = [\n          { type: 'Quiz', averageScore: 85, count: 12 },\n          { type: 'Activity', averageScore: 78, count: 8 },\n          { type: 'Performance Task', averageScore: 92, count: 5 }\n        ];\n        \n        // Debug assessmentTypes from API\n        console.log('Assessment types from API:', response.data.assessmentTypes);\n        \n        // Update assessment data for the assessment type chart\n        // Extract assessment data from the response\n        const assessmentData = [];\n        \n        // Process assessment type data from the dashboard API response\n        if (response.data.assessmentTypes) {\n          Object.keys(response.data.assessmentTypes).forEach(type => {\n            const typeData = response.data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          console.log('Processed assessment data:', assessmentData);\n          \n          if (assessmentData.length > 0) {\n            updateAssessmentTypeChart({ assessmentData });\n          } else {\n            // If API returned empty data, use dummy data for testing\n            console.log('Using dummy assessment data due to empty API response');\n            updateAssessmentTypeChart({ assessmentData: dummyAssessmentData });\n          }\n        } else {\n          // Fallback to dummy assessment types if no data provided\n          console.log('Using dummy assessment data due to missing API data');\n          updateAssessmentTypeChart({ assessmentData: dummyAssessmentData });\n        }\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          \n          // Get the count from the first matching assessment if available\n          const firstMatch = typeAssessments[0];\n          assessmentData.totalCounts[type] = firstMatch && typeof firstMatch.count === 'number' ? firstMatch.count : totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n        \n        console.log('Processed assessment chart data:', assessmentData);\n      }\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ],\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 15,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    // Set date range\n    const setDateRange = (range) => {\n      selectedDateRange.value = range;\n      localStorage.setItem('selectedDateRange', range);\n      \n      // If custom, initialize with reasonable defaults\n      if (range === 'custom' && !customStartDate.value) {\n        customStartDate.value = moment().subtract(2, 'weeks').format('YYYY-MM-DD');\n        customEndDate.value = today.value;\n      }\n      \n      // Refresh data with new date range\n      fetchDashboardData();\n    };\n    \n    // Format date for short display\n    const formatDateShort = (date) => {\n      if (!date) return '';\n      return moment(date).format('MMM D, YYYY');\n    };\n    \n    // Watch for changes to custom date range\n    watch([customStartDate, customEndDate], () => {\n      if (selectedDateRange.value === 'custom' && customStartDate.value && customEndDate.value) {\n        fetchDashboardData();\n      }\n    });\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initDummyData();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      selectedDateRange,\n      customStartDate,\n      customEndDate,\n      currentDateRange,\n      setDateRange,\n      formatDateShort\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n/* Add date filter styles */\n.date-filter-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  padding: 0.25rem;\n  transition: all 0.2s ease;\n}\n\n.date-filter-buttons .btn {\n  margin-right: 0.5rem;\n  border-radius: 20px;\n  padding: 0.4rem 1rem;\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.date-custom-inputs .input-group-text {\n  background-color: #f8f9fa;\n  font-size: 0.875rem;\n  border-radius: 8px 0 0 8px;\n}\n\n.date-custom-inputs .form-control {\n  border-radius: 0 8px 8px 0;\n  font-size: 0.875rem;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
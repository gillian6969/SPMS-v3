{"ast":null,"code":"import { createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.mySurvey.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"Bar\"], {\n    data: $setup.data,\n    options: $setup.options\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"h4\", null, \"No data available!\", -1 /* HOISTED */)])));\n}","map":{"version":3,"names":["key","$setup","mySurvey","length","_createElementBlock","_hoisted_1","_createVNode","data","options","_hoisted_2","_cache","_createElementVNode"],"sources":["D:\\au_dev\\client\\src\\components\\StudentSurveyStat.vue"],"sourcesContent":["<template>\n    <div v-if=\"mySurvey.length\">\n        <Bar :data=\"data\" :options=\"options\" />\n    </div>\n    <div  v-else>\n        <h4>No data available!</h4>\n    </div>\n</template>\n\n<script setup>\nimport axios from 'axios';\nimport {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    BarElement,\n    CategoryScale,\n    LinearScale\n} from 'chart.js'\nimport { onMounted, onUnmounted, ref } from 'vue'\nimport { Bar } from 'vue-chartjs'\n\n// Create axios instance with correct base URL\nconst api = axios.create({\n    baseURL: 'http://localhost:8081/api',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nconst props = defineProps({\n    _id: String,\n    surveyForm : Array\n})\nconst mySurvey = ref([]);\nconst data = ref({})\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)\nonUnmounted(() => {\n    mySurvey.value = [];\n    data.value = {};\n})\nonMounted(async () => {\n    const surveyResponse = await api.get(`/survey/stats`,{\n        params: {\n            _id : props._id\n        }\n    })\n    \n    mySurvey.value = surveyResponse.data;\n    data.value = {\n        labels: mySurvey.value?.map(s => s.type + ' Problem') || 'Not available',\n        datasets: [\n            {\n                label: 'Average Score Survey',\n                backgroundColor: '#f87979',\n                data: mySurvey.value?.map(s => s.average) || []\n            },\n        ]\n    }\n})\n\n\nconst options = ref({\n    //   responsive: true ,\n    //   maintainAspectRatio: false\n})\n\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;SACeC,MAAA,CAAAC,QAAQ,CAACC,MAAM,I,cAA1BC,mBAAA,CAEM,OAHVC,UAAA,GAEQC,YAAA,CAAuCL,MAAA;IAAjCM,IAAI,EAAEN,MAAA,CAAAM,IAAI;IAAGC,OAAO,EAAEP,MAAA,CAAAO;mEAEhCJ,mBAAA,CAEM,OANVK,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAKQC,mBAAA,CAA2B,YAAvB,oBAAkB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
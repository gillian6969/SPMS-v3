{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport axios from 'axios';\nexport default {\n  name: 'Login',\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const loginType = ref('user');\n    const email = ref('');\n    const password = ref('');\n    const error = ref('');\n    const isLoading = ref(false);\n    const recaptchaToken = ref('');\n    const recaptchaSiteKey = '6LcsLNkqAAAAAH5OO5HjmocsPxA_y80LzVold7rW';\n    const showPassword = ref(false);\n    onMounted(() => {\n      // Load reCAPTCHA script\n      const script = document.createElement('script');\n      script.src = 'https://www.google.com/recaptcha/api.js';\n      script.async = true;\n      script.defer = true;\n      document.head.appendChild(script);\n\n      // Initialize reCAPTCHA\n      script.onload = () => {\n        window.grecaptcha.ready(() => {\n          window.grecaptcha.render('g-recaptcha', {\n            sitekey: recaptchaSiteKey,\n            callback: token => {\n              recaptchaToken.value = token;\n            },\n            'expired-callback': () => {\n              recaptchaToken.value = '';\n            }\n          });\n        });\n      };\n    });\n    const handleLogin = async () => {\n      try {\n        if (!recaptchaToken.value) {\n          error.value = 'Please complete the reCAPTCHA verification';\n          return;\n        }\n        error.value = '';\n        isLoading.value = true;\n        const credentials = {\n          email: email.value,\n          password: password.value,\n          loginType: loginType.value,\n          recaptchaToken: recaptchaToken.value\n        };\n        console.log('Attempting login with:', {\n          email: credentials.email,\n          loginType: credentials.loginType,\n          timestamp: new Date().toISOString()\n        });\n        const response = await store.dispatch('login', credentials);\n        console.log('Login response received:', {\n          userRole: response.data.user?.role,\n          loginType: loginType.value,\n          timestamp: new Date().toISOString()\n        });\n        const user = response.data.user;\n\n        // Check login type before proceeding\n        if (loginType.value === 'citHead') {\n          if (user.role === 'teacher' || user.role === 'ssp') {\n            console.log('Access denied: Non-CIT Head using CIT Head login');\n            error.value = 'Access denied. Please use the Teacher/Student login.';\n            await store.dispatch('logout');\n            return;\n          }\n        }\n        if (loginType === 'user') {\n          if (user.role === 'citHead' || user.role === 'sspHead') {\n            console.log('Access denied: CIT Head using regular login');\n            error.value = 'Access denied. Please use the CIT Head login.';\n            await store.dispatch('logout');\n            return;\n          }\n        }\n\n        // if (loginType.value === 'citHead' && user.role !== 'citHead') {\n        //   console.log('Access denied: Non-CIT Head using CIT Head login')\n        //   error.value = 'Access denied. Please use the Teacher/Student login.'\n        //   await store.dispatch('logout')\n        //   return\n        // }\n\n        // if (loginType.value === 'user' && user.role === 'citHead') {\n        //   console.log('Access denied: CIT Head using regular login')\n        //   error.value = 'Access denied. Please use the CIT Head login.'\n        //   await store.dispatch('logout')\n        //   return\n        // }\n\n        router.push('/dashboard');\n      } catch (err) {\n        console.error('Login error:', {\n          error: err,\n          response: err.response?.data,\n          status: err.response?.status,\n          timestamp: new Date().toISOString()\n        });\n        if (err.response?.status === 403) {\n          error.value = err.response.data.message || 'Access denied. Please check your login type.';\n        } else if (err.response?.status === 400) {\n          error.value = err.response.data.message || 'Invalid credentials. Please try again.';\n        } else {\n          error.value = 'Login failed. Please try again.';\n        }\n\n        // Reset reCAPTCHA on error\n        if (window.grecaptcha) {\n          window.grecaptcha.reset();\n        }\n        recaptchaToken.value = '';\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const goToForgotPassword = () => {\n      showForgotPasswordModal.value = true;\n    };\n\n    // Forgot password state\n    const showForgotPasswordModal = ref(false);\n    const forgotPasswordStep = ref(1);\n    const forgotEmail = ref('');\n    const verificationCode = ref('');\n    const newPassword = ref('');\n    const confirmPassword = ref('');\n    const resetError = ref('');\n    const resetSuccess = ref('');\n    const isLoadingReset = ref(false);\n    const showNewPassword = ref(false);\n    const showConfirmPassword = ref(false);\n\n    // Password strength checks\n    const passwordLength = computed(() => newPassword.value.length >= 8);\n    const hasUpperCase = computed(() => /[A-Z]/.test(newPassword.value));\n    const hasLowerCase = computed(() => /[a-z]/.test(newPassword.value));\n    const hasNumber = computed(() => /[0-9]/.test(newPassword.value));\n    const hasSpecialChar = computed(() => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(newPassword.value));\n\n    // Password is strong enough to be valid\n    const isPasswordStrong = computed(() => passwordLength.value && hasUpperCase.value && hasLowerCase.value && hasNumber.value && hasSpecialChar.value);\n\n    // Send verification code\n    const sendVerificationCode = async () => {\n      if (!forgotEmail.value) {\n        resetError.value = 'Please enter your email address';\n        return;\n      }\n      try {\n        resetError.value = '';\n        resetSuccess.value = '';\n        isLoadingReset.value = true;\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/request-code', {\n          email: forgotEmail.value\n        });\n        resetSuccess.value = 'Verification code sent to your email';\n        forgotPasswordStep.value = 2;\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Failed to send verification code. Please try again.';\n      } finally {\n        isLoadingReset.value = false;\n      }\n    };\n\n    // Verify code\n    const verifyCode = async () => {\n      if (!verificationCode.value) {\n        resetError.value = 'Please enter verification code';\n        return;\n      }\n      try {\n        resetError.value = '';\n        resetSuccess.value = '';\n        isLoadingReset.value = true;\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/verify-code', {\n          email: forgotEmail.value,\n          code: verificationCode.value\n        });\n        resetSuccess.value = 'Code verified successfully';\n        forgotPasswordStep.value = 3;\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Invalid verification code. Please try again.';\n      } finally {\n        isLoadingReset.value = false;\n      }\n    };\n\n    // Reset password\n    const resetPassword = async () => {\n      if (!newPassword.value) {\n        resetError.value = 'Please enter new password';\n        return;\n      }\n      if (newPassword.value !== confirmPassword.value) {\n        resetError.value = 'Passwords do not match';\n        return;\n      }\n      if (!isPasswordStrong.value) {\n        resetError.value = 'Password does not meet the strength requirements';\n        return;\n      }\n      try {\n        resetError.value = '';\n        resetSuccess.value = '';\n        isLoadingReset.value = true;\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/reset-with-code', {\n          email: forgotEmail.value,\n          code: verificationCode.value,\n          password: newPassword.value\n        });\n        resetSuccess.value = 'Password reset successfully';\n        setTimeout(() => {\n          showForgotPasswordModal.value = false;\n          forgotPasswordStep.value = 1;\n          forgotEmail.value = '';\n          verificationCode.value = '';\n          newPassword.value = '';\n          confirmPassword.value = '';\n          resetError.value = '';\n          resetSuccess.value = '';\n        }, 2000);\n      } catch (err) {\n        resetError.value = err.response?.data?.message || 'Failed to reset password. Please try again.';\n      } finally {\n        isLoadingReset.value = false;\n      }\n    };\n    return {\n      loginType,\n      email,\n      password,\n      error,\n      isLoading,\n      handleLogin,\n      recaptchaSiteKey,\n      recaptchaToken,\n      goToForgotPassword,\n      showPassword,\n      // Forgot password\n      showForgotPasswordModal,\n      forgotPasswordStep,\n      forgotEmail,\n      verificationCode,\n      newPassword,\n      confirmPassword,\n      resetError,\n      resetSuccess,\n      isLoadingReset,\n      sendVerificationCode,\n      verifyCode,\n      resetPassword,\n      showNewPassword,\n      showConfirmPassword,\n      // Password strength\n      passwordLength,\n      hasUpperCase,\n      hasLowerCase,\n      hasNumber,\n      hasSpecialChar\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useStore","useRouter","axios","name","setup","store","router","loginType","email","password","error","isLoading","recaptchaToken","recaptchaSiteKey","showPassword","script","document","createElement","src","async","defer","head","appendChild","onload","window","grecaptcha","ready","render","sitekey","callback","token","value","expired-callback","handleLogin","credentials","console","log","timestamp","Date","toISOString","response","dispatch","userRole","data","user","role","push","err","status","message","reset","goToForgotPassword","showForgotPasswordModal","forgotPasswordStep","forgotEmail","verificationCode","newPassword","confirmPassword","resetError","resetSuccess","isLoadingReset","showNewPassword","showConfirmPassword","passwordLength","length","hasUpperCase","test","hasLowerCase","hasNumber","hasSpecialChar","isPasswordStrong","sendVerificationCode","post","verifyCode","code","resetPassword","setTimeout"],"sources":["D:\\au_dev\\client\\src\\views\\Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-card\" :data-login-type=\"loginType\">\r\n      <div class=\"left-section\">\r\n        <div class=\"content-wrapper\">\r\n          <div class=\"logo-container\">\r\n            <img src=\"@/assets/logo2.png\" alt=\"School Logo\" class=\"logo logo1\" :class=\"{ active: loginType === 'citHead' }\">\r\n            <img src=\"@/assets/logo2.png\" alt=\"School Logo\" class=\"logo logo2\" :class=\"{ active: loginType === 'user' }\">\r\n          </div>\r\n          <h1 class=\"school-name\">PHINMA ARAULLO UNIVERSITY</h1>\r\n          <p class=\"system-name\">Student Performance Monitoring System</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"right-section\" :data-login-type=\"loginType\">\r\n        <h2 class=\"form-title\">{{ loginType === 'citHead' ? 'CIT HEAD & SSP HEAD LOGIN' : 'TEACHER & SSP ADVISERS LOGIN' }}</h2>\r\n        \r\n        <!-- Login Type Selector -->\r\n        <div class=\"login-type-selector\">\r\n          <button \r\n            class=\"type-btn\" \r\n            :class=\"{'active': loginType === 'user'}\"\r\n            :data-login-type=\"loginType\"\r\n            @click=\"loginType = 'user'\"\r\n          >\r\n          TEACHER & SSP ADVISERS LOGIN\r\n          </button>\r\n          <button \r\n            class=\"type-btn\" \r\n            :class=\"{'active': loginType === 'citHead'}\"\r\n            :data-login-type=\"loginType\"\r\n            @click=\"loginType = 'citHead'\"\r\n          >\r\n           CIT Head & SSP Head LOGIN\r\n          </button>\r\n        </div>\r\n\r\n        <form @submit.prevent=\"handleLogin\" class=\"login-form\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">Username</label>\r\n            <input \r\n              type=\"text\" \r\n              class=\"form-control\" \r\n              v-model=\"email\" \r\n              placeholder=\"Enter your email here\"\r\n              required\r\n              :disabled=\"isLoading\"\r\n            >\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">Password</label>\r\n            <div class=\"password-input-container\">\r\n              <input \r\n                :type=\"showPassword ? 'text' : 'password'\" \r\n                class=\"form-control password-input\" \r\n                v-model=\"password\" \r\n                placeholder=\"Enter your password here\"\r\n                required\r\n                :disabled=\"isLoading\"\r\n              >\r\n              <button \r\n                type=\"button\" \r\n                class=\"password-toggle-btn\" \r\n                @click=\"showPassword = !showPassword\"\r\n              >\r\n                <i :class=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"mt-3 hover:cursor-pointer\" @click=\"goToForgotPassword\">\r\n              <h4>Forgot Password</h4>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- reCAPTCHA -->\r\n          <div class=\"form-group recaptcha-container\">\r\n            <div id=\"g-recaptcha\"></div>\r\n          </div>\r\n\r\n          <button type=\"submit\" class=\"btn-login\" :data-login-type=\"loginType\" :disabled=\"isLoading || !recaptchaToken\">\r\n            <span v-if=\"isLoading\" class=\"spinner\">\r\n              <i class=\"fas fa-spinner fa-spin\"></i>\r\n            </span>\r\n            <span v-else>Login</span>\r\n          </button>\r\n\r\n          <p v-if=\"error\" class=\"error-message\">{{ error }}</p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Forgot Password Modal -->\r\n  <div v-if=\"showForgotPasswordModal\" class=\"modal-overlay\">\r\n    <div class=\"modal-container\">\r\n      <div class=\"modal-header\">\r\n        <h3 class=\"text-xl font-semibold\">Reset Password</h3>\r\n        <button @click=\"showForgotPasswordModal = false\" class=\"close-btn\">&times;</button>\r\n      </div>\r\n      \r\n      <div class=\"modal-body\">\r\n        <div v-if=\"forgotPasswordStep === 1\">\r\n          <p class=\"mb-4\">Enter your email address to receive a verification code</p>\r\n          <div class=\"form-group\">\r\n            <input \r\n              type=\"email\" \r\n              v-model=\"forgotEmail\" \r\n              placeholder=\"Email Address\" \r\n              class=\"form-control bg-white text-gray-800\"\r\n              required\r\n            >\r\n          </div>\r\n          <button \r\n            @click=\"sendVerificationCode\" \r\n            class=\"btn-primary w-full\"\r\n            :disabled=\"isLoadingReset\"\r\n          >\r\n            <span v-if=\"isLoadingReset\" class=\"spinner\">\r\n              <i class=\"fas fa-spinner fa-spin\"></i>\r\n            </span>\r\n            <span v-else>Send Verification Code</span>\r\n          </button>\r\n        </div>\r\n\r\n        <div v-if=\"forgotPasswordStep === 2\">\r\n          <p class=\"mb-4\">Enter the verification code sent to your email</p>\r\n          <div class=\"form-group\">\r\n            <input \r\n              type=\"text\" \r\n              v-model=\"verificationCode\" \r\n              placeholder=\"Verification Code\" \r\n              class=\"form-control bg-white text-gray-800\"\r\n              required\r\n            >\r\n          </div>\r\n          <button \r\n            @click=\"verifyCode\" \r\n            class=\"btn-primary w-full\"\r\n            :disabled=\"isLoadingReset\"\r\n          >\r\n            <span v-if=\"isLoadingReset\" class=\"spinner\">\r\n              <i class=\"fas fa-spinner fa-spin\"></i>\r\n            </span>\r\n            <span v-else>Verify Code</span>\r\n          </button>\r\n        </div>\r\n\r\n        <div v-if=\"forgotPasswordStep === 3\">\r\n          <p class=\"mb-4\">Set your new password</p>\r\n          <div class=\"form-group\">\r\n            <div class=\"password-input-container\">\r\n              <input \r\n                :type=\"showNewPassword ? 'text' : 'password'\" \r\n                v-model=\"newPassword\" \r\n                placeholder=\"New Password\" \r\n                class=\"form-control bg-white text-gray-800 password-input\"\r\n                required\r\n              >\r\n              <button \r\n                type=\"button\" \r\n                class=\"password-toggle-btn text-navy\" \r\n                @click=\"showNewPassword = !showNewPassword\"\r\n              >\r\n                <i :class=\"showNewPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </button>\r\n            </div>\r\n            \r\n            <!-- Password strength requirements -->\r\n            <div class=\"password-requirements mt-2\">\r\n              <p class=\"text-sm mb-1\">Password must have:</p>\r\n              <ul class=\"text-xs\">\r\n                <li :class=\"{ 'requirement-met': passwordLength }\">At least 8 characters</li>\r\n                <li :class=\"{ 'requirement-met': hasUpperCase }\">At least 1 uppercase letter</li>\r\n                <li :class=\"{ 'requirement-met': hasLowerCase }\">At least 1 lowercase letter</li>\r\n                <li :class=\"{ 'requirement-met': hasNumber }\">At least 1 number</li>\r\n                <li :class=\"{ 'requirement-met': hasSpecialChar }\">At least 1 special character</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <div class=\"password-input-container\">\r\n              <input \r\n                :type=\"showConfirmPassword ? 'text' : 'password'\" \r\n                v-model=\"confirmPassword\" \r\n                placeholder=\"Confirm New Password\" \r\n                class=\"form-control bg-white text-gray-800 password-input\"\r\n                required\r\n              >\r\n              <button \r\n                type=\"button\" \r\n                class=\"password-toggle-btn text-navy\" \r\n                @click=\"showConfirmPassword = !showConfirmPassword\"\r\n              >\r\n                <i :class=\"showConfirmPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </button>\r\n            </div>\r\n            <p v-if=\"newPassword && confirmPassword && newPassword !== confirmPassword\" class=\"text-red-400 text-sm mt-1\">\r\n              Passwords do not match\r\n            </p>\r\n          </div>\r\n          <button \r\n            @click=\"resetPassword\" \r\n            class=\"btn-primary w-full\"\r\n            :disabled=\"isLoadingReset\"\r\n          >\r\n            <span v-if=\"isLoadingReset\" class=\"spinner\">\r\n              <i class=\"fas fa-spinner fa-spin\"></i>\r\n            </span>\r\n            <span v-else>Reset Password</span>\r\n          </button>\r\n        </div>\r\n\r\n        <p v-if=\"resetError\" class=\"error-message mt-4\">{{ resetError }}</p>\r\n        <p v-if=\"resetSuccess\" class=\"success-message mt-4\">{{ resetSuccess }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Login',\r\n  setup() {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n\r\n    const loginType = ref('user')\r\n    const email = ref('')\r\n    const password = ref('')\r\n    const error = ref('')\r\n    const isLoading = ref(false)\r\n    const recaptchaToken = ref('')\r\n    const recaptchaSiteKey = '6LcsLNkqAAAAAH5OO5HjmocsPxA_y80LzVold7rW'\r\n    const showPassword = ref(false)\r\n\r\n    onMounted(() => {\r\n      // Load reCAPTCHA script\r\n      const script = document.createElement('script')\r\n      script.src = 'https://www.google.com/recaptcha/api.js'\r\n      script.async = true\r\n      script.defer = true\r\n      document.head.appendChild(script)\r\n\r\n      // Initialize reCAPTCHA\r\n      script.onload = () => {\r\n        window.grecaptcha.ready(() => {\r\n          window.grecaptcha.render('g-recaptcha', {\r\n            sitekey: recaptchaSiteKey,\r\n            callback: (token) => {\r\n              recaptchaToken.value = token\r\n            },\r\n            'expired-callback': () => {\r\n              recaptchaToken.value = ''\r\n            }\r\n          })\r\n        })\r\n      }\r\n    })\r\n\r\n    const handleLogin = async () => {\r\n      try {\r\n        if (!recaptchaToken.value) {\r\n          error.value = 'Please complete the reCAPTCHA verification'\r\n          return\r\n        }\r\n\r\n        error.value = ''\r\n        isLoading.value = true\r\n\r\n        const credentials = {\r\n          email: email.value,\r\n          password: password.value,\r\n          loginType: loginType.value,\r\n          recaptchaToken: recaptchaToken.value\r\n        }\r\n\r\n        console.log('Attempting login with:', { \r\n          email: credentials.email, \r\n          loginType: credentials.loginType,\r\n          timestamp: new Date().toISOString()\r\n        })\r\n\r\n        const response = await store.dispatch('login', credentials)\r\n        console.log('Login response received:', {\r\n          userRole: response.data.user?.role,\r\n          loginType: loginType.value,\r\n          timestamp: new Date().toISOString()\r\n        })\r\n        \r\n        const user = response.data.user\r\n        \r\n        // Check login type before proceeding\r\n        if(loginType.value === 'citHead'){\r\n          if(user.role === 'teacher' || user.role === 'ssp'){\r\n            console.log('Access denied: Non-CIT Head using CIT Head login')\r\n            error.value = 'Access denied. Please use the Teacher/Student login.'\r\n            await store.dispatch('logout')\r\n            return\r\n          }\r\n        }\r\n\r\n        if(loginType === 'user'){\r\n          if(user.role === 'citHead' || user.role === 'sspHead'){\r\n            console.log('Access denied: CIT Head using regular login')\r\n            error.value = 'Access denied. Please use the CIT Head login.'\r\n            await store.dispatch('logout')\r\n            return\r\n          }\r\n        }\r\n\r\n        // if (loginType.value === 'citHead' && user.role !== 'citHead') {\r\n        //   console.log('Access denied: Non-CIT Head using CIT Head login')\r\n        //   error.value = 'Access denied. Please use the Teacher/Student login.'\r\n        //   await store.dispatch('logout')\r\n        //   return\r\n        // }\r\n        \r\n        // if (loginType.value === 'user' && user.role === 'citHead') {\r\n        //   console.log('Access denied: CIT Head using regular login')\r\n        //   error.value = 'Access denied. Please use the CIT Head login.'\r\n        //   await store.dispatch('logout')\r\n        //   return\r\n        // }\r\n\r\n        router.push('/dashboard')\r\n      } catch (err) {\r\n        console.error('Login error:', {\r\n          error: err,\r\n          response: err.response?.data,\r\n          status: err.response?.status,\r\n          timestamp: new Date().toISOString()\r\n        })\r\n        \r\n        if (err.response?.status === 403) {\r\n          error.value = err.response.data.message || 'Access denied. Please check your login type.'\r\n        } else if (err.response?.status === 400) {\r\n          error.value = err.response.data.message || 'Invalid credentials. Please try again.'\r\n        } else {\r\n          error.value = 'Login failed. Please try again.'\r\n        }\r\n\r\n        // Reset reCAPTCHA on error\r\n        if (window.grecaptcha) {\r\n          window.grecaptcha.reset()\r\n        }\r\n        recaptchaToken.value = ''\r\n      } finally {\r\n        isLoading.value = false\r\n      }\r\n    }\r\n\r\n    const goToForgotPassword = () => {\r\n      showForgotPasswordModal.value = true\r\n    }\r\n\r\n    // Forgot password state\r\n    const showForgotPasswordModal = ref(false)\r\n    const forgotPasswordStep = ref(1)\r\n    const forgotEmail = ref('')\r\n    const verificationCode = ref('')\r\n    const newPassword = ref('')\r\n    const confirmPassword = ref('')\r\n    const resetError = ref('')\r\n    const resetSuccess = ref('')\r\n    const isLoadingReset = ref(false)\r\n    const showNewPassword = ref(false)\r\n    const showConfirmPassword = ref(false)\r\n    \r\n    // Password strength checks\r\n    const passwordLength = computed(() => newPassword.value.length >= 8)\r\n    const hasUpperCase = computed(() => /[A-Z]/.test(newPassword.value))\r\n    const hasLowerCase = computed(() => /[a-z]/.test(newPassword.value))\r\n    const hasNumber = computed(() => /[0-9]/.test(newPassword.value))\r\n    const hasSpecialChar = computed(() => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(newPassword.value))\r\n    \r\n    // Password is strong enough to be valid\r\n    const isPasswordStrong = computed(() => \r\n      passwordLength.value && \r\n      hasUpperCase.value && \r\n      hasLowerCase.value && \r\n      hasNumber.value && \r\n      hasSpecialChar.value\r\n    )\r\n    \r\n    // Send verification code\r\n    const sendVerificationCode = async () => {\r\n      if (!forgotEmail.value) {\r\n        resetError.value = 'Please enter your email address'\r\n        return\r\n      }\r\n      \r\n      try {\r\n        resetError.value = ''\r\n        resetSuccess.value = ''\r\n        isLoadingReset.value = true\r\n        \r\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/request-code', {\r\n          email: forgotEmail.value\r\n        })\r\n        \r\n        resetSuccess.value = 'Verification code sent to your email'\r\n        forgotPasswordStep.value = 2\r\n      } catch (err) {\r\n        resetError.value = err.response?.data?.message || 'Failed to send verification code. Please try again.'\r\n      } finally {\r\n        isLoadingReset.value = false\r\n      }\r\n    }\r\n    \r\n    // Verify code\r\n    const verifyCode = async () => {\r\n      if (!verificationCode.value) {\r\n        resetError.value = 'Please enter verification code'\r\n        return\r\n      }\r\n      \r\n      try {\r\n        resetError.value = ''\r\n        resetSuccess.value = ''\r\n        isLoadingReset.value = true\r\n        \r\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/verify-code', {\r\n          email: forgotEmail.value,\r\n          code: verificationCode.value\r\n        })\r\n        \r\n        resetSuccess.value = 'Code verified successfully'\r\n        forgotPasswordStep.value = 3\r\n      } catch (err) {\r\n        resetError.value = err.response?.data?.message || 'Invalid verification code. Please try again.'\r\n      } finally {\r\n        isLoadingReset.value = false\r\n      }\r\n    }\r\n    \r\n    // Reset password\r\n    const resetPassword = async () => {\r\n      if (!newPassword.value) {\r\n        resetError.value = 'Please enter new password'\r\n        return\r\n      }\r\n      \r\n      if (newPassword.value !== confirmPassword.value) {\r\n        resetError.value = 'Passwords do not match'\r\n        return\r\n      }\r\n      \r\n      if (!isPasswordStrong.value) {\r\n        resetError.value = 'Password does not meet the strength requirements'\r\n        return\r\n      }\r\n      \r\n      try {\r\n        resetError.value = ''\r\n        resetSuccess.value = ''\r\n        isLoadingReset.value = true\r\n        \r\n        const response = await axios.post('http://localhost:8000/api/users/profile/password/reset-with-code', {\r\n          email: forgotEmail.value,\r\n          code: verificationCode.value,\r\n          password: newPassword.value\r\n        })\r\n        \r\n        resetSuccess.value = 'Password reset successfully'\r\n        setTimeout(() => {\r\n          showForgotPasswordModal.value = false\r\n          forgotPasswordStep.value = 1\r\n          forgotEmail.value = ''\r\n          verificationCode.value = ''\r\n          newPassword.value = ''\r\n          confirmPassword.value = ''\r\n          resetError.value = ''\r\n          resetSuccess.value = ''\r\n        }, 2000)\r\n      } catch (err) {\r\n        resetError.value = err.response?.data?.message || 'Failed to reset password. Please try again.'\r\n      } finally {\r\n        isLoadingReset.value = false\r\n      }\r\n    }\r\n\r\n    return {\r\n      loginType,\r\n      email,\r\n      password,\r\n      error,\r\n      isLoading,\r\n      handleLogin,\r\n      recaptchaSiteKey,\r\n      recaptchaToken,\r\n      goToForgotPassword,\r\n      showPassword,\r\n      // Forgot password\r\n      showForgotPasswordModal,\r\n      forgotPasswordStep,\r\n      forgotEmail,\r\n      verificationCode,\r\n      newPassword,\r\n      confirmPassword,\r\n      resetError,\r\n      resetSuccess,\r\n      isLoadingReset,\r\n      sendVerificationCode,\r\n      verifyCode,\r\n      resetPassword,\r\n      showNewPassword,\r\n      showConfirmPassword,\r\n      // Password strength\r\n      passwordLength,\r\n      hasUpperCase,\r\n      hasLowerCase,\r\n      hasNumber,\r\n      hasSpecialChar\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap');\r\n\r\n.login-container {\r\n  @apply min-h-screen w-screen flex items-stretch justify-end bg-gray-50 m-0 p-0 overflow-hidden fixed inset-0;\r\n}\r\n\r\n.login-card {\r\n  @apply w-screen h-full flex bg-white overflow-hidden m-0 p-0 relative;\r\n}\r\n\r\n.left-section {\r\n  @apply flex-1 p-8 flex flex-col items-center justify-center text-center bg-white m-0 relative transition-transform duration-500;\r\n}\r\n\r\n.content-wrapper {\r\n  @apply flex flex-col items-center justify-center gap-0 w-full text-center px-8;\r\n}\r\n\r\n.logo-container {\r\n  @apply relative w-[600px] h-[600px] mb-0 flex items-center justify-center;\r\n}\r\n\r\n.logo {\r\n  @apply absolute max-w-full max-h-full w-auto h-auto top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-opacity duration-700 opacity-0 object-contain;\r\n}\r\n\r\n.logo.active {\r\n  @apply opacity-100;\r\n}\r\n\r\n/* Logo transitions based on login type */\r\n.login-card[data-login-type=\"citHead\"] .logo-container .logo1 {\r\n  opacity: 1;\r\n}\r\n\r\n.login-card[data-login-type=\"citHead\"] .logo-container .logo2 {\r\n  opacity: 0;\r\n}\r\n\r\n.login-card[data-login-type=\"user\"] .logo-container .logo1 {\r\n  opacity: 0;\r\n}\r\n\r\n.login-card[data-login-type=\"user\"] .logo-container .logo2 {\r\n  opacity: 1;\r\n}\r\n\r\n.right-section {\r\n  @apply min-w-[500px] w-[600px] p-20 text-white flex flex-col justify-center m-0 relative transition-all duration-700;\r\n}\r\n\r\n/* Sliding animations */\r\n.login-card[data-login-type=\"citHead\"] .left-section {\r\n  transform: translateX(0);\r\n}\r\n\r\n.login-card[data-login-type=\"citHead\"] .right-section {\r\n  transform: translateX(0);\r\n  @apply bg-navy rounded-l-3xl;\r\n}\r\n\r\n.login-card[data-login-type=\"user\"] .left-section {\r\n  transform: translateX(600px);\r\n}\r\n\r\n.login-card[data-login-type=\"user\"] .right-section {\r\n  transform: translateX(calc(-100vw + 600px));\r\n  @apply bg-navy rounded-r-3xl;\r\n}\r\n\r\n.login-type-selector {\r\n  @apply flex gap-4 mb-8;\r\n}\r\n\r\n.type-btn {\r\n  @apply flex-1 py-3 px-4 border-2 border-white bg-transparent text-white rounded-lg cursor-pointer font-semibold transition-all duration-300;\r\n}\r\n\r\n.type-btn:hover:not(.active) {\r\n  @apply bg-white/10;\r\n}\r\n\r\n.type-btn.active[data-login-type=\"citHead\"],\r\n.type-btn.active[data-login-type=\"user\"] {\r\n  @apply bg-white text-navy;\r\n}\r\n\r\n.school-name {\r\n  @apply text-4xl font-bold text-navy m-0 text-center relative w-full leading-tight -mt-8;\r\n}\r\n\r\n.system-name {\r\n  @apply text-xl text-gray-800 m-0 relative w-full leading-relaxed mt-2;\r\n}\r\n\r\n.login-form {\r\n  @apply w-full;\r\n}\r\n\r\n.form-title {\r\n  @apply text-5xl font-semibold mb-8 text-white text-start -mt-16;\r\n}\r\n\r\n.form-group {\r\n  @apply mb-6;\r\n}\r\n\r\n.form-label {\r\n  @apply block mb-2 text-white text-base font-medium;\r\n}\r\n\r\n.form-control {\r\n  @apply w-full py-3 px-4 border border-white/20 rounded-lg bg-transparent text-white text-base transition-all duration-300;\r\n}\r\n\r\n.form-control::placeholder {\r\n  @apply text-white/70;\r\n}\r\n\r\n.form-control:focus {\r\n  @apply outline-none border-white ring-2 ring-white/10;\r\n}\r\n\r\n.btn-login {\r\n  @apply bg-white text-navy py-3 px-4 rounded-lg w-3/5 uppercase font-bold mt-8 border-none cursor-pointer transition-colors duration-200 block mx-auto;\r\n}\r\n\r\n.btn-login:hover {\r\n  @apply bg-gray-100;\r\n}\r\n\r\n.error-message {\r\n  @apply text-red-400 mt-4 text-center;\r\n}\r\n\r\n.spinner {\r\n  @apply inline-block mr-2;\r\n}\r\n\r\n.btn-login:disabled {\r\n  @apply opacity-70 cursor-not-allowed;\r\n}\r\n\r\n.form-control:disabled {\r\n  @apply bg-white/10 cursor-not-allowed;\r\n}\r\n\r\n.recaptcha-container {\r\n  @apply flex justify-center mt-8;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .login-card {\r\n    @apply flex-col max-w-[400px];\r\n  }\r\n\r\n  .right-section {\r\n    @apply w-full p-8;\r\n  }\r\n\r\n  .left-section {\r\n    @apply p-8;\r\n  }\r\n\r\n  .logo-container {\r\n    @apply w-[300px] h-[300px];\r\n  }\r\n\r\n  .school-name {\r\n    @apply text-2xl;\r\n  }\r\n\r\n  .system-name {\r\n    @apply text-lg;\r\n  }\r\n\r\n  .form-title {\r\n    @apply text-3xl mb-6 -mt-10;\r\n  }\r\n\r\n  .login-type-selector {\r\n    @apply mb-6;\r\n  }\r\n\r\n  .form-group {\r\n    @apply mb-5;\r\n  }\r\n\r\n  .btn-login {\r\n    @apply w-full mt-6;\r\n  }\r\n}\r\n\r\n/* Modal Styles */\r\n.modal-overlay {\r\n  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;\r\n}\r\n\r\n.modal-container {\r\n  @apply bg-navy w-full max-w-md mx-auto rounded-lg shadow-xl overflow-hidden;\r\n}\r\n\r\n.modal-header {\r\n  @apply flex justify-between items-center p-4 bg-navy border-b border-white/20 text-white;\r\n}\r\n\r\n.close-btn {\r\n  @apply text-white text-2xl font-bold hover:text-gray-300 focus:outline-none;\r\n}\r\n\r\n.modal-body {\r\n  @apply p-6 text-white;\r\n}\r\n\r\n.btn-primary {\r\n  @apply bg-white text-navy py-3 px-4 rounded-lg font-bold border-none cursor-pointer transition-colors duration-200 text-center;\r\n}\r\n\r\n.btn-primary:hover {\r\n  @apply bg-gray-100;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  @apply opacity-70 cursor-not-allowed;\r\n}\r\n\r\n.success-message {\r\n  @apply text-green-400 text-center;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
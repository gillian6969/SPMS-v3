{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\",\n  ref: \"dashboardContainer\"\n};\nconst _hoisted_2 = {\n  class: \"greeting-section mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"greeting\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"dropdown\"\n};\nconst _hoisted_6 = {\n  class: \"btn btn-filter dropdown-toggle\",\n  type: \"button\",\n  id: \"filterDropdown\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_7 = {\n  class: \"dropdown-menu filter-menu p-3\",\n  \"aria-labelledby\": \"filterDropdown\"\n};\nconst _hoisted_8 = {\n  class: \"mb-3\"\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  class: \"mb-3\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  class: \"mb-3\"\n};\nconst _hoisted_14 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_15 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_16 = [\"max\"];\nconst _hoisted_17 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_18 = [\"max\"];\nconst _hoisted_19 = {\n  class: \"d-flex justify-content-between\"\n};\nconst _hoisted_20 = {\n  key: 0,\n  class: \"last-update-badge\"\n};\nconst _hoisted_21 = {\n  class: \"row g-4 mb-4\"\n};\nconst _hoisted_22 = {\n  class: \"col-md-4\"\n};\nconst _hoisted_23 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_24 = {\n  class: \"card-info\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_26 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_27 = {\n  class: \"col-md-4\"\n};\nconst _hoisted_28 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_29 = {\n  class: \"card-info\"\n};\nconst _hoisted_30 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_31 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_32 = {\n  class: \"col-md-4\"\n};\nconst _hoisted_33 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_34 = {\n  class: \"card-info\"\n};\nconst _hoisted_35 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_36 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_37 = {\n  class: \"row g-4 mb-4\"\n};\nconst _hoisted_38 = {\n  key: 0,\n  class: \"col-md-6\"\n};\nconst _hoisted_39 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_40 = {\n  class: \"card-info\"\n};\nconst _hoisted_41 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_42 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_43 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_44 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_45 = {\n  class: \"dashboard-card\"\n};\nconst _hoisted_46 = {\n  class: \"card-info\"\n};\nconst _hoisted_47 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_48 = {\n  key: 1,\n  class: \"stat-value loading\"\n};\nconst _hoisted_49 = {\n  key: 2,\n  class: \"no-data\"\n};\nconst _hoisted_50 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_51 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_52 = {\n  class: \"chart-card\"\n};\nconst _hoisted_53 = {\n  class: \"card-body\"\n};\nconst _hoisted_54 = {\n  class: \"chart-container\"\n};\nconst _hoisted_55 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_56 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_57 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_58 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_59 = {\n  class: \"chart-card\"\n};\nconst _hoisted_60 = {\n  class: \"card-body\"\n};\nconst _hoisted_61 = {\n  class: \"chart-container\"\n};\nconst _hoisted_62 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_63 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_64 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_65 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_66 = {\n  class: \"chart-card\"\n};\nconst _hoisted_67 = {\n  class: \"card-body\"\n};\nconst _hoisted_68 = {\n  class: \"chart-container\"\n};\nconst _hoisted_69 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_70 = {\n  ref: \"performanceTrendChart\"\n};\nconst _hoisted_71 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_72 = {\n  class: \"col-md-6 mb-4\"\n};\nconst _hoisted_73 = {\n  class: \"chart-card\"\n};\nconst _hoisted_74 = {\n  class: \"card-body\"\n};\nconst _hoisted_75 = {\n  class: \"chart-container\"\n};\nconst _hoisted_76 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_77 = {\n  ref: \"assessmentTypePerformanceChart\"\n};\nconst _hoisted_78 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Greeting Section \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h2\", _hoisted_3, \"Welcome, Dean \" + _toDisplayString($setup.userName), 1 /* TEXT */), _cache[9] || (_cache[9] = _createElementVNode(\"p\", {\n    class: \"greeting-subtitle\"\n  }, \"Computer and Information Technology Department Dashboard\", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" Combined Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", _hoisted_6, [_cache[10] || (_cache[10] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.getFilterDisplay()), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[18] || (_cache[18] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Academic Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, [_cache[11] || (_cache[11] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Years\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_10, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select mb-2\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedSection = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $setup.handleSectionChange && $setup.handleSectionChange(...args)),\n    disabled: !$setup.selectedYear\n  }, [_cache[13] || (_cache[13] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section.id,\n      value: section.name\n    }, _toDisplayString(section.name) + _toDisplayString(section.teacherName ? ` - ${section.teacherName}` : ''), 9 /* TEXT, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_11), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_13, [_cache[17] || (_cache[17] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"From\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedStartDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_16), [[_vModelText, $setup.selectedStartDate]])]), _createElementVNode(\"div\", _hoisted_17, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    class: \"small text-muted\"\n  }, \"To\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control form-control-sm\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.selectedEndDate = $event),\n    max: $setup.today\n  }, null, 8 /* PROPS */, _hoisted_18), [[_vModelText, $setup.selectedEndDate]])])])]), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.clearFilters && $setup.clearFilters(...args))\n  }, \"Clear Filters\"), _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.refreshDashboard && $setup.refreshDashboard(...args))\n  }, \"Apply\")])])]), _createCommentVNode(\" Last Updated \"), $setup.lastUpdate ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createTextVNode(\" Last updated: \" + _toDisplayString($setup.formatDate($setup.lastUpdate)) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"btn btn-refresh ms-2\",\n    onClick: _cache[8] || (_cache[8] = (...args) => $setup.refreshDashboard && $setup.refreshDashboard(...args)),\n    title: \"Refresh Dashboard\"\n  }, _cache[19] || (_cache[19] = [_createElementVNode(\"i\", {\n    class: \"fas fa-sync-alt\"\n  }, null, -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Stats Cards \"), _createElementVNode(\"div\", _hoisted_21, [_createCommentVNode(\" Total Students Card \"), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_cache[22] || (_cache[22] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_24, [_cache[21] || (_cache[21] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Students\", -1 /* HOISTED */)), !$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, _toDisplayString($setup.totalStudents), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_26, _cache[20] || (_cache[20] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Total Teachers Card \"), _createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_cache[25] || (_cache[25] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard-teacher\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_29, [_cache[24] || (_cache[24] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Total Teachers\", -1 /* HOISTED */)), !$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, _toDisplayString($setup.totalTeachers), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_31, _cache[23] || (_cache[23] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])]), _createCommentVNode(\" Active Sections Card \"), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"div\", _hoisted_33, [_cache[28] || (_cache[28] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-users\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_34, [_cache[27] || (_cache[27] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Active Sections\", -1 /* HOISTED */)), !$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_35, _toDisplayString($setup.activeSections), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_36, _cache[26] || (_cache[26] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)])))])])])]), _createCommentVNode(\" Performance Stats \"), _createElementVNode(\"div\", _hoisted_37, [_createCommentVNode(\" Average Attendance Card \"), $setup.isCITHead ? (_openBlock(), _createElementBlock(\"div\", _hoisted_38, [_createElementVNode(\"div\", _hoisted_39, [_cache[31] || (_cache[31] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clock\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_40, [_cache[30] || (_cache[30] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Average Attendance\", -1 /* HOISTED */)), !$setup.isLoading && $setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_41, _toDisplayString($setup.averageAttendance) + \"%\", 1 /* TEXT */)) : $setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_42, _cache[29] || (_cache[29] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_43, \"No data available\"))])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Average Score Card \"), _createElementVNode(\"div\", _hoisted_44, [_createElementVNode(\"div\", _hoisted_45, [_cache[34] || (_cache[34] = _createElementVNode(\"div\", {\n    class: \"icon-container\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_46, [_cache[33] || (_cache[33] = _createElementVNode(\"h3\", {\n    class: \"stat-title\"\n  }, \"Average Score\", -1 /* HOISTED */)), !$setup.isLoading && $setup.hasScoreData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_47, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : $setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_48, _cache[32] || (_cache[32] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_49, \"No data available\"))])])])]), _createCommentVNode(\" Charts Row \"), _createElementVNode(\"div\", _hoisted_50, [_createCommentVNode(\" Attendance Distribution Chart \"), _createElementVNode(\"div\", _hoisted_51, [_createElementVNode(\"div\", _hoisted_52, [_createElementVNode(\"div\", _hoisted_53, [_cache[36] || (_cache[36] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-check me-2\"\n  }), _createTextVNode(\" Attendance Distribution \")], -1 /* HOISTED */)), _cache[37] || (_cache[37] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Breakdown of student attendance patterns across the department\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_54, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_55, _cache[35] || (_cache[35] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_56, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_57, \"No attendance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Assessment Type Distribution \"), _createElementVNode(\"div\", _hoisted_58, [_createElementVNode(\"div\", _hoisted_59, [_createElementVNode(\"div\", _hoisted_60, [_cache[39] || (_cache[39] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-tasks me-2\"\n  }), _createTextVNode(\" Assessment Performance Analysis \")], -1 /* HOISTED */)), _cache[40] || (_cache[40] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Average scores by assessment type across the department\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_61, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_62, _cache[38] || (_cache[38] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_63, null, 512 /* NEED_PATCH */), !$setup.hasAssessmentData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_64, \"No assessment data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Performance Trend Chart \"), _createElementVNode(\"div\", _hoisted_65, [_createElementVNode(\"div\", _hoisted_66, [_createElementVNode(\"div\", _hoisted_67, [_cache[42] || (_cache[42] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Performance Trends Over Time \")], -1 /* HOISTED */)), _cache[43] || (_cache[43] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Department average scores across recent assessments\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_68, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_69, _cache[41] || (_cache[41] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_70, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_71, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Section Performance \"), _createElementVNode(\"div\", _hoisted_72, [_createElementVNode(\"div\", _hoisted_73, [_createElementVNode(\"div\", _hoisted_74, [_cache[45] || (_cache[45] = _createElementVNode(\"h5\", {\n    class: \"card-title\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-graduation-cap me-2\"\n  }), _createTextVNode(\" Performance by Assessment Type \")], -1 /* HOISTED */)), _cache[46] || (_cache[46] = _createElementVNode(\"p\", {\n    class: \"chart-description\"\n  }, \"Visualizes how students perform across different assessment types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_75, [$setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_76, _cache[44] || (_cache[44] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Loading chart data...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"canvas\", _hoisted_77, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData && !$setup.isLoading ? (_openBlock(), _createElementBlock(\"p\", _hoisted_78, \"No performance data available\")) : _createCommentVNode(\"v-if\", true)])])])])])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","type","id","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","userName","_hoisted_4","_hoisted_5","_hoisted_6","_createTextVNode","getFilterDisplay","_hoisted_7","_hoisted_8","_cache","$event","selectedYear","onChange","args","handleYearChange","value","_Fragment","_renderList","availableYears","year","_hoisted_9","_hoisted_10","selectedSection","handleSectionChange","disabled","sections","section","name","teacherName","_hoisted_12","_hoisted_11","_hoisted_13","_hoisted_14","_hoisted_15","selectedStartDate","max","today","_hoisted_16","_hoisted_17","selectedEndDate","_hoisted_18","_hoisted_19","onClick","clearFilters","refreshDashboard","lastUpdate","_hoisted_20","formatDate","title","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","isLoading","_hoisted_25","totalStudents","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","totalTeachers","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","activeSections","_hoisted_36","_hoisted_37","isCITHead","_hoisted_38","_hoisted_39","_hoisted_40","hasAttendanceData","_hoisted_41","averageAttendance","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","hasScoreData","_hoisted_47","averageScore","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","hasAssessmentData","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","hasPerformanceData","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, Dean {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Computer and Information Technology Department Dashboard</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n          </select>\n        </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" @change=\"handleSectionChange\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section.id\" :value=\"section.name\">\n                {{ section.name }}{{ section.teacherName ? ` - ${section.teacherName}` : '' }}\n              </option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"d-flex justify-content-between\">\n            <button class=\"btn btn-outline-secondary\" @click=\"clearFilters\">Clear Filters</button>\n            <button class=\"btn btn-primary\" @click=\"refreshDashboard\">Apply</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Last Updated -->\n      <div class=\"last-update-badge\" v-if=\"lastUpdate\">\n        Last updated: {{ formatDate(lastUpdate) }}\n        <button class=\"btn btn-refresh ms-2\" @click=\"refreshDashboard\" title=\"Refresh Dashboard\">\n          <i class=\"fas fa-sync-alt\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-user-graduate\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n        </div>\n      </div>\n      </div>\n\n      <!-- Total Teachers Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-chalkboard-teacher\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Teachers</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalTeachers }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n        </div>\n      </div>\n        </div>\n\n      <!-- Active Sections Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-users\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ activeSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Performance Stats -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Average Attendance Card -->\n      <div v-if=\"isCITHead\" class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-clock\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasAttendanceData\">{{ averageAttendance }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n        </div>\n      </div>\n      </div>\n      \n      <!-- Average Score Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-chart-line\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Score</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasScoreData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart -->\n      <div class=\"col-md-6 mb-4\">\n      <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns across the department</p>\n        <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n          <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !isLoading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n      <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type across the department</p>\n        <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n          <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !isLoading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n        </div>\n      </div>\n    </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Department average scores across recent assessments</p>\n      <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n      </div>\n    </div>\n\n    <!-- Section Performance -->\n      <div class=\"col-md-6 mb-4\">\n    <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n      <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n        <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\n\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n    const selectedYear = ref('')\n    const selectedSection = ref('')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const dashboardContainer = ref(null)\n    const isLoading = ref(false)\n    const lastUpdate = ref(null)\n    const autoRefreshInterval = ref(null)\n    const sections = ref([])\n    const subjects = ref([])\n    const availableYears = ref([])\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead)\n    const token = computed(() => store.state.auth.token)\n    \n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n    \n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, (newToken) => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, { immediate: true });\n\n    // Dashboard stats\n    const totalStudents = ref(0)\n    const totalTeachers = ref(0)\n    const averageAttendance = ref(0)\n    const averageScore = ref(0)\n    const activeSections = ref(0)\n    const data = ref(null)\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasScoreData = computed(() => {\n      if (!data.value) return false;\n      \n      // Check for average score\n      if (data.value.averageScore > 0) return true;\n      \n      // Check assessment types for any with scores\n      if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n        return data.value.assessmentTypes.some(type => (type.averageScore > 0 && type.count > 0));\n      }\n      \n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      if (!data.value) return false;\n      \n      // Check for assessment data\n      if (hasAssessmentData.value) return true;\n      \n      // Check for performance trends\n      if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n        return data.value.performanceTrends.some(trend => trend.averageScore > 0);\n      }\n      \n      // Check sections data\n      if (Array.isArray(data.value.sections) && data.value.sections.length > 0) {\n        return data.value.sections.some(section => section.averageScore > 0);\n      }\n      \n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (!data.value) return false;\n      \n      // Check for assessment types data\n      if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n        return data.value.assessmentTypes.some(type => type.count > 0 && type.averageScore > 0);\n      }\n      \n      return false;\n    });\n\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch available years and sections directly from database records\n    const fetchAvailableFilters = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Get all student records to extract years and sections\n        const response = await api.get('/students', {\n          headers: { 'Authorization': `Bearer ${token.value}` }\n        });\n        \n        if (response.data && Array.isArray(response.data)) {\n          // Extract unique years and sections from student records\n          const students = response.data;\n          \n          // Get unique years with data\n          const years = [...new Set(students.map(student => student.year))].filter(Boolean);\n          availableYears.value = years.length > 0 ? years.sort() : ['1st', '2nd', '3rd', '4th'];\n          \n          // Get unique sections based on selectedYear\n          await updateSectionsForSelectedYear();\n          \n          console.log('Fetched available filters:', {\n            years: availableYears.value,\n            sections: sections.value\n          });\n        }\n        \n        isLoading.value = false;\n      } catch (error) {\n        console.error('Error fetching available filters:', error);\n        // Keep default years if API fails\n        availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        isLoading.value = false;\n      }\n    };\n\n    // New function to update sections based on selected year\n    const updateSectionsForSelectedYear = async () => {\n      try {\n        console.log('Updating sections for year:', selectedYear.value || 'All Years');\n        sections.value = []; // Clear existing sections first\n        \n        const params = {};\n        if (selectedYear.value) {\n          params.year = selectedYear.value;\n        }\n        \n        // Get students filtered by year if selected\n        const response = await api.get('/students', {\n          params,\n          headers: { 'Authorization': `Bearer ${token.value}` }\n        });\n        \n        if (response.data && Array.isArray(response.data)) {\n          const students = response.data;\n          \n          // Get unique sections matching the selected year\n          let uniqueSections = [];\n          \n          if (selectedYear.value) {\n            // Filter students by the selected year before extracting sections\n            uniqueSections = [...new Set(\n              students\n                .filter(student => student.year === selectedYear.value)\n                .map(student => student.section)\n            )].filter(Boolean);\n          } else {\n            // If no year selected, get all unique sections\n            uniqueSections = [...new Set(\n              students.map(student => student.section)\n            )].filter(Boolean);\n          }\n          \n          console.log(`Found ${uniqueSections.length} sections for ${selectedYear.value || 'all years'}:`, uniqueSections);\n          \n          // Map sections to include teacher info if available\n          sections.value = uniqueSections.map(sectionName => ({\n            id: sectionName,\n            name: sectionName,\n            teacherName: '' // We could fetch teacher info in the future\n          }));\n        } else {\n          console.warn('No student data received when updating sections');\n          sections.value = [];\n        }\n      } catch (error) {\n        console.error('Error updating sections for year:', error);\n        sections.value = [];\n      }\n    };\n\n    // Get attendance data for the charts\n    const fetchAttendanceData = async () => {\n      try {\n        console.log('Fetching attendance with filters:', {\n          year: selectedYear.value || 'All Years',\n          section: selectedSection.value || 'All Sections'\n        });\n        \n        // Create an array to store all attendance records\n        let allAttendanceRecords = [];\n        \n        // Try a direct approach to the dashboard stats endpoint first\n        try {\n          console.log('Trying dashboard stats endpoint directly');\n          const statsParams = {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n            endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n          };\n          \n          const statsResponse = await api.get('/dashboard/stats', { params: statsParams });\n          if (statsResponse.data && statsResponse.data.attendanceDistribution && \n              statsResponse.data.attendanceDistribution.some(val => val > 0)) {\n            console.log('Got attendance from dashboard stats:', statsResponse.data.attendanceDistribution);\n            return statsResponse.data.attendanceDistribution;\n          }\n        } catch (error) {\n          console.log('Dashboard stats did not include attendance data');\n        }\n        \n        // Second approach: Try getting attendance from individual dates but with proper year/section filtering\n        try {\n          console.log('Trying to get attendance from recent dates with proper filtering');\n          // Query recent dates (last 7 days)\n          const datePromises = [];\n          const dates = [];\n          \n          // Generate 7 recent dates\n          for (let i = 0; i < 7; i++) {\n            dates.push(moment().subtract(i, 'days').format('YYYY-MM-DD'));\n          }\n          \n          if (selectedYear.value && selectedSection.value) {\n            // If both year and section are selected, query directly\n            for (const date of dates) {\n              datePromises.push(\n                api.get(`/attendance/date/${date}`, { \n                  params: {\n                    year: selectedYear.value,\n                    section: selectedSection.value\n                  }\n                })\n              );\n            }\n          } else if (selectedYear.value) {\n            // If only year is selected, get all sections for that year and query each one\n            const response = await api.get('/students', { \n              params: { year: selectedYear.value } \n            });\n            \n            let sections = [];\n            if (response.data && Array.isArray(response.data)) {\n              sections = [...new Set(response.data\n                .filter(student => student.year === selectedYear.value)\n                .map(student => student.section)\n              )].filter(Boolean);\n            }\n            \n            // If no sections found, query with just the year\n            if (sections.length === 0) {\n              for (const date of dates) {\n                datePromises.push(\n                  api.get(`/attendance/date/${date}`, { \n                    params: { year: selectedYear.value }\n                  })\n                );\n              }\n            } else {\n              // Query each section for each date\n              for (const date of dates) {\n                for (const section of sections) {\n                  datePromises.push(\n                    api.get(`/attendance/date/${date}`, { \n                      params: {\n                        year: selectedYear.value,\n                        section\n                      }\n                    })\n                  );\n                }\n              }\n            }\n          } else {\n            // If no year selected, get attendance for all years and sections\n            // First get all academic years\n            const years = ['1st', '2nd', '3rd', '4th'];\n            \n            // Query a few dates for each year\n            for (const date of dates) {\n              for (const year of years) {\n                datePromises.push(\n                  api.get(`/attendance/date/${date}`, { \n                    params: { year }\n                  })\n                );\n              }\n            }\n          }\n          \n          // Execute all date queries\n          const dateResults = await Promise.allSettled(datePromises);\n          \n          // Process successful responses\n          dateResults.forEach(result => {\n            if (result.status === 'fulfilled' && result.value?.data && Array.isArray(result.value.data)) {\n              // Filter records by year if needed\n              const records = result.value.data;\n              if (selectedYear.value) {\n                const filteredRecords = records.filter(record => {\n                  // Check if the record matches our year filter\n                  return record.year === selectedYear.value || \n                         (record.students_data && record.students_data[0]?.year === selectedYear.value);\n                });\n                allAttendanceRecords = [...allAttendanceRecords, ...filteredRecords];\n              } else {\n                allAttendanceRecords = [...allAttendanceRecords, ...records];\n              }\n            }\n          });\n          \n          console.log(`Collected ${allAttendanceRecords.length} attendance records from recent dates`);\n        } catch (error) {\n          console.log('Error fetching attendance by date:', error.message);\n        }\n        \n        // Process collected attendance records\n        if (allAttendanceRecords.length > 0) {\n          // Process all attendance records\n          const attendanceCounts = [0, 0, 0]; // [present, late, absent]\n          \n          allAttendanceRecords.forEach(record => {\n            if (record.status === 'present') attendanceCounts[0]++;\n            else if (record.status === 'late') attendanceCounts[1]++;\n            else if (record.status === 'absent') attendanceCounts[2]++;\n          });\n          \n          console.log('Final attendance counts for filtered data:', attendanceCounts);\n          return attendanceCounts;\n        }\n        \n        // Third approach: Try the backend route for all attendance\n        try {\n          console.log('Attempting to use attendance stats endpoint');\n          \n          // Build query based on what's selected\n          const params = {\n            year: selectedYear.value\n          };\n          \n          if (selectedSection.value) {\n            params.section = selectedSection.value;\n          }\n          \n          // Try stats endpoint first\n          try {\n            const statsResponse = await api.get('/dashboard/stats', { params });\n            if (statsResponse.data && statsResponse.data.attendanceDistribution && \n                statsResponse.data.attendanceDistribution.some(val => val > 0)) {\n              console.log('Got attendance distribution from stats:', statsResponse.data.attendanceDistribution);\n              return statsResponse.data.attendanceDistribution;\n            }\n          } catch (error) {\n            console.log('Stats endpoint failed:', error.message);\n          }\n        } catch (error) {\n          console.log('Failed to get attendance stats:', error.message);\n        }\n        \n        // If all approaches failed, return empty data\n        console.log('No attendance data found, using empty data');\n        return [0, 0, 0];\n      } catch (error) {\n        console.error('Error in attendance data fetching:', error);\n        return [0, 0, 0]; // Return empty data on error\n      }\n    };\n\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Prepare query parameters\n        const params = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        };\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // First, fetch attendance data\n        const attendanceDistribution = await fetchAttendanceData();\n        console.log('Attendance distribution for current filters:', attendanceDistribution);\n        \n        // Get dashboard stats - ensure we're using the same filters\n        const statsResponse = await api.get('/dashboard/stats', { params });\n        \n        data.value = statsResponse.data || {};\n        console.log('Dashboard stats response:', data.value);\n        \n        // Check if we received any meaningful data\n        const hasValidData = \n          (data.value.totalStudents > 0) || \n          (data.value.totalTeachers > 0) || \n          (data.value.activeSections > 0) || \n          (data.value.performanceTrends && data.value.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update basic stats\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n        \n        // Use our fetched attendance data\n        data.value.attendanceDistribution = attendanceDistribution;\n        \n        // Calculate average attendance from distribution\n        const totalAttendance = attendanceDistribution.reduce((a, b) => a + b, 0);\n        if (totalAttendance > 0) {\n          // Calculate percentage of present and late (not absent)\n          const presentAttendance = attendanceDistribution[0] + attendanceDistribution[1];\n          averageAttendance.value = Math.round((presentAttendance / totalAttendance) * 100);\n        } else {\n          averageAttendance.value = 0;\n        }\n        \n        // Process assessment data for charts\n        await fetchAssessmentData();\n        \n        // Calculate averageScore from assessment data instead of using stats\n        if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n          let totalScore = 0;\n          let totalCount = 0;\n          \n          data.value.assessmentTypes.forEach(type => {\n            if (type.averageScore > 0 && type.count > 0) {\n              totalScore += type.averageScore * type.count;\n              totalCount += type.count;\n            }\n          });\n          \n          if (totalCount > 0) {\n            averageScore.value = Math.round(totalScore / totalCount);\n            data.value.averageScore = averageScore.value;\n          } else {\n            averageScore.value = 0;\n            data.value.averageScore = 0;\n          }\n          \n          console.log(`Calculated average score: ${averageScore.value}% from ${totalCount} assessments`);\n        } else {\n          averageScore.value = 0;\n          data.value.averageScore = 0;\n        }\n\n        // Update charts with new data\n        updateCharts(data.value);\n        \n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        \n        // Initialize with empty data if main stats request fails\n        data.value = {\n          totalStudents: 0,\n          totalTeachers: 0,\n          activeSections: 0,\n          attendanceDistribution: [0, 0, 0],\n          averageAttendance: 0,\n          assessmentTypes: [],\n          performanceTrends: [],\n          averageScore: 0,\n          sections: []\n        };\n        \n        totalStudents.value = 0;\n        totalTeachers.value = 0;\n        activeSections.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n        \n        // Update charts with empty data\n        updateCharts(data.value);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    \n    // Fetch assessment data directly\n    const fetchAssessmentData = async () => {\n      try {\n        // Set date range for better data filtering\n        const assessmentParams = {\n          startDate: selectedStartDate.value || moment().subtract(90, 'days').format('YYYY-MM-DD'),\n          endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n        };\n        \n        // Only add year and section filters if they are specifically selected\n        if (selectedYear.value) {\n          assessmentParams.year = selectedYear.value;\n        }\n        \n        if (selectedSection.value) {\n          assessmentParams.section = selectedSection.value;\n        }\n        \n        console.log('Fetching assessment data with params:', assessmentParams);\n        \n        // Directly fetch assessment data with filters\n        const assessmentResponse = await api.get('/assessments', {\n          params: assessmentParams\n        });\n        \n        console.log('Fetched assessment data count:', assessmentResponse.data?.length || 0);\n        \n        if (assessmentResponse.data && Array.isArray(assessmentResponse.data)) {\n          let assessments = assessmentResponse.data;\n          \n          // Apply manual filtering if endpoint doesn't honor filters\n          if (selectedYear.value) {\n            console.log(`Manually filtering assessments by year: ${selectedYear.value}`);\n            assessments = assessments.filter(assessment => {\n              // Check various ways year might be stored\n              return (assessment.year === selectedYear.value) || \n                     (assessment.students && assessment.students[0]?.year === selectedYear.value) ||\n                     (assessment.yearLevel === selectedYear.value) || \n                     (assessment.yearLevel && assessment.yearLevel.toString() === selectedYear.value);\n            });\n          }\n          \n          if (selectedSection.value) {\n            console.log(`Manually filtering assessments by section: ${selectedSection.value}`);\n            assessments = assessments.filter(assessment => {\n              // Check if section data is present in different ways\n              return (assessment.section === selectedSection.value) || \n                     (assessment.students && assessment.students[0]?.section === selectedSection.value) ||\n                     (assessment.sectionName === selectedSection.value);\n            });\n          }\n          \n          console.log(`After manual filtering: ${assessments.length} assessments match criteria`);\n          \n          // Group assessments by type\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scores: [] },\n            'Activity': { count: 0, totalScore: 0, scores: [] },\n            'Performance Task': { count: 0, totalScore: 0, scores: [] }\n          };\n          \n          // Process each assessment\n          assessments.forEach(assessment => {\n            // Make sure we have a type - default to \"Other\" if none found\n            const type = assessment.type || assessment.assessmentType || assessment.assessment_type || 'Other';\n            \n            // Initialize type if it doesn't exist\n            if (!assessmentTypes[type]) {\n              assessmentTypes[type] = { count: 0, totalScore: 0, scores: [] };\n            }\n            \n            // Increment count for this type\n            assessmentTypes[type].count++;\n            \n            // Process scores if available\n            if (assessment.scores) {\n              // Handle both array and Map formats\n              let scoreArray = [];\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (assessment.scores instanceof Map) {\n                scoreArray = Array.from(assessment.scores.values());\n              } else if (typeof assessment.scores === 'object') {\n                // Handle object format\n                scoreArray = Object.values(assessment.scores);\n              }\n              \n              // Filter for valid scores and calculate percentages\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              validScores.forEach(score => {\n                const percentage = assessment.maxScore ? (score / assessment.maxScore) * 100 : score;\n                assessmentTypes[type].totalScore += percentage;\n                assessmentTypes[type].scores.push(percentage);\n              });\n            }\n          });\n          \n          // Calculate averages and prepare for chart\n          data.value.assessmentTypes = Object.keys(assessmentTypes)\n            .filter(type => assessmentTypes[type].count > 0) // Only include types with data\n            .map(type => {\n              const typeData = assessmentTypes[type];\n              const averageScore = typeData.scores.length > 0 \n                ? typeData.totalScore / typeData.scores.length \n                : 0;\n                \n              return {\n                type,\n                averageScore: Math.round(averageScore),\n                count: typeData.count,\n                completionRate: typeData.count > 0 ? 100 : 0\n              };\n            });\n          \n          console.log(`Assessment types with data:`, \n            data.value.assessmentTypes.map(t => `${t.type}: ${t.count} assessments, avg ${t.averageScore}%`));\n          \n          // Generate performance trends from assessment data\n          data.value.performanceTrends = assessments\n            .filter(a => a.date || a.assessmentDate || a.assessment_date) // Only include assessments with dates\n            .map(assessment => {\n              // Get the date - check various possible field names\n              const date = assessment.date || assessment.assessmentDate || assessment.assessment_date;\n              \n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              // Handle different score formats\n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                // Calculate average from valid scores\n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = assessment.maxScore \n                    ? (totalScore / validScores.length / assessment.maxScore) * 100\n                    : totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: date,\n                title: assessment.name || assessment.title || assessment.type || 'Assessment',\n                averageScore: Math.round(averageScore),\n                type: assessment.type || assessment.assessmentType || 'Assessment'\n              };\n            })\n            .filter(trend => trend.date && trend.averageScore > 0) // Only keep trends with dates and scores\n            .sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort by date\n          \n          console.log(`Performance trends: ${data.value.performanceTrends.length} data points with dates and scores`);\n          \n          // Process section data if available\n          // Group assessments by section\n          const sectionPerformance = {};\n          \n          // Only process section performance if we actually have data\n          if (assessments.length > 0) {\n            assessments.forEach(assessment => {\n              const section = assessment.section || assessment.sectionName || '';\n              if (section) {\n                if (!sectionPerformance[section]) {\n                  sectionPerformance[section] = {\n                    totalScore: 0,\n                    scoreCount: 0,\n                    assessmentCount: 0\n                  };\n                }\n                \n                sectionPerformance[section].assessmentCount++;\n                \n                // Process scores\n                let scoreArray = [];\n                if (assessment.scores) {\n                  if (Array.isArray(assessment.scores)) {\n                    scoreArray = assessment.scores;\n                  } else if (assessment.scores instanceof Map) {\n                    scoreArray = Array.from(assessment.scores.values());\n                  } else if (typeof assessment.scores === 'object') {\n                    scoreArray = Object.values(assessment.scores);\n                  }\n                  \n                  // Process valid scores\n                  const validScores = scoreArray.filter(score => typeof score === 'number');\n                  validScores.forEach(score => {\n                    const percentage = assessment.maxScore ? (score / assessment.maxScore) * 100 : score;\n                    sectionPerformance[section].totalScore += percentage;\n                    sectionPerformance[section].scoreCount++;\n                  });\n                }\n              }\n            });\n            \n            // Prepare section data for chart if we have any\n            if (Object.keys(sectionPerformance).length > 0) {\n              data.value.sections = Object.keys(sectionPerformance)\n                .filter(sectionName => sectionPerformance[sectionName].scoreCount > 0) // Only include sections with scores\n                .map(sectionName => {\n                  const section = sectionPerformance[sectionName];\n                  const averageScore = section.scoreCount > 0 \n                    ? section.totalScore / section.scoreCount \n                    : 0;\n                  \n                  return {\n                    name: sectionName,\n                    averageScore: Math.round(averageScore),\n                    attendanceRate: 0, // We don't have this data\n                    performance: Math.round(averageScore), // For backward compatibility\n                    assessmentCount: section.assessmentCount\n                  };\n                });\n              \n              console.log(`Section data: ${data.value.sections.length} sections with performance data`);\n            }\n          }\n          \n          // If we don't have any data after all that filtering, use default empty structures\n          if (!data.value.assessmentTypes || data.value.assessmentTypes.length === 0) {\n            console.log('No assessment type data found after filtering, using default structure');\n            data.value.assessmentTypes = [\n              { type: 'Quiz', averageScore: 0, count: 0 },\n              { type: 'Activity', averageScore: 0, count: 0 },\n              { type: 'Performance Task', averageScore: 0, count: 0 }\n            ];\n          }\n          \n          if (!data.value.performanceTrends || data.value.performanceTrends.length === 0) {\n            console.log('No performance trend data found after filtering');\n            data.value.performanceTrends = [];\n          }\n          \n          if (!data.value.sections || data.value.sections.length === 0) {\n            console.log('No section data found after filtering');\n            data.value.sections = [];\n          }\n        } else {\n          console.warn('Assessment API returned no data or invalid format');\n          // Set default values\n          data.value.assessmentTypes = [\n            { type: 'Quiz', averageScore: 0, count: 0 },\n            { type: 'Activity', averageScore: 0, count: 0 },\n            { type: 'Performance Task', averageScore: 0, count: 0 }\n          ];\n          data.value.performanceTrends = [];\n          data.value.sections = [];\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Set default values\n        data.value.assessmentTypes = [\n          { type: 'Quiz', averageScore: 0, count: 0 },\n          { type: 'Activity', averageScore: 0, count: 0 },\n          { type: 'Performance Task', averageScore: 0, count: 0 }\n        ];\n        data.value.performanceTrends = [];\n        data.value.sections = [];\n      }\n    };\n\n    const updateCharts = (data) => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateAssessmentTypePerformanceChart(data);\n    };\n\n    // Update initEmptyCharts to properly handle chart destruction\n    const initEmptyCharts = () => {\n      // First destroy any existing charts to prevent \"Canvas is already in use\" errors\n      const charts = [\n        performanceChart.value, \n        assessmentTypeChart.value, \n        performanceTrendChart.value,\n        assessmentTypePerformanceChart.value\n      ];\n      \n      // Destroy all existing charts first\n      charts.forEach(canvas => {\n        if (canvas) {\n          const ctx = canvas.getContext('2d');\n          if (ctx) {\n            const existingChart = Chart.getChart(ctx);\n            if (existingChart) {\n              existingChart.destroy();\n            }\n          }\n        }\n      });\n      \n      // Create empty data structure\n      const emptyData = {\n        totalStudents: 0,\n        totalTeachers: 0,\n        activeSections: 0,\n        averageAttendance: 0,\n        averageScore: 0,\n        attendanceDistribution: [0, 0, 0],\n        assessmentTypes: [\n          { type: 'Quiz', averageScore: 0, count: 0 },\n          { type: 'Activity', averageScore: 0, count: 0 },\n          { type: 'Performance Task', averageScore: 0, count: 0 }\n        ],\n        performanceTrends: [],\n        sections: []\n      };\n      \n      // Update charts with empty data\n      updateCharts(emptyData);\n    };\n\n    // Format date for display\n    const formatDate = (date) => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      console.log('Year changed to:', selectedYear.value);\n      \n      // Reset the section when year changes\n      selectedSection.value = '';\n      \n      // Update sections based on the new year\n      await updateSectionsForSelectedYear();\n      \n      // Update dashboard data with new filters\n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = async () => {\n      // Update dashboard data with new filters\n      fetchDashboardData();\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      console.log('Clearing all filters');\n      \n      // Reset all filter values\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedStartDate.value = '';\n      selectedEndDate.value = '';\n      \n      // Reset sections \n      sections.value = [];\n      \n      // Refresh the dashboard with no filters\n      fetchAvailableFilters().then(() => {\n        console.log('Available filters refreshed, fetching dashboard data');\n        fetchDashboardData();\n      });\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value)\n      if (selectedSection.value) filters.push(selectedSection.value)\n      \n      // Add date range to display if selected\n      if (selectedStartDate.value && selectedEndDate.value) {\n        const formattedStart = moment(selectedStartDate.value).format('MMM D')\n        const formattedEnd = moment(selectedEndDate.value).format('MMM D, YYYY')\n        filters.push(`${formattedStart} - ${formattedEnd}`)\n      } else if (selectedStartDate.value) {\n        filters.push(`From ${moment(selectedStartDate.value).format('MMM D, YYYY')}`)\n      } else if (selectedEndDate.value) {\n        filters.push(`Until ${moment(selectedEndDate.value).format('MMM D, YYYY')}`)\n      }\n      \n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      \n      // Attendance status distribution data\n      const attendanceLabels = ['Present', 'Late', 'Absent'];\n      let attendanceData = data.attendanceDistribution || [0, 0, 0];\n      \n      // Ensure we have at least some data to display\n      const totalAttendanceCount = attendanceData.reduce((a, b) => a + b, 0);\n      if (totalAttendanceCount === 0) {\n        // Use empty distribution if no real data\n        attendanceData = [0, 0, 0];\n      }\n      \n      // Log for debugging\n      console.log('Final attendance distribution data:', attendanceData);\n      \n      // Create chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: attendanceLabels,\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n            borderWidth: 0,\n            hoverOffset: 4\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '70%',\n            plugins: {\n              legend: {\n              position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                  const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\n                  return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      \n      // Assessment types data\n      const assessmentData = data.assessmentTypes || [];\n      const labels = [];\n      const values = [];\n      const counts = [];\n      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n      \n      try {\n        // Extract assessment types data\n        if (Array.isArray(assessmentData) && assessmentData.length > 0) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            if (item && typeof item === 'object') {\n              // Only include items with a count > 0\n              if (item.count > 0) {\n                labels.push(item.type || `Type ${index + 1}`);\n                values.push(parseFloat(item.averageScore) || 0);\n                counts.push(item.count || 0);\n              }\n            }\n          });\n        } else if (typeof assessmentData === 'object' && assessmentData !== null) {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            if (data.count > 0) {\n              labels.push(type);\n              values.push(parseFloat(data.averageScore) || 0);\n              counts.push(data.count || 0);\n            }\n          });\n        }\n        \n        console.log(`Assessment type chart data: ${labels.length} types with data`);\n        console.log('Assessment types:', labels);\n        console.log('Average scores:', values);\n        console.log('Assessment counts:', counts);\n        \n        // If no data was extracted, use default types\n        if (labels.length === 0) {\n          labels.push('Quiz', 'Activity', 'Performance Task');\n          values.push(0, 0, 0);\n          counts.push(0, 0, 0);\n        }\n      } catch (error) {\n        console.error('Error processing assessment data:', error);\n        // Fallback to default labels and values\n        labels.push('Quiz', 'Activity', 'Performance Task');\n        values.push(0, 0, 0);\n        counts.push(0, 0, 0);\n      }\n      \n      // Check if we have any valid data\n      const hasData = labels.length > 0 && values.some(v => v > 0);\n      \n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: values,\n            backgroundColor: colors.slice(0, labels.length),\n            borderWidth: 0,\n            borderRadius: 6,\n            maxBarThickness: 50\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  const type = labels[context.dataIndex];\n                  const count = counts[context.dataIndex];\n                  return `${type}: ${context.raw}% (${count} assessments)`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                callback: function(value) {\n                  return value + '%';\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) return;\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Properly destroy any existing chart\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      let trends = [];\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\n        // Filter out trends that have no valid score or date\n        trends = data.performanceTrends\n          .filter(trend => \n            trend.date && \n            (typeof trend.averageScore === 'number' || typeof trend.score === 'number')\n          )\n          .map(trend => ({\n            date: new Date(trend.date),\n            value: parseFloat(trend.averageScore || trend.score) || 0,\n            name: trend.title || trend.name || 'Assessment'\n          }))\n          .sort((a, b) => a.date - b.date);\n      }\n      \n      console.log(`Performance trend chart data: ${trends.length} valid data points`);\n      \n      // Check if we have any valid data points\n      const hasData = trends.length > 0 && trends.some(t => t.value > 0);\n      \n      if (hasData) {\n        // Create new chart after destroying the old one\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: trends.map(trend => moment(trend.date).format('MMM D, YYYY')),\n            datasets: [{\n              label: 'Average Score',\n              data: trends.map(trend => trend.value),\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderWidth: 2,\n              tension: 0.4,\n              fill: true,\n              pointRadius: 4,\n              pointBackgroundColor: 'rgb(59, 130, 246)',\n              pointHoverRadius: 6\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  title: (tooltipItems) => {\n                    if (!tooltipItems.length || !trends[tooltipItems[0].dataIndex]) return '';\n                    const trend = trends[tooltipItems[0].dataIndex];\n                    return `${moment(trend.date).format('MMM D, YYYY')} - ${trend.name}`;\n                  },\n                  label: (context) => {\n                    return `Score: ${context.raw.toFixed(1)}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Average Score (%)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart to show the \"No data available\" message\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: [],\n            datasets: [{\n              label: 'Average Score',\n              data: [],\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Average Score (%)'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      let hasValidData = false;\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          // Only process trends with valid scores and dates\n          if (trend.date && (typeof trend.averageScore === 'number' || typeof trend.score === 'number')) {\n            const type = trend.type || trend.title || 'Other';\n            const score = parseFloat(trend.averageScore || trend.score) || 0;\n            \n            // Create the array for this type if it doesn't exist\n            if (!trendsByType[type]) {\n              trendsByType[type] = [];\n            }\n            \n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: score\n            });\n            \n            if (score > 0) {\n              hasValidData = true;\n            }\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n      \n      // Only proceed if we have valid dates\n      if (allDates.length > 0 && hasValidData) {\n        console.log(`Assessment type performance chart: ${allDates.length} dates with data`);\n        \n        // Create datasets\n        const datasets = Object.entries(trendsByType)\n          .filter(([_, data]) => data.length > 0) // Only include types with data\n          .map(([type, data], index) => {\n            const colors = [\n              'rgb(52, 211, 153)',   // Green for Quiz\n              'rgb(59, 130, 246)',   // Blue for Activity\n              'rgb(251, 191, 36)'    // Yellow for Performance Task\n            ];\n            const color = colors[index % colors.length];\n  \n            return {\n              label: type,\n              data: allDates.map(date => {\n                const point = data.find(d => d.date.getTime() === date.getTime());\n                return point ? point.score : null;\n              }),\n              borderColor: color,\n              backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n              fill: true,\n              tension: 0.4,\n              pointRadius: 4,\n              pointHoverRadius: 6,\n              spanGaps: true // This will connect points even if there are null values\n            };\n          });\n  \n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n            datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            interaction: {\n              intersect: false,\n              mode: 'index'\n            },\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: (context) => {\n                    const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                    return `${context.dataset.label}: ${value}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Score (%)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart if no valid data\n        console.log('No valid assessment type performance data, showing empty chart');\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: [],\n            datasets: [{\n              label: 'No Data',\n              data: [],\n              borderColor: 'rgb(203, 213, 225)',\n              backgroundColor: 'rgba(203, 213, 225, 0.1)'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Score (%)'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // Update the refreshDashboard function to properly handle chart destruction\n    const refreshDashboard = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Destroy existing charts before fetching new data\n        initEmptyCharts();\n        \n        // Wait a tick to ensure DOM updates\n        await nextTick();\n        \n        // Fetch new data\n        await fetchDashboardData();\n        \n        // Update the last refresh time\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    const scrollToSection = (sectionId) => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({ behavior: 'smooth' });\n      }\n    };\n\n    // Restore auto-refresh in onMounted function\n    onMounted(async () => {\n      try {\n        // Make sure DOM is rendered before initializing charts\n        await nextTick();\n\n        console.log('Dashboard mounted, initializing');\n        \n        // Initialize with empty data while waiting for API\n        initEmptyCharts();\n        \n        // Set up API interceptor to handle 404 errors gracefully\n        api.interceptors.response.use(\n          response => response,\n          error => {\n            if (error.response && error.response.status === 404) {\n              console.warn(`API endpoint not found: ${error.config.url}`);\n            }\n            return Promise.reject(error);\n          }\n        );\n        \n        // Set auth token for API requests\n        if (store.state.auth.token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${store.state.auth.token}`;\n        }\n        \n        // Fetch available years and sections with data\n        await fetchAvailableFilters();\n        \n        // Ensure all available years are set properly\n        if (availableYears.value.length === 0) {\n          availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        }\n        \n        // Fetch dashboard data\n        await fetchDashboardData();\n        \n        // Set up auto-refresh\n        if (autoRefreshInterval.value) {\n          clearInterval(autoRefreshInterval.value);\n        }\n        \n        // Refresh every 5 minutes, but only if tab is visible\n        autoRefreshInterval.value = setInterval(() => {\n          if (document.visibilityState === 'visible') {\n            refreshDashboard();\n          }\n        }, 5 * 60 * 1000); // 5 minutes\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n        // Make sure we still have empty charts if data loading fails\n        await nextTick();\n        initEmptyCharts();\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n\n    // Add watch for date changes\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n      }\n    });\n\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedYear,\n      selectedSection,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard,\n      fetchAvailableFilters,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.last-update-badge {\n  font-size: 0.85rem;\n  color: #64748b;\n  display: flex;\n  align-items: center;\n}\n\n.btn-refresh {\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #4a5568;\n  padding: 0.5rem;\n  border-radius: 8px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.btn-refresh:hover {\n  background: #f7fafc;\n  color: #2d3748;\n  border-color: #cbd5e1;\n}\n\n/* Dashboard Cards */\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n/* Chart Cards */\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n\n  .greeting {\n    font-size: 1.75rem;\n  }\n  \n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n  \n  .chart-container {\n    height: 300px;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
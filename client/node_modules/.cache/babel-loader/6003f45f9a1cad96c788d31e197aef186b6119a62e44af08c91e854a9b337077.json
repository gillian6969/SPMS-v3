{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n    const selectedYear = ref('');\n    const selectedSection = ref('');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const dashboardContainer = ref(null);\n    const isLoading = ref(false);\n    const lastUpdate = ref(null);\n    const autoRefreshInterval = ref(null);\n    const sections = ref([]);\n    const subjects = ref([]);\n    const availableYears = ref([]);\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead);\n    const token = computed(() => store.state.auth.token);\n\n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n\n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, newToken => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, {\n      immediate: true\n    });\n\n    // Dashboard stats\n    const totalStudents = ref(0);\n    const totalTeachers = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const activeSections = ref(0);\n    const data = ref(null);\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasScoreData = computed(() => {\n      if (!data.value) return false;\n\n      // Check for average score\n      if (data.value.averageScore > 0) return true;\n\n      // Check assessment types for any with scores\n      if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n        return data.value.assessmentTypes.some(type => type.averageScore > 0 && type.count > 0);\n      }\n      return false;\n    });\n    const hasPerformanceData = computed(() => {\n      if (!data.value) return false;\n\n      // Check for assessment data\n      if (hasAssessmentData.value) return true;\n\n      // Check for performance trends\n      if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n        return data.value.performanceTrends.some(trend => trend.averageScore > 0);\n      }\n\n      // Check sections data\n      if (Array.isArray(data.value.sections) && data.value.sections.length > 0) {\n        return data.value.sections.some(section => section.averageScore > 0);\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (!data.value) return false;\n\n      // Check for assessment types data\n      if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n        return data.value.assessmentTypes.some(type => type.count > 0 && type.averageScore > 0);\n      }\n      return false;\n    });\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch available years and sections directly from database records\n    const fetchAvailableFilters = async () => {\n      try {\n        isLoading.value = true;\n\n        // Get all student records to extract years and sections\n        const response = await api.get('/students', {\n          headers: {\n            'Authorization': `Bearer ${token.value}`\n          }\n        });\n        if (response.data && Array.isArray(response.data)) {\n          // Extract unique years and sections from student records\n          const students = response.data;\n\n          // Get unique years with data\n          const years = [...new Set(students.map(student => student.year))].filter(Boolean);\n          availableYears.value = years.length > 0 ? years.sort() : ['1st', '2nd', '3rd', '4th'];\n\n          // Get unique sections based on selectedYear\n          await updateSectionsForSelectedYear();\n          console.log('Fetched available filters:', {\n            years: availableYears.value,\n            sections: sections.value\n          });\n        }\n        isLoading.value = false;\n      } catch (error) {\n        console.error('Error fetching available filters:', error);\n        // Keep default years if API fails\n        availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        isLoading.value = false;\n      }\n    };\n\n    // New function to update sections based on selected year\n    const updateSectionsForSelectedYear = async () => {\n      try {\n        console.log('Updating sections for year:', selectedYear.value || 'All Years');\n        sections.value = []; // Clear existing sections first\n\n        const params = {};\n        if (selectedYear.value) {\n          params.year = selectedYear.value;\n        }\n\n        // Get students filtered by year if selected\n        const response = await api.get('/students', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${token.value}`\n          }\n        });\n        if (response.data && Array.isArray(response.data)) {\n          const students = response.data;\n\n          // Get unique sections matching the selected year\n          let uniqueSections = [];\n          if (selectedYear.value) {\n            // Filter students by the selected year before extracting sections\n            uniqueSections = [...new Set(students.filter(student => student.year === selectedYear.value).map(student => student.section))].filter(Boolean);\n          } else {\n            // If no year selected, get all unique sections\n            uniqueSections = [...new Set(students.map(student => student.section))].filter(Boolean);\n          }\n          console.log(`Found ${uniqueSections.length} sections for ${selectedYear.value || 'all years'}:`, uniqueSections);\n\n          // Map sections to include teacher info if available\n          sections.value = uniqueSections.map(sectionName => ({\n            id: sectionName,\n            name: sectionName,\n            teacherName: '' // We could fetch teacher info in the future\n          }));\n        } else {\n          console.warn('No student data received when updating sections');\n          sections.value = [];\n        }\n      } catch (error) {\n        console.error('Error updating sections for year:', error);\n        sections.value = [];\n      }\n    };\n\n    // Fetch attendance data for the charts\n    const fetchAttendanceData = async () => {\n      try {\n        console.log('Fetching attendance with filters:', {\n          year: selectedYear.value || 'All Years',\n          section: selectedSection.value || 'All Sections'\n        });\n        let attendanceDistribution = [0, 0, 0]; // Default empty distribution [present, late, absent]\n\n        // First approach: Try direct approach with specific filter handling\n        try {\n          console.log('Fetching attendance directly with filters');\n\n          // Build query params differently for Windows/PowerShell URL handling\n          let url = `${api.defaults.baseURL}/attendance`;\n          let queryParts = [];\n          if (selectedYear.value) {\n            queryParts.push(`year=${encodeURIComponent(selectedYear.value)}`);\n          }\n          if (selectedSection.value) {\n            queryParts.push(`section=${encodeURIComponent(selectedSection.value)}`);\n          }\n          if (selectedStartDate.value) {\n            queryParts.push(`startDate=${encodeURIComponent(selectedStartDate.value)}`);\n          }\n          if (selectedEndDate.value) {\n            queryParts.push(`endDate=${encodeURIComponent(selectedEndDate.value)}`);\n          }\n\n          // Add query string if we have parameters\n          if (queryParts.length > 0) {\n            url += '?' + queryParts.join('&');\n          }\n          console.log('Fetching attendance from URL:', url);\n\n          // Make direct fetch request\n          const response = await fetch(url, {\n            headers: {\n              'Authorization': `Bearer ${token.value}`\n            }\n          });\n          if (response.ok) {\n            const attendanceData = await response.json();\n            console.log('Attendance data received:', Array.isArray(attendanceData) ? `${attendanceData.length} records` : 'Non-array data');\n            if (Array.isArray(attendanceData) && attendanceData.length > 0) {\n              // Process attendance records\n              const statusCounts = [0, 0, 0]; // [present, late, absent]\n\n              attendanceData.forEach(record => {\n                if (record.status === 'present') statusCounts[0]++;else if (record.status === 'late') statusCounts[1]++;else if (record.status === 'absent') statusCounts[2]++;\n              });\n              console.log('Calculated attendance counts:', statusCounts);\n\n              // Only use this data if we have at least one attendance record\n              if (statusCounts.some(count => count > 0)) {\n                attendanceDistribution = statusCounts;\n                return attendanceDistribution;\n              }\n            }\n          } else {\n            console.warn(`Attendance API returned status: ${response.status}`);\n          }\n        } catch (error) {\n          console.log('Error fetching attendance directly:', error.message);\n        }\n\n        // Second approach: Try fetching from dashboard stats\n        try {\n          console.log('Trying to get attendance from dashboard stats');\n\n          // Build URL for stats\n          let url = `${api.defaults.baseURL}/dashboard/stats`;\n          let queryParts = [];\n          if (selectedYear.value) {\n            queryParts.push(`year=${encodeURIComponent(selectedYear.value)}`);\n          }\n          if (selectedSection.value) {\n            queryParts.push(`section=${encodeURIComponent(selectedSection.value)}`);\n          }\n          if (queryParts.length > 0) {\n            url += '?' + queryParts.join('&');\n          }\n          console.log('Fetching dashboard stats from URL:', url);\n          const response = await fetch(url, {\n            headers: {\n              'Authorization': `Bearer ${token.value}`\n            }\n          });\n          if (response.ok) {\n            const statsData = await response.json();\n            if (statsData && Array.isArray(statsData.attendanceDistribution)) {\n              console.log('Attendance distribution from stats:', statsData.attendanceDistribution);\n\n              // Validate attendance distribution data\n              const validDistribution = statsData.attendanceDistribution.map(val => typeof val === 'number' ? val : 0);\n\n              // Only use if we have some valid data\n              if (validDistribution.some(val => val > 0)) {\n                attendanceDistribution = validDistribution;\n                return attendanceDistribution;\n              }\n            }\n          }\n        } catch (error) {\n          console.log('Error fetching from dashboard stats:', error.message);\n        }\n\n        // Third approach: Try to get attendance by date\n        try {\n          console.log('Trying to get attendance by date for recent days');\n          const today = new Date();\n          const lastWeek = new Array(7).fill(0).map((_, i) => {\n            const date = new Date(today);\n            date.setDate(date.getDate() - i);\n            return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n          });\n          let allAttendanceRecords = [];\n\n          // Get attendance for recent dates\n          for (const date of lastWeek) {\n            try {\n              let url = `${api.defaults.baseURL}/attendance/date/${date}`;\n              if (selectedYear.value) {\n                url += `?year=${encodeURIComponent(selectedYear.value)}`;\n                if (selectedSection.value) {\n                  url += `&section=${encodeURIComponent(selectedSection.value)}`;\n                }\n              }\n              const response = await fetch(url, {\n                headers: {\n                  'Authorization': `Bearer ${token.value}`\n                }\n              });\n              if (response.ok) {\n                const dateAttendance = await response.json();\n                if (Array.isArray(dateAttendance)) {\n                  allAttendanceRecords = [...allAttendanceRecords, ...dateAttendance];\n                }\n              }\n            } catch (error) {\n              // Silently continue to next date\n            }\n          }\n          console.log(`Collected ${allAttendanceRecords.length} attendance records from recent dates`);\n          if (allAttendanceRecords.length > 0) {\n            // Process all attendance records\n            const statusCounts = [0, 0, 0]; // [present, late, absent]\n\n            allAttendanceRecords.forEach(record => {\n              if (record.status === 'present') statusCounts[0]++;else if (record.status === 'late') statusCounts[1]++;else if (record.status === 'absent') statusCounts[2]++;\n            });\n            console.log('Calculated attendance counts from dates:', statusCounts);\n            if (statusCounts.some(count => count > 0)) {\n              attendanceDistribution = statusCounts;\n              return attendanceDistribution;\n            }\n          }\n        } catch (error) {\n          console.log('Error fetching attendance by date:', error.message);\n        }\n\n        // Return empty distribution if all approaches failed\n        console.log('All attendance data fetching approaches failed. Using empty distribution.');\n        return attendanceDistribution;\n      } catch (error) {\n        console.error('Error in attendance data fetching:', error);\n        return [0, 0, 0];\n      }\n    };\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n\n        // Prepare query parameters\n        const params = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        };\n        console.log('Fetching dashboard data with params:', params);\n\n        // First, fetch attendance data\n        const attendanceDistribution = await fetchAttendanceData();\n        console.log('Attendance distribution for current filters:', attendanceDistribution);\n\n        // Get dashboard stats - ensure we're using the same filters\n        const statsResponse = await api.get('/dashboard/stats', {\n          params\n        });\n        data.value = statsResponse.data || {};\n        console.log('Dashboard stats response:', data.value);\n\n        // Check if we received any meaningful data\n        const hasValidData = data.value.totalStudents > 0 || data.value.totalTeachers > 0 || data.value.activeSections > 0 || data.value.performanceTrends && data.value.performanceTrends.length > 0;\n\n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value)) {\n          console.warn('No data found for the selected filters');\n        }\n\n        // Update basic stats\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n\n        // Use our fetched attendance data\n        data.value.attendanceDistribution = attendanceDistribution;\n\n        // Calculate average attendance from distribution\n        const totalAttendance = attendanceDistribution.reduce((a, b) => a + b, 0);\n        if (totalAttendance > 0) {\n          // Calculate percentage of present and late (not absent)\n          const presentAttendance = attendanceDistribution[0] + attendanceDistribution[1];\n          averageAttendance.value = Math.round(presentAttendance / totalAttendance * 100);\n        } else {\n          averageAttendance.value = 0;\n        }\n\n        // Process assessment data for charts\n        await fetchAssessmentData();\n\n        // Calculate averageScore from assessment data instead of using stats\n        if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n          let totalScore = 0;\n          let totalCount = 0;\n          data.value.assessmentTypes.forEach(type => {\n            if (type.averageScore > 0 && type.count > 0) {\n              totalScore += type.averageScore * type.count;\n              totalCount += type.count;\n            }\n          });\n          if (totalCount > 0) {\n            averageScore.value = Math.round(totalScore / totalCount);\n            data.value.averageScore = averageScore.value;\n          } else {\n            averageScore.value = 0;\n            data.value.averageScore = 0;\n          }\n          console.log(`Calculated average score: ${averageScore.value}% from ${totalCount} assessments`);\n        } else {\n          averageScore.value = 0;\n          data.value.averageScore = 0;\n        }\n\n        // Update charts with new data\n        updateCharts(data.value);\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Initialize with empty data if main stats request fails\n        data.value = {\n          totalStudents: 0,\n          totalTeachers: 0,\n          activeSections: 0,\n          attendanceDistribution: [0, 0, 0],\n          averageAttendance: 0,\n          assessmentTypes: [],\n          performanceTrends: [],\n          averageScore: 0,\n          sections: []\n        };\n        totalStudents.value = 0;\n        totalTeachers.value = 0;\n        activeSections.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n\n        // Update charts with empty data\n        updateCharts(data.value);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Fetch assessment data directly with better approach\n    const fetchAssessmentData = async () => {\n      try {\n        console.log('Fetching assessment data for filters:', {\n          year: selectedYear.value || 'All',\n          section: selectedSection.value || 'All',\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        // Test directly with fetch to avoid axios URL encoding issues on Windows\n        const params = new URLSearchParams();\n\n        // Add params only if they exist\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n\n        // Build the URL with query string\n        const queryString = params.toString();\n        const url = `${api.defaults.baseURL}/assessments${queryString ? '?' + queryString : ''}`;\n        console.log('Fetching assessments from URL:', url);\n\n        // Make the direct fetch request\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': `Bearer ${token.value}`\n          }\n        });\n        let assessments = [];\n        if (response.ok) {\n          assessments = await response.json();\n          console.log('Fetched assessments count:', assessments?.length || 0);\n        } else {\n          console.error('Assessments API failed with status:', response.status);\n          throw new Error(`API error: ${response.status}`);\n        }\n        if (Array.isArray(assessments) && assessments.length > 0) {\n          console.log('Successfully fetched assessment data');\n\n          // Process the assessment data\n          const assessmentTypes = {\n            'Quiz': {\n              count: 0,\n              totalScore: 0,\n              scores: []\n            },\n            'Activity': {\n              count: 0,\n              totalScore: 0,\n              scores: []\n            },\n            'Performance Task': {\n              count: 0,\n              totalScore: 0,\n              scores: []\n            }\n          };\n\n          // Log sample assessment data to understand structure\n          console.log('Sample assessment data:', assessments.slice(0, 1));\n\n          // Process each assessment\n          assessments.forEach(assessment => {\n            // Make sure we have a type - default to \"Other\" if none found\n            const type = assessment.type || assessment.assessmentType || assessment.assessment_type || 'Other';\n\n            // Initialize type if it doesn't exist\n            if (!assessmentTypes[type]) {\n              assessmentTypes[type] = {\n                count: 0,\n                totalScore: 0,\n                scores: []\n              };\n            }\n\n            // Increment count for this type\n            assessmentTypes[type].count++;\n\n            // Process scores if available\n            if (assessment.scores) {\n              // Handle both array and Map formats\n              let scoreArray = [];\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (assessment.scores instanceof Map) {\n                scoreArray = Array.from(assessment.scores.values());\n              } else if (typeof assessment.scores === 'object') {\n                // Handle object format\n                scoreArray = Object.values(assessment.scores);\n              }\n\n              // Filter for valid scores and calculate percentages\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              validScores.forEach(score => {\n                const percentage = assessment.maxScore ? score / assessment.maxScore * 100 : score;\n                assessmentTypes[type].totalScore += percentage;\n                assessmentTypes[type].scores.push(percentage);\n              });\n            }\n          });\n\n          // Calculate averages and prepare for chart\n          data.value.assessmentTypes = Object.keys(assessmentTypes).filter(type => assessmentTypes[type].count > 0) // Only include types with data\n          .map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scores.length > 0 ? typeData.totalScore / typeData.scores.length : 0;\n            return {\n              type,\n              averageScore: Math.round(averageScore),\n              count: typeData.count,\n              completionRate: typeData.count > 0 ? 100 : 0\n            };\n          });\n          console.log(`Assessment types processed:`, data.value.assessmentTypes.map(t => `${t.type}: ${t.count} assessments, avg ${t.averageScore}%`));\n\n          // Generate performance trends from assessment data\n          data.value.performanceTrends = assessments.filter(a => a.date || a.assessmentDate || a.assessment_date) // Only include assessments with dates\n          .map(assessment => {\n            // Get the date - check various possible field names\n            const date = assessment.date || assessment.assessmentDate || assessment.assessment_date;\n\n            // Calculate average score for this assessment\n            let averageScore = 0;\n            let scoreArray = [];\n\n            // Handle different score formats\n            if (assessment.scores) {\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (assessment.scores instanceof Map) {\n                scoreArray = Array.from(assessment.scores.values());\n              } else if (typeof assessment.scores === 'object') {\n                scoreArray = Object.values(assessment.scores);\n              }\n\n              // Calculate average from valid scores\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              if (validScores.length > 0) {\n                const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                averageScore = assessment.maxScore ? totalScore / validScores.length / assessment.maxScore * 100 : totalScore / validScores.length;\n              }\n            }\n            return {\n              date: date,\n              title: assessment.name || assessment.title || assessment.type || 'Assessment',\n              averageScore: Math.round(averageScore),\n              type: assessment.type || assessment.assessmentType || 'Assessment'\n            };\n          }).filter(trend => trend.date && trend.averageScore > 0) // Only keep trends with dates and scores\n          .sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort by date\n\n          console.log(`Performance trends processed: ${data.value.performanceTrends.length} data points with dates and scores`);\n\n          // Process section data if available\n          // Group assessments by section\n          const sectionPerformance = {};\n\n          // Only process section performance if we actually have data\n          if (assessments.length > 0) {\n            assessments.forEach(assessment => {\n              const section = assessment.section || assessment.sectionName || '';\n              if (section) {\n                if (!sectionPerformance[section]) {\n                  sectionPerformance[section] = {\n                    totalScore: 0,\n                    scoreCount: 0,\n                    assessmentCount: 0\n                  };\n                }\n                sectionPerformance[section].assessmentCount++;\n\n                // Process scores\n                let scoreArray = [];\n                if (assessment.scores) {\n                  if (Array.isArray(assessment.scores)) {\n                    scoreArray = assessment.scores;\n                  } else if (assessment.scores instanceof Map) {\n                    scoreArray = Array.from(assessment.scores.values());\n                  } else if (typeof assessment.scores === 'object') {\n                    scoreArray = Object.values(assessment.scores);\n                  }\n\n                  // Process valid scores\n                  const validScores = scoreArray.filter(score => typeof score === 'number');\n                  validScores.forEach(score => {\n                    const percentage = assessment.maxScore ? score / assessment.maxScore * 100 : score;\n                    sectionPerformance[section].totalScore += percentage;\n                    sectionPerformance[section].scoreCount++;\n                  });\n                }\n              }\n            });\n\n            // Prepare section data for chart if we have any\n            if (Object.keys(sectionPerformance).length > 0) {\n              data.value.sections = Object.keys(sectionPerformance).filter(sectionName => sectionPerformance[sectionName].scoreCount > 0) // Only include sections with scores\n              .map(sectionName => {\n                const section = sectionPerformance[sectionName];\n                const averageScore = section.scoreCount > 0 ? section.totalScore / section.scoreCount : 0;\n                return {\n                  name: sectionName,\n                  averageScore: Math.round(averageScore),\n                  attendanceRate: 0,\n                  // We don't have this data\n                  performance: Math.round(averageScore),\n                  // For backward compatibility\n                  assessmentCount: section.assessmentCount\n                };\n              });\n              console.log(`Section data processed: ${data.value.sections.length} sections with performance data`);\n            }\n          }\n        } else {\n          console.warn('No assessment data found for the selected filters');\n          // Set default values\n          data.value.assessmentTypes = [{\n            type: 'Quiz',\n            averageScore: 0,\n            count: 0\n          }, {\n            type: 'Activity',\n            averageScore: 0,\n            count: 0\n          }, {\n            type: 'Performance Task',\n            averageScore: 0,\n            count: 0\n          }];\n          data.value.performanceTrends = [];\n          data.value.sections = [];\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Set default values\n        data.value.assessmentTypes = [{\n          type: 'Quiz',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0,\n          count: 0\n        }];\n        data.value.performanceTrends = [];\n        data.value.sections = [];\n      }\n    };\n    const updateCharts = data => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateAssessmentTypePerformanceChart(data);\n    };\n\n    // Update initEmptyCharts to properly handle chart destruction\n    const initEmptyCharts = () => {\n      // First destroy any existing charts to prevent \"Canvas is already in use\" errors\n      const charts = [performanceChart.value, assessmentTypeChart.value, performanceTrendChart.value, assessmentTypePerformanceChart.value];\n\n      // Destroy all existing charts first\n      charts.forEach(canvas => {\n        if (canvas) {\n          const ctx = canvas.getContext('2d');\n          if (ctx) {\n            const existingChart = Chart.getChart(ctx);\n            if (existingChart) {\n              existingChart.destroy();\n            }\n          }\n        }\n      });\n\n      // Create empty data structure\n      const emptyData = {\n        totalStudents: 0,\n        totalTeachers: 0,\n        activeSections: 0,\n        averageAttendance: 0,\n        averageScore: 0,\n        attendanceDistribution: [0, 0, 0],\n        assessmentTypes: [{\n          type: 'Quiz',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0,\n          count: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0,\n          count: 0\n        }],\n        performanceTrends: [],\n        sections: []\n      };\n\n      // Update charts with empty data\n      updateCharts(emptyData);\n    };\n\n    // Format date for display\n    const formatDate = date => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      console.log('Year changed to:', selectedYear.value);\n\n      // Reset the section when year changes\n      selectedSection.value = '';\n\n      // Update sections based on the new year\n      await updateSectionsForSelectedYear();\n\n      // Update dashboard data with new filters\n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = async () => {\n      // Update dashboard data with new filters\n      fetchDashboardData();\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      console.log('Clearing all filters');\n\n      // Reset all filter values\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedStartDate.value = '';\n      selectedEndDate.value = '';\n\n      // Reset sections \n      sections.value = [];\n\n      // Refresh the dashboard with no filters\n      fetchAvailableFilters().then(() => {\n        console.log('Available filters refreshed, fetching dashboard data');\n        fetchDashboardData();\n      });\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value);\n      if (selectedSection.value) filters.push(selectedSection.value);\n\n      // Add date range to display if selected\n      if (selectedStartDate.value && selectedEndDate.value) {\n        const formattedStart = moment(selectedStartDate.value).format('MMM D');\n        const formattedEnd = moment(selectedEndDate.value).format('MMM D, YYYY');\n        filters.push(`${formattedStart} - ${formattedEnd}`);\n      } else if (selectedStartDate.value) {\n        filters.push(`From ${moment(selectedStartDate.value).format('MMM D, YYYY')}`);\n      } else if (selectedEndDate.value) {\n        filters.push(`Until ${moment(selectedEndDate.value).format('MMM D, YYYY')}`);\n      }\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Attendance status distribution data\n      const attendanceLabels = ['Present', 'Late', 'Absent'];\n      let attendanceData = data.attendanceDistribution || [0, 0, 0];\n\n      // Log attendance data for debugging\n      console.log('Raw attendance data:', attendanceData);\n\n      // Ensure each value is a number\n      attendanceData = attendanceData.map(val => typeof val === 'number' ? val : 0);\n\n      // Ensure we have at least some data to display\n      const totalAttendanceCount = attendanceData.reduce((a, b) => a + b, 0);\n\n      // Check if we have valid data to show\n      const hasValidData = totalAttendanceCount > 0;\n\n      // Log for debugging\n      console.log('Final attendance distribution data:', attendanceData, 'hasValidData:', hasValidData);\n\n      // Create chart\n      if (hasValidData) {\n        new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: attendanceLabels,\n            datasets: [{\n              data: attendanceData,\n              backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n              borderWidth: 0,\n              hoverOffset: 4\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            cutout: '70%',\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const label = context.label || '';\n                    const value = context.raw || 0;\n                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                    const percentage = total > 0 ? Math.round(value / total * 100) : 0;\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart with \"No data available\" message\n        new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['No Data'],\n            datasets: [{\n              data: [1],\n              backgroundColor: ['#e2e8f0'],\n              borderWidth: 0\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            cutout: '70%',\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                enabled: false\n              }\n            }\n          }\n        });\n      }\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Assessment types data\n      const assessmentData = data.assessmentTypes || [];\n      const labels = [];\n      const values = [];\n      const counts = [];\n      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n      try {\n        // Extract assessment types data\n        if (Array.isArray(assessmentData) && assessmentData.length > 0) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            if (item && typeof item === 'object') {\n              // Only include items with a count > 0\n              if (item.count > 0) {\n                labels.push(item.type || `Type ${index + 1}`);\n                values.push(parseFloat(item.averageScore) || 0);\n                counts.push(item.count || 0);\n              }\n            }\n          });\n        } else if (typeof assessmentData === 'object' && assessmentData !== null) {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            if (data.count > 0) {\n              labels.push(type);\n              values.push(parseFloat(data.averageScore) || 0);\n              counts.push(data.count || 0);\n            }\n          });\n        }\n        console.log(`Assessment type chart data: ${labels.length} types with data`);\n        console.log('Assessment types:', labels);\n        console.log('Average scores:', values);\n        console.log('Assessment counts:', counts);\n\n        // If no data was extracted, use default types\n        if (labels.length === 0) {\n          labels.push('Quiz', 'Activity', 'Performance Task');\n          values.push(0, 0, 0);\n          counts.push(0, 0, 0);\n        }\n      } catch (error) {\n        console.error('Error processing assessment data:', error);\n        // Fallback to default labels and values\n        labels.push('Quiz', 'Activity', 'Performance Task');\n        values.push(0, 0, 0);\n        counts.push(0, 0, 0);\n      }\n\n      // Check if we have any valid data\n      const hasData = labels.length > 0 && values.some(v => v > 0);\n\n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: values,\n            backgroundColor: colors.slice(0, labels.length),\n            borderWidth: 0,\n            borderRadius: 6,\n            maxBarThickness: 50\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  const type = labels[context.dataIndex];\n                  const count = counts[context.dataIndex];\n                  return `${type}: ${context.raw}% (${count} assessments)`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                callback: function (value) {\n                  return value + '%';\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) return;\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) return;\n\n      // Properly destroy any existing chart\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      let trends = [];\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\n        // Filter out trends that have no valid score or date\n        trends = data.performanceTrends.filter(trend => trend.date && (typeof trend.averageScore === 'number' || typeof trend.score === 'number')).map(trend => ({\n          date: new Date(trend.date),\n          value: parseFloat(trend.averageScore || trend.score) || 0,\n          name: trend.title || trend.name || 'Assessment'\n        })).sort((a, b) => a.date - b.date);\n      }\n      console.log(`Performance trend chart data: ${trends.length} valid data points`);\n\n      // Check if we have any valid data points\n      const hasData = trends.length > 0 && trends.some(t => t.value > 0);\n      if (hasData) {\n        // Create new chart after destroying the old one\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: trends.map(trend => moment(trend.date).format('MMM D, YYYY')),\n            datasets: [{\n              label: 'Average Score',\n              data: trends.map(trend => trend.value),\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderWidth: 2,\n              tension: 0.4,\n              fill: true,\n              pointRadius: 4,\n              pointBackgroundColor: 'rgb(59, 130, 246)',\n              pointHoverRadius: 6\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  title: tooltipItems => {\n                    if (!tooltipItems.length || !trends[tooltipItems[0].dataIndex]) return '';\n                    const trend = trends[tooltipItems[0].dataIndex];\n                    return `${moment(trend.date).format('MMM D, YYYY')} - ${trend.name}`;\n                  },\n                  label: context => {\n                    return `Score: ${context.raw.toFixed(1)}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Average Score (%)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart to show the \"No data available\" message\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: [],\n            datasets: [{\n              label: 'Average Score',\n              data: [],\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Average Score (%)'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      let hasValidData = false;\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          // Only process trends with valid scores and dates\n          if (trend.date && (typeof trend.averageScore === 'number' || typeof trend.score === 'number')) {\n            const type = trend.type || trend.title || 'Other';\n            const score = parseFloat(trend.averageScore || trend.score) || 0;\n\n            // Create the array for this type if it doesn't exist\n            if (!trendsByType[type]) {\n              trendsByType[type] = [];\n            }\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: score\n            });\n            if (score > 0) {\n              hasValidData = true;\n            }\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Only proceed if we have valid dates\n      if (allDates.length > 0 && hasValidData) {\n        console.log(`Assessment type performance chart: ${allDates.length} dates with data`);\n\n        // Create datasets\n        const datasets = Object.entries(trendsByType).filter(([_, data]) => data.length > 0) // Only include types with data\n        .map(([type, data], index) => {\n          const colors = ['rgb(52, 211, 153)',\n          // Green for Quiz\n          'rgb(59, 130, 246)',\n          // Blue for Activity\n          'rgb(251, 191, 36)' // Yellow for Performance Task\n          ];\n          const color = colors[index % colors.length];\n          return {\n            label: type,\n            data: allDates.map(date => {\n              const point = data.find(d => d.date.getTime() === date.getTime());\n              return point ? point.score : null;\n            }),\n            borderColor: color,\n            backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n            fill: true,\n            tension: 0.4,\n            pointRadius: 4,\n            pointHoverRadius: 6,\n            spanGaps: true // This will connect points even if there are null values\n          };\n        });\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n            datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            interaction: {\n              intersect: false,\n              mode: 'index'\n            },\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: context => {\n                    const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                    return `${context.dataset.label}: ${value}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Score (%)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart if no valid data\n        console.log('No valid assessment type performance data, showing empty chart');\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: [],\n            datasets: [{\n              label: 'No Data',\n              data: [],\n              borderColor: 'rgb(203, 213, 225)',\n              backgroundColor: 'rgba(203, 213, 225, 0.1)'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Score (%)'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // Update the refreshDashboard function to properly handle chart destruction\n    const refreshDashboard = async () => {\n      try {\n        isLoading.value = true;\n\n        // Destroy existing charts before fetching new data\n        initEmptyCharts();\n\n        // Wait a tick to ensure DOM updates\n        await nextTick();\n\n        // Fetch new data\n        await fetchDashboardData();\n\n        // Update the last refresh time\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const scrollToSection = sectionId => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    };\n\n    // Restore auto-refresh in onMounted function\n    onMounted(async () => {\n      try {\n        // Make sure DOM is rendered before initializing charts\n        await nextTick();\n        console.log('Dashboard mounted, initializing');\n\n        // Initialize with empty data while waiting for API\n        initEmptyCharts();\n\n        // Set up API interceptor to handle 404 errors gracefully\n        api.interceptors.response.use(response => response, error => {\n          if (error.response && error.response.status === 404) {\n            console.warn(`API endpoint not found: ${error.config.url}`);\n          }\n          return Promise.reject(error);\n        });\n\n        // Set auth token for API requests\n        if (store.state.auth.token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${store.state.auth.token}`;\n        }\n\n        // Fetch available years and sections with data\n        await fetchAvailableFilters();\n\n        // Ensure all available years are set properly\n        if (availableYears.value.length === 0) {\n          availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        }\n\n        // Fetch dashboard data\n        await fetchDashboardData();\n\n        // Set up auto-refresh\n        if (autoRefreshInterval.value) {\n          clearInterval(autoRefreshInterval.value);\n        }\n\n        // Refresh every 5 minutes, but only if tab is visible\n        autoRefreshInterval.value = setInterval(() => {\n          if (document.visibilityState === 'visible') {\n            refreshDashboard();\n          }\n        }, 5 * 60 * 1000); // 5 minutes\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n        // Make sure we still have empty charts if data loading fails\n        await nextTick();\n        initEmptyCharts();\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n\n    // Add watch for date changes\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n      }\n    });\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedYear,\n      selectedSection,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard,\n      fetchAvailableFilters,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","onUnmounted","nextTick","useStore","Chart","axios","moment","api","create","baseURL","name","setup","store","performanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","selectedYear","selectedSection","selectedStartDate","selectedEndDate","dashboardContainer","isLoading","lastUpdate","autoRefreshInterval","sections","subjects","availableYears","today","format","isCITHead","getters","token","state","auth","userName","user","firstName","lastName","trim","hasActiveFilters","Boolean","value","newToken","defaults","headers","common","immediate","totalStudents","totalTeachers","averageAttendance","averageScore","activeSections","data","hasAttendanceData","attendanceDistribution","some","val","hasScoreData","assessmentTypes","Array","isArray","type","count","hasPerformanceData","hasAssessmentData","performanceTrends","length","trend","section","hasSectionData","fetchAvailableFilters","response","get","students","years","Set","map","student","year","filter","sort","updateSectionsForSelectedYear","console","log","error","params","uniqueSections","sectionName","id","teacherName","warn","fetchAttendanceData","url","queryParts","push","encodeURIComponent","join","fetch","ok","attendanceData","json","statusCounts","forEach","record","status","message","statsData","validDistribution","Date","lastWeek","fill","_","i","date","setDate","getDate","toISOString","split","allAttendanceRecords","dateAttendance","fetchDashboardData","startDate","endDate","statsResponse","hasValidData","totalAttendance","reduce","a","b","presentAttendance","Math","round","fetchAssessmentData","totalScore","totalCount","updateCharts","URLSearchParams","append","queryString","toString","assessments","Error","scores","slice","assessment","assessmentType","assessment_type","scoreArray","Map","from","values","Object","validScores","score","percentage","maxScore","keys","typeData","completionRate","t","assessmentDate","assessment_date","sum","title","sectionPerformance","scoreCount","assessmentCount","attendanceRate","performance","updatePerformanceChart","updateAssessmentTypeChart","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","initEmptyCharts","charts","canvas","ctx","getContext","existingChart","getChart","destroy","emptyData","formatDate","handleYearChange","handleSectionChange","handleFilterChange","clearFilters","then","getFilterDisplay","filters","formattedStart","formattedEnd","attendanceLabels","totalAttendanceCount","labels","datasets","backgroundColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","position","usePointStyle","padding","font","size","tooltip","callbacks","label","context","raw","total","chart","display","enabled","assessmentData","counts","colors","item","index","parseFloat","entries","hasData","v","borderRadius","maxBarThickness","dataIndex","scales","y","beginAtZero","max","ticks","callback","trends","borderColor","tension","pointRadius","pointBackgroundColor","pointHoverRadius","tooltipItems","toFixed","text","x","maxRotation","minRotation","trendsByType","Quiz","Activity","allDates","flat","color","point","find","d","getTime","replace","spanGaps","interaction","intersect","mode","dataset","refreshDashboard","scrollToSection","sectionId","document","getElementById","scrollIntoView","behavior","interceptors","use","config","Promise","reject","clearInterval","setInterval","visibilityState","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, Dean {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Computer and Information Technology Department Dashboard</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n          </select>\n        </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" @change=\"handleSectionChange\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section.id\" :value=\"section.name\">\n                {{ section.name }}{{ section.teacherName ? ` - ${section.teacherName}` : '' }}\n              </option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"d-flex justify-content-between\">\n            <button class=\"btn btn-outline-secondary\" @click=\"clearFilters\">Clear Filters</button>\n            <button class=\"btn btn-primary\" @click=\"refreshDashboard\">Apply</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Last Updated -->\n      <div class=\"last-update-badge\" v-if=\"lastUpdate\">\n        Last updated: {{ formatDate(lastUpdate) }}\n        <button class=\"btn btn-refresh ms-2\" @click=\"refreshDashboard\" title=\"Refresh Dashboard\">\n          <i class=\"fas fa-sync-alt\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-user-graduate\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n        </div>\n      </div>\n      </div>\n\n      <!-- Total Teachers Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-chalkboard-teacher\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Teachers</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ totalTeachers }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n        </div>\n      </div>\n        </div>\n\n      <!-- Active Sections Card -->\n      <div class=\"col-md-4\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-users\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading\">{{ activeSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Performance Stats -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Average Attendance Card -->\n      <div v-if=\"isCITHead\" class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-clock\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasAttendanceData\">{{ averageAttendance }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n        </div>\n      </div>\n      </div>\n      \n      <!-- Average Score Card -->\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n          <i class=\"fas fa-chart-line\"></i>\n        </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Score</h3>\n            <div class=\"stat-value\" v-if=\"!isLoading && hasScoreData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"isLoading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart -->\n      <div class=\"col-md-6 mb-4\">\n      <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns across the department</p>\n        <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n          <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !isLoading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n      <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type across the department</p>\n        <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n          <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !isLoading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n        </div>\n      </div>\n    </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Department average scores across recent assessments</p>\n      <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n      </div>\n    </div>\n\n    <!-- Section Performance -->\n      <div class=\"col-md-6 mb-4\">\n    <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n      <div class=\"chart-container\">\n              <div v-if=\"isLoading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n        <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !isLoading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, onUnmounted, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\n\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n    const selectedYear = ref('')\n    const selectedSection = ref('')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const dashboardContainer = ref(null)\n    const isLoading = ref(false)\n    const lastUpdate = ref(null)\n    const autoRefreshInterval = ref(null)\n    const sections = ref([])\n    const subjects = ref([])\n    const availableYears = ref([])\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead)\n    const token = computed(() => store.state.auth.token)\n    \n    // Get user name\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User';\n    });\n    \n    // Check if filters are active\n    const hasActiveFilters = computed(() => {\n      return Boolean(selectedYear.value || selectedSection.value);\n    });\n\n    // Set auth token for all requests\n    watch(token, (newToken) => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, { immediate: true });\n\n    // Dashboard stats\n    const totalStudents = ref(0)\n    const totalTeachers = ref(0)\n    const averageAttendance = ref(0)\n    const averageScore = ref(0)\n    const activeSections = ref(0)\n    const data = ref(null)\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasScoreData = computed(() => {\n      if (!data.value) return false;\n      \n      // Check for average score\n      if (data.value.averageScore > 0) return true;\n      \n      // Check assessment types for any with scores\n      if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n        return data.value.assessmentTypes.some(type => (type.averageScore > 0 && type.count > 0));\n      }\n      \n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      if (!data.value) return false;\n      \n      // Check for assessment data\n      if (hasAssessmentData.value) return true;\n      \n      // Check for performance trends\n      if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n        return data.value.performanceTrends.some(trend => trend.averageScore > 0);\n      }\n      \n      // Check sections data\n      if (Array.isArray(data.value.sections) && data.value.sections.length > 0) {\n        return data.value.sections.some(section => section.averageScore > 0);\n      }\n      \n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (!data.value) return false;\n      \n      // Check for assessment types data\n      if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n        return data.value.assessmentTypes.some(type => type.count > 0 && type.averageScore > 0);\n      }\n      \n      return false;\n    });\n\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n\n    // Fetch available years and sections directly from database records\n    const fetchAvailableFilters = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Get all student records to extract years and sections\n        const response = await api.get('/students', {\n          headers: { 'Authorization': `Bearer ${token.value}` }\n        });\n        \n        if (response.data && Array.isArray(response.data)) {\n          // Extract unique years and sections from student records\n          const students = response.data;\n          \n          // Get unique years with data\n          const years = [...new Set(students.map(student => student.year))].filter(Boolean);\n          availableYears.value = years.length > 0 ? years.sort() : ['1st', '2nd', '3rd', '4th'];\n          \n          // Get unique sections based on selectedYear\n          await updateSectionsForSelectedYear();\n          \n          console.log('Fetched available filters:', {\n            years: availableYears.value,\n            sections: sections.value\n          });\n        }\n        \n        isLoading.value = false;\n      } catch (error) {\n        console.error('Error fetching available filters:', error);\n        // Keep default years if API fails\n        availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        isLoading.value = false;\n      }\n    };\n\n    // New function to update sections based on selected year\n    const updateSectionsForSelectedYear = async () => {\n      try {\n        console.log('Updating sections for year:', selectedYear.value || 'All Years');\n        sections.value = []; // Clear existing sections first\n        \n        const params = {};\n        if (selectedYear.value) {\n          params.year = selectedYear.value;\n        }\n        \n        // Get students filtered by year if selected\n        const response = await api.get('/students', {\n          params,\n          headers: { 'Authorization': `Bearer ${token.value}` }\n        });\n        \n        if (response.data && Array.isArray(response.data)) {\n          const students = response.data;\n          \n          // Get unique sections matching the selected year\n          let uniqueSections = [];\n          \n          if (selectedYear.value) {\n            // Filter students by the selected year before extracting sections\n            uniqueSections = [...new Set(\n              students\n                .filter(student => student.year === selectedYear.value)\n                .map(student => student.section)\n            )].filter(Boolean);\n          } else {\n            // If no year selected, get all unique sections\n            uniqueSections = [...new Set(\n              students.map(student => student.section)\n            )].filter(Boolean);\n          }\n          \n          console.log(`Found ${uniqueSections.length} sections for ${selectedYear.value || 'all years'}:`, uniqueSections);\n          \n          // Map sections to include teacher info if available\n          sections.value = uniqueSections.map(sectionName => ({\n            id: sectionName,\n            name: sectionName,\n            teacherName: '' // We could fetch teacher info in the future\n          }));\n        } else {\n          console.warn('No student data received when updating sections');\n          sections.value = [];\n        }\n      } catch (error) {\n        console.error('Error updating sections for year:', error);\n        sections.value = [];\n      }\n    };\n\n    // Fetch attendance data for the charts\n    const fetchAttendanceData = async () => {\n      try {\n        console.log('Fetching attendance with filters:', {\n          year: selectedYear.value || 'All Years',\n          section: selectedSection.value || 'All Sections'\n        });\n        \n        let attendanceDistribution = [0, 0, 0]; // Default empty distribution [present, late, absent]\n        \n        // First approach: Try direct approach with specific filter handling\n        try {\n          console.log('Fetching attendance directly with filters');\n          \n          // Build query params differently for Windows/PowerShell URL handling\n          let url = `${api.defaults.baseURL}/attendance`;\n          let queryParts = [];\n          \n          if (selectedYear.value) {\n            queryParts.push(`year=${encodeURIComponent(selectedYear.value)}`);\n          }\n          \n          if (selectedSection.value) {\n            queryParts.push(`section=${encodeURIComponent(selectedSection.value)}`);\n          }\n          \n          if (selectedStartDate.value) {\n            queryParts.push(`startDate=${encodeURIComponent(selectedStartDate.value)}`);\n          }\n          \n          if (selectedEndDate.value) {\n            queryParts.push(`endDate=${encodeURIComponent(selectedEndDate.value)}`);\n          }\n          \n          // Add query string if we have parameters\n          if (queryParts.length > 0) {\n            url += '?' + queryParts.join('&');\n          }\n          \n          console.log('Fetching attendance from URL:', url);\n          \n          // Make direct fetch request\n          const response = await fetch(url, {\n            headers: {\n              'Authorization': `Bearer ${token.value}`\n            }\n          });\n          \n          if (response.ok) {\n            const attendanceData = await response.json();\n            console.log('Attendance data received:', \n              Array.isArray(attendanceData) ? `${attendanceData.length} records` : 'Non-array data');\n            \n            if (Array.isArray(attendanceData) && attendanceData.length > 0) {\n              // Process attendance records\n              const statusCounts = [0, 0, 0]; // [present, late, absent]\n              \n              attendanceData.forEach(record => {\n                if (record.status === 'present') statusCounts[0]++;\n                else if (record.status === 'late') statusCounts[1]++;\n                else if (record.status === 'absent') statusCounts[2]++;\n              });\n              \n              console.log('Calculated attendance counts:', statusCounts);\n              \n              // Only use this data if we have at least one attendance record\n              if (statusCounts.some(count => count > 0)) {\n                attendanceDistribution = statusCounts;\n                return attendanceDistribution;\n              }\n            }\n          } else {\n            console.warn(`Attendance API returned status: ${response.status}`);\n          }\n        } catch (error) {\n          console.log('Error fetching attendance directly:', error.message);\n        }\n        \n        // Second approach: Try fetching from dashboard stats\n        try {\n          console.log('Trying to get attendance from dashboard stats');\n          \n          // Build URL for stats\n          let url = `${api.defaults.baseURL}/dashboard/stats`;\n          let queryParts = [];\n          \n          if (selectedYear.value) {\n            queryParts.push(`year=${encodeURIComponent(selectedYear.value)}`);\n          }\n          \n          if (selectedSection.value) {\n            queryParts.push(`section=${encodeURIComponent(selectedSection.value)}`);\n          }\n          \n          if (queryParts.length > 0) {\n            url += '?' + queryParts.join('&');\n          }\n          \n          console.log('Fetching dashboard stats from URL:', url);\n          \n          const response = await fetch(url, {\n            headers: {\n              'Authorization': `Bearer ${token.value}`\n            }\n          });\n          \n          if (response.ok) {\n            const statsData = await response.json();\n            \n            if (statsData && Array.isArray(statsData.attendanceDistribution)) {\n              console.log('Attendance distribution from stats:', statsData.attendanceDistribution);\n              \n              // Validate attendance distribution data\n              const validDistribution = statsData.attendanceDistribution.map(val => \n                (typeof val === 'number') ? val : 0\n              );\n              \n              // Only use if we have some valid data\n              if (validDistribution.some(val => val > 0)) {\n                attendanceDistribution = validDistribution;\n                return attendanceDistribution;\n              }\n            }\n          }\n        } catch (error) {\n          console.log('Error fetching from dashboard stats:', error.message);\n        }\n        \n        // Third approach: Try to get attendance by date\n        try {\n          console.log('Trying to get attendance by date for recent days');\n          \n          const today = new Date();\n          const lastWeek = new Array(7).fill(0).map((_, i) => {\n            const date = new Date(today);\n            date.setDate(date.getDate() - i);\n            return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n          });\n          \n          let allAttendanceRecords = [];\n          \n          // Get attendance for recent dates\n          for (const date of lastWeek) {\n            try {\n              let url = `${api.defaults.baseURL}/attendance/date/${date}`;\n              if (selectedYear.value) {\n                url += `?year=${encodeURIComponent(selectedYear.value)}`;\n                if (selectedSection.value) {\n                  url += `&section=${encodeURIComponent(selectedSection.value)}`;\n                }\n              }\n              \n              const response = await fetch(url, {\n                headers: {\n                  'Authorization': `Bearer ${token.value}`\n                }\n              });\n              \n              if (response.ok) {\n                const dateAttendance = await response.json();\n                if (Array.isArray(dateAttendance)) {\n                  allAttendanceRecords = [...allAttendanceRecords, ...dateAttendance];\n                }\n              }\n            } catch (error) {\n              // Silently continue to next date\n            }\n          }\n          \n          console.log(`Collected ${allAttendanceRecords.length} attendance records from recent dates`);\n          \n          if (allAttendanceRecords.length > 0) {\n            // Process all attendance records\n            const statusCounts = [0, 0, 0]; // [present, late, absent]\n            \n            allAttendanceRecords.forEach(record => {\n              if (record.status === 'present') statusCounts[0]++;\n              else if (record.status === 'late') statusCounts[1]++;\n              else if (record.status === 'absent') statusCounts[2]++;\n            });\n            \n            console.log('Calculated attendance counts from dates:', statusCounts);\n            \n            if (statusCounts.some(count => count > 0)) {\n              attendanceDistribution = statusCounts;\n              return attendanceDistribution;\n            }\n          }\n        } catch (error) {\n          console.log('Error fetching attendance by date:', error.message);\n        }\n        \n        // Return empty distribution if all approaches failed\n        console.log('All attendance data fetching approaches failed. Using empty distribution.');\n        return attendanceDistribution;\n      } catch (error) {\n        console.error('Error in attendance data fetching:', error);\n        return [0, 0, 0];\n      }\n    };\n\n    const fetchDashboardData = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Prepare query parameters\n        const params = {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        };\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // First, fetch attendance data\n        const attendanceDistribution = await fetchAttendanceData();\n        console.log('Attendance distribution for current filters:', attendanceDistribution);\n        \n        // Get dashboard stats - ensure we're using the same filters\n        const statsResponse = await api.get('/dashboard/stats', { params });\n        \n        data.value = statsResponse.data || {};\n        console.log('Dashboard stats response:', data.value);\n        \n        // Check if we received any meaningful data\n        const hasValidData = \n          (data.value.totalStudents > 0) || \n          (data.value.totalTeachers > 0) || \n          (data.value.activeSections > 0) || \n          (data.value.performanceTrends && data.value.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update basic stats\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        activeSections.value = data.value.activeSections || 0;\n        \n        // Use our fetched attendance data\n        data.value.attendanceDistribution = attendanceDistribution;\n        \n        // Calculate average attendance from distribution\n        const totalAttendance = attendanceDistribution.reduce((a, b) => a + b, 0);\n        if (totalAttendance > 0) {\n          // Calculate percentage of present and late (not absent)\n          const presentAttendance = attendanceDistribution[0] + attendanceDistribution[1];\n          averageAttendance.value = Math.round((presentAttendance / totalAttendance) * 100);\n        } else {\n          averageAttendance.value = 0;\n        }\n        \n        // Process assessment data for charts\n        await fetchAssessmentData();\n        \n        // Calculate averageScore from assessment data instead of using stats\n        if (data.value.assessmentTypes && Array.isArray(data.value.assessmentTypes)) {\n          let totalScore = 0;\n          let totalCount = 0;\n          \n          data.value.assessmentTypes.forEach(type => {\n            if (type.averageScore > 0 && type.count > 0) {\n              totalScore += type.averageScore * type.count;\n              totalCount += type.count;\n            }\n          });\n          \n          if (totalCount > 0) {\n            averageScore.value = Math.round(totalScore / totalCount);\n            data.value.averageScore = averageScore.value;\n          } else {\n            averageScore.value = 0;\n            data.value.averageScore = 0;\n          }\n          \n          console.log(`Calculated average score: ${averageScore.value}% from ${totalCount} assessments`);\n        } else {\n          averageScore.value = 0;\n          data.value.averageScore = 0;\n        }\n\n        // Update charts with new data\n        updateCharts(data.value);\n        \n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        \n        // Initialize with empty data if main stats request fails\n        data.value = {\n          totalStudents: 0,\n          totalTeachers: 0,\n          activeSections: 0,\n          attendanceDistribution: [0, 0, 0],\n          averageAttendance: 0,\n          assessmentTypes: [],\n          performanceTrends: [],\n          averageScore: 0,\n          sections: []\n        };\n        \n        totalStudents.value = 0;\n        totalTeachers.value = 0;\n        activeSections.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n        \n        // Update charts with empty data\n        updateCharts(data.value);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    \n    // Fetch assessment data directly with better approach\n    const fetchAssessmentData = async () => {\n      try {\n        console.log('Fetching assessment data for filters:', {\n          year: selectedYear.value || 'All',\n          section: selectedSection.value || 'All',\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n        \n        // Test directly with fetch to avoid axios URL encoding issues on Windows\n        const params = new URLSearchParams();\n        \n        // Add params only if they exist\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        \n        // Build the URL with query string\n        const queryString = params.toString();\n        const url = `${api.defaults.baseURL}/assessments${queryString ? '?' + queryString : ''}`;\n        \n        console.log('Fetching assessments from URL:', url);\n        \n        // Make the direct fetch request\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': `Bearer ${token.value}`\n          }\n        });\n        \n        let assessments = [];\n        \n        if (response.ok) {\n          assessments = await response.json();\n          console.log('Fetched assessments count:', assessments?.length || 0);\n        } else {\n          console.error('Assessments API failed with status:', response.status);\n          throw new Error(`API error: ${response.status}`);\n        }\n        \n        if (Array.isArray(assessments) && assessments.length > 0) {\n          console.log('Successfully fetched assessment data');\n          \n          // Process the assessment data\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scores: [] },\n            'Activity': { count: 0, totalScore: 0, scores: [] },\n            'Performance Task': { count: 0, totalScore: 0, scores: [] }\n          };\n          \n          // Log sample assessment data to understand structure\n          console.log('Sample assessment data:', assessments.slice(0, 1));\n          \n          // Process each assessment\n          assessments.forEach(assessment => {\n            // Make sure we have a type - default to \"Other\" if none found\n            const type = assessment.type || assessment.assessmentType || assessment.assessment_type || 'Other';\n            \n            // Initialize type if it doesn't exist\n            if (!assessmentTypes[type]) {\n              assessmentTypes[type] = { count: 0, totalScore: 0, scores: [] };\n            }\n            \n            // Increment count for this type\n            assessmentTypes[type].count++;\n            \n            // Process scores if available\n            if (assessment.scores) {\n              // Handle both array and Map formats\n              let scoreArray = [];\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (assessment.scores instanceof Map) {\n                scoreArray = Array.from(assessment.scores.values());\n              } else if (typeof assessment.scores === 'object') {\n                // Handle object format\n                scoreArray = Object.values(assessment.scores);\n              }\n              \n              // Filter for valid scores and calculate percentages\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              validScores.forEach(score => {\n                const percentage = assessment.maxScore ? (score / assessment.maxScore) * 100 : score;\n                assessmentTypes[type].totalScore += percentage;\n                assessmentTypes[type].scores.push(percentage);\n              });\n            }\n          });\n          \n          // Calculate averages and prepare for chart\n          data.value.assessmentTypes = Object.keys(assessmentTypes)\n            .filter(type => assessmentTypes[type].count > 0) // Only include types with data\n            .map(type => {\n              const typeData = assessmentTypes[type];\n              const averageScore = typeData.scores.length > 0 \n                ? typeData.totalScore / typeData.scores.length \n                : 0;\n                \n              return {\n                type,\n                averageScore: Math.round(averageScore),\n                count: typeData.count,\n                completionRate: typeData.count > 0 ? 100 : 0\n              };\n            });\n          \n          console.log(`Assessment types processed:`, \n            data.value.assessmentTypes.map(t => `${t.type}: ${t.count} assessments, avg ${t.averageScore}%`));\n          \n          // Generate performance trends from assessment data\n          data.value.performanceTrends = assessments\n            .filter(a => a.date || a.assessmentDate || a.assessment_date) // Only include assessments with dates\n            .map(assessment => {\n              // Get the date - check various possible field names\n              const date = assessment.date || assessment.assessmentDate || assessment.assessment_date;\n              \n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              // Handle different score formats\n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (assessment.scores instanceof Map) {\n                  scoreArray = Array.from(assessment.scores.values());\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                // Calculate average from valid scores\n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = assessment.maxScore \n                    ? (totalScore / validScores.length / assessment.maxScore) * 100\n                    : totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: date,\n                title: assessment.name || assessment.title || assessment.type || 'Assessment',\n                averageScore: Math.round(averageScore),\n                type: assessment.type || assessment.assessmentType || 'Assessment'\n              };\n            })\n            .filter(trend => trend.date && trend.averageScore > 0) // Only keep trends with dates and scores\n            .sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort by date\n          \n          console.log(`Performance trends processed: ${data.value.performanceTrends.length} data points with dates and scores`);\n          \n          // Process section data if available\n          // Group assessments by section\n          const sectionPerformance = {};\n          \n          // Only process section performance if we actually have data\n          if (assessments.length > 0) {\n            assessments.forEach(assessment => {\n              const section = assessment.section || assessment.sectionName || '';\n              if (section) {\n                if (!sectionPerformance[section]) {\n                  sectionPerformance[section] = {\n                    totalScore: 0,\n                    scoreCount: 0,\n                    assessmentCount: 0\n                  };\n                }\n                \n                sectionPerformance[section].assessmentCount++;\n                \n                // Process scores\n                let scoreArray = [];\n                if (assessment.scores) {\n                  if (Array.isArray(assessment.scores)) {\n                    scoreArray = assessment.scores;\n                  } else if (assessment.scores instanceof Map) {\n                    scoreArray = Array.from(assessment.scores.values());\n                  } else if (typeof assessment.scores === 'object') {\n                    scoreArray = Object.values(assessment.scores);\n                  }\n                  \n                  // Process valid scores\n                  const validScores = scoreArray.filter(score => typeof score === 'number');\n                  validScores.forEach(score => {\n                    const percentage = assessment.maxScore ? (score / assessment.maxScore) * 100 : score;\n                    sectionPerformance[section].totalScore += percentage;\n                    sectionPerformance[section].scoreCount++;\n                  });\n                }\n              }\n            });\n            \n            // Prepare section data for chart if we have any\n            if (Object.keys(sectionPerformance).length > 0) {\n              data.value.sections = Object.keys(sectionPerformance)\n                .filter(sectionName => sectionPerformance[sectionName].scoreCount > 0) // Only include sections with scores\n                .map(sectionName => {\n                  const section = sectionPerformance[sectionName];\n                  const averageScore = section.scoreCount > 0 \n                    ? section.totalScore / section.scoreCount \n                    : 0;\n                  \n                  return {\n                    name: sectionName,\n                    averageScore: Math.round(averageScore),\n                    attendanceRate: 0, // We don't have this data\n                    performance: Math.round(averageScore), // For backward compatibility\n                    assessmentCount: section.assessmentCount\n                  };\n                });\n              \n              console.log(`Section data processed: ${data.value.sections.length} sections with performance data`);\n            }\n          }\n        } else {\n          console.warn('No assessment data found for the selected filters');\n          // Set default values\n          data.value.assessmentTypes = [\n            { type: 'Quiz', averageScore: 0, count: 0 },\n            { type: 'Activity', averageScore: 0, count: 0 },\n            { type: 'Performance Task', averageScore: 0, count: 0 }\n          ];\n          data.value.performanceTrends = [];\n          data.value.sections = [];\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Set default values\n        data.value.assessmentTypes = [\n          { type: 'Quiz', averageScore: 0, count: 0 },\n          { type: 'Activity', averageScore: 0, count: 0 },\n          { type: 'Performance Task', averageScore: 0, count: 0 }\n        ];\n        data.value.performanceTrends = [];\n        data.value.sections = [];\n      }\n    };\n\n    const updateCharts = (data) => {\n      updatePerformanceChart(data);\n      updateAssessmentTypeChart(data);\n      updatePerformanceTrendChart(data);\n      updateAssessmentTypePerformanceChart(data);\n    };\n\n    // Update initEmptyCharts to properly handle chart destruction\n    const initEmptyCharts = () => {\n      // First destroy any existing charts to prevent \"Canvas is already in use\" errors\n      const charts = [\n        performanceChart.value, \n        assessmentTypeChart.value, \n        performanceTrendChart.value,\n        assessmentTypePerformanceChart.value\n      ];\n      \n      // Destroy all existing charts first\n      charts.forEach(canvas => {\n        if (canvas) {\n          const ctx = canvas.getContext('2d');\n          if (ctx) {\n            const existingChart = Chart.getChart(ctx);\n            if (existingChart) {\n              existingChart.destroy();\n            }\n          }\n        }\n      });\n      \n      // Create empty data structure\n      const emptyData = {\n        totalStudents: 0,\n        totalTeachers: 0,\n        activeSections: 0,\n        averageAttendance: 0,\n        averageScore: 0,\n        attendanceDistribution: [0, 0, 0],\n        assessmentTypes: [\n          { type: 'Quiz', averageScore: 0, count: 0 },\n          { type: 'Activity', averageScore: 0, count: 0 },\n          { type: 'Performance Task', averageScore: 0, count: 0 }\n        ],\n        performanceTrends: [],\n        sections: []\n      };\n      \n      // Update charts with empty data\n      updateCharts(emptyData);\n    };\n\n    // Format date for display\n    const formatDate = (date) => {\n      if (!date) return '';\n      return moment(date).format('MMMM D, YYYY h:mm A');\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      console.log('Year changed to:', selectedYear.value);\n      \n      // Reset the section when year changes\n      selectedSection.value = '';\n      \n      // Update sections based on the new year\n      await updateSectionsForSelectedYear();\n      \n      // Update dashboard data with new filters\n      await fetchDashboardData();\n    };\n\n    // Handle section change\n    const handleSectionChange = async () => {\n      // Update dashboard data with new filters\n      fetchDashboardData();\n    };\n\n    // Handle filter change\n    const handleFilterChange = () => {\n      fetchDashboardData();\n    };\n\n    // Clear all filters\n    const clearFilters = () => {\n      console.log('Clearing all filters');\n      \n      // Reset all filter values\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedStartDate.value = '';\n      selectedEndDate.value = '';\n      \n      // Reset sections \n      sections.value = [];\n      \n      // Refresh the dashboard with no filters\n      fetchAvailableFilters().then(() => {\n        console.log('Available filters refreshed, fetching dashboard data');\n        fetchDashboardData();\n      });\n    };\n\n    // Get filter display text\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value)\n      if (selectedSection.value) filters.push(selectedSection.value)\n      \n      // Add date range to display if selected\n      if (selectedStartDate.value && selectedEndDate.value) {\n        const formattedStart = moment(selectedStartDate.value).format('MMM D')\n        const formattedEnd = moment(selectedEndDate.value).format('MMM D, YYYY')\n        filters.push(`${formattedStart} - ${formattedEnd}`)\n      } else if (selectedStartDate.value) {\n        filters.push(`From ${moment(selectedStartDate.value).format('MMM D, YYYY')}`)\n      } else if (selectedEndDate.value) {\n        filters.push(`Until ${moment(selectedEndDate.value).format('MMM D, YYYY')}`)\n      }\n      \n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    };\n\n    // Update charts with data\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      \n      // Attendance status distribution data\n      const attendanceLabels = ['Present', 'Late', 'Absent'];\n      let attendanceData = data.attendanceDistribution || [0, 0, 0];\n      \n      // Log attendance data for debugging\n      console.log('Raw attendance data:', attendanceData);\n      \n      // Ensure each value is a number\n      attendanceData = attendanceData.map(val => (typeof val === 'number') ? val : 0);\n      \n      // Ensure we have at least some data to display\n      const totalAttendanceCount = attendanceData.reduce((a, b) => a + b, 0);\n      \n      // Check if we have valid data to show\n      const hasValidData = totalAttendanceCount > 0;\n      \n      // Log for debugging\n      console.log('Final attendance distribution data:', attendanceData, 'hasValidData:', hasValidData);\n      \n      // Create chart\n      if (hasValidData) {\n        new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: attendanceLabels,\n            datasets: [{\n              data: attendanceData,\n              backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],\n              borderWidth: 0,\n              hoverOffset: 4\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            cutout: '70%',\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 15,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    const label = context.label || '';\n                    const value = context.raw || 0;\n                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);\n                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart with \"No data available\" message\n        new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['No Data'],\n            datasets: [{\n              data: [1],\n              backgroundColor: ['#e2e8f0'],\n              borderWidth: 0\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            cutout: '70%',\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                enabled: false\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Dispose of existing chart if it exists\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      \n      // Assessment types data\n      const assessmentData = data.assessmentTypes || [];\n      const labels = [];\n      const values = [];\n      const counts = [];\n      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#6366f1'];\n      \n      try {\n        // Extract assessment types data\n        if (Array.isArray(assessmentData) && assessmentData.length > 0) {\n          // If array format\n          assessmentData.forEach((item, index) => {\n            if (item && typeof item === 'object') {\n              // Only include items with a count > 0\n              if (item.count > 0) {\n                labels.push(item.type || `Type ${index + 1}`);\n                values.push(parseFloat(item.averageScore) || 0);\n                counts.push(item.count || 0);\n              }\n            }\n          });\n        } else if (typeof assessmentData === 'object' && assessmentData !== null) {\n          // If object format\n          Object.entries(assessmentData).forEach(([type, data], index) => {\n            if (data.count > 0) {\n              labels.push(type);\n              values.push(parseFloat(data.averageScore) || 0);\n              counts.push(data.count || 0);\n            }\n          });\n        }\n        \n        console.log(`Assessment type chart data: ${labels.length} types with data`);\n        console.log('Assessment types:', labels);\n        console.log('Average scores:', values);\n        console.log('Assessment counts:', counts);\n        \n        // If no data was extracted, use default types\n        if (labels.length === 0) {\n          labels.push('Quiz', 'Activity', 'Performance Task');\n          values.push(0, 0, 0);\n          counts.push(0, 0, 0);\n        }\n      } catch (error) {\n        console.error('Error processing assessment data:', error);\n        // Fallback to default labels and values\n        labels.push('Quiz', 'Activity', 'Performance Task');\n        values.push(0, 0, 0);\n        counts.push(0, 0, 0);\n      }\n      \n      // Check if we have any valid data\n      const hasData = labels.length > 0 && values.some(v => v > 0);\n      \n      // Create chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: values,\n            backgroundColor: colors.slice(0, labels.length),\n            borderWidth: 0,\n            borderRadius: 6,\n            maxBarThickness: 50\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  const type = labels[context.dataIndex];\n                  const count = counts[context.dataIndex];\n                  return `${type}: ${context.raw}% (${count} assessments)`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                callback: function(value) {\n                  return value + '%';\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) return;\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) return;\n      \n      // Properly destroy any existing chart\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      let trends = [];\n      if (data.performanceTrends && Array.isArray(data.performanceTrends)) {\n        // Filter out trends that have no valid score or date\n        trends = data.performanceTrends\n          .filter(trend => \n            trend.date && \n            (typeof trend.averageScore === 'number' || typeof trend.score === 'number')\n          )\n          .map(trend => ({\n            date: new Date(trend.date),\n            value: parseFloat(trend.averageScore || trend.score) || 0,\n            name: trend.title || trend.name || 'Assessment'\n          }))\n          .sort((a, b) => a.date - b.date);\n      }\n      \n      console.log(`Performance trend chart data: ${trends.length} valid data points`);\n      \n      // Check if we have any valid data points\n      const hasData = trends.length > 0 && trends.some(t => t.value > 0);\n      \n      if (hasData) {\n        // Create new chart after destroying the old one\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: trends.map(trend => moment(trend.date).format('MMM D, YYYY')),\n            datasets: [{\n              label: 'Average Score',\n              data: trends.map(trend => trend.value),\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderWidth: 2,\n              tension: 0.4,\n              fill: true,\n              pointRadius: 4,\n              pointBackgroundColor: 'rgb(59, 130, 246)',\n              pointHoverRadius: 6\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  title: (tooltipItems) => {\n                    if (!tooltipItems.length || !trends[tooltipItems[0].dataIndex]) return '';\n                    const trend = trends[tooltipItems[0].dataIndex];\n                    return `${moment(trend.date).format('MMM D, YYYY')} - ${trend.name}`;\n                  },\n                  label: (context) => {\n                    return `Score: ${context.raw.toFixed(1)}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Average Score (%)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart to show the \"No data available\" message\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: [],\n            datasets: [{\n              label: 'Average Score',\n              data: [],\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Average Score (%)'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      let hasValidData = false;\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          // Only process trends with valid scores and dates\n          if (trend.date && (typeof trend.averageScore === 'number' || typeof trend.score === 'number')) {\n            const type = trend.type || trend.title || 'Other';\n            const score = parseFloat(trend.averageScore || trend.score) || 0;\n            \n            // Create the array for this type if it doesn't exist\n            if (!trendsByType[type]) {\n              trendsByType[type] = [];\n            }\n            \n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: score\n            });\n            \n            if (score > 0) {\n              hasValidData = true;\n            }\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n      \n      // Only proceed if we have valid dates\n      if (allDates.length > 0 && hasValidData) {\n        console.log(`Assessment type performance chart: ${allDates.length} dates with data`);\n        \n        // Create datasets\n        const datasets = Object.entries(trendsByType)\n          .filter(([_, data]) => data.length > 0) // Only include types with data\n          .map(([type, data], index) => {\n            const colors = [\n              'rgb(52, 211, 153)',   // Green for Quiz\n              'rgb(59, 130, 246)',   // Blue for Activity\n              'rgb(251, 191, 36)'    // Yellow for Performance Task\n            ];\n            const color = colors[index % colors.length];\n  \n            return {\n              label: type,\n              data: allDates.map(date => {\n                const point = data.find(d => d.date.getTime() === date.getTime());\n                return point ? point.score : null;\n              }),\n              borderColor: color,\n              backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n              fill: true,\n              tension: 0.4,\n              pointRadius: 4,\n              pointHoverRadius: 6,\n              spanGaps: true // This will connect points even if there are null values\n            };\n          });\n  \n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n            datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            interaction: {\n              intersect: false,\n              mode: 'index'\n            },\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: (context) => {\n                    const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                    return `${context.dataset.label}: ${value}%`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Score (%)'\n                }\n              },\n              x: {\n                ticks: {\n                  maxRotation: 45,\n                  minRotation: 45\n                }\n              }\n            }\n          }\n        });\n      } else {\n        // Create an empty chart if no valid data\n        console.log('No valid assessment type performance data, showing empty chart');\n        new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: [],\n            datasets: [{\n              label: 'No Data',\n              data: [],\n              borderColor: 'rgb(203, 213, 225)',\n              backgroundColor: 'rgba(203, 213, 225, 0.1)'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'top'\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: 'Score (%)'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // Update the refreshDashboard function to properly handle chart destruction\n    const refreshDashboard = async () => {\n      try {\n        isLoading.value = true;\n        \n        // Destroy existing charts before fetching new data\n        initEmptyCharts();\n        \n        // Wait a tick to ensure DOM updates\n        await nextTick();\n        \n        // Fetch new data\n        await fetchDashboardData();\n        \n        // Update the last refresh time\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    const scrollToSection = (sectionId) => {\n      const section = document.getElementById(sectionId);\n      if (section) {\n        section.scrollIntoView({ behavior: 'smooth' });\n      }\n    };\n\n    // Restore auto-refresh in onMounted function\n    onMounted(async () => {\n      try {\n        // Make sure DOM is rendered before initializing charts\n        await nextTick();\n\n        console.log('Dashboard mounted, initializing');\n        \n        // Initialize with empty data while waiting for API\n        initEmptyCharts();\n        \n        // Set up API interceptor to handle 404 errors gracefully\n        api.interceptors.response.use(\n          response => response,\n          error => {\n            if (error.response && error.response.status === 404) {\n              console.warn(`API endpoint not found: ${error.config.url}`);\n            }\n            return Promise.reject(error);\n          }\n        );\n        \n        // Set auth token for API requests\n        if (store.state.auth.token) {\n          api.defaults.headers.common['Authorization'] = `Bearer ${store.state.auth.token}`;\n        }\n        \n        // Fetch available years and sections with data\n        await fetchAvailableFilters();\n        \n        // Ensure all available years are set properly\n        if (availableYears.value.length === 0) {\n          availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        }\n        \n        // Fetch dashboard data\n        await fetchDashboardData();\n        \n        // Set up auto-refresh\n        if (autoRefreshInterval.value) {\n          clearInterval(autoRefreshInterval.value);\n        }\n        \n        // Refresh every 5 minutes, but only if tab is visible\n        autoRefreshInterval.value = setInterval(() => {\n          if (document.visibilityState === 'visible') {\n            refreshDashboard();\n          }\n        }, 5 * 60 * 1000); // 5 minutes\n      } catch (error) {\n        console.error('Error initializing dashboard:', error);\n        // Make sure we still have empty charts if data loading fails\n        await nextTick();\n        initEmptyCharts();\n      }\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n\n    // Add watch for date changes\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n      }\n    });\n\n    return {\n      performanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedYear,\n      selectedSection,\n      sections,\n      subjects,\n      availableYears,\n      isCITHead,\n      userName,\n      hasActiveFilters,\n      totalStudents,\n      totalTeachers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      formatDate,\n      scrollToSection,\n      handleYearChange,\n      handleSectionChange,\n      clearFilters,\n      getFilterDisplay,\n      refreshDashboard,\n      fetchAvailableFilters,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.last-update-badge {\n  font-size: 0.85rem;\n  color: #64748b;\n  display: flex;\n  align-items: center;\n}\n\n.btn-refresh {\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #4a5568;\n  padding: 0.5rem;\n  border-radius: 8px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.btn-refresh:hover {\n  background: #f7fafc;\n  color: #2d3748;\n  border-color: #cbd5e1;\n}\n\n/* Dashboard Cards */\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n/* Chart Cards */\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n}\n\n.card-body {\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n\n  .greeting {\n    font-size: 1.75rem;\n  }\n  \n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n  \n  .chart-container {\n    height: 300px;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
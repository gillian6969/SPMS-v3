{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n\n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: [{\n          type: 'Quiz',\n          averageScore: 0\n        }, {\n          type: 'Activity',\n          averageScore: 0\n        }, {\n          type: 'Performance Task',\n          averageScore: 0\n        }]\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n\n        // Prepare query parameters\n        const params = {};\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        console.log('Fetching dashboard data with params:', params);\n\n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n\n        // Store complete data for reference\n        data.value = response.data;\n\n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n\n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          averageScore.value = parseFloat(response.data.averageScore).toFixed(1) || 0;\n        }\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // Update attendance chart (formerly performance chart)\n        if (hasAttendanceData.value) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          if (response.data && !response.data.attendanceDistribution) {\n            try {\n              const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n                params: {\n                  teacherId,\n                  year: selectedYear.value,\n                  section: selectedSection.value,\n                  subject: selectedSubject.value,\n                  startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                  endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n                },\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              if (attendanceResponse.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = attendanceResponse.data;\n                response.data.attendanceDistribution = [attendanceStats.present || 0, attendanceStats.late || 0, attendanceStats.absent || 0];\n                data.value = response.data;\n                updatePerformanceChart(response.data);\n              }\n            } catch (err) {\n              console.error('Error fetching attendance data:', err);\n              updatePerformanceChart({\n                attendanceDistribution: [0, 0, 0]\n              });\n            }\n          } else {\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n\n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n\n        // Update assessment data for the assessment type chart\n        if (response.data.assessmentTypeDistribution) {\n          // Extract assessment data from the response\n          const assessmentData = [];\n\n          // Process assessment type data from the dashboard API response\n          // The server provides assessment type information in the assessmentTypes field\n          if (response.data.assessmentTypes) {\n            Object.keys(response.data.assessmentTypes).forEach(type => {\n              const typeData = response.data.assessmentTypes[type];\n              assessmentData.push({\n                type: type,\n                averageScore: typeData.scoreCount > 0 ? (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0,\n                count: typeData.count || 0\n              });\n            });\n          } else {\n            // Fallback to standard assessment types if no data provided\n            assessmentData.push({\n              type: 'Quiz',\n              averageScore: 0,\n              count: 0\n            }, {\n              type: 'Activity',\n              averageScore: 0,\n              count: 0\n            }, {\n              type: 'Performance Task',\n              averageScore: 0,\n              count: 0\n            });\n          }\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n        } else {\n          updateAssessmentTypeChart({\n            assessmentData: [{\n              type: 'Quiz',\n              averageScore: 0,\n              count: 0\n            }, {\n              type: 'Activity',\n              averageScore: 0,\n              count: 0\n            }, {\n              type: 'Performance Task',\n              averageScore: 0,\n              count: 0\n            }]\n          });\n        }\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) ? data.attendanceDistribution.slice(0, 3) : [0, 0, 0];\n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for late\n            'rgba(239, 68, 68, 0.8)' // Red for absent\n            ],\n            borderColor: ['rgb(15, 140, 80)',\n            // Darker borders for contrast\n            'rgb(220, 160, 20)', 'rgb(220, 50, 50)'],\n            borderWidth: 1,\n            hoverOffset: 15\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n\n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n      }\n\n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Quiz\n            'rgba(59, 130, 246, 0.8)',\n            // Blue for Activity\n            'rgba(251, 191, 36, 0.8)' // Yellow for Performance Task\n            ],\n            borderColor: ['rgb(15, 140, 80)', 'rgb(45, 110, 220)', 'rgb(220, 160, 20)'],\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initDummyData();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","data","value","attendanceDistribution","some","val","hasPerformanceData","Array","isArray","performanceTrends","length","assessmentTypes","Object","values","type","count","hasAssessmentData","assessmentTypeDistribution","hasActivity","loading","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initDummyData","updatePerformanceChart","updateAssessmentTypeChart","assessmentData","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","startDate","endDate","response","hasOwnProperty","parseFloat","toFixed","attendanceResponse","subtract","attendanceStats","present","late","absent","err","keys","forEach","typeData","scoreCount","totalScore","ctx","getContext","existingChart","getChart","destroy","attendanceData","slice","totalAttendance","reduce","a","b","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","display","position","padding","font","size","tooltip","callbacks","label","context","raw","total","percentage","titleFont","weight","bodyFont","cornerRadius","layout","top","right","bottom","left","averageScores","totalCounts","typeAssessments","filter","totalCount","sum","borderRadius","barPercentage","scales","y","beginAtZero","max","grid","color","title","text","ticks","x","dataset","afterLabel","dataIndex","warn","validData","d","date","Number","score","tension","fill","pointRadius","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","trendsByType","Quiz","Activity","trend","Date","allDates","flat","item","entries","index","colors","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4 mt-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      if (data.value && data.value.attendanceDistribution) {\n        return data.value.attendanceDistribution.some(val => val > 0);\n      }\n      return false;\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref(null);\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n          \n          sections.value = uniqueSections.sort()\n          subjects.value = uniqueSubjects.sort()\n          \n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize dummy data for charts when no data is available\n    const initDummyData = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: [\n          { type: 'Quiz', averageScore: 0 },\n          { type: 'Activity', averageScore: 0 },\n          { type: 'Performance Task', averageScore: 0 }\n        ]\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to fetch dashboard data based on selected filters\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters\n        const params = {};\n        \n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching dashboard data with params:', params);\n        \n        // Fetch dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Update stats\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          averageScore.value = parseFloat(response.data.averageScore).toFixed(1) || 0;\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // Update attendance chart (formerly performance chart)\n        if (hasAttendanceData.value) {\n          updatePerformanceChart(response.data);\n        } else {\n          // If no attendance data, check if we need to fetch it separately\n          if (response.data && !response.data.attendanceDistribution) {\n            try {\n              const attendanceResponse = await axios.get(`http://localhost:8000/api/attendance/stats`, {\n                params: {\n                  teacherId,\n                  year: selectedYear.value,\n                  section: selectedSection.value,\n                  subject: selectedSubject.value,\n                  startDate: selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'),\n                  endDate: selectedEndDate.value || moment().format('YYYY-MM-DD')\n                },\n                headers: {\n                  'Authorization': `Bearer ${store.state.auth.token}`\n                }\n              });\n              \n              if (attendanceResponse.data) {\n                // Format the attendance data for our chart\n                const attendanceStats = attendanceResponse.data;\n                response.data.attendanceDistribution = [\n                  attendanceStats.present || 0,\n                  attendanceStats.late || 0,\n                  attendanceStats.absent || 0\n                ];\n                data.value = response.data;\n                updatePerformanceChart(response.data);\n              }\n            } catch (err) {\n              console.error('Error fetching attendance data:', err);\n              updatePerformanceChart({\n                attendanceDistribution: [0, 0, 0]\n              });\n            }\n          } else {\n            updatePerformanceChart({\n              attendanceDistribution: [0, 0, 0]\n            });\n          }\n        }\n        \n        // Handle other chart updates...\n        if (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends: []\n          });\n        }\n        \n        // Update assessment data for the assessment type chart\n        if (response.data.assessmentTypeDistribution) {\n          // Extract assessment data from the response\n          const assessmentData = [];\n          \n          // Process assessment type data from the dashboard API response\n          // The server provides assessment type information in the assessmentTypes field\n          if (response.data.assessmentTypes) {\n            Object.keys(response.data.assessmentTypes).forEach(type => {\n              const typeData = response.data.assessmentTypes[type];\n              assessmentData.push({\n                type: type,\n                averageScore: typeData.scoreCount > 0 ? \n                  (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0,\n                count: typeData.count || 0\n              });\n            });\n          } else {\n            // Fallback to standard assessment types if no data provided\n            assessmentData.push(\n              { type: 'Quiz', averageScore: 0, count: 0 },\n              { type: 'Activity', averageScore: 0, count: 0 },\n              { type: 'Performance Task', averageScore: 0, count: 0 }\n            );\n          }\n          \n          updateAssessmentTypeChart({ assessmentData });\n        } else {\n          updateAssessmentTypeChart({\n            assessmentData: [\n              { type: 'Quiz', averageScore: 0, count: 0 },\n              { type: 'Activity', averageScore: 0, count: 0 },\n              { type: 'Performance Task', averageScore: 0, count: 0 }\n            ]\n          });\n        }\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initDummyData();\n        loading.value = false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      let assessmentData = {};\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Initialize default data structure if proper data isn't available\n      if (!data.assessmentData || !Array.isArray(data.assessmentData)) {\n        // Sample data structure for fallback\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        assessmentTypes.forEach(type => {\n          assessmentData.averageScores[type] = 0;\n          assessmentData.totalCounts[type] = 0;\n        });\n      } else {\n        // Process actual data\n        assessmentData = {\n          assessmentTypes: assessmentTypes,\n          averageScores: {},\n          totalCounts: {}\n        };\n        \n        // Calculate average scores per assessment type\n        assessmentTypes.forEach(type => {\n          const typeAssessments = data.assessmentData.filter(a => a.type === type);\n          const totalCount = typeAssessments.length;\n          assessmentData.totalCounts[type] = totalCount;\n          \n          if (totalCount > 0) {\n            // Calculate average score\n            const totalScore = typeAssessments.reduce((sum, a) => sum + (parseFloat(a.averageScore) || 0), 0);\n            assessmentData.averageScores[type] = (totalScore / totalCount).toFixed(1);\n          } else {\n            assessmentData.averageScores[type] = 0;\n          }\n        });\n      }\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: assessmentTypes,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: assessmentTypes.map(type => assessmentData.averageScores[type]),\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ],\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = assessmentTypes[context.dataIndex];\n                  const count = assessmentData.totalCounts[type] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initDummyData();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
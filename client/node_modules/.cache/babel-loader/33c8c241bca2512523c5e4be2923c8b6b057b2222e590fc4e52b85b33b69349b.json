{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withModifiers as _withModifiers, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"attendance-view\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex align-items-center gap-3\"\n};\nconst _hoisted_5 = [\"disabled\"];\nconst _hoisted_6 = {\n  class: \"card\"\n};\nconst _hoisted_7 = {\n  class: \"card-body\"\n};\nconst _hoisted_8 = {\n  class: \"table-controls mb-4\",\n  style: {\n    \"z-index\": \"10000 !important\",\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_9 = {\n  class: \"d-flex gap-3 align-items-center\"\n};\nconst _hoisted_10 = {\n  class: \"d-flex gap-3\",\n  style: {\n    \"z-index\": \"10000 !important\",\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_11 = {\n  class: \"dropdown\",\n  style: {\n    \"z-index\": \"10000 !important\",\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_12 = {\n  class: \"dropdown-menu control-menu\",\n  style: {\n    \"z-index\": \"10000 !important\",\n    \"position\": \"absolute !important\"\n  }\n};\nconst _hoisted_13 = {\n  class: \"dropdown\",\n  style: {\n    \"z-index\": \"10000 !important\",\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_14 = {\n  class: \"btn btn-control\",\n  type: \"button\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_15 = {\n  key: 0,\n  class: \"filter-badge\"\n};\nconst _hoisted_16 = {\n  class: \"dropdown-menu control-menu p-3\",\n  style: {\n    \"width\": \"280px\",\n    \"z-index\": \"10000 !important\",\n    \"position\": \"absolute !important\"\n  }\n};\nconst _hoisted_17 = {\n  class: \"mb-3\"\n};\nconst _hoisted_18 = [\"value\"];\nconst _hoisted_19 = {\n  class: \"mb-3\"\n};\nconst _hoisted_20 = [\"disabled\"];\nconst _hoisted_21 = [\"value\"];\nconst _hoisted_22 = {\n  class: \"mb-3\"\n};\nconst _hoisted_23 = [\"disabled\"];\nconst _hoisted_24 = [\"value\"];\nconst _hoisted_25 = {\n  class: \"d-flex justify-content-end gap-2 mt-3\"\n};\nconst _hoisted_26 = {\n  class: \"search-control\",\n  style: {\n    \"flex\": \"1\",\n    \"max-width\": \"400px\",\n    \"z-index\": \"10000 !important\",\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_27 = {\n  class: \"input-group\"\n};\nconst _hoisted_28 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_29 = {\n  class: \"table table-hover\"\n};\nconst _hoisted_30 = [\"onClick\"];\nconst _hoisted_31 = {\n  class: \"attendance-status-container\"\n};\nconst _hoisted_32 = [\"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_33 = [\"selected\"];\nconst _hoisted_34 = [\"selected\"];\nconst _hoisted_35 = [\"selected\"];\nconst _hoisted_36 = {\n  key: 0\n};\nconst _hoisted_37 = {\n  colspan: \"4\",\n  class: \"text-center py-4\"\n};\nconst _hoisted_38 = {\n  class: \"empty-state-message\"\n};\nconst _hoisted_39 = {\n  key: 0,\n  class: \"text-muted small\"\n};\nconst _hoisted_40 = {\n  class: \"pagination-controls mt-3 d-flex justify-content-between align-items-center\"\n};\nconst _hoisted_41 = {\n  class: \"pagination-info\"\n};\nconst _hoisted_42 = {\n  class: \"pagination-buttons\"\n};\nconst _hoisted_43 = [\"disabled\"];\nconst _hoisted_44 = [\"disabled\"];\nconst _hoisted_45 = {\n  class: \"calendar-container\"\n};\nconst _hoisted_46 = {\n  class: \"calendar-header\"\n};\nconst _hoisted_47 = {\n  class: \"calendar-body\"\n};\nconst _hoisted_48 = {\n  class: \"input-group\"\n};\nconst _hoisted_49 = [\"value\", \"max\"];\nconst _hoisted_50 = {\n  class: \"quick-date-buttons mt-3\"\n};\nconst _hoisted_51 = {\n  class: \"table\"\n};\nconst _hoisted_52 = {\n  key: 0\n};\nconst _hoisted_53 = {\n  key: 1,\n  class: \"modal-overlay\",\n  style: {\n    \"display\": \"flex\",\n    \"position\": \"fixed\",\n    \"top\": \"0\",\n    \"left\": \"0\",\n    \"right\": \"0\",\n    \"bottom\": \"0\",\n    \"background-color\": \"rgba(0, 0, 0, 0.5)\",\n    \"z-index\": \"9999\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\"\n  }\n};\nconst _hoisted_54 = {\n  class: \"modal-wrapper\",\n  style: {\n    \"width\": \"100%\",\n    \"max-width\": \"600px\",\n    \"position\": \"relative\",\n    \"z-index\": \"10000\"\n  }\n};\nconst _hoisted_55 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_56 = {\n  class: \"modal-content\"\n};\nconst _hoisted_57 = {\n  class: \"modal-header\"\n};\nconst _hoisted_58 = {\n  class: \"modal-body\"\n};\nconst _hoisted_59 = {\n  class: \"mb-3\"\n};\nconst _hoisted_60 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_61 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_62 = {\n  class: \"flex-grow-1\"\n};\nconst _hoisted_63 = [\"min\"];\nconst _hoisted_64 = {\n  class: \"mb-3\"\n};\nconst _hoisted_65 = {\n  class: \"text-end\"\n};\nconst _hoisted_66 = [\"disabled\"];\nconst _hoisted_67 = {\n  key: 0\n};\nconst _hoisted_68 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StudentDetailsModal = _resolveComponent(\"StudentDetailsModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Control Buttons and Date Navigation \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Any attendance-specific buttons can go here \"), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.refreshAttendance && _ctx.refreshAttendance(...args)),\n    title: \"Refresh attendance data from database\"\n  }, _cache[35] || (_cache[35] = [_createElementVNode(\"i\", {\n    class: \"fas fa-sync-alt me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Refresh Attendance \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-success\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.showExportModal = true),\n    title: \"Export attendance records\"\n  }, _cache[36] || (_cache[36] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export Records \")]))]), _createCommentVNode(\" Date Navigation \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.navigateDate(-1))\n  }, _cache[37] || (_cache[37] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"div\", {\n    class: \"date-display\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.openCalendarPopup && $setup.openCalendarPopup(...args)),\n    role: \"button\"\n  }, _toDisplayString($setup.formatDate($setup.currentDate)), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.navigateDate(1)),\n    disabled: $setup.isNextDayDisabled\n  }, _cache[38] || (_cache[38] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_5)])]), _createCommentVNode(\" Attendance Table \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" Table Controls \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_createCommentVNode(\" Sort Dropdown \"), _createElementVNode(\"div\", _hoisted_11, [_cache[43] || (_cache[43] = _createElementVNode(\"button\", {\n    class: \"btn btn-control\",\n    type: \"button\",\n    \"data-bs-toggle\": \"dropdown\",\n    \"aria-expanded\": \"false\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-sort me-2\"\n  }), _createTextVNode(\" Sort by \")], -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_12, [_createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item d-flex align-items-center\",\n    href: \"#\",\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.sortBy('studentNumber'))\n  }, [_cache[39] || (_cache[39] = _createElementVNode(\"i\", {\n    class: \"fas fa-sort-numeric-down me-2\"\n  }, null, -1 /* HOISTED */)), _cache[40] || (_cache[40] = _createTextVNode(\" Student Number \")), _createElementVNode(\"i\", {\n    class: _normalizeClass([_ctx.getSortIcon('studentNumber'), \"ms-auto\"])\n  }, null, 2 /* CLASS */)])]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item d-flex align-items-center\",\n    href: \"#\",\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.sortBy('lastName'))\n  }, [_cache[41] || (_cache[41] = _createElementVNode(\"i\", {\n    class: \"fas fa-sort-alpha-down me-2\"\n  }, null, -1 /* HOISTED */)), _cache[42] || (_cache[42] = _createTextVNode(\" Name \")), _createElementVNode(\"i\", {\n    class: _normalizeClass([_ctx.getSortIcon('lastName'), \"ms-auto\"])\n  }, null, 2 /* CLASS */)])])])]), _createCommentVNode(\" Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", _hoisted_14, [_cache[44] || (_cache[44] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _cache[45] || (_cache[45] = _createTextVNode(\" Filter \")), $setup.selectedYear || $setup.selectedSection || $setup.selectedSubject ? (_openBlock(), _createElementBlock(\"span\", _hoisted_15, \"!\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_16, [_cache[52] || (_cache[52] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header mb-2\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [_cache[47] || (_cache[47] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Year Level\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $setup.selectedYear = $event),\n    onChange: _cache[8] || (_cache[8] = (...args) => _ctx.applyFilters && _ctx.applyFilters(...args))\n  }, [_cache[46] || (_cache[46] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Year\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_18);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_19, [_cache[49] || (_cache[49] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $setup.selectedSection = $event),\n    disabled: !$setup.selectedYear,\n    onChange: _cache[10] || (_cache[10] = (...args) => _ctx.applyFilters && _ctx.applyFilters(...args))\n  }, [_cache[48] || (_cache[48] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Section\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredSections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_21);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_20), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_22, [_cache[51] || (_cache[51] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $setup.selectedSubject = $event),\n    disabled: !$setup.selectedSection,\n    onChange: _cache[12] || (_cache[12] = (...args) => _ctx.applyFilters && _ctx.applyFilters(...args))\n  }, [_cache[50] || (_cache[50] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Subject\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.teacherSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_24);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_23), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-light\",\n    onClick: _cache[13] || (_cache[13] = (...args) => _ctx.clearFilters && _ctx.clearFilters(...args))\n  }, \" Clear All \"), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-primary\",\n    onClick: _cache[14] || (_cache[14] = (...args) => _ctx.applyFilters && _ctx.applyFilters(...args))\n  }, \" Apply Filters \")])])])]), _createCommentVNode(\" Search Control \"), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_cache[54] || (_cache[54] = _createElementVNode(\"span\", {\n    class: \"input-group-text border-end-0\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-search\"\n  })], -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control border-start-0\",\n    \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => $setup.searchQuery = $event),\n    placeholder: \"Search students...\",\n    onInput: _cache[16] || (_cache[16] = (...args) => _ctx.handleSearch && _ctx.handleSearch(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.searchQuery]]), $setup.searchQuery ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"btn btn-outline-secondary border-start-0\",\n    type: \"button\",\n    onClick: _cache[17] || (_cache[17] = (...args) => $setup.clearSearch && $setup.clearSearch(...args))\n  }, _cache[53] || (_cache[53] = [_createElementVNode(\"i\", {\n    class: \"fas fa-times\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Table \"), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"table\", _hoisted_29, [_cache[58] || (_cache[58] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Student Number\"), _createElementVNode(\"th\", null, \"Last Name\"), _createElementVNode(\"th\", null, \"First Name\"), _createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.paginatedStudents, student => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: student.studentNumber,\n      class: _normalizeClass([\"clickable-row\", {\n        'status-row-present': student.currentStatus === 'present',\n        'status-row-absent': student.currentStatus === 'absent',\n        'status-row-late': student.currentStatus === 'late'\n      }]),\n      onClick: $event => _ctx.viewStudentDetails(student)\n    }, [_createElementVNode(\"td\", null, _toDisplayString(student.studentNumber), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.lastName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.firstName), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_31, [_withDirectives(_createElementVNode(\"select\", {\n      class: _normalizeClass([\"form-select form-select-sm attendance-select\", {\n        'select-present': student.currentStatus === 'present',\n        'select-absent': student.currentStatus === 'absent',\n        'select-late': student.currentStatus === 'late',\n        'select-none': student.currentStatus === 'none'\n      }]),\n      \"onUpdate:modelValue\": $event => student.currentStatus = $event,\n      onChange: $event => _ctx.markAttendance(student, $event.target.value),\n      onClick: _cache[18] || (_cache[18] = _withModifiers(() => {}, [\"stop\"]))\n    }, [_cache[55] || (_cache[55] = _createElementVNode(\"option\", {\n      value: \"none\"\n    }, \"Not marked\", -1 /* HOISTED */)), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'present',\n      value: \"present\"\n    }, \"Present\", 8 /* PROPS */, _hoisted_33), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'absent',\n      value: \"absent\"\n    }, \"Absent\", 8 /* PROPS */, _hoisted_34), _createElementVNode(\"option\", {\n      selected: student.currentStatus === 'late',\n      value: \"late\"\n    }, \"Late\", 8 /* PROPS */, _hoisted_35)], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_32), [[_vModelSelect, student.currentStatus]]), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"status-indicator\", {\n        'indicator-present': student.currentStatus === 'present',\n        'indicator-absent': student.currentStatus === 'absent',\n        'indicator-late': student.currentStatus === 'late',\n        'indicator-none': student.currentStatus === 'none'\n      }])\n    }, [_createElementVNode(\"i\", {\n      class: _normalizeClass([\"fas\", {\n        'fa-check-circle': student.currentStatus === 'present',\n        'fa-times-circle': student.currentStatus === 'absent',\n        'fa-exclamation-circle': student.currentStatus === 'late',\n        'fa-question-circle': student.currentStatus === 'none'\n      }])\n    }, null, 2 /* CLASS */)], 2 /* CLASS */)])])], 10 /* CLASS, PROPS */, _hoisted_30);\n  }), 128 /* KEYED_FRAGMENT */)), $setup.paginatedStudents.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_36, [_createElementVNode(\"td\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_cache[56] || (_cache[56] = _createElementVNode(\"i\", {\n    class: \"fas fa-users text-muted mb-2\"\n  }, null, -1 /* HOISTED */)), _cache[57] || (_cache[57] = _createElementVNode(\"p\", {\n    class: \"mb-0\"\n  }, \"No students found\", -1 /* HOISTED */)), $setup.selectedYear || $setup.selectedSection || $setup.selectedSubject ? (_openBlock(), _createElementBlock(\"p\", _hoisted_39, \" Try adjusting your filters \")) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Pagination Controls \"), _createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"div\", _hoisted_41, \" Showing \" + _toDisplayString($setup.paginationInfo.start) + \" to \" + _toDisplayString($setup.paginationInfo.end) + \" of \" + _toDisplayString($setup.sortedStudents.length) + \" entries \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_42, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary me-2\",\n    onClick: _cache[19] || (_cache[19] = (...args) => $setup.previousPage && $setup.previousPage(...args)),\n    disabled: $setup.currentPage === 1\n  }, _cache[59] || (_cache[59] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Previous \")]), 8 /* PROPS */, _hoisted_43), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[20] || (_cache[20] = (...args) => $setup.nextPage && $setup.nextPage(...args)),\n    disabled: $setup.currentPage >= $setup.totalPages\n  }, _cache[60] || (_cache[60] = [_createTextVNode(\" Next \"), _createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right ms-1\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_44)])])])]), _createCommentVNode(\" Calendar Popup \"), $setup.showCalendarPopup ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"calendar-popup\",\n    onClick: _cache[26] || (_cache[26] = _withModifiers($event => $setup.showCalendarPopup = false, [\"self\"]))\n  }, [_createElementVNode(\"div\", _hoisted_45, [_createElementVNode(\"div\", _hoisted_46, [_cache[61] || (_cache[61] = _createElementVNode(\"h6\", {\n    class: \"mb-0\"\n  }, \"Select Date\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[21] || (_cache[21] = $event => $setup.showCalendarPopup = false)\n  })]), _createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"div\", _hoisted_48, [_cache[62] || (_cache[62] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-calendar-day\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    value: $setup.formatDateForInput($setup.currentDate),\n    max: $setup.formatDateForInput(new Date()),\n    onChange: _cache[22] || (_cache[22] = $event => {\n      $setup.setCurrentDate($event.target.value);\n      $setup.showCalendarPopup = false;\n    })\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_49)]), _createCommentVNode(\" Quick Date Buttons \"), _createElementVNode(\"div\", _hoisted_50, [_createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-outline-secondary\",\n    onClick: _cache[23] || (_cache[23] = $event => {\n      _ctx.navigateDate(-7);\n      $setup.showCalendarPopup = false;\n    })\n  }, _cache[63] || (_cache[63] = [_createElementVNode(\"i\", {\n    class: \"fas fa-angle-double-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Last Week \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-outline-secondary\",\n    onClick: _cache[24] || (_cache[24] = $event => {\n      _ctx.navigateDate(-1);\n      $setup.showCalendarPopup = false;\n    })\n  }, _cache[64] || (_cache[64] = [_createElementVNode(\"i\", {\n    class: \"fas fa-angle-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Yesterday \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-primary\",\n    onClick: _cache[25] || (_cache[25] = $event => {\n      $setup.setCurrentDate($setup.formatDateForInput(new Date()));\n      $setup.showCalendarPopup = false;\n    })\n  }, \" Today \")])])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Student Details Modal \"), _createVNode(_component_StudentDetailsModal, {\n    show: !!$setup.selectedStudent,\n    student: $setup.selectedStudent || {},\n    \"year-level\": $setup.selectedYear,\n    section: $setup.selectedSection,\n    subject: $setup.selectedSubject,\n    title: \"Student Attendance Details\",\n    \"chart-title\": \"Attendance Overview\",\n    \"history-title\": \"Attendance History\",\n    \"chart-id\": `attendanceChart-${$setup.selectedStudent?.studentId}`,\n    \"is-class-record\": false,\n    \"onUpdate:show\": _cache[27] || (_cache[27] = value => !value && ($setup.selectedStudent = null)),\n    onClose: _cache[28] || (_cache[28] = $event => $setup.selectedStudent = null)\n  }, {\n    \"history-table\": _withCtx(() => [_createElementVNode(\"table\", _hoisted_51, [_cache[66] || (_cache[66] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Status\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [!$setup.selectedStudent?.attendanceHistory || $setup.selectedStudent.attendanceHistory.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_52, _cache[65] || (_cache[65] = [_createElementVNode(\"td\", {\n      colspan: \"2\",\n      class: \"text-center py-3 text-muted\"\n    }, [_createElementVNode(\"i\", {\n      class: \"fas fa-info-circle me-2\"\n    }), _createTextVNode(\"No attendance records found. \")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedStudent?.attendanceHistory, record => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: record.date\n      }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(record.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n        class: _normalizeClass([\"badge\", {\n          'bg-success': record.status === 'present',\n          'bg-danger': record.status === 'absent',\n          'bg-warning': record.status === 'late'\n        }])\n      }, _toDisplayString(record.status.charAt(0).toUpperCase() + record.status.slice(1)), 3 /* TEXT, CLASS */)])]);\n    }), 128 /* KEYED_FRAGMENT */))])])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\", \"student\", \"year-level\", \"section\", \"subject\", \"chart-id\"]), _createCommentVNode(\" Export Records Modal \"), $setup.showExportModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_53, [_createElementVNode(\"div\", _hoisted_54, [_createElementVNode(\"div\", _hoisted_55, [_createElementVNode(\"div\", _hoisted_56, [_createElementVNode(\"div\", _hoisted_57, [_cache[67] || (_cache[67] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Export Attendance Records\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[29] || (_cache[29] = $event => $setup.showExportModal = false)\n  })]), _createElementVNode(\"div\", _hoisted_58, [_createElementVNode(\"form\", {\n    onSubmit: _cache[34] || (_cache[34] = _withModifiers((...args) => $setup.exportAttendanceRecords && $setup.exportAttendanceRecords(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_59, [_cache[70] || (_cache[70] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Date Range\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_60, [_createElementVNode(\"div\", _hoisted_61, [_cache[68] || (_cache[68] = _createElementVNode(\"label\", {\n    class: \"form-label small\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[30] || (_cache[30] = $event => $setup.exportDateRange.start = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportDateRange.start]])]), _createElementVNode(\"div\", _hoisted_62, [_cache[69] || (_cache[69] = _createElementVNode(\"label\", {\n    class: \"form-label small\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[31] || (_cache[31] = $event => $setup.exportDateRange.end = $event),\n    min: $setup.exportDateRange.start,\n    required: \"\"\n  }, null, 8 /* PROPS */, _hoisted_63), [[_vModelText, $setup.exportDateRange.end]])])])]), _createElementVNode(\"div\", _hoisted_64, [_cache[72] || (_cache[72] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Export Format\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[32] || (_cache[32] = $event => $setup.exportFormat = $event),\n    required: \"\"\n  }, _cache[71] || (_cache[71] = [_createElementVNode(\"option\", {\n    value: \"csv\"\n  }, \"CSV\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"pdf\"\n  }, \"PDF\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"excel\"\n  }, \"Excel\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.exportFormat]])]), _createElementVNode(\"div\", _hoisted_65, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary me-2\",\n    onClick: _cache[33] || (_cache[33] = $event => $setup.showExportModal = false)\n  }, \" Cancel \"), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-success\",\n    disabled: $setup.isExporting\n  }, [$setup.isExporting ? (_openBlock(), _createElementBlock(\"span\", _hoisted_67, _cache[73] || (_cache[73] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Exporting... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_68, _cache[74] || (_cache[74] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\"Export \")])))], 8 /* PROPS */, _hoisted_66)])], 32 /* NEED_HYDRATION */)])])])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","style","type","key","colspan","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","onClick","_cache","args","_ctx","refreshAttendance","title","_createTextVNode","$event","$setup","showExportModal","_hoisted_4","navigateDate","openCalendarPopup","role","formatDate","currentDate","disabled","isNextDayDisabled","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","href","sortBy","_normalizeClass","getSortIcon","_hoisted_13","_hoisted_14","selectedYear","selectedSection","selectedSubject","_hoisted_15","_hoisted_16","_hoisted_17","onChange","applyFilters","value","_Fragment","_renderList","availableYears","year","_hoisted_18","_hoisted_19","filteredSections","section","_hoisted_21","_hoisted_20","_hoisted_22","teacherSubjects","subject","_hoisted_24","_hoisted_23","_hoisted_25","clearFilters","_hoisted_26","_hoisted_27","searchQuery","placeholder","onInput","handleSearch","clearSearch","_hoisted_28","_hoisted_29","paginatedStudents","student","studentNumber","currentStatus","viewStudentDetails","_toDisplayString","lastName","firstName","_hoisted_31","markAttendance","target","_withModifiers","selected","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_32","_hoisted_30","length","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","paginationInfo","start","end","sortedStudents","_hoisted_42","previousPage","currentPage","_hoisted_43","nextPage","totalPages","_hoisted_44","showCalendarPopup","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","formatDateForInput","max","Date","setCurrentDate","_hoisted_49","_hoisted_50","_createVNode","_component_StudentDetailsModal","show","selectedStudent","studentId","onClose","_withCtx","_hoisted_51","attendanceHistory","_hoisted_52","record","date","status","charAt","toUpperCase","slice","_","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","onSubmit","exportAttendanceRecords","_hoisted_59","_hoisted_60","_hoisted_61","exportDateRange","required","_hoisted_62","min","_hoisted_63","_hoisted_64","exportFormat","_hoisted_65","isExporting","_hoisted_67","_hoisted_68","_hoisted_66"],"sources":["D:\\au_dev\\client\\src\\views\\Attendance.vue"],"sourcesContent":["<template>\r\n  <div class=\"attendance-view\">\r\n    <!-- Control Buttons and Date Navigation -->\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div class=\"d-flex gap-2\">\r\n        <!-- Any attendance-specific buttons can go here -->\r\n        <button \r\n          class=\"btn btn-outline-secondary\" \r\n          @click=\"refreshAttendance\"\r\n          title=\"Refresh attendance data from database\"\r\n        >\r\n          <i class=\"fas fa-sync-alt me-2\"></i> Refresh Attendance\r\n        </button>\r\n        <button \r\n          class=\"btn btn-success\" \r\n          @click=\"showExportModal = true\"\r\n          title=\"Export attendance records\"\r\n        >\r\n          <i class=\"fas fa-file-export me-2\"></i> Export Records\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Date Navigation -->\r\n      <div class=\"d-flex align-items-center gap-3\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"navigateDate(-1)\">\r\n          <i class=\"fas fa-chevron-left\"></i>\r\n        </button>\r\n        <div class=\"date-display\" @click=\"openCalendarPopup\" role=\"button\">\r\n          {{ formatDate(currentDate) }}\r\n        </div>\r\n        <button \r\n          class=\"btn btn-outline-primary\" \r\n          @click=\"navigateDate(1)\"\r\n          :disabled=\"isNextDayDisabled\"\r\n        >\r\n          <i class=\"fas fa-chevron-right\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Table -->\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <!-- Table Controls -->\r\n        <div class=\"table-controls mb-4\" style=\"z-index: 10000 !important; position: relative;\">\r\n          <div class=\"d-flex gap-3 align-items-center\">\r\n            <div class=\"d-flex gap-3\" style=\"z-index: 10000 !important; position: relative;\">\r\n              <!-- Sort Dropdown -->\r\n              <div class=\"dropdown\" style=\"z-index: 10000 !important; position: relative;\">\r\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <i class=\"fas fa-sort me-2\"></i> Sort by\r\n                </button>\r\n                <ul class=\"dropdown-menu control-menu\" style=\"z-index: 10000 !important; position: absolute !important;\">\r\n                  <li>\r\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('studentNumber')\">\r\n                      <i class=\"fas fa-sort-numeric-down me-2\"></i> Student Number\r\n                      <i :class=\"getSortIcon('studentNumber')\" class=\"ms-auto\"></i>\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('lastName')\">\r\n                      <i class=\"fas fa-sort-alpha-down me-2\"></i> Name\r\n                      <i :class=\"getSortIcon('lastName')\" class=\"ms-auto\"></i>\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <!-- Filter Dropdown -->\r\n              <div class=\"dropdown\" style=\"z-index: 10000 !important; position: relative;\">\r\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <i class=\"fas fa-filter me-2\"></i> Filter\r\n                  <span v-if=\"selectedYear || selectedSection || selectedSubject\" class=\"filter-badge\">!</span>\r\n                </button>\r\n                <div class=\"dropdown-menu control-menu p-3\" style=\"width: 280px; z-index: 10000 !important; position: absolute !important;\">\r\n                  <h6 class=\"dropdown-header mb-2\">Filter Options</h6>\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Year Level</label>\r\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedYear\" @change=\"applyFilters\">\r\n                      <option value=\"\">Select Year</option>\r\n                      <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Section</label>\r\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSection\" :disabled=\"!selectedYear\" @change=\"applyFilters\">\r\n                      <option value=\"\">Select Section</option>\r\n                      <option v-for=\"section in filteredSections\" :key=\"section\" :value=\"section\">{{ section }}</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Subject</label>\r\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSubject\" :disabled=\"!selectedSection\" @change=\"applyFilters\">\r\n                      <option value=\"\">Select Subject</option>\r\n                      <option v-for=\"subject in teacherSubjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"d-flex justify-content-end gap-2 mt-3\">\r\n                    <button class=\"btn btn-sm btn-light\" @click=\"clearFilters\">\r\n                      Clear All\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-primary\" @click=\"applyFilters\">\r\n                      Apply Filters\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Search Control -->\r\n            <div class=\"search-control\" style=\"flex: 1; max-width: 400px; z-index: 10000 !important; position: relative;\">\r\n              <div class=\"input-group\">\r\n                <span class=\"input-group-text border-end-0\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </span>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control border-start-0\" \r\n                  v-model=\"searchQuery\"\r\n                  placeholder=\"Search students...\"\r\n                  @input=\"handleSearch\"\r\n                >\r\n                <button \r\n                  v-if=\"searchQuery\"\r\n                  class=\"btn btn-outline-secondary border-start-0\" \r\n                  type=\"button\"\r\n                  @click=\"clearSearch\"\r\n                >\r\n                  <i class=\"fas fa-times\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Table -->\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n            <th>Student Number</th>\r\n                <th>Last Name</th>\r\n                <th>First Name</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr \r\n                v-for=\"student in paginatedStudents\" \r\n                  :key=\"student.studentNumber\" \r\n                  class=\"clickable-row\" \r\n                  @click=\"viewStudentDetails(student)\"\r\n                  :class=\"{\r\n                    'status-row-present': student.currentStatus === 'present',\r\n                    'status-row-absent': student.currentStatus === 'absent',\r\n                    'status-row-late': student.currentStatus === 'late'\r\n                  }\"\r\n            >\r\n              <td>{{ student.studentNumber }}</td>\r\n                  <td>{{ student.lastName }}</td>\r\n                  <td>{{ student.firstName }}</td>\r\n                  <td>\r\n                    <div class=\"attendance-status-container\">\r\n                      <select \r\n                        class=\"form-select form-select-sm attendance-select\"\r\n                        :class=\"{\r\n                          'select-present': student.currentStatus === 'present',\r\n                          'select-absent': student.currentStatus === 'absent',\r\n                          'select-late': student.currentStatus === 'late',\r\n                          'select-none': student.currentStatus === 'none'\r\n                        }\"\r\n                        v-model=\"student.currentStatus\"\r\n                        @change=\"markAttendance(student, $event.target.value)\"\r\n                        @click.stop\r\n                      >\r\n                        <option value=\"none\">Not marked</option>\r\n                        <option :selected=\"student.currentStatus === 'present'\" value=\"present\">Present</option>\r\n                        <option :selected=\"student.currentStatus === 'absent'\" value=\"absent\">Absent</option>\r\n                        <option :selected=\"student.currentStatus === 'late'\" value=\"late\">Late</option>\r\n                      </select>\r\n                      <div \r\n                        class=\"status-indicator\" \r\n                        :class=\"{\r\n                          'indicator-present': student.currentStatus === 'present',\r\n                          'indicator-absent': student.currentStatus === 'absent',\r\n                          'indicator-late': student.currentStatus === 'late',\r\n                          'indicator-none': student.currentStatus === 'none'\r\n                        }\"\r\n                      >\r\n                        <i \r\n                          class=\"fas\" \r\n                          :class=\"{\r\n                            'fa-check-circle': student.currentStatus === 'present',\r\n                            'fa-times-circle': student.currentStatus === 'absent',\r\n                            'fa-exclamation-circle': student.currentStatus === 'late',\r\n                            'fa-question-circle': student.currentStatus === 'none'\r\n                          }\"\r\n                        ></i>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n              </tr>\r\n              <tr v-if=\"paginatedStudents.length === 0\">\r\n                <td colspan=\"4\" class=\"text-center py-4\">\r\n                  <div class=\"empty-state-message\">\r\n                    <i class=\"fas fa-users text-muted mb-2\"></i>\r\n                    <p class=\"mb-0\">No students found</p>\r\n                    <p class=\"text-muted small\" v-if=\"selectedYear || selectedSection || selectedSubject\">\r\n                      Try adjusting your filters\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n        \r\n        <!-- Pagination Controls -->\r\n        <div class=\"pagination-controls mt-3 d-flex justify-content-between align-items-center\">\r\n          <div class=\"pagination-info\">\r\n            Showing {{ paginationInfo.start }} to {{ paginationInfo.end }} of {{ sortedStudents.length }} entries\r\n          </div>\r\n          <div class=\"pagination-buttons\">\r\n            <button \r\n              class=\"btn btn-outline-primary me-2\" \r\n              @click=\"previousPage\" \r\n              :disabled=\"currentPage === 1\"\r\n            >\r\n              <i class=\"fas fa-chevron-left me-1\"></i> Previous\r\n            </button>\r\n            <button \r\n              class=\"btn btn-outline-primary\" \r\n              @click=\"nextPage\" \r\n              :disabled=\"currentPage >= totalPages\"\r\n            >\r\n              Next <i class=\"fas fa-chevron-right ms-1\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Calendar Popup -->\r\n    <div class=\"calendar-popup\" v-if=\"showCalendarPopup\" @click.self=\"showCalendarPopup = false\">\r\n      <div class=\"calendar-container\">\r\n        <div class=\"calendar-header\">\r\n          <h6 class=\"mb-0\">Select Date</h6>\r\n          <button type=\"button\" class=\"btn-close\" @click=\"showCalendarPopup = false\"></button>\r\n        </div>\r\n        <div class=\"calendar-body\">\r\n          <div class=\"input-group\">\r\n            <span class=\"input-group-text\"><i class=\"fas fa-calendar-day\"></i></span>\r\n            <input \r\n              type=\"date\" \r\n              class=\"form-control\" \r\n              :value=\"formatDateForInput(currentDate)\"\r\n              :max=\"formatDateForInput(new Date())\"\r\n              @change=\"setCurrentDate($event.target.value); showCalendarPopup = false\"\r\n            >\r\n          </div>\r\n          \r\n          <!-- Quick Date Buttons -->\r\n          <div class=\"quick-date-buttons mt-3\">\r\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-7); showCalendarPopup = false\">\r\n              <i class=\"fas fa-angle-double-left me-1\"></i> Last Week\r\n            </button>\r\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-1); showCalendarPopup = false\">\r\n              <i class=\"fas fa-angle-left me-1\"></i> Yesterday\r\n            </button>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"setCurrentDate(formatDateForInput(new Date())); showCalendarPopup = false\">\r\n              Today\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Student Details Modal -->\r\n    <StudentDetailsModal\r\n      :show=\"!!selectedStudent\"\r\n      :student=\"selectedStudent || {}\"\r\n      :year-level=\"selectedYear\"\r\n      :section=\"selectedSection\"\r\n      :subject=\"selectedSubject\"\r\n      title=\"Student Attendance Details\"\r\n      chart-title=\"Attendance Overview\"\r\n      history-title=\"Attendance History\"\r\n      :chart-id=\"`attendanceChart-${selectedStudent?.studentId}`\"\r\n      :is-class-record=\"false\"\r\n      @update:show=\"(value) => !value && (selectedStudent = null)\"\r\n      @close=\"selectedStudent = null\"\r\n    >\r\n      <template #history-table>\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-if=\"!selectedStudent?.attendanceHistory || selectedStudent.attendanceHistory.length === 0\">\r\n              <td colspan=\"2\" class=\"text-center py-3 text-muted\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>No attendance records found.\r\n              </td>\r\n            </tr>\r\n            <tr v-for=\"record in selectedStudent?.attendanceHistory\" :key=\"record.date\">\r\n              <td>{{ formatDate(record.date) }}</td>\r\n              <td>\r\n                <span \r\n                  class=\"badge\"\r\n                  :class=\"{\r\n                    'bg-success': record.status === 'present',\r\n                    'bg-danger': record.status === 'absent',\r\n                    'bg-warning': record.status === 'late'\r\n                  }\"\r\n                >\r\n                  {{ record.status.charAt(0).toUpperCase() + record.status.slice(1) }}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </template>\r\n    </StudentDetailsModal>\r\n    \r\n    <!-- Export Records Modal -->\r\n    <div v-if=\"showExportModal\" class=\"modal-overlay\" style=\"display: flex; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.5); z-index: 9999; align-items: center; justify-content: center;\">\r\n      <div class=\"modal-wrapper\" style=\"width: 100%; max-width: 600px; position: relative; z-index: 10000;\">\r\n        <div class=\"modal-dialog\">\r\n          <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n              <h5 class=\"modal-title\">Export Attendance Records</h5>\r\n              <button type=\"button\" class=\"btn-close\" @click=\"showExportModal = false\"></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n              <form @submit.prevent=\"exportAttendanceRecords\">\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Date Range</label>\r\n                  <div class=\"d-flex gap-2\">\r\n                    <div class=\"flex-grow-1\">\r\n                      <label class=\"form-label small\">Start Date</label>\r\n                      <input \r\n                        type=\"date\" \r\n                        class=\"form-control\" \r\n                        v-model=\"exportDateRange.start\" \r\n                        required\r\n                      >\r\n                    </div>\r\n                    <div class=\"flex-grow-1\">\r\n                      <label class=\"form-label small\">End Date</label>\r\n                      <input \r\n                        type=\"date\" \r\n                        class=\"form-control\" \r\n                        v-model=\"exportDateRange.end\" \r\n                        :min=\"exportDateRange.start\"\r\n                        required\r\n                      >\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Export Format</label>\r\n                  <select class=\"form-select\" v-model=\"exportFormat\" required>\r\n                    <option value=\"csv\">CSV</option>\r\n                    <option value=\"pdf\">PDF</option>\r\n                    <option value=\"excel\">Excel</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div class=\"text-end\">\r\n                  <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showExportModal = false\">\r\n                    Cancel\r\n                  </button>\r\n                  <button \r\n                    type=\"submit\" \r\n                    class=\"btn btn-success\"\r\n                    :disabled=\"isExporting\"\r\n                  >\r\n                    <span v-if=\"isExporting\">\r\n                      <i class=\"fas fa-spinner fa-spin me-2\"></i>Exporting...\r\n                    </span>\r\n                    <span v-else>\r\n                      <i class=\"fas fa-file-export me-2\"></i>Export\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport axios from 'axios'\r\nimport moment from 'moment-timezone'\r\nimport Chart from 'chart.js/auto'\r\nimport StudentDetailsModal from '@/components/modals/StudentDetailsModal.vue'\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport default {\r\n  name: 'Attendance',\r\n  components: {\r\n    StudentDetailsModal\r\n  },\r\n  setup() {\r\n    const store = useStore()\r\n    const route = useRoute()\r\n    const router = useRouter()\r\n    const students = ref([])\r\n    const searchQuery = ref('')\r\n    const sortField = ref('lastName')\r\n    const sortOrder = ref('asc')\r\n    const selectedStudent = ref(null)\r\n    const currentDate = ref(moment().tz('Asia/Manila').startOf('day').toDate())\r\n    const slideDirection = ref('')\r\n    let attendanceChart = null\r\n    let dateUpdateInterval = null\r\n    \r\n    // Date filter for attendance history\r\n    const historyStartDate = ref(moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD'))\r\n    const historyEndDate = ref(moment().tz('Asia/Manila').format('YYYY-MM-DD'))\r\n    const showHistoryDatePicker = ref(false)\r\n    const showCalendarPopup = ref(false)\r\n    \r\n    // Add export-related refs\r\n    const showExportModal = ref(false)\r\n    const exportDateRange = ref({\r\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\r\n      end: moment().format('YYYY-MM-DD')\r\n    })\r\n    const exportFormat = ref('csv')\r\n    const isExporting = ref(false)\r\n\r\n    // Add refs for query parameters\r\n    const selectedYear = ref(route.query.year || localStorage.getItem('selectedYear') || '')\r\n    const selectedSection = ref(route.query.section || localStorage.getItem('selectedSection') || '')\r\n    const selectedSubject = ref(route.query.subject || localStorage.getItem('selectedSubject') || '')\r\n    \r\n    // Add refs for available options\r\n    const availableYears = ref([])\r\n    const availableSections = ref([])\r\n    const sectionsByYear = ref({})\r\n    const teacherSubjects = ref([])\r\n    \r\n    // Computed property for filtered sections based on selected year\r\n    const filteredSections = computed(() => {\r\n      if (!selectedYear.value) return []\r\n      return sectionsByYear.value[selectedYear.value] || []\r\n    })\r\n    \r\n    // Function to fetch available years and sections\r\n    const fetchAvailableYearsAndSections = async () => {\r\n      try {\r\n        const token = store.state.auth.token\r\n        const teacherId = store.state.auth.user?._id\r\n        \r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available')\r\n          return\r\n        }\r\n\r\n        console.log('Fetching available years and sections for teacher:', teacherId)\r\n        \r\n        // Use the teacher-specific endpoint to get only years and sections for this teacher\r\n        const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        }).catch(error => {\r\n          console.error('Error fetching teacher-specific years and sections:', error)\r\n          \r\n          // Fall back to the general endpoint if teacher-specific one fails\r\n          return api.get('/students/available-years-sections', {\r\n            headers: { 'Authorization': `Bearer ${token}` }\r\n          })\r\n        })\r\n\r\n        console.log('API Response for years and sections:', response.data)\r\n\r\n        if (response.data) {\r\n          // Set available years and sections from the response\r\n          availableYears.value = response.data.years || []\r\n          availableSections.value = response.data.sections || []\r\n          \r\n          // Use sectionsByYear from the API response\r\n          if (response.data.sectionsByYear) {\r\n            sectionsByYear.value = response.data.sectionsByYear\r\n          } else {\r\n            sectionsByYear.value = {}\r\n            \r\n            // If we have years and sections but no sectionsByYear mapping,\r\n            // create a simple mapping where each year has all sections\r\n            if (availableYears.value.length > 0 && availableSections.value.length > 0) {\r\n              availableYears.value.forEach(year => {\r\n                sectionsByYear.value[year] = [...availableSections.value]\r\n              })\r\n            }\r\n          }\r\n          \r\n          console.log('Available years:', availableYears.value)\r\n          console.log('Available sections:', availableSections.value)\r\n          console.log('Sections by year mapping:', sectionsByYear.value)\r\n          \r\n          // If no years are available, don't add default values\r\n          // This ensures teachers only see years they've added\r\n          if (availableYears.value.length === 0) {\r\n            console.log('No years found for this teacher')\r\n          }\r\n          \r\n          // If no sections are available, don't add default values\r\n          if (availableSections.value.length === 0) {\r\n            console.log('No sections found for this teacher')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch available years and sections:', error)\r\n        // Don't set default values - teacher should only see what they've added\r\n        availableYears.value = []\r\n        availableSections.value = []\r\n        sectionsByYear.value = {}\r\n      }\r\n    }\r\n    \r\n    // Function to fetch teacher subjects\r\n    const fetchTeacherSubjects = async () => {\r\n      try {\r\n        const token = store.state.auth.token\r\n        const teacherId = store.state.auth.user?._id\r\n\r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available')\r\n          return\r\n        }\r\n\r\n        // Try to fetch subjects from the teacher class records\r\n        try {\r\n          const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        })\r\n\r\n          if (response.data && response.data.subjects && response.data.subjects.length > 0) {\r\n            teacherSubjects.value = response.data.subjects\r\n            console.log('Subjects loaded from teacher class records:', teacherSubjects.value)\r\n          } else {\r\n            // If no subjects found in class records, try the user endpoint\r\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\r\n              headers: { 'Authorization': `Bearer ${token}` }\r\n            })\r\n            \r\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\r\n              teacherSubjects.value = userResponse.data.subjects\r\n              console.log('Subjects loaded from user profile:', teacherSubjects.value)\r\n            } else {\r\n              // If still no subjects, use default subjects\r\n              console.log('No subjects found, using default subjects')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to fetch teacher subjects from class records:', error)\r\n          \r\n          // Try the user endpoint as fallback\r\n          try {\r\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\r\n              headers: { 'Authorization': `Bearer ${token}` }\r\n            })\r\n            \r\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\r\n              teacherSubjects.value = userResponse.data.subjects\r\n              console.log('Subjects loaded from user profile (fallback):', teacherSubjects.value)\r\n            } else {\r\n              teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n              console.log('No subjects found in user profile, using default subjects')\r\n            }\r\n          } catch (userError) {\r\n            console.error('Failed to fetch teacher subjects from user profile:', userError)\r\n            teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n            console.log('Using default subjects due to API errors')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchTeacherSubjects:', error)\r\n        teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n      }\r\n    }\r\n    \r\n    // Function to apply filters\r\n    const applyFilters = async () => {\r\n      console.log('Applying filters:', {\r\n        year: selectedYear.value,\r\n        section: selectedSection.value,\r\n        subject: selectedSubject.value\r\n      })\r\n      \r\n      // Save selected values to localStorage\r\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\r\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\r\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\r\n      \r\n      // Update URL query parameters\r\n      router.replace({\r\n        query: {\r\n          ...route.query,\r\n          year: selectedYear.value || undefined,\r\n          section: selectedSection.value || undefined,\r\n          subject: selectedSubject.value || undefined\r\n        }\r\n      })\r\n      \r\n      // Always fetch student records when filters are applied\r\n      await fetchStudentRecords()\r\n    }\r\n    \r\n    // Function to clear filters\r\n    const clearFilters = () => {\r\n      selectedYear.value = ''\r\n      selectedSection.value = ''\r\n      selectedSubject.value = ''\r\n      localStorage.removeItem('selectedYear')\r\n      localStorage.removeItem('selectedSection')\r\n      localStorage.removeItem('selectedSubject')\r\n      \r\n      // Update URL query parameters\r\n      router.replace({\r\n        query: {}\r\n      })\r\n    }\r\n\r\n    // Function to fetch students and their attendance\r\n    const fetchStudentRecords = async () => {\r\n      try {\r\n        const token = store.state.auth.token;\r\n        const teacherId = store.state.auth.user?._id;\r\n\r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available');\r\n          return;\r\n        }\r\n\r\n        // Create a params object with the teacher ID\r\n        const params = { teacherId };\r\n        \r\n        // Add any selected filters to the params\r\n        if (selectedYear.value) params.year = selectedYear.value;\r\n        if (selectedSection.value) params.section = selectedSection.value;\r\n        if (selectedSubject.value) params.subject = selectedSubject.value;\r\n        \r\n        console.log('Fetching student records with filters:', params);\r\n        \r\n        try {\r\n          const response = await api.get('/teacher-class-records/students-for-attendance', {\r\n            params,\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n\r\n          console.log('Students API response:', response.data);\r\n\r\n          if (response.data) {\r\n            let studentList = [];\r\n            \r\n            if (Array.isArray(response.data)) {\r\n              studentList = response.data;\r\n            } else if (response.data.students && Array.isArray(response.data.students)) {\r\n              studentList = response.data.students;\r\n            }\r\n            \r\n            // Log each student's data to verify studentId is present\r\n            studentList.forEach(student => {\r\n              console.log('Student data:', {\r\n                studentId: student._id || student.studentId,\r\n                studentNumber: student.studentNumber,\r\n                name: `${student.firstName} ${student.lastName}`\r\n              });\r\n            });\r\n            \r\n            // Initialize students with 'none' status and ensure studentId is set\r\n            students.value = studentList.map(student => ({\r\n              ...student,\r\n              studentId: student._id || student.studentId, // Use _id if studentId is not present\r\n              currentStatus: 'none'\r\n            }));\r\n            \r\n            console.log(`Loaded ${students.value.length} students with IDs`);\r\n            \r\n            // Immediately fetch attendance after loading students\r\n            if (students.value.length > 0) {\r\n              await fetchAttendance();\r\n          }\r\n        }\r\n      } catch (error) {\r\n          console.error('Failed to fetch student records:', error);\r\n        students.value = [];\r\n      }\r\n      } catch (error) {\r\n        console.error('Error in fetchStudentRecords:', error);\r\n        students.value = [];\r\n      }\r\n    };\r\n\r\n    // Function to fetch attendance for current date\r\n    const fetchAttendance = async () => {\r\n      try {\r\n        // If there are no students, we can't fetch attendance\r\n        if (!students.value.length) {\r\n          console.log('fetchAttendance: No students to fetch attendance for');\r\n          return;\r\n        }\r\n\r\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\r\n        console.log('fetchAttendance: Fetching attendance data for date:', date);\r\n\r\n        // Create params object with the date and required filters\r\n        const params = {\r\n          teacherId: store.state.auth.user?._id,\r\n          date: date\r\n        };\r\n        \r\n        // Add any selected filters to the params\r\n        if (selectedYear.value) params.year = selectedYear.value;\r\n        if (selectedSection.value) params.section = selectedSection.value;\r\n        if (selectedSubject.value) params.subject = selectedSubject.value;\r\n        \r\n        console.log('Fetching attendance with params:', params);\r\n        \r\n        const response = await api.get(`/attendance/date/${date}`, {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        });\r\n\r\n        console.log('Attendance data received:', response.data);\r\n\r\n        // Create a map to store attendance by student ID\r\n        const studentMap = new Map();\r\n\r\n        if (response.data && Array.isArray(response.data)) {\r\n          console.log(`Processing ${response.data.length} attendance records`);\r\n          \r\n          // Group records by student ID to find the most recent one for each student\r\n          const recordsByStudent = {};\r\n          \r\n          response.data.forEach(record => {\r\n            if (record.studentId) {\r\n              // If we don't have this student yet, or this record is newer\r\n              if (!recordsByStudent[record.studentId] || \r\n                  (record.createdAt && \r\n                   (!recordsByStudent[record.studentId].createdAt || \r\n                    new Date(record.createdAt) > new Date(recordsByStudent[record.studentId].createdAt)))) {\r\n                recordsByStudent[record.studentId] = record;\r\n                console.log(`Found newer record for student ${record.studentId}: ${record.status} (created at ${record.createdAt})`);\r\n              }\r\n            } else {\r\n              console.log('Record missing studentId:', record);\r\n            }\r\n          });\r\n          \r\n          // Now use the most recent record for each student\r\n          Object.values(recordsByStudent).forEach(record => {\r\n            studentMap.set(String(record.studentId), record.status || 'none');\r\n            console.log(`Using most recent attendance for student ID ${record.studentId}: ${record.status || 'none'} (created at ${record.createdAt})`);\r\n          });\r\n        }\r\n\r\n        // Assign Attendance data to specific student\r\n        // students.value = response.data.map((att) => {\r\n          \r\n        // })\r\n        \r\n\r\n        // Update students with attendance data\r\n        if (students.value && students.value.length > 0) {\r\n          // Merge attendance data into students array\r\n          // This will fix the updating of attendance data\r\n          students.value = students.value\r\n            .map(student => ({\r\n              ...student,\r\n              currentStatus: response.data.find(att => att.studentId === student.studentId)?.status\r\n            }));\r\n          // students.value = students.value.map(student => {\r\n          //   const studentIdStr = String(student.studentId);\r\n          //   const status = studentMap.get(studentIdStr);\r\n            \r\n          //   // Store the attendance status for this date\r\n          //   if (!student.attendanceByDate) {\r\n          //     student.attendanceByDate = {};\r\n          //   }\r\n            \r\n          //   if (status) {\r\n          //     student.attendanceByDate[date] = status;\r\n          //   }\r\n            \r\n          //   // Use the stored status for this date if available, otherwise use the fetched status\r\n          //   const currentStatus = status || student.currentStatus || 'none';\r\n            \r\n          //   console.log(`Setting status for student ${studentIdStr}: ${currentStatus}`);\r\n            \r\n          //   return {\r\n          //     ...student,\r\n          //     currentStatus: currentStatus\r\n          //   };\r\n          // });\r\n          \r\n          // Force a UI update\r\n          await nextTick();\r\n          students.value = [...students.value];\r\n          console.log('Updated attendance status for all students');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchAttendance:', error);\r\n      }\r\n    };\r\n\r\n    // Create attendance chart\r\n    const createPerformanceChart = () => {\r\n      if (!selectedStudent.value) return;\r\n      \r\n      // Create a unique chart ID for each student\r\n      const chartId = `attendanceChart-${selectedStudent.value.studentId}`;\r\n      const chartElement = document.getElementById('attendanceChart');\r\n      \r\n      // Set a unique ID to the chart element\r\n      if (chartElement) {\r\n        chartElement.id = chartId;\r\n      }\r\n      \r\n      const ctx = document.getElementById(chartId)?.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      // Destroy existing chart if it exists\r\n      if (attendanceChart) {\r\n        attendanceChart.destroy();\r\n        attendanceChart = null;\r\n      }\r\n\r\n      // Get the chart container\r\n      const chartContainer = document.querySelector('.chart-container');\r\n      if (!chartContainer) return;\r\n\r\n      // Check if we have valid attendance statistics and records\r\n      const stats = selectedStudent.value.attendanceStats;\r\n      const hasAttendanceRecords = selectedStudent.value.attendanceHistory && \r\n                                  selectedStudent.value.attendanceHistory.length > 0;\r\n      \r\n      if (!hasAttendanceRecords || \r\n          !stats || \r\n          (stats.presentPercentage === 0 && stats.absentPercentage === 0 && stats.latePercentage === 0)) {\r\n        // If no attendance data, display a message instead of an empty chart\r\n        chartContainer.innerHTML = '';\r\n        const noDataMessage = document.createElement('div');\r\n        noDataMessage.className = 'text-center py-5 text-muted';\r\n        noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No attendance data available for this student in the selected date range.';\r\n        chartContainer.appendChild(noDataMessage);\r\n        return;\r\n      }\r\n\r\n      // Clear the container and add canvas back\r\n      chartContainer.innerHTML = '';\r\n      const canvas = document.createElement('canvas');\r\n      canvas.id = chartId;\r\n      chartContainer.appendChild(canvas);\r\n\r\n      // Get the context from the new canvas\r\n      const newCtx = document.getElementById(chartId)?.getContext('2d');\r\n      if (!newCtx) return;\r\n\r\n      // Enhanced colors for the chart\r\n      const chartColors = {\r\n        present: {\r\n          backgroundColor: '#4CAF50',\r\n          hoverBackgroundColor: '#388E3C',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        absent: {\r\n          backgroundColor: '#F44336',\r\n          hoverBackgroundColor: '#D32F2F',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        late: {\r\n          backgroundColor: '#FFC107',\r\n          hoverBackgroundColor: '#FFA000',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        }\r\n      };\r\n\r\n      // Create the chart\r\n      attendanceChart = new Chart(newCtx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Present', 'Absent', 'Late'],\r\n          datasets: [{\r\n            data: [stats.presentPercentage, stats.absentPercentage, stats.latePercentage],\r\n            backgroundColor: [\r\n              chartColors.present.backgroundColor,\r\n              chartColors.absent.backgroundColor,\r\n              chartColors.late.backgroundColor\r\n            ],\r\n            hoverBackgroundColor: [\r\n              chartColors.present.hoverBackgroundColor,\r\n              chartColors.absent.hoverBackgroundColor,\r\n              chartColors.late.hoverBackgroundColor\r\n            ],\r\n            borderColor: [\r\n              chartColors.present.borderColor,\r\n              chartColors.absent.borderColor,\r\n              chartColors.late.borderColor\r\n            ],\r\n            borderWidth: 2,\r\n            borderRadius: 5,\r\n            spacing: 5,\r\n            hoverOffset: 10\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          cutout: '70%',\r\n          animation: {\r\n            animateScale: true,\r\n            animateRotate: true,\r\n            duration: 1000,\r\n            easing: 'easeOutQuart'\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom',\r\n              labels: {\r\n                padding: 20,\r\n                boxWidth: 15,\r\n                boxHeight: 15,\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                },\r\n                generateLabels: (chart) => {\r\n                  const data = chart.data;\r\n                  if (data.labels.length && data.datasets.length) {\r\n                    return data.labels.map((label, i) => {\r\n                      const meta = chart.getDatasetMeta(0);\r\n                      const style = meta.controller.getStyle(i);\r\n                      \r\n                      return {\r\n                        text: `${label}: ${data.datasets[0].data[i].toFixed(1)}%`,\r\n                        fillStyle: style.backgroundColor,\r\n                        strokeStyle: style.borderColor,\r\n                        lineWidth: style.borderWidth,\r\n                        hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\r\n                        index: i\r\n                      };\r\n                    });\r\n                  }\r\n                  return [];\r\n                }\r\n              }\r\n            },\r\n            tooltip: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n              titleFont: {\r\n                size: 16,\r\n                weight: 'bold'\r\n              },\r\n              bodyFont: {\r\n                size: 14\r\n              },\r\n              padding: 15,\r\n              cornerRadius: 8,\r\n              displayColors: true,\r\n              callbacks: {\r\n                label: function(context) {\r\n                  const label = context.label || '';\r\n                  const value = context.raw || 0;\r\n                  return `${label}: ${value.toFixed(1)}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // View student details\r\n    const viewStudentDetails = async (student) => {\r\n      try {\r\n        // Reset any existing chart before showing a new student\r\n        if (attendanceChart) {\r\n          attendanceChart.destroy();\r\n          attendanceChart = null;\r\n        }\r\n        \r\n        selectedStudent.value = {\r\n          ...student,\r\n          attendanceHistory: [],\r\n          attendanceStats: { presentPercentage: 0, absentPercentage: 0, latePercentage: 0 }\r\n        }\r\n        \r\n        // Fetch attendance history with the current date filters\r\n        await fetchStudentAttendanceHistory(selectedStudent.value);\r\n      } catch (error) {\r\n        console.error('Error fetching student details:', error)\r\n        alert('Failed to load student details. Please try again.')\r\n      }\r\n    }\r\n    \r\n    // Fetch student attendance history with date filters\r\n    const fetchStudentAttendanceHistory = async (student) => {\r\n      if (!student) return;\r\n      \r\n      try {\r\n        console.log(`Fetching attendance history for student ${student.studentNumber} with date range:`, {\r\n          startDate: historyStartDate.value,\r\n          endDate: historyEndDate.value\r\n        });\r\n        \r\n        const response = await api.get(\r\n          `/attendance/${student.studentId}/history`,\r\n          {\r\n            params: {\r\n              subject: selectedSubject.value,\r\n              startDate: historyStartDate.value,\r\n              endDate: historyEndDate.value\r\n            },\r\n            headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n          }\r\n        )\r\n        \r\n        if (response.data) {\r\n          // Make sure we're updating the correct student\r\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\r\n            // Only include records that have a valid status (not null, undefined, or empty string)\r\n            const validRecords = Array.isArray(response.data.records) \r\n              ? response.data.records.filter(record => record && record.status && record.status !== '')\r\n              : [];\r\n            \r\n            selectedStudent.value.attendanceHistory = validRecords;\r\n            \r\n            // Only calculate statistics based on valid records\r\n            if (validRecords.length > 0) {\r\n              // Count occurrences of each status\r\n              const statusCounts = {\r\n                present: 0,\r\n                absent: 0,\r\n                late: 0\r\n              };\r\n              \r\n              validRecords.forEach(record => {\r\n                if (record.status in statusCounts) {\r\n                  statusCounts[record.status]++;\r\n                }\r\n              });\r\n              \r\n              // Calculate percentages\r\n              const total = validRecords.length;\r\n              const presentPercentage = total > 0 ? (statusCounts.present / total) * 100 : 0;\r\n              const absentPercentage = total > 0 ? (statusCounts.absent / total) * 100 : 0;\r\n              const latePercentage = total > 0 ? (statusCounts.late / total) * 100 : 0;\r\n              \r\n              selectedStudent.value.attendanceStats = {\r\n                presentPercentage,\r\n                absentPercentage,\r\n                latePercentage\r\n              };\r\n      } else {\r\n              // If no valid records, set all percentages to 0\r\n              selectedStudent.value.attendanceStats = {\r\n                presentPercentage: 0,\r\n                absentPercentage: 0,\r\n                latePercentage: 0\r\n              };\r\n            }\r\n            \r\n            console.log(`Loaded ${selectedStudent.value.attendanceHistory.length} attendance records for student ${student.studentNumber}`);\r\n            \r\n            // Create attendance chart on next tick to ensure DOM is ready\r\n            nextTick(() => {\r\n              // Reset any existing chart before creating a new one\r\n              if (attendanceChart) {\r\n                attendanceChart.destroy();\r\n                attendanceChart = null;\r\n              }\r\n              createPerformanceChart();\r\n            });\r\n          } else {\r\n            console.log('Selected student changed, not updating attendance history');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching student attendance history:', error);\r\n        selectedStudent.value.attendanceHistory = [];\r\n        selectedStudent.value.attendanceStats = { \r\n          presentPercentage: 0, \r\n          absentPercentage: 0, \r\n          latePercentage: 0 \r\n        };\r\n        \r\n        // Create chart with empty data\r\n        nextTick(() => {\r\n          if (attendanceChart) {\r\n            attendanceChart.destroy();\r\n            attendanceChart = null;\r\n          }\r\n          createPerformanceChart();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Sort functions\r\n    const sortBy = (field) => {\r\n      if (sortField.value === field) {\r\n        sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc'\r\n      } else {\r\n        sortField.value = field\r\n        sortOrder.value = 'asc'\r\n      }\r\n    }\r\n\r\n    const getSortIcon = (field) => {\r\n      if (sortField.value !== field) return 'fas fa-sort'\r\n      return sortOrder.value === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down'\r\n    }\r\n\r\n    // Sort students\r\n    const sortedStudents = computed(() => {\r\n      if (!Array.isArray(students.value)) {\r\n        return []\r\n      }\r\n\r\n      let sortedList = [...students.value]\r\n      if (sortField.value) {\r\n        sortedList.sort((a, b) => {\r\n          let aVal = a[sortField.value]\r\n          let bVal = b[sortField.value]\r\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase()\r\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase()\r\n          if (aVal < bVal) return sortOrder.value === 'asc' ? -1 : 1\r\n          if (aVal > bVal) return sortOrder.value === 'asc' ? 1 : -1\r\n          return 0\r\n        })\r\n      }\r\n\r\n      if (!searchQuery.value) {\r\n      return sortedList\r\n      }\r\n      \r\n      const searchLower = searchQuery.value.toLowerCase()\r\n      return sortedList.filter(student => {\r\n        return (\r\n          student.studentNumber.toLowerCase().includes(searchLower) ||\r\n          student.firstName.toLowerCase().includes(searchLower) ||\r\n          student.lastName.toLowerCase().includes(searchLower)\r\n        )\r\n      })\r\n    })\r\n\r\n    // Update attendance status\r\n    const markAttendance = async (student, status) => {\r\n      try {\r\n        if (!status || !student) {\r\n          console.log('Invalid status or student:', { status, student });\r\n          return;\r\n        }\r\n        \r\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\r\n        console.log('Marking attendance:', {\r\n          studentId: student.studentId,\r\n          studentNumber: student.studentNumber,\r\n          status,\r\n          date\r\n        });\r\n\r\n        const attendanceData = {\r\n          studentId: student.studentId,\r\n          studentNumber: student.studentNumber,\r\n          teacherId: store.state.auth.user._id,\r\n          date: date,\r\n          subject: selectedSubject.value,\r\n          section: selectedSection.value,\r\n          year: selectedYear.value,\r\n          status: status,\r\n          createdAt: new Date().toISOString() // Ensure we have a current timestamp\r\n        };\r\n        \r\n        // Update UI immediately for better responsiveness\r\n        student.currentStatus = status;\r\n\r\n        const response = await api.post('/attendance', attendanceData, {\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        });\r\n\r\n        if (response.data) {\r\n          console.log('Attendance marked successfully:', response.data);\r\n          \r\n          // Store the attendance status in the student object for this date\r\n          if (!student.attendanceByDate) {\r\n            student.attendanceByDate = {};\r\n          }\r\n          student.attendanceByDate[date] = status;\r\n          \r\n          // If the student is currently selected in the details modal, update their history\r\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\r\n            await fetchStudentAttendanceHistory(selectedStudent.value);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error marking attendance:', error);\r\n        // Revert the status on error\r\n        student.currentStatus = 'none';\r\n        alert('Failed to save attendance. Please try again.');\r\n      }\r\n    };\r\n\r\n    // Handle search\r\n    const handleSearch = () => {\r\n      // The sortedStudents computed property will automatically filter based on searchQuery\r\n    }\r\n\r\n    // Watch for query parameter changes\r\n    watch([selectedYear, selectedSection, selectedSubject], async () => {\r\n      // Save selected values to localStorage\r\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\r\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\r\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\r\n      \r\n      // Fetch student records and attendance when filters change\r\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n        await fetchStudentRecords()\r\n      }\r\n      \r\n      // Update navigation title\r\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n        try {\r\n          if (router.currentRoute.value.matched[0].components.default.props) {\r\n            router.currentRoute.value.matched[0].components.default.props.selectedInfo = \r\n              `${selectedYear.value} - ${selectedSection.value} | ${selectedSubject.value}`\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating navigation title:', error)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Watch for date changes\r\n    watch(currentDate, async (newDate, oldDate) => {\r\n      console.log('Current date changed from', moment(oldDate).format('YYYY-MM-DD'), 'to', moment(newDate).format('YYYY-MM-DD'));\r\n      \r\n      // Only fetch if we have the required data\r\n      if (selectedYear.value && selectedSection.value && selectedSubject.value && students.value.length > 0) {\r\n        console.log('Fetching attendance data for new date');\r\n        await fetchAttendance();\r\n      } else {\r\n        console.log('Skipping attendance fetch due to missing data:', {\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          studentsCount: students.value?.length || 0\r\n        });\r\n      }\r\n    });\r\n\r\n    // Clean up chart when component unmounts\r\n    onUnmounted(() => {\r\n      if (attendanceChart) {\r\n        attendanceChart.destroy()\r\n        attendanceChart = null\r\n      }\r\n      \r\n      if (dateUpdateInterval) {\r\n        clearInterval(dateUpdateInterval)\r\n      }\r\n    })\r\n\r\n    // Clean up chart when student modal closes\r\n    watch(() => selectedStudent.value, (newValue, oldValue) => {\r\n      if (!newValue && attendanceChart) {\r\n        attendanceChart.destroy();\r\n        attendanceChart = null;\r\n        \r\n        // Reset the chart element ID back to the default\r\n        if (oldValue) {\r\n          const chartElement = document.getElementById(`attendanceChart-${oldValue.studentId}`);\r\n          if (chartElement) {\r\n            chartElement.id = 'attendanceChart';\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Format date for display\r\n    const formatDate = (date) => {\r\n      if (!date) return 'N/A'\r\n      return moment(date).tz('Asia/Manila').format('MMMM D, YYYY')\r\n    }\r\n    \r\n    // Format date for input fields (YYYY-MM-DD)\r\n    const formatDateForInput = (date) => {\r\n      if (!date) return ''\r\n      return moment(date).tz('Asia/Manila').format('YYYY-MM-DD')\r\n    }\r\n\r\n    // Add isNextDayDisabled computed property\r\n    const isNextDayDisabled = computed(() => {\r\n      const now = moment().tz('Asia/Manila').startOf('day')\r\n      const selected = moment(currentDate.value).tz('Asia/Manila').startOf('day')\r\n      return selected.isSameOrAfter(now, 'day')\r\n    })\r\n\r\n    // Add navigateDate function\r\n    const navigateDate = (direction) => {\r\n      const now = moment().tz('Asia/Manila').startOf('day')\r\n      const newDate = moment(currentDate.value).tz('Asia/Manila').startOf('day').add(direction, 'days')\r\n      \r\n      // Only allow navigation to past dates or current date\r\n      if (direction < 0 || (direction > 0 && !newDate.isAfter(now, 'day'))) {\r\n        slideDirection.value = direction > 0 ? 'slide-left' : 'slide-right'\r\n        currentDate.value = newDate.toDate()\r\n        \r\n        // Refresh attendance data\r\n        fetchAttendance(currentDate.value)\r\n        \r\n        setTimeout(() => {\r\n          slideDirection.value = ''\r\n        }, 300)\r\n      }\r\n    }\r\n\r\n    // Setup date auto-update to handle timezone correctly\r\n    const setupDateAutoUpdate = () => {\r\n      const checkAndUpdateDate = () => {\r\n        const now = moment().tz('Asia/Manila').startOf('day')\r\n        const current = moment(currentDate.value).tz('Asia/Manila').startOf('day')\r\n        \r\n        // If it's past midnight and we're showing yesterday's date\r\n        if (now.isAfter(current, 'day')) {\r\n          currentDate.value = now.toDate()\r\n          fetchAttendance()\r\n        }\r\n      }\r\n\r\n      // Clear existing interval if any\r\n      if (dateUpdateInterval) {\r\n        clearInterval(dateUpdateInterval)\r\n      }\r\n\r\n      // Check every minute\r\n      dateUpdateInterval = setInterval(checkAndUpdateDate, 60000)\r\n    }\r\n\r\n    // Add watchers for filter changes\r\n    watch(selectedYear, (newValue) => {\r\n      if (newValue) {\r\n        selectedSection.value = '';\r\n        selectedSubject.value = '';\r\n      }\r\n    });\r\n\r\n    watch(selectedSection, (newValue) => {\r\n      if (newValue) {\r\n        selectedSubject.value = '';\r\n      }\r\n    });\r\n\r\n    // Get attendance status for display\r\n    const getAttendanceStatus = (student) => {\r\n      // If student has a currentStatus property and it's not 'none', use it\r\n      if (student.currentStatus && student.currentStatus !== 'none') {\r\n        return student.currentStatus;\r\n      }\r\n      \r\n      // If no status is set, return 'none'\r\n      return 'none';\r\n    }\r\n\r\n    // Add setCurrentDate function\r\n    const setCurrentDate = (dateString) => {\r\n      if (!dateString) return;\r\n      \r\n      const newDate = moment(dateString).tz('Asia/Manila').startOf('day');\r\n      const now = moment().tz('Asia/Manila').startOf('day');\r\n      \r\n      // Only allow setting dates up to the current date\r\n      if (newDate.isAfter(now, 'day')) {\r\n        return;\r\n      }\r\n      \r\n      // Set animation direction based on whether we're going forward or backward in time\r\n      const currentMoment = moment(currentDate.value).tz('Asia/Manila').startOf('day');\r\n      slideDirection.value = newDate.isAfter(currentMoment) ? 'slide-left' : 'slide-right';\r\n      \r\n      // Update the current date\r\n      currentDate.value = newDate.toDate();\r\n      \r\n      // Refresh attendance data\r\n      fetchAttendance();\r\n      \r\n      // Reset animation after transition completes\r\n      setTimeout(() => {\r\n        slideDirection.value = '';\r\n      }, 300);\r\n    };\r\n\r\n    // Reset history date filter to default (last 30 days)\r\n    const resetHistoryDateFilter = () => {\r\n      historyStartDate.value = moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD');\r\n      historyEndDate.value = moment().tz('Asia/Manila').format('YYYY-MM-DD');\r\n      \r\n      // Fetch attendance history with the reset date range\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n    };\r\n\r\n    // Set history date range based on preset\r\n    const setHistoryDateRange = (preset) => {\r\n      const now = moment().tz('Asia/Manila');\r\n      \r\n      switch (preset) {\r\n        case 'week':\r\n          historyStartDate.value = now.clone().subtract(7, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'month':\r\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'quarter':\r\n          historyStartDate.value = now.clone().subtract(90, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'semester':\r\n          // Approximately 6 months\r\n          historyStartDate.value = now.clone().subtract(180, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        default:\r\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\r\n      }\r\n      \r\n      historyEndDate.value = now.format('YYYY-MM-DD');\r\n      \r\n      // Fetch attendance history with the new date range\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(async () => {\r\n      if (store.getters.isLoggedIn) {\r\n        try {\r\n          console.log('Component mounted, initializing...');\r\n          \r\n          // Fetch available years, sections, and subjects\r\n          await Promise.all([\r\n            fetchAvailableYearsAndSections(),\r\n            fetchTeacherSubjects()\r\n          ]);\r\n          \r\n          console.log('Initialization complete, checking for saved filters:', {\r\n            year: selectedYear.value,\r\n            section: selectedSection.value,\r\n            subject: selectedSubject.value\r\n          });\r\n          \r\n          // Apply filters if they are set\r\n          if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n            console.log('Saved filters found, fetching student records...');\r\n            await fetchStudentRecords();\r\n            console.log('Student records loaded');\r\n          } else {\r\n            console.log('No saved filters found, skipping data fetch');\r\n          }\r\n          \r\n          // Set up date auto-update\r\n          setupDateAutoUpdate();\r\n      } catch (error) {\r\n          console.error('Error during component initialization:', error);\r\n        }\r\n      } else {\r\n        router.push('/login');\r\n      }\r\n    });\r\n    \r\n    // Function to refresh attendance data\r\n    const refreshAttendance = async () => {\r\n      console.log('Manually refreshing attendance data');\r\n      \r\n      // Show loading indicator\r\n      const refreshButton = document.querySelector('.btn-outline-secondary i.fa-sync-alt');\r\n      if (refreshButton) {\r\n        refreshButton.classList.add('fa-spin');\r\n      }\r\n      \r\n      try {\r\n      // Fetch fresh attendance data from the server\r\n      await fetchAttendance();\r\n      \r\n      // Force a UI update to ensure the changes are reflected\r\n      nextTick(() => {\r\n        students.value = [...students.value];\r\n          console.log('Attendance data refreshed successfully');\r\n        });\r\n      } catch (error) {\r\n        console.error('Error refreshing attendance data:', error);\r\n      } finally {\r\n        // Remove loading indicator\r\n        setTimeout(() => {\r\n          if (refreshButton) {\r\n            refreshButton.classList.remove('fa-spin');\r\n          }\r\n        }, 500);\r\n      }\r\n    };\r\n\r\n    // Add openDatePicker function\r\n    const openDatePicker = () => {\r\n      const datePicker = document.querySelector('.date-picker-hidden');\r\n      if (datePicker) {\r\n        datePicker.click();\r\n      }\r\n    }\r\n\r\n    // Add openHistoryDatePicker function\r\n    const openHistoryDatePicker = () => {\r\n      showHistoryDatePicker.value = true;\r\n    }\r\n    \r\n    // Add applyHistoryDateFilter function\r\n    const applyHistoryDateFilter = () => {\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n      showHistoryDatePicker.value = false;\r\n    }\r\n\r\n    // Add openCalendarPopup function\r\n    const openCalendarPopup = () => {\r\n      showCalendarPopup.value = true;\r\n    }\r\n\r\n    // Add pagination state\r\n    const currentPage = ref(1)\r\n    const itemsPerPage = 25\r\n\r\n    // Compute total pages\r\n    const totalPages = computed(() => Math.ceil(sortedStudents.value.length / itemsPerPage))\r\n\r\n    // Get paginated students\r\n    const paginatedStudents = computed(() => {\r\n      const start = (currentPage.value - 1) * itemsPerPage\r\n      const end = start + itemsPerPage\r\n      return sortedStudents.value.slice(start, end)\r\n    })\r\n\r\n    // Compute pagination info\r\n    const paginationInfo = computed(() => {\r\n      const start = sortedStudents.value.length === 0 ? 0 : (currentPage.value - 1) * itemsPerPage + 1\r\n      const end = Math.min(start + itemsPerPage - 1, sortedStudents.value.length)\r\n      return { start, end }\r\n    })\r\n\r\n    // Pagination methods\r\n    const nextPage = () => {\r\n      if (currentPage.value < totalPages.value) {\r\n        currentPage.value++\r\n      }\r\n    }\r\n\r\n    const previousPage = () => {\r\n      if (currentPage.value > 1) {\r\n        currentPage.value--\r\n      }\r\n    }\r\n\r\n    // Reset pagination when filters change\r\n    watch([searchQuery, selectedYear, selectedSection, selectedSubject], () => {\r\n      currentPage.value = 1\r\n    })\r\n\r\n    // Add clearSearch function if it doesn't exist\r\n    const clearSearch = () => {\r\n      searchQuery.value = ''\r\n      handleSearch()\r\n    }\r\n\r\n    // Function to export attendance records\r\n    const exportAttendanceRecords = async () => {\r\n      try {\r\n        isExporting.value = true\r\n        \r\n        if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\r\n          alert('Please select year, section, and subject before exporting')\r\n          isExporting.value = false\r\n          return\r\n        }\r\n        \r\n        const teacherId = store.state.auth.user?._id\r\n        const teacherName = `${store.state.auth.user?.firstName || ''} ${store.state.auth.user?.lastName || ''}`.trim()\r\n        \r\n        const params = {\r\n          teacherId,\r\n          teacherName,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          startDate: exportDateRange.value.start,\r\n          endDate: exportDateRange.value.end,\r\n          format: exportFormat.value\r\n        }\r\n        \r\n        console.log('Exporting attendance records with params:', params)\r\n        \r\n        // For all formats, just get the file URL and open it directly\r\n        const response = await api.get('/export/attendance-records', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n        \r\n        console.log('Export response:', response.data)\r\n        \r\n        if (response.data) {\r\n          const baseUrl = api.defaults.baseURL || ''\r\n          let downloadUrl = ''\r\n          \r\n          // Try the static URL first if available, otherwise use the download endpoint\r\n          if (response.data.staticUrl) {\r\n            downloadUrl = `${baseUrl}${response.data.staticUrl}`\r\n          } else if (response.data.fileUrl) {\r\n            downloadUrl = `${baseUrl}${response.data.fileUrl}`\r\n          } else {\r\n            throw new Error('No file URL returned from server')\r\n          }\r\n          \r\n          console.log('Opening download URL:', downloadUrl)\r\n          \r\n          // Try both approaches\r\n          // 1. First, open in new window - this works for PDFs better\r\n          window.open(downloadUrl, '_blank')\r\n          \r\n          // 2. Also create a link and click it - this works better for Excel and CSV\r\n          const link = document.createElement('a')\r\n          link.href = downloadUrl\r\n          link.setAttribute('download', `attendance_records_${selectedYear.value}_${selectedSection.value}.${exportFormat.value}`)\r\n          document.body.appendChild(link)\r\n          link.click()\r\n          document.body.removeChild(link)\r\n          \r\n          showExportModal.value = false\r\n          alert('Export successful!')\r\n        } else {\r\n          throw new Error('No file URL returned from server')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error exporting attendance records:', error)\r\n        alert('Failed to export attendance records. Please try again.')\r\n      } finally {\r\n        isExporting.value = false\r\n      }\r\n    }\r\n\r\n    return {\r\n      students,\r\n      searchQuery,\r\n      sortField,\r\n      sortOrder,\r\n      selectedStudent,\r\n      currentDate,\r\n      slideDirection,\r\n      historyStartDate,\r\n      historyEndDate,\r\n      showHistoryDatePicker,\r\n      showCalendarPopup,\r\n      showExportModal,\r\n      exportDateRange,\r\n      exportFormat,\r\n      isExporting,\r\n      selectedYear,\r\n      selectedSection,\r\n      selectedSubject,\r\n      availableYears,\r\n      availableSections,\r\n      sectionsByYear,\r\n      teacherSubjects,\r\n      filteredSections,\r\n      sortedStudents,\r\n      currentPage,\r\n      totalPages,\r\n      paginatedStudents,\r\n      paginationInfo,\r\n      isNextDayDisabled,\r\n      formatDate,\r\n      formatDateForInput,\r\n      getAttendanceStatus,\r\n      setCurrentDate,\r\n      resetHistoryDateFilter,\r\n      setHistoryDateRange,\r\n      openDatePicker,\r\n      openHistoryDatePicker,\r\n      applyHistoryDateFilter,\r\n      openCalendarPopup,\r\n      nextPage,\r\n      previousPage,\r\n      clearSearch,\r\n      exportAttendanceRecords\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Add your styles here */\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  __name: 'SSPDashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const surveyAverageChart = ref(null);\n\n    // Data refs\n    const failingStudents = ref(0);\n    const completedSurveys = ref(0);\n    const surveyData = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Loading states\n    const loadingSurveyData = ref(false);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Remove unused computed properties and only keep what's needed\n    const hasSurveyData = computed(() => surveyData.value.length > 0);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        // Get failing students count directly from failing students list\n        try {\n          const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n\n          // Get completed surveys to exclude those students\n          const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          const completedSurveyIds = new Set();\n          if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n            completedSurveysResponse.data.forEach(survey => {\n              completedSurveyIds.add(survey.studentId);\n            });\n\n            // Set completed surveys count\n            completedSurveys.value = completedSurveysResponse.data.length;\n\n            // Also store survey data for visualization\n            surveyData.value = completedSurveysResponse.data;\n          } else {\n            completedSurveys.value = 0;\n            surveyData.value = [];\n          }\n\n          // Filter out students who have completed surveys\n          const failingStudentList = failingListResponse.data?.list || [];\n          if (Array.isArray(failingStudentList)) {\n            const filteredCount = failingStudentList.filter(student => !completedSurveyIds.has(student.info._id)).length;\n            failingStudents.value = filteredCount;\n          } else {\n            failingStudents.value = 0;\n          }\n        } catch (error) {\n          console.error('Error fetching failing students:', error);\n          failingStudents.value = 0;\n          completedSurveys.value = 0;\n          surveyData.value = [];\n        }\n\n        // Log survey data\n        console.log('Survey Data:', surveyData.value);\n\n        // Only update survey average chart\n        nextTick(() => {\n          createSurveyAverageChart();\n        });\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Reset data on error\n        failingStudents.value = 0;\n        completedSurveys.value = 0;\n        surveyData.value = [];\n\n        // Update just survey average chart with empty data\n        nextTick(() => {\n          createSurveyAverageChart();\n        });\n      }\n    };\n    const createSurveyAverageChart = () => {\n      if (!surveyAverageChart.value) return;\n      const ctx = surveyAverageChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process survey data to calculate average scores for each question\n      if (!surveyData.value || surveyData.value.length === 0) {\n        // Display empty chart if no data\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: ['No survey data available'],\n            datasets: [{\n              data: [0],\n              backgroundColor: 'rgba(156, 163, 175, 0.6)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                enabled: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 5,\n                title: {\n                  display: true,\n                  text: 'Average Score'\n                }\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Extract questions and calculate average scores\n      const questionLabels = [];\n      const questionScores = [];\n\n      // Collect all unique questions\n      const allQuestions = new Set();\n      surveyData.value.forEach(survey => {\n        if (survey.responses && Array.isArray(survey.responses)) {\n          survey.responses.forEach(response => {\n            if (response.question) {\n              allQuestions.add(response.question);\n            }\n          });\n        }\n      });\n\n      // Sort questions alphabetically for consistent display\n      const sortedQuestions = [...allQuestions].sort();\n\n      // Calculate average score for each question\n      sortedQuestions.forEach(question => {\n        let totalScore = 0;\n        let count = 0;\n        surveyData.value.forEach(survey => {\n          if (survey.responses && Array.isArray(survey.responses)) {\n            survey.responses.forEach(response => {\n              if (response.question === question && response.answer !== undefined && !isNaN(response.answer)) {\n                totalScore += Number(response.answer);\n                count++;\n              }\n            });\n          }\n        });\n        const averageScore = count > 0 ? totalScore / count : 0;\n        questionLabels.push(question.length > 30 ? question.substring(0, 30) + '...' : question);\n        questionScores.push(parseFloat(averageScore.toFixed(2)));\n      });\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: questionLabels,\n          datasets: [{\n            label: 'Average Score',\n            data: questionScores,\n            backgroundColor: 'rgba(59, 130, 246, 0.8)',\n            borderColor: 'rgba(59, 130, 246, 1)',\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                title: tooltipItems => {\n                  // Show full question text in tooltip\n                  const index = tooltipItems[0].dataIndex;\n                  return sortedQuestions[index];\n                },\n                label: context => {\n                  return `Average Score: ${context.raw}`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 5,\n              title: {\n                display: true,\n                text: 'Average Score (1-5)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n\n    // Watch surveyData for changes to update charts\n    watch(surveyData, () => {\n      loadingSurveyData.value = true;\n\n      // Use nextTick to ensure DOM is updated\n      nextTick(() => {\n        try {\n          createProblemByYearChart();\n          createSeverityDistributionChart();\n        } catch (error) {\n          console.error('Error creating survey charts:', error);\n        } finally {\n          loadingSurveyData.value = false;\n        }\n      });\n    }, {\n      deep: true\n    });\n    onMounted(async () => {\n      console.log('SSP Dashboard mounted');\n      await fetchDashboardData();\n\n      // Initialize charts\n      createSurveyAverageChart();\n\n      // Set up watchers for filters\n      watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], async () => {\n        console.log('Filters changed, refreshing data');\n        await fetchDashboardData();\n      });\n    });\n\n    // Create chart for problem types by year level\n    const createProblemByYearChart = () => {\n      if (!problemByYearChart.value) return;\n      const ctx = problemByYearChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      if (!surveyData.value || surveyData.value.length === 0) {\n        // If no data, show empty chart\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: ['1st Year', '2nd Year', '3rd Year', '4th Year'],\n            datasets: [{\n              label: 'Academic',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(54, 162, 235, 0.7)'\n            }, {\n              label: 'Financial',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(255, 99, 132, 0.7)'\n            }, {\n              label: 'Personal',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(255, 206, 86, 0.7)'\n            }, {\n              label: 'Health',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(75, 192, 192, 0.7)'\n            }, {\n              label: 'Social',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(153, 102, 255, 0.7)'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                stacked: true\n              },\n              y: {\n                stacked: true,\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: 'Number of Problems'\n                }\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Process data - group problem types by year\n      const problemTypesByYear = {\n        '1st': {},\n        '2nd': {},\n        '3rd': {},\n        '4th': {},\n        '5th': {},\n        '6th': {}\n      };\n\n      // Collect all unique problem types\n      const allProblemTypes = new Set();\n\n      // Process all surveys and their stats\n      surveyData.value.forEach(survey => {\n        const yearLevel = survey.year || 'Unknown';\n        if (!problemTypesByYear[yearLevel]) {\n          problemTypesByYear[yearLevel] = {};\n        }\n        if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n          survey.surveyStats.forEach(stat => {\n            const problemType = stat.type;\n            allProblemTypes.add(problemType);\n            if (!problemTypesByYear[yearLevel][problemType]) {\n              problemTypesByYear[yearLevel][problemType] = 0;\n            }\n            problemTypesByYear[yearLevel][problemType]++;\n          });\n        }\n      });\n\n      // Convert to chart data format\n      const problemTypesArray = Array.from(allProblemTypes);\n      const yearsArray = Object.keys(problemTypesByYear).filter(year => year !== 'Unknown' && Object.keys(problemTypesByYear[year]).length > 0);\n\n      // Create datasets for each problem type\n      const datasets = problemTypesArray.map((problemType, index) => {\n        const colors = ['rgba(54, 162, 235, 0.7)',\n        // Blue\n        'rgba(255, 99, 132, 0.7)',\n        // Red\n        'rgba(255, 206, 86, 0.7)',\n        // Yellow\n        'rgba(75, 192, 192, 0.7)',\n        // Green\n        'rgba(153, 102, 255, 0.7)',\n        // Purple\n        'rgba(255, 159, 64, 0.7)' // Orange\n        ];\n        return {\n          label: problemType,\n          data: yearsArray.map(year => problemTypesByYear[year][problemType] || 0),\n          backgroundColor: colors[index % colors.length]\n        };\n      });\n\n      // Create the chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: yearsArray,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Problems'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  return `${context.dataset.label}: ${value} problems`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Create chart for problem severity distribution\n    const createSeverityDistributionChart = () => {\n      if (!severityDistributionChart.value) return;\n      const ctx = severityDistributionChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      if (!surveyData.value || surveyData.value.length === 0) {\n        // If no data, show empty chart\n        new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['High', 'Medium', 'Low', 'Minimal'],\n            datasets: [{\n              data: [0, 0, 0, 0],\n              backgroundColor: ['rgba(239, 68, 68, 0.8)',\n              // Red (High)\n              'rgba(251, 191, 36, 0.8)',\n              // Yellow (Medium)\n              'rgba(59, 130, 246, 0.8)',\n              // Blue (Low)\n              'rgba(52, 211, 153, 0.8)' // Green (Minimal)\n              ]\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right'\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Process data - count problems by severity\n      const severityCounts = {\n        High: 0,\n        Medium: 0,\n        Low: 0,\n        Minimal: 0\n      };\n\n      // Process all surveys and their stats\n      surveyData.value.forEach(survey => {\n        if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n          survey.surveyStats.forEach(stat => {\n            const average = stat.average || 0;\n            if (average >= 7) {\n              severityCounts.High++;\n            } else if (average >= 5) {\n              severityCounts.Medium++;\n            } else if (average >= 3) {\n              severityCounts.Low++;\n            } else {\n              severityCounts.Minimal++;\n            }\n          });\n        }\n      });\n\n      // Create the chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['High', 'Medium', 'Low', 'Minimal'],\n          datasets: [{\n            data: [severityCounts.High, severityCounts.Medium, severityCounts.Low, severityCounts.Minimal],\n            backgroundColor: ['rgba(239, 68, 68, 0.8)',\n            // Red (High)\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow (Medium)\n            'rgba(59, 130, 246, 0.8)',\n            // Blue (Low)\n            'rgba(52, 211, 153, 0.8)' // Green (Minimal)\n            ]\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = Object.values(severityCounts).reduce((sum, val) => sum + val, 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const __returned__ = {\n      store,\n      surveyAverageChart,\n      failingStudents,\n      completedSurveys,\n      surveyData,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loadingSurveyData,\n      getTeacherId,\n      hasSurveyData,\n      fetchTeacherSectionsAndSubjects,\n      handleYearChange,\n      getFilterDisplay,\n      fetchDashboardData,\n      createSurveyAverageChart,\n      formatDate,\n      applyFilters,\n      createProblemByYearChart,\n      createSeverityDistributionChart,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      nextTick,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get axios() {\n        return axios;\n      },\n      get moment() {\n        return moment;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","store","surveyAverageChart","failingStudents","completedSurveys","surveyData","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","loadingSurveyData","getTeacherId","user","state","auth","_id","console","error","hasSurveyData","value","length","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","startDate","endDate","failingListResponse","completedSurveysResponse","completedSurveyIds","Array","isArray","forEach","survey","add","studentId","failingStudentList","list","filteredCount","filter","student","has","info","createSurveyAverageChart","response","ctx","getContext","existingChart","getChart","destroy","type","labels","datasets","backgroundColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","scales","y","beginAtZero","max","title","text","questionLabels","questionScores","allQuestions","responses","question","sortedQuestions","totalScore","count","answer","undefined","isNaN","Number","averageScore","substring","parseFloat","toFixed","label","borderColor","borderRadius","callbacks","tooltipItems","index","dataIndex","context","raw","x","ticks","maxRotation","minRotation","formatDate","date","applyFilters","setItem","removeItem","start","end","isBefore","createProblemByYearChart","createSeverityDistributionChart","deep","problemByYearChart","stacked","problemTypesByYear","allProblemTypes","yearLevel","surveyStats","stat","problemType","problemTypesArray","from","yearsArray","Object","keys","colors","dataset","severityDistributionChart","position","severityCounts","High","Medium","Low","Minimal","average","boxWidth","padding","total","values","reduce","sum","val","percentage"],"sources":["D:/au_dev/client/src/views/SSPDashboard.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst store = useStore()\nconst surveyAverageChart = ref(null)\n\n// Data refs\nconst failingStudents = ref(0)\nconst completedSurveys = ref(0)\nconst surveyData = ref([])\nconst sections = ref([])\nconst subjects = ref([])\n\n// Filter refs\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\nconst selectedStartDate = ref('')\nconst selectedEndDate = ref('')\nconst today = computed(() => moment().format('YYYY-MM-DD'))\n\n// Loading states\nconst loadingSurveyData = ref(false)\n\n// Get teacher ID from store\nconst getTeacherId = () => {\n  const user = store.state.auth.user\n  if (!user || !user._id) {\n    console.error('No teacher ID found in store')\n    return null\n  }\n  return user._id\n}\n\n// Remove unused computed properties and only keep what's needed\nconst hasSurveyData = computed(() => surveyData.value.length > 0)\n\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\n  try {\n    const teacherId = getTeacherId()\n    if (!teacherId) return\n\n    const token = store.state.auth.token\n    console.log('Fetching sections and subjects for:', { teacherId, year })\n\n    // First get all class records to extract sections\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n      params: { \n        teacherId,\n        year \n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n\n    if (recordsResponse.data) {\n      // Extract unique sections and subjects\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n      \n      sections.value = uniqueSections.sort()\n      subjects.value = uniqueSubjects.sort()\n      \n      console.log('Loaded sections and subjects:', {\n        sections: sections.value,\n        subjects: subjects.value\n      })\n    }\n  } catch (error) {\n    console.error('Error fetching teacher sections and subjects:', error)\n    sections.value = []\n    subjects.value = []\n  }\n}\n\nconst handleYearChange = async () => {\n  selectedSection.value = ''\n  selectedSubject.value = ''\n  if (selectedYear.value) {\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\n  } else {\n    sections.value = []\n    subjects.value = []\n  }\n  await fetchDashboardData()\n}\n\nconst getFilterDisplay = () => {\n  const filters = []\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n  if (selectedSection.value) filters.push(selectedSection.value)\n  if (selectedSubject.value) filters.push(selectedSubject.value)\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n}\n\nconst fetchDashboardData = async () => {\n  try {\n    const teacherId = getTeacherId();\n    if (!teacherId) {\n      console.error('No teacher ID found');\n      return;\n    }\n\n    const token = store.state.auth.token;\n    if (!token) {\n      console.error('No auth token found');\n      return;\n    }\n\n    console.log('Fetching dashboard data with params:', {\n      teacherId,\n      year: selectedYear.value,\n      section: selectedSection.value,\n      subject: selectedSubject.value,\n      startDate: selectedStartDate.value,\n      endDate: selectedEndDate.value\n    });\n\n    // Get failing students count directly from failing students list\n    try {\n      const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      // Get completed surveys to exclude those students\n      const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      const completedSurveyIds = new Set();\n      if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n        completedSurveysResponse.data.forEach(survey => {\n          completedSurveyIds.add(survey.studentId);\n        });\n        \n        // Set completed surveys count\n        completedSurveys.value = completedSurveysResponse.data.length;\n        \n        // Also store survey data for visualization\n        surveyData.value = completedSurveysResponse.data;\n      } else {\n        completedSurveys.value = 0;\n        surveyData.value = [];\n      }\n      \n      // Filter out students who have completed surveys\n      const failingStudentList = failingListResponse.data?.list || [];\n      if (Array.isArray(failingStudentList)) {\n        const filteredCount = failingStudentList.filter(student => \n          !completedSurveyIds.has(student.info._id)\n        ).length;\n        \n        failingStudents.value = filteredCount;\n      } else {\n        failingStudents.value = 0;\n      }\n    } catch (error) {\n      console.error('Error fetching failing students:', error);\n      failingStudents.value = 0;\n      completedSurveys.value = 0;\n      surveyData.value = [];\n    }\n\n    // Log survey data\n    console.log('Survey Data:', surveyData.value);\n\n    // Only update survey average chart\n    nextTick(() => {\n      createSurveyAverageChart();\n    });\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n    }\n    \n    // Reset data on error\n    failingStudents.value = 0;\n    completedSurveys.value = 0;\n    surveyData.value = [];\n    \n    // Update just survey average chart with empty data\n    nextTick(() => {\n      createSurveyAverageChart();\n    });\n  }\n}\n\nconst createSurveyAverageChart = () => {\n  if (!surveyAverageChart.value) return;\n  \n  const ctx = surveyAverageChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process survey data to calculate average scores for each question\n  if (!surveyData.value || surveyData.value.length === 0) {\n    // Display empty chart if no data\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['No survey data available'],\n        datasets: [{\n          data: [0],\n          backgroundColor: 'rgba(156, 163, 175, 0.6)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: { display: false },\n          tooltip: { enabled: false }\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            max: 5,\n            title: { display: true, text: 'Average Score' }\n          }\n        }\n      }\n    });\n    return;\n  }\n\n  // Extract questions and calculate average scores\n  const questionLabels = [];\n  const questionScores = [];\n  \n  // Collect all unique questions\n  const allQuestions = new Set();\n  surveyData.value.forEach(survey => {\n    if (survey.responses && Array.isArray(survey.responses)) {\n      survey.responses.forEach(response => {\n        if (response.question) {\n          allQuestions.add(response.question);\n        }\n      });\n    }\n  });\n  \n  // Sort questions alphabetically for consistent display\n  const sortedQuestions = [...allQuestions].sort();\n  \n  // Calculate average score for each question\n  sortedQuestions.forEach(question => {\n    let totalScore = 0;\n    let count = 0;\n    \n    surveyData.value.forEach(survey => {\n      if (survey.responses && Array.isArray(survey.responses)) {\n        survey.responses.forEach(response => {\n          if (response.question === question && response.answer !== undefined && !isNaN(response.answer)) {\n            totalScore += Number(response.answer);\n            count++;\n          }\n        });\n      }\n    });\n    \n    const averageScore = count > 0 ? totalScore / count : 0;\n    questionLabels.push(question.length > 30 ? question.substring(0, 30) + '...' : question);\n    questionScores.push(parseFloat(averageScore.toFixed(2)));\n  });\n  \n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: questionLabels,\n      datasets: [{\n        label: 'Average Score',\n        data: questionScores,\n        backgroundColor: 'rgba(59, 130, 246, 0.8)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: { display: false },\n        tooltip: {\n          callbacks: {\n            title: (tooltipItems) => {\n              // Show full question text in tooltip\n              const index = tooltipItems[0].dataIndex;\n              return sortedQuestions[index];\n            },\n            label: (context) => {\n              return `Average Score: ${context.raw}`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 5,\n          title: { display: true, text: 'Average Score (1-5)' }\n        },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\nconst formatDate = (date) => {\n  return moment(date).format('MMM D, YYYY')\n}\n\nconst applyFilters = async () => {\n  // Save selected values to localStorage\n  if (selectedYear.value) {\n    localStorage.setItem('selectedYear', selectedYear.value)\n  } else {\n    localStorage.removeItem('selectedYear')\n  }\n\n  if (selectedSection.value) {\n    localStorage.setItem('selectedSection', selectedSection.value)\n  } else {\n    localStorage.removeItem('selectedSection')\n  }\n\n  if (selectedSubject.value) {\n    localStorage.setItem('selectedSubject', selectedSubject.value)\n  } else {\n    localStorage.removeItem('selectedSubject')\n  }\n\n  await fetchDashboardData()\n}\n\n// Watch for filter changes\nwatch(selectedYear, handleYearChange)\nwatch([selectedSection, selectedSubject], applyFilters)\nwatch([selectedStartDate, selectedEndDate], () => {\n  if (selectedStartDate.value && selectedEndDate.value) {\n    // Validate date range\n    const start = moment(selectedStartDate.value);\n    const end = moment(selectedEndDate.value);\n    \n    if (end.isBefore(start)) {\n      selectedEndDate.value = selectedStartDate.value;\n    }\n    \n    fetchDashboardData();\n  }\n})\n\n// Watch surveyData for changes to update charts\nwatch(surveyData, () => {\n  loadingSurveyData.value = true;\n  \n  // Use nextTick to ensure DOM is updated\n  nextTick(() => {\n    try {\n      createProblemByYearChart();\n      createSeverityDistributionChart();\n    } catch (error) {\n      console.error('Error creating survey charts:', error);\n    } finally {\n      loadingSurveyData.value = false;\n    }\n  });\n}, { deep: true })\n\nonMounted(async () => {\n  console.log('SSP Dashboard mounted');\n  await fetchDashboardData();\n  \n  // Initialize charts\n  createSurveyAverageChart();\n  \n  // Set up watchers for filters\n  watch([selectedYear, selectedSection, selectedSubject, selectedStartDate, selectedEndDate], async () => {\n    console.log('Filters changed, refreshing data');\n    await fetchDashboardData();\n  });\n});\n\n// Create chart for problem types by year level\nconst createProblemByYearChart = () => {\n  if (!problemByYearChart.value) return;\n  \n  const ctx = problemByYearChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!surveyData.value || surveyData.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['1st Year', '2nd Year', '3rd Year', '4th Year'],\n        datasets: [\n          { label: 'Academic', data: [0, 0, 0, 0], backgroundColor: 'rgba(54, 162, 235, 0.7)' },\n          { label: 'Financial', data: [0, 0, 0, 0], backgroundColor: 'rgba(255, 99, 132, 0.7)' },\n          { label: 'Personal', data: [0, 0, 0, 0], backgroundColor: 'rgba(255, 206, 86, 0.7)' },\n          { label: 'Health', data: [0, 0, 0, 0], backgroundColor: 'rgba(75, 192, 192, 0.7)' },\n          { label: 'Social', data: [0, 0, 0, 0], backgroundColor: 'rgba(153, 102, 255, 0.7)' }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: { stacked: true },\n          y: { \n            stacked: true,\n            beginAtZero: true,\n            title: { display: true, text: 'Number of Problems' }\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Process data - group problem types by year\n  const problemTypesByYear = {\n    '1st': {},\n    '2nd': {},\n    '3rd': {},\n    '4th': {},\n    '5th': {},\n    '6th': {}\n  };\n  \n  // Collect all unique problem types\n  const allProblemTypes = new Set();\n  \n  // Process all surveys and their stats\n  surveyData.value.forEach(survey => {\n    const yearLevel = survey.year || 'Unknown';\n    \n    if (!problemTypesByYear[yearLevel]) {\n      problemTypesByYear[yearLevel] = {};\n    }\n    \n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        const problemType = stat.type;\n        allProblemTypes.add(problemType);\n        \n        if (!problemTypesByYear[yearLevel][problemType]) {\n          problemTypesByYear[yearLevel][problemType] = 0;\n        }\n        \n        problemTypesByYear[yearLevel][problemType]++;\n      });\n    }\n  });\n  \n  // Convert to chart data format\n  const problemTypesArray = Array.from(allProblemTypes);\n  const yearsArray = Object.keys(problemTypesByYear).filter(year => \n    year !== 'Unknown' && Object.keys(problemTypesByYear[year]).length > 0\n  );\n  \n  // Create datasets for each problem type\n  const datasets = problemTypesArray.map((problemType, index) => {\n    const colors = [\n      'rgba(54, 162, 235, 0.7)',   // Blue\n      'rgba(255, 99, 132, 0.7)',   // Red\n      'rgba(255, 206, 86, 0.7)',   // Yellow\n      'rgba(75, 192, 192, 0.7)',   // Green\n      'rgba(153, 102, 255, 0.7)',  // Purple\n      'rgba(255, 159, 64, 0.7)'    // Orange\n    ];\n    \n    return {\n      label: problemType,\n      data: yearsArray.map(year => problemTypesByYear[year][problemType] || 0),\n      backgroundColor: colors[index % colors.length]\n    };\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: yearsArray,\n      datasets: datasets\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { stacked: true },\n        y: { \n          stacked: true,\n          beginAtZero: true,\n          title: { display: true, text: 'Number of Problems' }\n        }\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              return `${context.dataset.label}: ${value} problems`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create chart for problem severity distribution\nconst createSeverityDistributionChart = () => {\n  if (!severityDistributionChart.value) return;\n  \n  const ctx = severityDistributionChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!surveyData.value || surveyData.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels: ['High', 'Medium', 'Low', 'Minimal'],\n        datasets: [{\n          data: [0, 0, 0, 0],\n          backgroundColor: [\n            'rgba(239, 68, 68, 0.8)',    // Red (High)\n            'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n            'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n            'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n          ]\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right'\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Process data - count problems by severity\n  const severityCounts = {\n    High: 0,\n    Medium: 0,\n    Low: 0,\n    Minimal: 0\n  };\n  \n  // Process all surveys and their stats\n  surveyData.value.forEach(survey => {\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        const average = stat.average || 0;\n        \n        if (average >= 7) {\n          severityCounts.High++;\n        } else if (average >= 5) {\n          severityCounts.Medium++;\n        } else if (average >= 3) {\n          severityCounts.Low++;\n        } else {\n          severityCounts.Minimal++;\n        }\n      });\n    }\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: ['High', 'Medium', 'Low', 'Minimal'],\n      datasets: [{\n        data: [\n          severityCounts.High,\n          severityCounts.Medium,\n          severityCounts.Low,\n          severityCounts.Minimal\n        ],\n        backgroundColor: [\n          'rgba(239, 68, 68, 0.8)',    // Red (High)\n          'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n          'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n          'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n        ]\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 15,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = Object.values(severityCounts).reduce((sum, val) => sum + val, 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${context.label}: ${value} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n</script>\n\n<template>\n  <div class=\"dashboard-container\">\n    <!-- Welcome Section -->\n    <div class=\"welcome-section mb-4\">\n      <h1 class=\"page-title\">SSP Dashboard</h1>\n      <p class=\"welcome-message\">\n        Welcome, {{ store.state.auth.user?.firstName || 'User' }}. Here's your SSP overview.\n      </p>\n    </div>\n\n    <!-- Filters -->\n    <div class=\"filters-bar mb-4\">\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Dashboard</h6>\n          \n          <div class=\"mb-3\">\n            <label for=\"yearFilter\" class=\"form-label\">Year</label>\n            <select id=\"yearFilter\" class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"sectionFilter\" class=\"form-label\">Section</label>\n            <select id=\"sectionFilter\" class=\"form-select\" v-model=\"selectedSection\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"subjectFilter\" class=\"form-label\">Subject</label>\n            <select id=\"subjectFilter\" class=\"form-select\" v-model=\"selectedSubject\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          \n          <div class=\"dropdown-divider\"></div>\n          \n          <div class=\"mb-3\">\n            <label for=\"startDateFilter\" class=\"form-label\">Start Date</label>\n            <input type=\"date\" id=\"startDateFilter\" class=\"form-control\" v-model=\"selectedStartDate\" :max=\"selectedEndDate || today\">\n          </div>\n          \n          <div class=\"mb-3\">\n            <label for=\"endDateFilter\" class=\"form-label\">End Date</label>\n            <input type=\"date\" id=\"endDateFilter\" class=\"form-control\" v-model=\"selectedEndDate\" :min=\"selectedStartDate\" :max=\"today\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Stats Cards -->\n    <div class=\"row mb-4 g-3\">\n      <!-- Failing Students Card -->\n      <div class=\"col-12 col-md-6 col-lg-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\" style=\"background-color: #de4054;\">\n            <i class=\"fas fa-exclamation-triangle\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Failing Students</h3>\n            <div class=\"stat-value\">{{ failingStudents }}</div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Total Surveys Card -->\n      <div class=\"col-12 col-md-6 col-lg-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\" style=\"background-color: #20c997;\">\n            <i class=\"fas fa-clipboard-check\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Completed Surveys</h3>\n            <div class=\"stat-value\">{{ completedSurveys }}</div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Total Students Card -->\n      <div class=\"col-12 col-md-6 col-lg-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\" style=\"background-color: #087ea4;\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\">{{ totalStudents }}</div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Total Sections Card -->\n      <div class=\"col-12 col-md-6 col-lg-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\" style=\"background-color: #6f42c1;\">\n            <i class=\"fas fa-th-large\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Sections</h3>\n            <div class=\"stat-value\">{{ totalSections }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Survey Average Scores Chart -->\n    <div class=\"row mb-4\">\n      <div class=\"col-12\">\n        <div class=\"chart-card\">\n          <h3 class=\"card-title\">Survey Average Scores</h3>\n          <div class=\"chart-container\">\n            <div v-if=\"loadingSurveyData\" class=\"no-data-message\">\n              <div class=\"spinner-border text-primary spinner-border-sm me-2\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n              Loading survey data...\n            </div>\n            <div v-else-if=\"!hasSurveyData\" class=\"no-data-message\">\n              <i class=\"fas fa-info-circle me-2\"></i>\n              No survey data available for the selected filters.\n            </div>\n            <canvas ref=\"surveyAverageChart\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 1.5rem;\n  letter-spacing: -0.3px;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n    padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
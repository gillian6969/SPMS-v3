{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport moment from 'moment-timezone';\nimport Chart from 'chart.js/auto';\nimport StudentDetailsModal from '@/components/modals/StudentDetailsModal.vue';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  name: 'Attendance',\n  components: {\n    StudentDetailsModal\n  },\n  setup() {\n    const store = useStore();\n    const route = useRoute();\n    const router = useRouter();\n    const students = ref([]);\n    const searchQuery = ref('');\n    const sortField = ref('lastName');\n    const sortOrder = ref('asc');\n    const selectedStudent = ref(null);\n    const currentDate = ref(moment().tz('Asia/Manila').startOf('day').toDate());\n    const slideDirection = ref('');\n    let attendanceChart = null;\n    let dateUpdateInterval = null;\n\n    // Date filter for attendance history\n    const historyStartDate = ref(moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD'));\n    const historyEndDate = ref(moment().tz('Asia/Manila').format('YYYY-MM-DD'));\n    const showHistoryDatePicker = ref(false);\n    const showCalendarPopup = ref(false);\n\n    // Add export-related refs\n    const showExportModal = ref(false);\n    const exportDateRange = ref({\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n      end: moment().format('YYYY-MM-DD')\n    });\n    const exportFormat = ref('csv');\n    const isExporting = ref(false);\n\n    // Add refs for query parameters\n    const selectedYear = ref(route.query.year || localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(route.query.section || localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(route.query.subject || localStorage.getItem('selectedSubject') || '');\n\n    // Add refs for available options\n    const availableYears = ref([]);\n    const availableSections = ref([]);\n    const sectionsByYear = ref({});\n    const teacherSubjects = ref([]);\n\n    // Computed property for filtered sections based on selected year\n    const filteredSections = computed(() => {\n      if (!selectedYear.value) return [];\n      return sectionsByYear.value[selectedYear.value] || [];\n    });\n\n    // Function to fetch available years and sections\n    const fetchAvailableYearsAndSections = async () => {\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n        console.log('Fetching available years and sections for teacher:', teacherId);\n\n        // Use the teacher-specific endpoint to get only years and sections for this teacher\n        const response = await api.get('/teacher-class-records/available-years-sections', {\n          params: {\n            teacherId\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        }).catch(error => {\n          console.error('Error fetching teacher-specific years and sections:', error);\n\n          // Fall back to the general endpoint if teacher-specific one fails\n          return api.get('/students/available-years-sections', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n        });\n        console.log('API Response for years and sections:', response.data);\n        if (response.data) {\n          // Set available years and sections from the response\n          availableYears.value = response.data.years || [];\n          availableSections.value = response.data.sections || [];\n\n          // Use sectionsByYear from the API response\n          if (response.data.sectionsByYear) {\n            sectionsByYear.value = response.data.sectionsByYear;\n          } else {\n            sectionsByYear.value = {};\n\n            // If we have years and sections but no sectionsByYear mapping,\n            // create a simple mapping where each year has all sections\n            if (availableYears.value.length > 0 && availableSections.value.length > 0) {\n              availableYears.value.forEach(year => {\n                sectionsByYear.value[year] = [...availableSections.value];\n              });\n            }\n          }\n          console.log('Available years:', availableYears.value);\n          console.log('Available sections:', availableSections.value);\n          console.log('Sections by year mapping:', sectionsByYear.value);\n\n          // If no years are available, don't add default values\n          // This ensures teachers only see years they've added\n          if (availableYears.value.length === 0) {\n            console.log('No years found for this teacher');\n          }\n\n          // If no sections are available, don't add default values\n          if (availableSections.value.length === 0) {\n            console.log('No sections found for this teacher');\n          }\n        }\n      } catch (error) {\n        console.error('Failed to fetch available years and sections:', error);\n        // Don't set default values - teacher should only see what they've added\n        availableYears.value = [];\n        availableSections.value = [];\n        sectionsByYear.value = {};\n      }\n    };\n\n    // Function to fetch teacher subjects\n    const fetchTeacherSubjects = async () => {\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n\n        // Try to fetch subjects from the teacher class records\n        try {\n          const response = await api.get('/teacher-class-records/available-years-sections', {\n            params: {\n              teacherId\n            },\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          if (response.data && response.data.subjects && response.data.subjects.length > 0) {\n            teacherSubjects.value = response.data.subjects;\n            console.log('Subjects loaded from teacher class records:', teacherSubjects.value);\n          } else {\n            // If no subjects found in class records, try the user endpoint\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            });\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\n              teacherSubjects.value = userResponse.data.subjects;\n              console.log('Subjects loaded from user profile:', teacherSubjects.value);\n            } else {\n              // If still no subjects, use default subjects\n              console.log('No subjects found, using default subjects');\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch teacher subjects from class records:', error);\n\n          // Try the user endpoint as fallback\n          try {\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            });\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\n              teacherSubjects.value = userResponse.data.subjects;\n              console.log('Subjects loaded from user profile (fallback):', teacherSubjects.value);\n            } else {\n              teacherSubjects.value = ['Math', 'Science', 'English', 'History'];\n              console.log('No subjects found in user profile, using default subjects');\n            }\n          } catch (userError) {\n            console.error('Failed to fetch teacher subjects from user profile:', userError);\n            teacherSubjects.value = ['Math', 'Science', 'English', 'History'];\n            console.log('Using default subjects due to API errors');\n          }\n        }\n      } catch (error) {\n        console.error('Error in fetchTeacherSubjects:', error);\n        teacherSubjects.value = ['Math', 'Science', 'English', 'History'];\n      }\n    };\n\n    // Function to apply filters\n    const applyFilters = async () => {\n      console.log('Applying filters:', {\n        year: selectedYear.value,\n        section: selectedSection.value,\n        subject: selectedSubject.value\n      });\n\n      // Save selected values to localStorage\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value);\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value);\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value);\n\n      // Update URL query parameters\n      router.replace({\n        query: {\n          ...route.query,\n          year: selectedYear.value || undefined,\n          section: selectedSection.value || undefined,\n          subject: selectedSubject.value || undefined\n        }\n      });\n\n      // Always fetch student records when filters are applied\n      await fetchStudentRecords();\n    };\n\n    // Function to clear filters\n    const clearFilters = () => {\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      localStorage.removeItem('selectedYear');\n      localStorage.removeItem('selectedSection');\n      localStorage.removeItem('selectedSubject');\n\n      // Update URL query parameters\n      router.replace({\n        query: {}\n      });\n    };\n\n    // Function to fetch students and their attendance\n    const fetchStudentRecords = async () => {\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n\n        // Create a params object with the teacher ID\n        const params = {\n          teacherId\n        };\n\n        // Add any selected filters to the params\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        console.log('Fetching student records with filters:', params);\n        try {\n          const response = await api.get('/teacher-class-records/students-for-attendance', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          console.log('Students API response:', response.data);\n          if (response.data) {\n            let studentList = [];\n            if (Array.isArray(response.data)) {\n              studentList = response.data;\n            } else if (response.data.students && Array.isArray(response.data.students)) {\n              studentList = response.data.students;\n            }\n\n            // Log each student's data to verify studentId is present\n            studentList.forEach(student => {\n              console.log('Student data:', {\n                studentId: student._id || student.studentId,\n                studentNumber: student.studentNumber,\n                name: `${student.firstName} ${student.lastName}`\n              });\n            });\n\n            // Initialize students with 'none' status and ensure studentId is set\n            students.value = studentList.map(student => ({\n              ...student,\n              studentId: student._id || student.studentId,\n              // Use _id if studentId is not present\n              currentStatus: 'none'\n            }));\n            console.log(`Loaded ${students.value.length} students with IDs`);\n\n            // Immediately fetch attendance after loading students\n            if (students.value.length > 0) {\n              await fetchAttendance();\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch student records:', error);\n          students.value = [];\n        }\n      } catch (error) {\n        console.error('Error in fetchStudentRecords:', error);\n        students.value = [];\n      }\n    };\n\n    // Function to fetch attendance for current date\n    const fetchAttendance = async () => {\n      try {\n        // If there are no students, we can't fetch attendance\n        if (!students.value.length) {\n          console.log('fetchAttendance: No students to fetch attendance for');\n          return;\n        }\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\n        console.log('fetchAttendance: Fetching attendance data for date:', date);\n\n        // Create params object with the date and required filters\n        const params = {\n          teacherId: store.state.auth.user?._id,\n          date: date\n        };\n\n        // Add any selected filters to the params\n        if (selectedYear.value) params.year = selectedYear.value;\n        if (selectedSection.value) params.section = selectedSection.value;\n        if (selectedSubject.value) params.subject = selectedSubject.value;\n        console.log('Fetching attendance with params:', params);\n        const response = await api.get(`/attendance/date/${date}`, {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Attendance data received:', response.data);\n\n        // Create a map to store attendance by student ID\n        const studentMap = new Map();\n        if (response.data && Array.isArray(response.data)) {\n          console.log(`Processing ${response.data.length} attendance records`);\n\n          // Group records by student ID to find the most recent one for each student\n          const recordsByStudent = {};\n          response.data.forEach(record => {\n            if (record.studentId) {\n              // If we don't have this student yet, or this record is newer\n              if (!recordsByStudent[record.studentId] || record.createdAt && (!recordsByStudent[record.studentId].createdAt || new Date(record.createdAt) > new Date(recordsByStudent[record.studentId].createdAt))) {\n                recordsByStudent[record.studentId] = record;\n                console.log(`Found newer record for student ${record.studentId}: ${record.status} (created at ${record.createdAt})`);\n              }\n            } else {\n              console.log('Record missing studentId:', record);\n            }\n          });\n\n          // Now use the most recent record for each student\n          Object.values(recordsByStudent).forEach(record => {\n            studentMap.set(String(record.studentId), record.status || 'none');\n            console.log(`Using most recent attendance for student ID ${record.studentId}: ${record.status || 'none'} (created at ${record.createdAt})`);\n          });\n        }\n\n        // Assign Attendance data to specific student\n        // students.value = response.data.map((att) => {\n\n        // })\n\n        // Update students with attendance data\n        if (students.value && students.value.length > 0) {\n          // Merge attendance data into students array\n          // This will fix the updating of attendance data\n          students.value = students.value.map(student => ({\n            ...student,\n            currentStatus: response.data.find(att => att.studentId === student.studentId)?.status\n          }));\n          // students.value = students.value.map(student => {\n          //   const studentIdStr = String(student.studentId);\n          //   const status = studentMap.get(studentIdStr);\n\n          //   // Store the attendance status for this date\n          //   if (!student.attendanceByDate) {\n          //     student.attendanceByDate = {};\n          //   }\n\n          //   if (status) {\n          //     student.attendanceByDate[date] = status;\n          //   }\n\n          //   // Use the stored status for this date if available, otherwise use the fetched status\n          //   const currentStatus = status || student.currentStatus || 'none';\n\n          //   console.log(`Setting status for student ${studentIdStr}: ${currentStatus}`);\n\n          //   return {\n          //     ...student,\n          //     currentStatus: currentStatus\n          //   };\n          // });\n\n          // Force a UI update\n          await nextTick();\n          students.value = [...students.value];\n          console.log('Updated attendance status for all students');\n        }\n      } catch (error) {\n        console.error('Error in fetchAttendance:', error);\n      }\n    };\n\n    // Create attendance chart\n    const createPerformanceChart = () => {\n      if (!selectedStudent.value) return;\n\n      // Create a unique chart ID for each student\n      const chartId = `attendanceChart-${selectedStudent.value.studentId}`;\n      const chartElement = document.getElementById('attendanceChart');\n\n      // Set a unique ID to the chart element\n      if (chartElement) {\n        chartElement.id = chartId;\n      }\n      const ctx = document.getElementById(chartId)?.getContext('2d');\n      if (!ctx) return;\n\n      // Destroy existing chart if it exists\n      if (attendanceChart) {\n        attendanceChart.destroy();\n        attendanceChart = null;\n      }\n\n      // Get the chart container\n      const chartContainer = document.querySelector('.chart-container');\n      if (!chartContainer) return;\n\n      // Check if we have valid attendance statistics and records\n      const stats = selectedStudent.value.attendanceStats;\n      const hasAttendanceRecords = selectedStudent.value.attendanceHistory && selectedStudent.value.attendanceHistory.length > 0;\n      if (!hasAttendanceRecords || !stats || stats.presentPercentage === 0 && stats.absentPercentage === 0 && stats.latePercentage === 0) {\n        // If no attendance data, display a message instead of an empty chart\n        chartContainer.innerHTML = '';\n        const noDataMessage = document.createElement('div');\n        noDataMessage.className = 'text-center py-5 text-muted';\n        noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No attendance data available for this student in the selected date range.';\n        chartContainer.appendChild(noDataMessage);\n        return;\n      }\n\n      // Clear the container and add canvas back\n      chartContainer.innerHTML = '';\n      const canvas = document.createElement('canvas');\n      canvas.id = chartId;\n      chartContainer.appendChild(canvas);\n\n      // Get the context from the new canvas\n      const newCtx = document.getElementById(chartId)?.getContext('2d');\n      if (!newCtx) return;\n\n      // Enhanced colors for the chart\n      const chartColors = {\n        present: {\n          backgroundColor: '#4CAF50',\n          hoverBackgroundColor: '#388E3C',\n          borderColor: '#fff',\n          borderWidth: 2\n        },\n        absent: {\n          backgroundColor: '#F44336',\n          hoverBackgroundColor: '#D32F2F',\n          borderColor: '#fff',\n          borderWidth: 2\n        },\n        late: {\n          backgroundColor: '#FFC107',\n          hoverBackgroundColor: '#FFA000',\n          borderColor: '#fff',\n          borderWidth: 2\n        }\n      };\n\n      // Create the chart\n      attendanceChart = new Chart(newCtx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Absent', 'Late'],\n          datasets: [{\n            data: [stats.presentPercentage, stats.absentPercentage, stats.latePercentage],\n            backgroundColor: [chartColors.present.backgroundColor, chartColors.absent.backgroundColor, chartColors.late.backgroundColor],\n            hoverBackgroundColor: [chartColors.present.hoverBackgroundColor, chartColors.absent.hoverBackgroundColor, chartColors.late.hoverBackgroundColor],\n            borderColor: [chartColors.present.borderColor, chartColors.absent.borderColor, chartColors.late.borderColor],\n            borderWidth: 2,\n            borderRadius: 5,\n            spacing: 5,\n            hoverOffset: 10\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '70%',\n          animation: {\n            animateScale: true,\n            animateRotate: true,\n            duration: 1000,\n            easing: 'easeOutQuart'\n          },\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                boxWidth: 15,\n                boxHeight: 15,\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                },\n                generateLabels: chart => {\n                  const data = chart.data;\n                  if (data.labels.length && data.datasets.length) {\n                    return data.labels.map((label, i) => {\n                      const meta = chart.getDatasetMeta(0);\n                      const style = meta.controller.getStyle(i);\n                      return {\n                        text: `${label}: ${data.datasets[0].data[i].toFixed(1)}%`,\n                        fillStyle: style.backgroundColor,\n                        strokeStyle: style.borderColor,\n                        lineWidth: style.borderWidth,\n                        hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n                        index: i\n                      };\n                    });\n                  }\n                  return [];\n                }\n              }\n            },\n            tooltip: {\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                size: 16,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 14\n              },\n              padding: 15,\n              cornerRadius: 8,\n              displayColors: true,\n              callbacks: {\n                label: function (context) {\n                  const label = context.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value.toFixed(1)}%`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // View student details\n    const viewStudentDetails = async student => {\n      try {\n        // Reset any existing chart before showing a new student\n        if (attendanceChart) {\n          attendanceChart.destroy();\n          attendanceChart = null;\n        }\n        selectedStudent.value = {\n          ...student,\n          attendanceHistory: [],\n          attendanceStats: {\n            presentPercentage: 0,\n            absentPercentage: 0,\n            latePercentage: 0\n          }\n        };\n\n        // Fetch attendance history with the current date filters\n        await fetchStudentAttendanceHistory(selectedStudent.value);\n      } catch (error) {\n        console.error('Error fetching student details:', error);\n        alert('Failed to load student details. Please try again.');\n      }\n    };\n\n    // Fetch student attendance history with date filters\n    const fetchStudentAttendanceHistory = async student => {\n      if (!student) return;\n      try {\n        console.log(`Fetching attendance history for student ${student.studentNumber} with date range:`, {\n          startDate: historyStartDate.value,\n          endDate: historyEndDate.value\n        });\n        const response = await api.get(`/attendance/${student.studentId}/history`, {\n          params: {\n            subject: selectedSubject.value,\n            startDate: historyStartDate.value,\n            endDate: historyEndDate.value\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        if (response.data) {\n          // Make sure we're updating the correct student\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\n            // Only include records that have a valid status (not null, undefined, or empty string)\n            const validRecords = Array.isArray(response.data.records) ? response.data.records.filter(record => record && record.status && record.status !== '') : [];\n            selectedStudent.value.attendanceHistory = validRecords;\n\n            // Only calculate statistics based on valid records\n            if (validRecords.length > 0) {\n              // Count occurrences of each status\n              const statusCounts = {\n                present: 0,\n                absent: 0,\n                late: 0\n              };\n              validRecords.forEach(record => {\n                if (record.status in statusCounts) {\n                  statusCounts[record.status]++;\n                }\n              });\n\n              // Calculate percentages\n              const total = validRecords.length;\n              const presentPercentage = total > 0 ? statusCounts.present / total * 100 : 0;\n              const absentPercentage = total > 0 ? statusCounts.absent / total * 100 : 0;\n              const latePercentage = total > 0 ? statusCounts.late / total * 100 : 0;\n              selectedStudent.value.attendanceStats = {\n                presentPercentage,\n                absentPercentage,\n                latePercentage\n              };\n            } else {\n              // If no valid records, set all percentages to 0\n              selectedStudent.value.attendanceStats = {\n                presentPercentage: 0,\n                absentPercentage: 0,\n                latePercentage: 0\n              };\n            }\n            console.log(`Loaded ${selectedStudent.value.attendanceHistory.length} attendance records for student ${student.studentNumber}`);\n\n            // Create attendance chart on next tick to ensure DOM is ready\n            nextTick(() => {\n              // Reset any existing chart before creating a new one\n              if (attendanceChart) {\n                attendanceChart.destroy();\n                attendanceChart = null;\n              }\n              createPerformanceChart();\n            });\n          } else {\n            console.log('Selected student changed, not updating attendance history');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching student attendance history:', error);\n        selectedStudent.value.attendanceHistory = [];\n        selectedStudent.value.attendanceStats = {\n          presentPercentage: 0,\n          absentPercentage: 0,\n          latePercentage: 0\n        };\n\n        // Create chart with empty data\n        nextTick(() => {\n          if (attendanceChart) {\n            attendanceChart.destroy();\n            attendanceChart = null;\n          }\n          createPerformanceChart();\n        });\n      }\n    };\n\n    // Sort functions\n    const sortBy = field => {\n      if (sortField.value === field) {\n        sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc';\n      } else {\n        sortField.value = field;\n        sortOrder.value = 'asc';\n      }\n    };\n    const getSortIcon = field => {\n      if (sortField.value !== field) return 'fas fa-sort';\n      return sortOrder.value === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';\n    };\n\n    // Sort students\n    const sortedStudents = computed(() => {\n      if (!Array.isArray(students.value)) {\n        return [];\n      }\n      let sortedList = [...students.value];\n      if (sortField.value) {\n        sortedList.sort((a, b) => {\n          let aVal = a[sortField.value];\n          let bVal = b[sortField.value];\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase();\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase();\n          if (aVal < bVal) return sortOrder.value === 'asc' ? -1 : 1;\n          if (aVal > bVal) return sortOrder.value === 'asc' ? 1 : -1;\n          return 0;\n        });\n      }\n      if (!searchQuery.value) {\n        return sortedList;\n      }\n      const searchLower = searchQuery.value.toLowerCase();\n      return sortedList.filter(student => {\n        return student.studentNumber.toLowerCase().includes(searchLower) || student.firstName.toLowerCase().includes(searchLower) || student.lastName.toLowerCase().includes(searchLower);\n      });\n    });\n\n    // Update attendance status\n    const markAttendance = async (student, status) => {\n      try {\n        if (!status || !student) {\n          console.log('Invalid status or student:', {\n            status,\n            student\n          });\n          return;\n        }\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\n        console.log('Marking attendance:', {\n          studentId: student.studentId,\n          studentNumber: student.studentNumber,\n          status,\n          date\n        });\n        const attendanceData = {\n          studentId: student.studentId,\n          studentNumber: student.studentNumber,\n          teacherId: store.state.auth.user._id,\n          date: date,\n          subject: selectedSubject.value,\n          section: selectedSection.value,\n          year: selectedYear.value,\n          status: status,\n          createdAt: new Date().toISOString() // Ensure we have a current timestamp\n        };\n\n        // Update UI immediately for better responsiveness\n        student.currentStatus = status;\n        const response = await api.post('/attendance', attendanceData, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        if (response.data) {\n          console.log('Attendance marked successfully:', response.data);\n\n          // Store the attendance status in the student object for this date\n          if (!student.attendanceByDate) {\n            student.attendanceByDate = {};\n          }\n          student.attendanceByDate[date] = status;\n\n          // If the student is currently selected in the details modal, update their history\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\n            await fetchStudentAttendanceHistory(selectedStudent.value);\n          }\n        }\n      } catch (error) {\n        console.error('Error marking attendance:', error);\n        // Revert the status on error\n        student.currentStatus = 'none';\n        alert('Failed to save attendance. Please try again.');\n      }\n    };\n\n    // Handle search\n    const handleSearch = () => {\n      // The sortedStudents computed property will automatically filter based on searchQuery\n    };\n\n    // Watch for query parameter changes\n    watch([selectedYear, selectedSection, selectedSubject], async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value);\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value);\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value);\n\n      // Fetch student records and attendance when filters change\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n        await fetchStudentRecords();\n      }\n\n      // Update navigation title\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n        try {\n          if (router.currentRoute.value.matched[0].components.default.props) {\n            router.currentRoute.value.matched[0].components.default.props.selectedInfo = `${selectedYear.value} - ${selectedSection.value} | ${selectedSubject.value}`;\n          }\n        } catch (error) {\n          console.error('Error updating navigation title:', error);\n        }\n      }\n    });\n\n    // Watch for date changes\n    watch(currentDate, async (newDate, oldDate) => {\n      console.log('Current date changed from', moment(oldDate).format('YYYY-MM-DD'), 'to', moment(newDate).format('YYYY-MM-DD'));\n\n      // Only fetch if we have the required data\n      if (selectedYear.value && selectedSection.value && selectedSubject.value && students.value.length > 0) {\n        console.log('Fetching attendance data for new date');\n        await fetchAttendance();\n      } else {\n        console.log('Skipping attendance fetch due to missing data:', {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          studentsCount: students.value?.length || 0\n        });\n      }\n    });\n\n    // Clean up chart when component unmounts\n    onUnmounted(() => {\n      if (attendanceChart) {\n        attendanceChart.destroy();\n        attendanceChart = null;\n      }\n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval);\n      }\n    });\n\n    // Clean up chart when student modal closes\n    watch(() => selectedStudent.value, (newValue, oldValue) => {\n      if (!newValue && attendanceChart) {\n        attendanceChart.destroy();\n        attendanceChart = null;\n\n        // Reset the chart element ID back to the default\n        if (oldValue) {\n          const chartElement = document.getElementById(`attendanceChart-${oldValue.studentId}`);\n          if (chartElement) {\n            chartElement.id = 'attendanceChart';\n          }\n        }\n      }\n    });\n\n    // Format date for display\n    const formatDate = date => {\n      if (!date) return 'N/A';\n      return moment(date).tz('Asia/Manila').format('MMMM D, YYYY');\n    };\n\n    // Format date for input fields (YYYY-MM-DD)\n    const formatDateForInput = date => {\n      if (!date) return '';\n      return moment(date).tz('Asia/Manila').format('YYYY-MM-DD');\n    };\n\n    // Add isNextDayDisabled computed property\n    const isNextDayDisabled = computed(() => {\n      const now = moment().tz('Asia/Manila').startOf('day');\n      const selected = moment(currentDate.value).tz('Asia/Manila').startOf('day');\n      return selected.isSameOrAfter(now, 'day');\n    });\n\n    // Add navigateDate function\n    const navigateDate = direction => {\n      const now = moment().tz('Asia/Manila').startOf('day');\n      const newDate = moment(currentDate.value).tz('Asia/Manila').startOf('day').add(direction, 'days');\n\n      // Only allow navigation to past dates or current date\n      if (direction < 0 || direction > 0 && !newDate.isAfter(now, 'day')) {\n        slideDirection.value = direction > 0 ? 'slide-left' : 'slide-right';\n        currentDate.value = newDate.toDate();\n\n        // Refresh attendance data\n        fetchAttendance(currentDate.value);\n        setTimeout(() => {\n          slideDirection.value = '';\n        }, 300);\n      }\n    };\n\n    // Setup date auto-update to handle timezone correctly\n    const setupDateAutoUpdate = () => {\n      const checkAndUpdateDate = () => {\n        const now = moment().tz('Asia/Manila').startOf('day');\n        const current = moment(currentDate.value).tz('Asia/Manila').startOf('day');\n\n        // If it's past midnight and we're showing yesterday's date\n        if (now.isAfter(current, 'day')) {\n          currentDate.value = now.toDate();\n          fetchAttendance();\n        }\n      };\n\n      // Clear existing interval if any\n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval);\n      }\n\n      // Check every minute\n      dateUpdateInterval = setInterval(checkAndUpdateDate, 60000);\n    };\n\n    // Add watchers for filter changes\n    watch(selectedYear, newValue => {\n      if (newValue) {\n        selectedSection.value = '';\n        selectedSubject.value = '';\n      }\n    });\n    watch(selectedSection, newValue => {\n      if (newValue) {\n        selectedSubject.value = '';\n      }\n    });\n\n    // Get attendance status for display\n    const getAttendanceStatus = student => {\n      // If student has a currentStatus property and it's not 'none', use it\n      if (student.currentStatus && student.currentStatus !== 'none') {\n        return student.currentStatus;\n      }\n\n      // If no status is set, return 'none'\n      return 'none';\n    };\n\n    // Add setCurrentDate function\n    const setCurrentDate = dateString => {\n      if (!dateString) return;\n      const newDate = moment(dateString).tz('Asia/Manila').startOf('day');\n      const now = moment().tz('Asia/Manila').startOf('day');\n\n      // Only allow setting dates up to the current date\n      if (newDate.isAfter(now, 'day')) {\n        return;\n      }\n\n      // Set animation direction based on whether we're going forward or backward in time\n      const currentMoment = moment(currentDate.value).tz('Asia/Manila').startOf('day');\n      slideDirection.value = newDate.isAfter(currentMoment) ? 'slide-left' : 'slide-right';\n\n      // Update the current date\n      currentDate.value = newDate.toDate();\n\n      // Refresh attendance data\n      fetchAttendance();\n\n      // Reset animation after transition completes\n      setTimeout(() => {\n        slideDirection.value = '';\n      }, 300);\n    };\n\n    // Reset history date filter to default (last 30 days)\n    const resetHistoryDateFilter = () => {\n      historyStartDate.value = moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD');\n      historyEndDate.value = moment().tz('Asia/Manila').format('YYYY-MM-DD');\n\n      // Fetch attendance history with the reset date range\n      if (selectedStudent.value) {\n        fetchStudentAttendanceHistory(selectedStudent.value);\n      }\n    };\n\n    // Set history date range based on preset\n    const setHistoryDateRange = preset => {\n      const now = moment().tz('Asia/Manila');\n      switch (preset) {\n        case 'week':\n          historyStartDate.value = now.clone().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n        case 'quarter':\n          historyStartDate.value = now.clone().subtract(90, 'days').format('YYYY-MM-DD');\n          break;\n        case 'semester':\n          // Approximately 6 months\n          historyStartDate.value = now.clone().subtract(180, 'days').format('YYYY-MM-DD');\n          break;\n        default:\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\n      }\n      historyEndDate.value = now.format('YYYY-MM-DD');\n\n      // Fetch attendance history with the new date range\n      if (selectedStudent.value) {\n        fetchStudentAttendanceHistory(selectedStudent.value);\n      }\n    };\n\n    // Initialize component\n    onMounted(async () => {\n      if (store.getters.isLoggedIn) {\n        try {\n          console.log('Component mounted, initializing...');\n\n          // Fetch available years, sections, and subjects\n          await Promise.all([fetchAvailableYearsAndSections(), fetchTeacherSubjects()]);\n          console.log('Initialization complete, checking for saved filters:', {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          });\n\n          // Apply filters if they are set\n          if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n            console.log('Saved filters found, fetching student records...');\n            await fetchStudentRecords();\n            console.log('Student records loaded');\n          } else {\n            console.log('No saved filters found, skipping data fetch');\n          }\n\n          // Set up date auto-update\n          setupDateAutoUpdate();\n        } catch (error) {\n          console.error('Error during component initialization:', error);\n        }\n      } else {\n        router.push('/login');\n      }\n    });\n\n    // Function to refresh attendance data\n    const refreshAttendance = async () => {\n      console.log('Manually refreshing attendance data');\n\n      // Show loading indicator\n      const refreshButton = document.querySelector('.btn-outline-secondary i.fa-sync-alt');\n      if (refreshButton) {\n        refreshButton.classList.add('fa-spin');\n      }\n      try {\n        // Fetch fresh attendance data from the server\n        await fetchAttendance();\n\n        // Force a UI update to ensure the changes are reflected\n        nextTick(() => {\n          students.value = [...students.value];\n          console.log('Attendance data refreshed successfully');\n        });\n      } catch (error) {\n        console.error('Error refreshing attendance data:', error);\n      } finally {\n        // Remove loading indicator\n        setTimeout(() => {\n          if (refreshButton) {\n            refreshButton.classList.remove('fa-spin');\n          }\n        }, 500);\n      }\n    };\n\n    // Add openDatePicker function\n    const openDatePicker = () => {\n      const datePicker = document.querySelector('.date-picker-hidden');\n      if (datePicker) {\n        datePicker.click();\n      }\n    };\n\n    // Add openHistoryDatePicker function\n    const openHistoryDatePicker = () => {\n      showHistoryDatePicker.value = true;\n    };\n\n    // Add applyHistoryDateFilter function\n    const applyHistoryDateFilter = () => {\n      if (selectedStudent.value) {\n        fetchStudentAttendanceHistory(selectedStudent.value);\n      }\n      showHistoryDatePicker.value = false;\n    };\n\n    // Add openCalendarPopup function\n    const openCalendarPopup = () => {\n      showCalendarPopup.value = true;\n    };\n\n    // Add pagination state\n    const currentPage = ref(1);\n    const itemsPerPage = 25;\n\n    // Compute total pages\n    const totalPages = computed(() => Math.ceil(sortedStudents.value.length / itemsPerPage));\n\n    // Get paginated students\n    const paginatedStudents = computed(() => {\n      const start = (currentPage.value - 1) * itemsPerPage;\n      const end = start + itemsPerPage;\n      return sortedStudents.value.slice(start, end);\n    });\n\n    // Compute pagination info\n    const paginationInfo = computed(() => {\n      const start = sortedStudents.value.length === 0 ? 0 : (currentPage.value - 1) * itemsPerPage + 1;\n      const end = Math.min(start + itemsPerPage - 1, sortedStudents.value.length);\n      return {\n        start,\n        end\n      };\n    });\n\n    // Pagination methods\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n    const previousPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n\n    // Reset pagination when filters change\n    watch([searchQuery, selectedYear, selectedSection, selectedSubject], () => {\n      currentPage.value = 1;\n    });\n\n    // Add clearSearch function if it doesn't exist\n    const clearSearch = () => {\n      searchQuery.value = '';\n      handleSearch();\n    };\n\n    // Function to export attendance records\n    const exportAttendanceRecords = async () => {\n      try {\n        isExporting.value = true;\n        if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\n          alert('Please select year, section, and subject before exporting');\n          isExporting.value = false;\n          return;\n        }\n        const teacherId = store.state.auth.user?._id;\n        const teacherName = `${store.state.auth.user?.firstName || ''} ${store.state.auth.user?.lastName || ''}`.trim();\n        const params = {\n          teacherId,\n          teacherName,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: exportDateRange.value.start,\n          endDate: exportDateRange.value.end,\n          format: exportFormat.value\n        };\n        console.log('Exporting attendance records with params:', params);\n\n        // Use the same approach for all file types\n        const response = await api.get('/export/attendance-records', {\n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        if (response.data && response.data.fileUrl) {\n          // Create a full URL by combining the API base URL with the file URL\n          const baseUrl = api.defaults.baseURL || '';\n          const fullUrl = `${baseUrl}${response.data.fileUrl}`;\n\n          // Open the file in a new tab or window\n          window.open(fullUrl, '_blank');\n        } else {\n          throw new Error('Failed to get download URL');\n        }\n        showExportModal.value = false;\n        alert('Export successful!');\n      } catch (error) {\n        console.error('Error exporting attendance records:', error);\n        alert('Failed to export attendance records. Please try again.');\n      } finally {\n        isExporting.value = false;\n      }\n    };\n    return {\n      students,\n      searchQuery,\n      sortedStudents,\n      selectedStudent,\n      currentDate,\n      formatDate,\n      formatDateForInput,\n      navigateDate,\n      isNextDayDisabled,\n      markAttendance,\n      slideDirection,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      sortBy,\n      getSortIcon,\n      handleSearch,\n      viewStudentDetails,\n      fetchStudentAttendanceHistory,\n      historyStartDate,\n      historyEndDate,\n      availableYears,\n      availableSections,\n      sectionsByYear,\n      teacherSubjects,\n      filteredSections,\n      fetchAvailableYearsAndSections,\n      fetchTeacherSubjects,\n      applyFilters,\n      clearFilters,\n      getAttendanceStatus,\n      setCurrentDate,\n      resetHistoryDateFilter,\n      setHistoryDateRange,\n      openDatePicker,\n      showHistoryDatePicker,\n      openHistoryDatePicker,\n      applyHistoryDateFilter,\n      showCalendarPopup,\n      openCalendarPopup,\n      refreshAttendance,\n      currentPage,\n      totalPages,\n      paginatedStudents,\n      paginationInfo,\n      nextPage,\n      previousPage,\n      clearSearch,\n      showExportModal,\n      exportDateRange,\n      exportFormat,\n      isExporting,\n      exportAttendanceRecords\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","watch","nextTick","useStore","useRoute","useRouter","axios","moment","Chart","StudentDetailsModal","api","create","baseURL","headers","name","components","setup","store","route","router","students","searchQuery","sortField","sortOrder","selectedStudent","currentDate","tz","startOf","toDate","slideDirection","attendanceChart","dateUpdateInterval","historyStartDate","subtract","format","historyEndDate","showHistoryDatePicker","showCalendarPopup","showExportModal","exportDateRange","start","end","exportFormat","isExporting","selectedYear","query","year","localStorage","getItem","selectedSection","section","selectedSubject","subject","availableYears","availableSections","sectionsByYear","teacherSubjects","filteredSections","value","fetchAvailableYearsAndSections","token","state","auth","teacherId","user","_id","console","error","log","response","get","params","catch","data","years","sections","length","forEach","fetchTeacherSubjects","subjects","userResponse","userError","applyFilters","setItem","replace","undefined","fetchStudentRecords","clearFilters","removeItem","studentList","Array","isArray","student","studentId","studentNumber","firstName","lastName","map","currentStatus","fetchAttendance","date","studentMap","Map","recordsByStudent","record","createdAt","Date","status","Object","values","set","String","find","att","createPerformanceChart","chartId","chartElement","document","getElementById","id","ctx","getContext","destroy","chartContainer","querySelector","stats","attendanceStats","hasAttendanceRecords","attendanceHistory","presentPercentage","absentPercentage","latePercentage","innerHTML","noDataMessage","createElement","className","appendChild","canvas","newCtx","chartColors","present","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","absent","late","type","labels","datasets","borderRadius","spacing","hoverOffset","options","responsive","maintainAspectRatio","cutout","animation","animateScale","animateRotate","duration","easing","plugins","legend","position","padding","boxWidth","boxHeight","font","size","weight","generateLabels","chart","label","i","meta","getDatasetMeta","style","controller","getStyle","text","toFixed","fillStyle","strokeStyle","lineWidth","hidden","isNaN","index","tooltip","titleFont","bodyFont","cornerRadius","displayColors","callbacks","context","raw","viewStudentDetails","fetchStudentAttendanceHistory","alert","startDate","endDate","validRecords","records","filter","statusCounts","total","sortBy","field","getSortIcon","sortedStudents","sortedList","sort","a","b","aVal","bVal","toLowerCase","searchLower","includes","markAttendance","attendanceData","toISOString","post","attendanceByDate","handleSearch","currentRoute","matched","default","props","selectedInfo","newDate","oldDate","studentsCount","clearInterval","newValue","oldValue","formatDate","formatDateForInput","isNextDayDisabled","now","selected","isSameOrAfter","navigateDate","direction","add","isAfter","setTimeout","setupDateAutoUpdate","checkAndUpdateDate","current","setInterval","getAttendanceStatus","setCurrentDate","dateString","currentMoment","resetHistoryDateFilter","setHistoryDateRange","preset","clone","getters","isLoggedIn","Promise","all","push","refreshAttendance","refreshButton","classList","remove","openDatePicker","datePicker","click","openHistoryDatePicker","applyHistoryDateFilter","openCalendarPopup","currentPage","itemsPerPage","totalPages","Math","ceil","paginatedStudents","slice","paginationInfo","min","nextPage","previousPage","clearSearch","exportAttendanceRecords","teacherName","trim","fileUrl","baseUrl","defaults","fullUrl","window","open","Error"],"sources":["D:\\au_dev\\client\\src\\views\\Attendance.vue"],"sourcesContent":["<template>\r\n  <div class=\"attendance-view\">\r\n    <!-- Control Buttons and Date Navigation -->\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div class=\"d-flex gap-2\">\r\n        <!-- Any attendance-specific buttons can go here -->\r\n        <button \r\n          class=\"btn btn-outline-secondary\" \r\n          @click=\"refreshAttendance\"\r\n          title=\"Refresh attendance data from database\"\r\n        >\r\n          <i class=\"fas fa-sync-alt me-2\"></i> Refresh Attendance\r\n        </button>\r\n        <button \r\n          class=\"btn btn-success\" \r\n          @click=\"showExportModal = true\"\r\n          title=\"Export attendance records\"\r\n        >\r\n          <i class=\"fas fa-file-export me-2\"></i> Export Records\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Date Navigation -->\r\n      <div class=\"d-flex align-items-center gap-3\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"navigateDate(-1)\">\r\n          <i class=\"fas fa-chevron-left\"></i>\r\n        </button>\r\n        <div class=\"date-display\" @click=\"openCalendarPopup\" role=\"button\">\r\n          {{ formatDate(currentDate) }}\r\n        </div>\r\n        <button \r\n          class=\"btn btn-outline-primary\" \r\n          @click=\"navigateDate(1)\"\r\n          :disabled=\"isNextDayDisabled\"\r\n        >\r\n          <i class=\"fas fa-chevron-right\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Table -->\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <!-- Table Controls -->\r\n        <div class=\"table-controls mb-4\" style=\"z-index: 10000 !important; position: relative;\">\r\n          <div class=\"d-flex gap-3 align-items-center\">\r\n            <div class=\"d-flex gap-3\" style=\"z-index: 10000 !important; position: relative;\">\r\n              <!-- Sort Dropdown -->\r\n              <div class=\"dropdown\" style=\"z-index: 10000 !important; position: relative;\">\r\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <i class=\"fas fa-sort me-2\"></i> Sort by\r\n                </button>\r\n                <ul class=\"dropdown-menu control-menu\" style=\"z-index: 10000 !important; position: absolute !important;\">\r\n                  <li>\r\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('studentNumber')\">\r\n                      <i class=\"fas fa-sort-numeric-down me-2\"></i> Student Number\r\n                      <i :class=\"getSortIcon('studentNumber')\" class=\"ms-auto\"></i>\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('lastName')\">\r\n                      <i class=\"fas fa-sort-alpha-down me-2\"></i> Name\r\n                      <i :class=\"getSortIcon('lastName')\" class=\"ms-auto\"></i>\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <!-- Filter Dropdown -->\r\n              <div class=\"dropdown\" style=\"z-index: 10000 !important; position: relative;\">\r\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <i class=\"fas fa-filter me-2\"></i> Filter\r\n                  <span v-if=\"selectedYear || selectedSection || selectedSubject\" class=\"filter-badge\">!</span>\r\n                </button>\r\n                <div class=\"dropdown-menu control-menu p-3\" style=\"width: 280px; z-index: 10000 !important; position: absolute !important;\">\r\n                  <h6 class=\"dropdown-header mb-2\">Filter Options</h6>\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Year Level</label>\r\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedYear\" @change=\"applyFilters\">\r\n                      <option value=\"\">Select Year</option>\r\n                      <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Section</label>\r\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSection\" :disabled=\"!selectedYear\" @change=\"applyFilters\">\r\n                      <option value=\"\">Select Section</option>\r\n                      <option v-for=\"section in filteredSections\" :key=\"section\" :value=\"section\">{{ section }}</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Subject</label>\r\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSubject\" :disabled=\"!selectedSection\" @change=\"applyFilters\">\r\n                      <option value=\"\">Select Subject</option>\r\n                      <option v-for=\"subject in teacherSubjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"d-flex justify-content-end gap-2 mt-3\">\r\n                    <button class=\"btn btn-sm btn-light\" @click=\"clearFilters\">\r\n                      Clear All\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-primary\" @click=\"applyFilters\">\r\n                      Apply Filters\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Search Control -->\r\n            <div class=\"search-control\" style=\"flex: 1; max-width: 400px; z-index: 10000 !important; position: relative;\">\r\n              <div class=\"input-group\">\r\n                <span class=\"input-group-text border-end-0\">\r\n                  <i class=\"fas fa-search\"></i>\r\n                </span>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control border-start-0\" \r\n                  v-model=\"searchQuery\"\r\n                  placeholder=\"Search students...\"\r\n                  @input=\"handleSearch\"\r\n                >\r\n                <button \r\n                  v-if=\"searchQuery\"\r\n                  class=\"btn btn-outline-secondary border-start-0\" \r\n                  type=\"button\"\r\n                  @click=\"clearSearch\"\r\n                >\r\n                  <i class=\"fas fa-times\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Table -->\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n            <th>Student Number</th>\r\n                <th>Last Name</th>\r\n                <th>First Name</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr \r\n                v-for=\"student in paginatedStudents\" \r\n                  :key=\"student.studentNumber\" \r\n                  class=\"clickable-row\" \r\n                  @click=\"viewStudentDetails(student)\"\r\n                  :class=\"{\r\n                    'status-row-present': student.currentStatus === 'present',\r\n                    'status-row-absent': student.currentStatus === 'absent',\r\n                    'status-row-late': student.currentStatus === 'late'\r\n                  }\"\r\n            >\r\n              <td>{{ student.studentNumber }}</td>\r\n                  <td>{{ student.lastName }}</td>\r\n                  <td>{{ student.firstName }}</td>\r\n                  <td>\r\n                    <div class=\"attendance-status-container\">\r\n                      <select \r\n                        class=\"form-select form-select-sm attendance-select\"\r\n                        :class=\"{\r\n                          'select-present': student.currentStatus === 'present',\r\n                          'select-absent': student.currentStatus === 'absent',\r\n                          'select-late': student.currentStatus === 'late',\r\n                          'select-none': student.currentStatus === 'none'\r\n                        }\"\r\n                        v-model=\"student.currentStatus\"\r\n                        @change=\"markAttendance(student, $event.target.value)\"\r\n                        @click.stop\r\n                      >\r\n                        <option value=\"none\">Not marked</option>\r\n                        <option :selected=\"student.currentStatus === 'present'\" value=\"present\">Present</option>\r\n                        <option :selected=\"student.currentStatus === 'absent'\" value=\"absent\">Absent</option>\r\n                        <option :selected=\"student.currentStatus === 'late'\" value=\"late\">Late</option>\r\n                      </select>\r\n                      <div \r\n                        class=\"status-indicator\" \r\n                        :class=\"{\r\n                          'indicator-present': student.currentStatus === 'present',\r\n                          'indicator-absent': student.currentStatus === 'absent',\r\n                          'indicator-late': student.currentStatus === 'late',\r\n                          'indicator-none': student.currentStatus === 'none'\r\n                        }\"\r\n                      >\r\n                        <i \r\n                          class=\"fas\" \r\n                          :class=\"{\r\n                            'fa-check-circle': student.currentStatus === 'present',\r\n                            'fa-times-circle': student.currentStatus === 'absent',\r\n                            'fa-exclamation-circle': student.currentStatus === 'late',\r\n                            'fa-question-circle': student.currentStatus === 'none'\r\n                          }\"\r\n                        ></i>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n              </tr>\r\n              <tr v-if=\"paginatedStudents.length === 0\">\r\n                <td colspan=\"4\" class=\"text-center py-4\">\r\n                  <div class=\"empty-state-message\">\r\n                    <i class=\"fas fa-users text-muted mb-2\"></i>\r\n                    <p class=\"mb-0\">No students found</p>\r\n                    <p class=\"text-muted small\" v-if=\"selectedYear || selectedSection || selectedSubject\">\r\n                      Try adjusting your filters\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n        \r\n        <!-- Pagination Controls -->\r\n        <div class=\"pagination-controls mt-3 d-flex justify-content-between align-items-center\">\r\n          <div class=\"pagination-info\">\r\n            Showing {{ paginationInfo.start }} to {{ paginationInfo.end }} of {{ sortedStudents.length }} entries\r\n          </div>\r\n          <div class=\"pagination-buttons\">\r\n            <button \r\n              class=\"btn btn-outline-primary me-2\" \r\n              @click=\"previousPage\" \r\n              :disabled=\"currentPage === 1\"\r\n            >\r\n              <i class=\"fas fa-chevron-left me-1\"></i> Previous\r\n            </button>\r\n            <button \r\n              class=\"btn btn-outline-primary\" \r\n              @click=\"nextPage\" \r\n              :disabled=\"currentPage >= totalPages\"\r\n            >\r\n              Next <i class=\"fas fa-chevron-right ms-1\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Calendar Popup -->\r\n    <div class=\"calendar-popup\" v-if=\"showCalendarPopup\" @click.self=\"showCalendarPopup = false\">\r\n      <div class=\"calendar-container\">\r\n        <div class=\"calendar-header\">\r\n          <h6 class=\"mb-0\">Select Date</h6>\r\n          <button type=\"button\" class=\"btn-close\" @click=\"showCalendarPopup = false\"></button>\r\n        </div>\r\n        <div class=\"calendar-body\">\r\n          <div class=\"input-group\">\r\n            <span class=\"input-group-text\"><i class=\"fas fa-calendar-day\"></i></span>\r\n            <input \r\n              type=\"date\" \r\n              class=\"form-control\" \r\n              :value=\"formatDateForInput(currentDate)\"\r\n              :max=\"formatDateForInput(new Date())\"\r\n              @change=\"setCurrentDate($event.target.value); showCalendarPopup = false\"\r\n            >\r\n          </div>\r\n          \r\n          <!-- Quick Date Buttons -->\r\n          <div class=\"quick-date-buttons mt-3\">\r\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-7); showCalendarPopup = false\">\r\n              <i class=\"fas fa-angle-double-left me-1\"></i> Last Week\r\n            </button>\r\n            <button class=\"btn btn-sm btn-outline-secondary\" @click=\"navigateDate(-1); showCalendarPopup = false\">\r\n              <i class=\"fas fa-angle-left me-1\"></i> Yesterday\r\n            </button>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"setCurrentDate(formatDateForInput(new Date())); showCalendarPopup = false\">\r\n              Today\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Student Details Modal -->\r\n    <StudentDetailsModal\r\n      :show=\"!!selectedStudent\"\r\n      :student=\"selectedStudent || {}\"\r\n      :year-level=\"selectedYear\"\r\n      :section=\"selectedSection\"\r\n      :subject=\"selectedSubject\"\r\n      title=\"Student Attendance Details\"\r\n      chart-title=\"Attendance Overview\"\r\n      history-title=\"Attendance History\"\r\n      :chart-id=\"`attendanceChart-${selectedStudent?.studentId}`\"\r\n      :is-class-record=\"false\"\r\n      @update:show=\"(value) => !value && (selectedStudent = null)\"\r\n      @close=\"selectedStudent = null\"\r\n    >\r\n      <template #history-table>\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-if=\"!selectedStudent?.attendanceHistory || selectedStudent.attendanceHistory.length === 0\">\r\n              <td colspan=\"2\" class=\"text-center py-3 text-muted\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>No attendance records found.\r\n              </td>\r\n            </tr>\r\n            <tr v-for=\"record in selectedStudent?.attendanceHistory\" :key=\"record.date\">\r\n              <td>{{ formatDate(record.date) }}</td>\r\n              <td>\r\n                <span \r\n                  class=\"badge\"\r\n                  :class=\"{\r\n                    'bg-success': record.status === 'present',\r\n                    'bg-danger': record.status === 'absent',\r\n                    'bg-warning': record.status === 'late'\r\n                  }\"\r\n                >\r\n                  {{ record.status.charAt(0).toUpperCase() + record.status.slice(1) }}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </template>\r\n    </StudentDetailsModal>\r\n    \r\n    <!-- Export Records Modal -->\r\n    <div v-if=\"showExportModal\" class=\"modal-overlay\">\r\n      <div class=\"modal-wrapper\">\r\n        <div class=\"modal-dialog\">\r\n          <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n              <h5 class=\"modal-title\">Export Attendance Records</h5>\r\n              <button type=\"button\" class=\"btn-close\" @click=\"showExportModal = false\"></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n              <form @submit.prevent=\"exportAttendanceRecords\">\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Date Range</label>\r\n                  <div class=\"d-flex gap-2\">\r\n                    <div class=\"flex-grow-1\">\r\n                      <label class=\"form-label small\">Start Date</label>\r\n                      <input \r\n                        type=\"date\" \r\n                        class=\"form-control\" \r\n                        v-model=\"exportDateRange.start\" \r\n                        required\r\n                      >\r\n                    </div>\r\n                    <div class=\"flex-grow-1\">\r\n                      <label class=\"form-label small\">End Date</label>\r\n                      <input \r\n                        type=\"date\" \r\n                        class=\"form-control\" \r\n                        v-model=\"exportDateRange.end\" \r\n                        :min=\"exportDateRange.start\"\r\n                        required\r\n                      >\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Export Format</label>\r\n                  <select class=\"form-select\" v-model=\"exportFormat\" required>\r\n                    <option value=\"csv\">CSV</option>\r\n                    <option value=\"pdf\">PDF</option>\r\n                    <option value=\"excel\">Excel</option>\r\n                  </select>\r\n                </div>\r\n                \r\n                <div class=\"text-end\">\r\n                  <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showExportModal = false\">\r\n                    Cancel\r\n                  </button>\r\n                  <button \r\n                    type=\"submit\" \r\n                    class=\"btn btn-success\"\r\n                    :disabled=\"isExporting\"\r\n                  >\r\n                    <span v-if=\"isExporting\">\r\n                      <i class=\"fas fa-spinner fa-spin me-2\"></i>Exporting...\r\n                    </span>\r\n                    <span v-else>\r\n                      <i class=\"fas fa-file-export me-2\"></i>Export\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-backdrop\" @click=\"showExportModal = false\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport axios from 'axios'\r\nimport moment from 'moment-timezone'\r\nimport Chart from 'chart.js/auto'\r\nimport StudentDetailsModal from '@/components/modals/StudentDetailsModal.vue'\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport default {\r\n  name: 'Attendance',\r\n  components: {\r\n    StudentDetailsModal\r\n  },\r\n  setup() {\r\n    const store = useStore()\r\n    const route = useRoute()\r\n    const router = useRouter()\r\n    const students = ref([])\r\n    const searchQuery = ref('')\r\n    const sortField = ref('lastName')\r\n    const sortOrder = ref('asc')\r\n    const selectedStudent = ref(null)\r\n    const currentDate = ref(moment().tz('Asia/Manila').startOf('day').toDate())\r\n    const slideDirection = ref('')\r\n    let attendanceChart = null\r\n    let dateUpdateInterval = null\r\n    \r\n    // Date filter for attendance history\r\n    const historyStartDate = ref(moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD'))\r\n    const historyEndDate = ref(moment().tz('Asia/Manila').format('YYYY-MM-DD'))\r\n    const showHistoryDatePicker = ref(false)\r\n    const showCalendarPopup = ref(false)\r\n    \r\n    // Add export-related refs\r\n    const showExportModal = ref(false)\r\n    const exportDateRange = ref({\r\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\r\n      end: moment().format('YYYY-MM-DD')\r\n    })\r\n    const exportFormat = ref('csv')\r\n    const isExporting = ref(false)\r\n\r\n    // Add refs for query parameters\r\n    const selectedYear = ref(route.query.year || localStorage.getItem('selectedYear') || '')\r\n    const selectedSection = ref(route.query.section || localStorage.getItem('selectedSection') || '')\r\n    const selectedSubject = ref(route.query.subject || localStorage.getItem('selectedSubject') || '')\r\n    \r\n    // Add refs for available options\r\n    const availableYears = ref([])\r\n    const availableSections = ref([])\r\n    const sectionsByYear = ref({})\r\n    const teacherSubjects = ref([])\r\n    \r\n    // Computed property for filtered sections based on selected year\r\n    const filteredSections = computed(() => {\r\n      if (!selectedYear.value) return []\r\n      return sectionsByYear.value[selectedYear.value] || []\r\n    })\r\n    \r\n    // Function to fetch available years and sections\r\n    const fetchAvailableYearsAndSections = async () => {\r\n      try {\r\n        const token = store.state.auth.token\r\n        const teacherId = store.state.auth.user?._id\r\n        \r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available')\r\n          return\r\n        }\r\n\r\n        console.log('Fetching available years and sections for teacher:', teacherId)\r\n        \r\n        // Use the teacher-specific endpoint to get only years and sections for this teacher\r\n        const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        }).catch(error => {\r\n          console.error('Error fetching teacher-specific years and sections:', error)\r\n          \r\n          // Fall back to the general endpoint if teacher-specific one fails\r\n          return api.get('/students/available-years-sections', {\r\n            headers: { 'Authorization': `Bearer ${token}` }\r\n          })\r\n        })\r\n\r\n        console.log('API Response for years and sections:', response.data)\r\n\r\n        if (response.data) {\r\n          // Set available years and sections from the response\r\n          availableYears.value = response.data.years || []\r\n          availableSections.value = response.data.sections || []\r\n          \r\n          // Use sectionsByYear from the API response\r\n          if (response.data.sectionsByYear) {\r\n            sectionsByYear.value = response.data.sectionsByYear\r\n          } else {\r\n            sectionsByYear.value = {}\r\n            \r\n            // If we have years and sections but no sectionsByYear mapping,\r\n            // create a simple mapping where each year has all sections\r\n            if (availableYears.value.length > 0 && availableSections.value.length > 0) {\r\n              availableYears.value.forEach(year => {\r\n                sectionsByYear.value[year] = [...availableSections.value]\r\n              })\r\n            }\r\n          }\r\n          \r\n          console.log('Available years:', availableYears.value)\r\n          console.log('Available sections:', availableSections.value)\r\n          console.log('Sections by year mapping:', sectionsByYear.value)\r\n          \r\n          // If no years are available, don't add default values\r\n          // This ensures teachers only see years they've added\r\n          if (availableYears.value.length === 0) {\r\n            console.log('No years found for this teacher')\r\n          }\r\n          \r\n          // If no sections are available, don't add default values\r\n          if (availableSections.value.length === 0) {\r\n            console.log('No sections found for this teacher')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch available years and sections:', error)\r\n        // Don't set default values - teacher should only see what they've added\r\n        availableYears.value = []\r\n        availableSections.value = []\r\n        sectionsByYear.value = {}\r\n      }\r\n    }\r\n    \r\n    // Function to fetch teacher subjects\r\n    const fetchTeacherSubjects = async () => {\r\n      try {\r\n        const token = store.state.auth.token\r\n        const teacherId = store.state.auth.user?._id\r\n\r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available')\r\n          return\r\n        }\r\n\r\n        // Try to fetch subjects from the teacher class records\r\n        try {\r\n          const response = await api.get('/teacher-class-records/available-years-sections', {\r\n          params: { teacherId },\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        })\r\n\r\n          if (response.data && response.data.subjects && response.data.subjects.length > 0) {\r\n            teacherSubjects.value = response.data.subjects\r\n            console.log('Subjects loaded from teacher class records:', teacherSubjects.value)\r\n          } else {\r\n            // If no subjects found in class records, try the user endpoint\r\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\r\n              headers: { 'Authorization': `Bearer ${token}` }\r\n            })\r\n            \r\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\r\n              teacherSubjects.value = userResponse.data.subjects\r\n              console.log('Subjects loaded from user profile:', teacherSubjects.value)\r\n            } else {\r\n              // If still no subjects, use default subjects\r\n              console.log('No subjects found, using default subjects')\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to fetch teacher subjects from class records:', error)\r\n          \r\n          // Try the user endpoint as fallback\r\n          try {\r\n            const userResponse = await api.get(`/users/${teacherId}/subjects`, {\r\n              headers: { 'Authorization': `Bearer ${token}` }\r\n            })\r\n            \r\n            if (userResponse.data && userResponse.data.subjects && userResponse.data.subjects.length > 0) {\r\n              teacherSubjects.value = userResponse.data.subjects\r\n              console.log('Subjects loaded from user profile (fallback):', teacherSubjects.value)\r\n            } else {\r\n              teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n              console.log('No subjects found in user profile, using default subjects')\r\n            }\r\n          } catch (userError) {\r\n            console.error('Failed to fetch teacher subjects from user profile:', userError)\r\n            teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n            console.log('Using default subjects due to API errors')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchTeacherSubjects:', error)\r\n        teacherSubjects.value = ['Math', 'Science', 'English', 'History']\r\n      }\r\n    }\r\n    \r\n    // Function to apply filters\r\n    const applyFilters = async () => {\r\n      console.log('Applying filters:', {\r\n        year: selectedYear.value,\r\n        section: selectedSection.value,\r\n        subject: selectedSubject.value\r\n      })\r\n      \r\n      // Save selected values to localStorage\r\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\r\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\r\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\r\n      \r\n      // Update URL query parameters\r\n      router.replace({\r\n        query: {\r\n          ...route.query,\r\n          year: selectedYear.value || undefined,\r\n          section: selectedSection.value || undefined,\r\n          subject: selectedSubject.value || undefined\r\n        }\r\n      })\r\n      \r\n      // Always fetch student records when filters are applied\r\n      await fetchStudentRecords()\r\n    }\r\n    \r\n    // Function to clear filters\r\n    const clearFilters = () => {\r\n      selectedYear.value = ''\r\n      selectedSection.value = ''\r\n      selectedSubject.value = ''\r\n      localStorage.removeItem('selectedYear')\r\n      localStorage.removeItem('selectedSection')\r\n      localStorage.removeItem('selectedSubject')\r\n      \r\n      // Update URL query parameters\r\n      router.replace({\r\n        query: {}\r\n      })\r\n    }\r\n\r\n    // Function to fetch students and their attendance\r\n    const fetchStudentRecords = async () => {\r\n      try {\r\n        const token = store.state.auth.token;\r\n        const teacherId = store.state.auth.user?._id;\r\n\r\n        if (!teacherId) {\r\n          console.error('Teacher ID not available');\r\n          return;\r\n        }\r\n\r\n        // Create a params object with the teacher ID\r\n        const params = { teacherId };\r\n        \r\n        // Add any selected filters to the params\r\n        if (selectedYear.value) params.year = selectedYear.value;\r\n        if (selectedSection.value) params.section = selectedSection.value;\r\n        if (selectedSubject.value) params.subject = selectedSubject.value;\r\n        \r\n        console.log('Fetching student records with filters:', params);\r\n        \r\n        try {\r\n          const response = await api.get('/teacher-class-records/students-for-attendance', {\r\n            params,\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n\r\n          console.log('Students API response:', response.data);\r\n\r\n          if (response.data) {\r\n            let studentList = [];\r\n            \r\n            if (Array.isArray(response.data)) {\r\n              studentList = response.data;\r\n            } else if (response.data.students && Array.isArray(response.data.students)) {\r\n              studentList = response.data.students;\r\n            }\r\n            \r\n            // Log each student's data to verify studentId is present\r\n            studentList.forEach(student => {\r\n              console.log('Student data:', {\r\n                studentId: student._id || student.studentId,\r\n                studentNumber: student.studentNumber,\r\n                name: `${student.firstName} ${student.lastName}`\r\n              });\r\n            });\r\n            \r\n            // Initialize students with 'none' status and ensure studentId is set\r\n            students.value = studentList.map(student => ({\r\n              ...student,\r\n              studentId: student._id || student.studentId, // Use _id if studentId is not present\r\n              currentStatus: 'none'\r\n            }));\r\n            \r\n            console.log(`Loaded ${students.value.length} students with IDs`);\r\n            \r\n            // Immediately fetch attendance after loading students\r\n            if (students.value.length > 0) {\r\n              await fetchAttendance();\r\n          }\r\n        }\r\n      } catch (error) {\r\n          console.error('Failed to fetch student records:', error);\r\n        students.value = [];\r\n      }\r\n      } catch (error) {\r\n        console.error('Error in fetchStudentRecords:', error);\r\n        students.value = [];\r\n      }\r\n    };\r\n\r\n    // Function to fetch attendance for current date\r\n    const fetchAttendance = async () => {\r\n      try {\r\n        // If there are no students, we can't fetch attendance\r\n        if (!students.value.length) {\r\n          console.log('fetchAttendance: No students to fetch attendance for');\r\n          return;\r\n        }\r\n\r\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\r\n        console.log('fetchAttendance: Fetching attendance data for date:', date);\r\n\r\n        // Create params object with the date and required filters\r\n        const params = {\r\n          teacherId: store.state.auth.user?._id,\r\n          date: date\r\n        };\r\n        \r\n        // Add any selected filters to the params\r\n        if (selectedYear.value) params.year = selectedYear.value;\r\n        if (selectedSection.value) params.section = selectedSection.value;\r\n        if (selectedSubject.value) params.subject = selectedSubject.value;\r\n        \r\n        console.log('Fetching attendance with params:', params);\r\n        \r\n        const response = await api.get(`/attendance/date/${date}`, {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        });\r\n\r\n        console.log('Attendance data received:', response.data);\r\n\r\n        // Create a map to store attendance by student ID\r\n        const studentMap = new Map();\r\n\r\n        if (response.data && Array.isArray(response.data)) {\r\n          console.log(`Processing ${response.data.length} attendance records`);\r\n          \r\n          // Group records by student ID to find the most recent one for each student\r\n          const recordsByStudent = {};\r\n          \r\n          response.data.forEach(record => {\r\n            if (record.studentId) {\r\n              // If we don't have this student yet, or this record is newer\r\n              if (!recordsByStudent[record.studentId] || \r\n                  (record.createdAt && \r\n                   (!recordsByStudent[record.studentId].createdAt || \r\n                    new Date(record.createdAt) > new Date(recordsByStudent[record.studentId].createdAt)))) {\r\n                recordsByStudent[record.studentId] = record;\r\n                console.log(`Found newer record for student ${record.studentId}: ${record.status} (created at ${record.createdAt})`);\r\n              }\r\n            } else {\r\n              console.log('Record missing studentId:', record);\r\n            }\r\n          });\r\n          \r\n          // Now use the most recent record for each student\r\n          Object.values(recordsByStudent).forEach(record => {\r\n            studentMap.set(String(record.studentId), record.status || 'none');\r\n            console.log(`Using most recent attendance for student ID ${record.studentId}: ${record.status || 'none'} (created at ${record.createdAt})`);\r\n          });\r\n        }\r\n\r\n        // Assign Attendance data to specific student\r\n        // students.value = response.data.map((att) => {\r\n          \r\n        // })\r\n        \r\n\r\n        // Update students with attendance data\r\n        if (students.value && students.value.length > 0) {\r\n          // Merge attendance data into students array\r\n          // This will fix the updating of attendance data\r\n          students.value = students.value\r\n            .map(student => ({\r\n              ...student,\r\n              currentStatus: response.data.find(att => att.studentId === student.studentId)?.status\r\n            }));\r\n          // students.value = students.value.map(student => {\r\n          //   const studentIdStr = String(student.studentId);\r\n          //   const status = studentMap.get(studentIdStr);\r\n            \r\n          //   // Store the attendance status for this date\r\n          //   if (!student.attendanceByDate) {\r\n          //     student.attendanceByDate = {};\r\n          //   }\r\n            \r\n          //   if (status) {\r\n          //     student.attendanceByDate[date] = status;\r\n          //   }\r\n            \r\n          //   // Use the stored status for this date if available, otherwise use the fetched status\r\n          //   const currentStatus = status || student.currentStatus || 'none';\r\n            \r\n          //   console.log(`Setting status for student ${studentIdStr}: ${currentStatus}`);\r\n            \r\n          //   return {\r\n          //     ...student,\r\n          //     currentStatus: currentStatus\r\n          //   };\r\n          // });\r\n          \r\n          // Force a UI update\r\n          await nextTick();\r\n          students.value = [...students.value];\r\n          console.log('Updated attendance status for all students');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchAttendance:', error);\r\n      }\r\n    };\r\n\r\n    // Create attendance chart\r\n    const createPerformanceChart = () => {\r\n      if (!selectedStudent.value) return;\r\n      \r\n      // Create a unique chart ID for each student\r\n      const chartId = `attendanceChart-${selectedStudent.value.studentId}`;\r\n      const chartElement = document.getElementById('attendanceChart');\r\n      \r\n      // Set a unique ID to the chart element\r\n      if (chartElement) {\r\n        chartElement.id = chartId;\r\n      }\r\n      \r\n      const ctx = document.getElementById(chartId)?.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      // Destroy existing chart if it exists\r\n      if (attendanceChart) {\r\n        attendanceChart.destroy();\r\n        attendanceChart = null;\r\n      }\r\n\r\n      // Get the chart container\r\n      const chartContainer = document.querySelector('.chart-container');\r\n      if (!chartContainer) return;\r\n\r\n      // Check if we have valid attendance statistics and records\r\n      const stats = selectedStudent.value.attendanceStats;\r\n      const hasAttendanceRecords = selectedStudent.value.attendanceHistory && \r\n                                  selectedStudent.value.attendanceHistory.length > 0;\r\n      \r\n      if (!hasAttendanceRecords || \r\n          !stats || \r\n          (stats.presentPercentage === 0 && stats.absentPercentage === 0 && stats.latePercentage === 0)) {\r\n        // If no attendance data, display a message instead of an empty chart\r\n        chartContainer.innerHTML = '';\r\n        const noDataMessage = document.createElement('div');\r\n        noDataMessage.className = 'text-center py-5 text-muted';\r\n        noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No attendance data available for this student in the selected date range.';\r\n        chartContainer.appendChild(noDataMessage);\r\n        return;\r\n      }\r\n\r\n      // Clear the container and add canvas back\r\n      chartContainer.innerHTML = '';\r\n      const canvas = document.createElement('canvas');\r\n      canvas.id = chartId;\r\n      chartContainer.appendChild(canvas);\r\n\r\n      // Get the context from the new canvas\r\n      const newCtx = document.getElementById(chartId)?.getContext('2d');\r\n      if (!newCtx) return;\r\n\r\n      // Enhanced colors for the chart\r\n      const chartColors = {\r\n        present: {\r\n          backgroundColor: '#4CAF50',\r\n          hoverBackgroundColor: '#388E3C',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        absent: {\r\n          backgroundColor: '#F44336',\r\n          hoverBackgroundColor: '#D32F2F',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        late: {\r\n          backgroundColor: '#FFC107',\r\n          hoverBackgroundColor: '#FFA000',\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        }\r\n      };\r\n\r\n      // Create the chart\r\n      attendanceChart = new Chart(newCtx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['Present', 'Absent', 'Late'],\r\n          datasets: [{\r\n            data: [stats.presentPercentage, stats.absentPercentage, stats.latePercentage],\r\n            backgroundColor: [\r\n              chartColors.present.backgroundColor,\r\n              chartColors.absent.backgroundColor,\r\n              chartColors.late.backgroundColor\r\n            ],\r\n            hoverBackgroundColor: [\r\n              chartColors.present.hoverBackgroundColor,\r\n              chartColors.absent.hoverBackgroundColor,\r\n              chartColors.late.hoverBackgroundColor\r\n            ],\r\n            borderColor: [\r\n              chartColors.present.borderColor,\r\n              chartColors.absent.borderColor,\r\n              chartColors.late.borderColor\r\n            ],\r\n            borderWidth: 2,\r\n            borderRadius: 5,\r\n            spacing: 5,\r\n            hoverOffset: 10\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          cutout: '70%',\r\n          animation: {\r\n            animateScale: true,\r\n            animateRotate: true,\r\n            duration: 1000,\r\n            easing: 'easeOutQuart'\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom',\r\n              labels: {\r\n                padding: 20,\r\n                boxWidth: 15,\r\n                boxHeight: 15,\r\n                font: {\r\n                  size: 14,\r\n                  weight: 'bold'\r\n                },\r\n                generateLabels: (chart) => {\r\n                  const data = chart.data;\r\n                  if (data.labels.length && data.datasets.length) {\r\n                    return data.labels.map((label, i) => {\r\n                      const meta = chart.getDatasetMeta(0);\r\n                      const style = meta.controller.getStyle(i);\r\n                      \r\n                      return {\r\n                        text: `${label}: ${data.datasets[0].data[i].toFixed(1)}%`,\r\n                        fillStyle: style.backgroundColor,\r\n                        strokeStyle: style.borderColor,\r\n                        lineWidth: style.borderWidth,\r\n                        hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\r\n                        index: i\r\n                      };\r\n                    });\r\n                  }\r\n                  return [];\r\n                }\r\n              }\r\n            },\r\n            tooltip: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n              titleFont: {\r\n                size: 16,\r\n                weight: 'bold'\r\n              },\r\n              bodyFont: {\r\n                size: 14\r\n              },\r\n              padding: 15,\r\n              cornerRadius: 8,\r\n              displayColors: true,\r\n              callbacks: {\r\n                label: function(context) {\r\n                  const label = context.label || '';\r\n                  const value = context.raw || 0;\r\n                  return `${label}: ${value.toFixed(1)}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // View student details\r\n    const viewStudentDetails = async (student) => {\r\n      try {\r\n        // Reset any existing chart before showing a new student\r\n        if (attendanceChart) {\r\n          attendanceChart.destroy();\r\n          attendanceChart = null;\r\n        }\r\n        \r\n        selectedStudent.value = {\r\n          ...student,\r\n          attendanceHistory: [],\r\n          attendanceStats: { presentPercentage: 0, absentPercentage: 0, latePercentage: 0 }\r\n        }\r\n        \r\n        // Fetch attendance history with the current date filters\r\n        await fetchStudentAttendanceHistory(selectedStudent.value);\r\n      } catch (error) {\r\n        console.error('Error fetching student details:', error)\r\n        alert('Failed to load student details. Please try again.')\r\n      }\r\n    }\r\n    \r\n    // Fetch student attendance history with date filters\r\n    const fetchStudentAttendanceHistory = async (student) => {\r\n      if (!student) return;\r\n      \r\n      try {\r\n        console.log(`Fetching attendance history for student ${student.studentNumber} with date range:`, {\r\n          startDate: historyStartDate.value,\r\n          endDate: historyEndDate.value\r\n        });\r\n        \r\n        const response = await api.get(\r\n          `/attendance/${student.studentId}/history`,\r\n          {\r\n            params: {\r\n              subject: selectedSubject.value,\r\n              startDate: historyStartDate.value,\r\n              endDate: historyEndDate.value\r\n            },\r\n            headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n          }\r\n        )\r\n        \r\n        if (response.data) {\r\n          // Make sure we're updating the correct student\r\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\r\n            // Only include records that have a valid status (not null, undefined, or empty string)\r\n            const validRecords = Array.isArray(response.data.records) \r\n              ? response.data.records.filter(record => record && record.status && record.status !== '')\r\n              : [];\r\n            \r\n            selectedStudent.value.attendanceHistory = validRecords;\r\n            \r\n            // Only calculate statistics based on valid records\r\n            if (validRecords.length > 0) {\r\n              // Count occurrences of each status\r\n              const statusCounts = {\r\n                present: 0,\r\n                absent: 0,\r\n                late: 0\r\n              };\r\n              \r\n              validRecords.forEach(record => {\r\n                if (record.status in statusCounts) {\r\n                  statusCounts[record.status]++;\r\n                }\r\n              });\r\n              \r\n              // Calculate percentages\r\n              const total = validRecords.length;\r\n              const presentPercentage = total > 0 ? (statusCounts.present / total) * 100 : 0;\r\n              const absentPercentage = total > 0 ? (statusCounts.absent / total) * 100 : 0;\r\n              const latePercentage = total > 0 ? (statusCounts.late / total) * 100 : 0;\r\n              \r\n              selectedStudent.value.attendanceStats = {\r\n                presentPercentage,\r\n                absentPercentage,\r\n                latePercentage\r\n              };\r\n      } else {\r\n              // If no valid records, set all percentages to 0\r\n              selectedStudent.value.attendanceStats = {\r\n                presentPercentage: 0,\r\n                absentPercentage: 0,\r\n                latePercentage: 0\r\n              };\r\n            }\r\n            \r\n            console.log(`Loaded ${selectedStudent.value.attendanceHistory.length} attendance records for student ${student.studentNumber}`);\r\n            \r\n            // Create attendance chart on next tick to ensure DOM is ready\r\n            nextTick(() => {\r\n              // Reset any existing chart before creating a new one\r\n              if (attendanceChart) {\r\n                attendanceChart.destroy();\r\n                attendanceChart = null;\r\n              }\r\n              createPerformanceChart();\r\n            });\r\n          } else {\r\n            console.log('Selected student changed, not updating attendance history');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching student attendance history:', error);\r\n        selectedStudent.value.attendanceHistory = [];\r\n        selectedStudent.value.attendanceStats = { \r\n          presentPercentage: 0, \r\n          absentPercentage: 0, \r\n          latePercentage: 0 \r\n        };\r\n        \r\n        // Create chart with empty data\r\n        nextTick(() => {\r\n          if (attendanceChart) {\r\n            attendanceChart.destroy();\r\n            attendanceChart = null;\r\n          }\r\n          createPerformanceChart();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Sort functions\r\n    const sortBy = (field) => {\r\n      if (sortField.value === field) {\r\n        sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc'\r\n      } else {\r\n        sortField.value = field\r\n        sortOrder.value = 'asc'\r\n      }\r\n    }\r\n\r\n    const getSortIcon = (field) => {\r\n      if (sortField.value !== field) return 'fas fa-sort'\r\n      return sortOrder.value === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down'\r\n    }\r\n\r\n    // Sort students\r\n    const sortedStudents = computed(() => {\r\n      if (!Array.isArray(students.value)) {\r\n        return []\r\n      }\r\n\r\n      let sortedList = [...students.value]\r\n      if (sortField.value) {\r\n        sortedList.sort((a, b) => {\r\n          let aVal = a[sortField.value]\r\n          let bVal = b[sortField.value]\r\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase()\r\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase()\r\n          if (aVal < bVal) return sortOrder.value === 'asc' ? -1 : 1\r\n          if (aVal > bVal) return sortOrder.value === 'asc' ? 1 : -1\r\n          return 0\r\n        })\r\n      }\r\n\r\n      if (!searchQuery.value) {\r\n      return sortedList\r\n      }\r\n      \r\n      const searchLower = searchQuery.value.toLowerCase()\r\n      return sortedList.filter(student => {\r\n        return (\r\n          student.studentNumber.toLowerCase().includes(searchLower) ||\r\n          student.firstName.toLowerCase().includes(searchLower) ||\r\n          student.lastName.toLowerCase().includes(searchLower)\r\n        )\r\n      })\r\n    })\r\n\r\n    // Update attendance status\r\n    const markAttendance = async (student, status) => {\r\n      try {\r\n        if (!status || !student) {\r\n          console.log('Invalid status or student:', { status, student });\r\n          return;\r\n        }\r\n        \r\n        const date = moment(currentDate.value).tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\r\n        console.log('Marking attendance:', {\r\n          studentId: student.studentId,\r\n          studentNumber: student.studentNumber,\r\n          status,\r\n          date\r\n        });\r\n\r\n        const attendanceData = {\r\n          studentId: student.studentId,\r\n          studentNumber: student.studentNumber,\r\n          teacherId: store.state.auth.user._id,\r\n          date: date,\r\n          subject: selectedSubject.value,\r\n          section: selectedSection.value,\r\n          year: selectedYear.value,\r\n          status: status,\r\n          createdAt: new Date().toISOString() // Ensure we have a current timestamp\r\n        };\r\n        \r\n        // Update UI immediately for better responsiveness\r\n        student.currentStatus = status;\r\n\r\n        const response = await api.post('/attendance', attendanceData, {\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        });\r\n\r\n        if (response.data) {\r\n          console.log('Attendance marked successfully:', response.data);\r\n          \r\n          // Store the attendance status in the student object for this date\r\n          if (!student.attendanceByDate) {\r\n            student.attendanceByDate = {};\r\n          }\r\n          student.attendanceByDate[date] = status;\r\n          \r\n          // If the student is currently selected in the details modal, update their history\r\n          if (selectedStudent.value && selectedStudent.value.studentId === student.studentId) {\r\n            await fetchStudentAttendanceHistory(selectedStudent.value);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error marking attendance:', error);\r\n        // Revert the status on error\r\n        student.currentStatus = 'none';\r\n        alert('Failed to save attendance. Please try again.');\r\n      }\r\n    };\r\n\r\n    // Handle search\r\n    const handleSearch = () => {\r\n      // The sortedStudents computed property will automatically filter based on searchQuery\r\n    }\r\n\r\n    // Watch for query parameter changes\r\n    watch([selectedYear, selectedSection, selectedSubject], async () => {\r\n      // Save selected values to localStorage\r\n      if (selectedYear.value) localStorage.setItem('selectedYear', selectedYear.value)\r\n      if (selectedSection.value) localStorage.setItem('selectedSection', selectedSection.value)\r\n      if (selectedSubject.value) localStorage.setItem('selectedSubject', selectedSubject.value)\r\n      \r\n      // Fetch student records and attendance when filters change\r\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n        await fetchStudentRecords()\r\n      }\r\n      \r\n      // Update navigation title\r\n      if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n        try {\r\n          if (router.currentRoute.value.matched[0].components.default.props) {\r\n            router.currentRoute.value.matched[0].components.default.props.selectedInfo = \r\n              `${selectedYear.value} - ${selectedSection.value} | ${selectedSubject.value}`\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating navigation title:', error)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Watch for date changes\r\n    watch(currentDate, async (newDate, oldDate) => {\r\n      console.log('Current date changed from', moment(oldDate).format('YYYY-MM-DD'), 'to', moment(newDate).format('YYYY-MM-DD'));\r\n      \r\n      // Only fetch if we have the required data\r\n      if (selectedYear.value && selectedSection.value && selectedSubject.value && students.value.length > 0) {\r\n        console.log('Fetching attendance data for new date');\r\n        await fetchAttendance();\r\n      } else {\r\n        console.log('Skipping attendance fetch due to missing data:', {\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          studentsCount: students.value?.length || 0\r\n        });\r\n      }\r\n    });\r\n\r\n    // Clean up chart when component unmounts\r\n    onUnmounted(() => {\r\n      if (attendanceChart) {\r\n        attendanceChart.destroy()\r\n        attendanceChart = null\r\n      }\r\n      \r\n      if (dateUpdateInterval) {\r\n        clearInterval(dateUpdateInterval)\r\n      }\r\n    })\r\n\r\n    // Clean up chart when student modal closes\r\n    watch(() => selectedStudent.value, (newValue, oldValue) => {\r\n      if (!newValue && attendanceChart) {\r\n        attendanceChart.destroy();\r\n        attendanceChart = null;\r\n        \r\n        // Reset the chart element ID back to the default\r\n        if (oldValue) {\r\n          const chartElement = document.getElementById(`attendanceChart-${oldValue.studentId}`);\r\n          if (chartElement) {\r\n            chartElement.id = 'attendanceChart';\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Format date for display\r\n    const formatDate = (date) => {\r\n      if (!date) return 'N/A'\r\n      return moment(date).tz('Asia/Manila').format('MMMM D, YYYY')\r\n    }\r\n    \r\n    // Format date for input fields (YYYY-MM-DD)\r\n    const formatDateForInput = (date) => {\r\n      if (!date) return ''\r\n      return moment(date).tz('Asia/Manila').format('YYYY-MM-DD')\r\n    }\r\n\r\n    // Add isNextDayDisabled computed property\r\n    const isNextDayDisabled = computed(() => {\r\n      const now = moment().tz('Asia/Manila').startOf('day')\r\n      const selected = moment(currentDate.value).tz('Asia/Manila').startOf('day')\r\n      return selected.isSameOrAfter(now, 'day')\r\n    })\r\n\r\n    // Add navigateDate function\r\n    const navigateDate = (direction) => {\r\n      const now = moment().tz('Asia/Manila').startOf('day')\r\n      const newDate = moment(currentDate.value).tz('Asia/Manila').startOf('day').add(direction, 'days')\r\n      \r\n      // Only allow navigation to past dates or current date\r\n      if (direction < 0 || (direction > 0 && !newDate.isAfter(now, 'day'))) {\r\n        slideDirection.value = direction > 0 ? 'slide-left' : 'slide-right'\r\n        currentDate.value = newDate.toDate()\r\n        \r\n        // Refresh attendance data\r\n        fetchAttendance(currentDate.value)\r\n        \r\n        setTimeout(() => {\r\n          slideDirection.value = ''\r\n        }, 300)\r\n      }\r\n    }\r\n\r\n    // Setup date auto-update to handle timezone correctly\r\n    const setupDateAutoUpdate = () => {\r\n      const checkAndUpdateDate = () => {\r\n        const now = moment().tz('Asia/Manila').startOf('day')\r\n        const current = moment(currentDate.value).tz('Asia/Manila').startOf('day')\r\n        \r\n        // If it's past midnight and we're showing yesterday's date\r\n        if (now.isAfter(current, 'day')) {\r\n          currentDate.value = now.toDate()\r\n          fetchAttendance()\r\n        }\r\n      }\r\n\r\n      // Clear existing interval if any\r\n      if (dateUpdateInterval) {\r\n        clearInterval(dateUpdateInterval)\r\n      }\r\n\r\n      // Check every minute\r\n      dateUpdateInterval = setInterval(checkAndUpdateDate, 60000)\r\n    }\r\n\r\n    // Add watchers for filter changes\r\n    watch(selectedYear, (newValue) => {\r\n      if (newValue) {\r\n        selectedSection.value = '';\r\n        selectedSubject.value = '';\r\n      }\r\n    });\r\n\r\n    watch(selectedSection, (newValue) => {\r\n      if (newValue) {\r\n        selectedSubject.value = '';\r\n      }\r\n    });\r\n\r\n    // Get attendance status for display\r\n    const getAttendanceStatus = (student) => {\r\n      // If student has a currentStatus property and it's not 'none', use it\r\n      if (student.currentStatus && student.currentStatus !== 'none') {\r\n        return student.currentStatus;\r\n      }\r\n      \r\n      // If no status is set, return 'none'\r\n      return 'none';\r\n    }\r\n\r\n    // Add setCurrentDate function\r\n    const setCurrentDate = (dateString) => {\r\n      if (!dateString) return;\r\n      \r\n      const newDate = moment(dateString).tz('Asia/Manila').startOf('day');\r\n      const now = moment().tz('Asia/Manila').startOf('day');\r\n      \r\n      // Only allow setting dates up to the current date\r\n      if (newDate.isAfter(now, 'day')) {\r\n        return;\r\n      }\r\n      \r\n      // Set animation direction based on whether we're going forward or backward in time\r\n      const currentMoment = moment(currentDate.value).tz('Asia/Manila').startOf('day');\r\n      slideDirection.value = newDate.isAfter(currentMoment) ? 'slide-left' : 'slide-right';\r\n      \r\n      // Update the current date\r\n      currentDate.value = newDate.toDate();\r\n      \r\n      // Refresh attendance data\r\n      fetchAttendance();\r\n      \r\n      // Reset animation after transition completes\r\n      setTimeout(() => {\r\n        slideDirection.value = '';\r\n      }, 300);\r\n    };\r\n\r\n    // Reset history date filter to default (last 30 days)\r\n    const resetHistoryDateFilter = () => {\r\n      historyStartDate.value = moment().tz('Asia/Manila').subtract(30, 'days').format('YYYY-MM-DD');\r\n      historyEndDate.value = moment().tz('Asia/Manila').format('YYYY-MM-DD');\r\n      \r\n      // Fetch attendance history with the reset date range\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n    };\r\n\r\n    // Set history date range based on preset\r\n    const setHistoryDateRange = (preset) => {\r\n      const now = moment().tz('Asia/Manila');\r\n      \r\n      switch (preset) {\r\n        case 'week':\r\n          historyStartDate.value = now.clone().subtract(7, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'month':\r\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'quarter':\r\n          historyStartDate.value = now.clone().subtract(90, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        case 'semester':\r\n          // Approximately 6 months\r\n          historyStartDate.value = now.clone().subtract(180, 'days').format('YYYY-MM-DD');\r\n          break;\r\n        default:\r\n          historyStartDate.value = now.clone().subtract(30, 'days').format('YYYY-MM-DD');\r\n      }\r\n      \r\n      historyEndDate.value = now.format('YYYY-MM-DD');\r\n      \r\n      // Fetch attendance history with the new date range\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n    };\r\n\r\n    // Initialize component\r\n    onMounted(async () => {\r\n      if (store.getters.isLoggedIn) {\r\n        try {\r\n          console.log('Component mounted, initializing...');\r\n          \r\n          // Fetch available years, sections, and subjects\r\n          await Promise.all([\r\n            fetchAvailableYearsAndSections(),\r\n            fetchTeacherSubjects()\r\n          ]);\r\n          \r\n          console.log('Initialization complete, checking for saved filters:', {\r\n            year: selectedYear.value,\r\n            section: selectedSection.value,\r\n            subject: selectedSubject.value\r\n          });\r\n          \r\n          // Apply filters if they are set\r\n          if (selectedYear.value && selectedSection.value && selectedSubject.value) {\r\n            console.log('Saved filters found, fetching student records...');\r\n            await fetchStudentRecords();\r\n            console.log('Student records loaded');\r\n          } else {\r\n            console.log('No saved filters found, skipping data fetch');\r\n          }\r\n          \r\n          // Set up date auto-update\r\n          setupDateAutoUpdate();\r\n      } catch (error) {\r\n          console.error('Error during component initialization:', error);\r\n        }\r\n      } else {\r\n        router.push('/login');\r\n      }\r\n    });\r\n    \r\n    // Function to refresh attendance data\r\n    const refreshAttendance = async () => {\r\n      console.log('Manually refreshing attendance data');\r\n      \r\n      // Show loading indicator\r\n      const refreshButton = document.querySelector('.btn-outline-secondary i.fa-sync-alt');\r\n      if (refreshButton) {\r\n        refreshButton.classList.add('fa-spin');\r\n      }\r\n      \r\n      try {\r\n      // Fetch fresh attendance data from the server\r\n      await fetchAttendance();\r\n      \r\n      // Force a UI update to ensure the changes are reflected\r\n      nextTick(() => {\r\n        students.value = [...students.value];\r\n          console.log('Attendance data refreshed successfully');\r\n        });\r\n      } catch (error) {\r\n        console.error('Error refreshing attendance data:', error);\r\n      } finally {\r\n        // Remove loading indicator\r\n        setTimeout(() => {\r\n          if (refreshButton) {\r\n            refreshButton.classList.remove('fa-spin');\r\n          }\r\n        }, 500);\r\n      }\r\n    };\r\n\r\n    // Add openDatePicker function\r\n    const openDatePicker = () => {\r\n      const datePicker = document.querySelector('.date-picker-hidden');\r\n      if (datePicker) {\r\n        datePicker.click();\r\n      }\r\n    }\r\n\r\n    // Add openHistoryDatePicker function\r\n    const openHistoryDatePicker = () => {\r\n      showHistoryDatePicker.value = true;\r\n    }\r\n    \r\n    // Add applyHistoryDateFilter function\r\n    const applyHistoryDateFilter = () => {\r\n      if (selectedStudent.value) {\r\n        fetchStudentAttendanceHistory(selectedStudent.value);\r\n      }\r\n      showHistoryDatePicker.value = false;\r\n    }\r\n\r\n    // Add openCalendarPopup function\r\n    const openCalendarPopup = () => {\r\n      showCalendarPopup.value = true;\r\n    }\r\n\r\n    // Add pagination state\r\n    const currentPage = ref(1)\r\n    const itemsPerPage = 25\r\n\r\n    // Compute total pages\r\n    const totalPages = computed(() => Math.ceil(sortedStudents.value.length / itemsPerPage))\r\n\r\n    // Get paginated students\r\n    const paginatedStudents = computed(() => {\r\n      const start = (currentPage.value - 1) * itemsPerPage\r\n      const end = start + itemsPerPage\r\n      return sortedStudents.value.slice(start, end)\r\n    })\r\n\r\n    // Compute pagination info\r\n    const paginationInfo = computed(() => {\r\n      const start = sortedStudents.value.length === 0 ? 0 : (currentPage.value - 1) * itemsPerPage + 1\r\n      const end = Math.min(start + itemsPerPage - 1, sortedStudents.value.length)\r\n      return { start, end }\r\n    })\r\n\r\n    // Pagination methods\r\n    const nextPage = () => {\r\n      if (currentPage.value < totalPages.value) {\r\n        currentPage.value++\r\n      }\r\n    }\r\n\r\n    const previousPage = () => {\r\n      if (currentPage.value > 1) {\r\n        currentPage.value--\r\n      }\r\n    }\r\n\r\n    // Reset pagination when filters change\r\n    watch([searchQuery, selectedYear, selectedSection, selectedSubject], () => {\r\n      currentPage.value = 1\r\n    })\r\n\r\n    // Add clearSearch function if it doesn't exist\r\n    const clearSearch = () => {\r\n      searchQuery.value = ''\r\n      handleSearch()\r\n    }\r\n\r\n    // Function to export attendance records\r\n    const exportAttendanceRecords = async () => {\r\n      try {\r\n        isExporting.value = true\r\n        \r\n        if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\r\n          alert('Please select year, section, and subject before exporting')\r\n          isExporting.value = false\r\n          return\r\n        }\r\n        \r\n        const teacherId = store.state.auth.user?._id\r\n        const teacherName = `${store.state.auth.user?.firstName || ''} ${store.state.auth.user?.lastName || ''}`.trim()\r\n        \r\n        const params = {\r\n          teacherId,\r\n          teacherName,\r\n          year: selectedYear.value,\r\n          section: selectedSection.value,\r\n          subject: selectedSubject.value,\r\n          startDate: exportDateRange.value.start,\r\n          endDate: exportDateRange.value.end,\r\n          format: exportFormat.value\r\n        }\r\n        \r\n        console.log('Exporting attendance records with params:', params)\r\n        \r\n        // Use the same approach for all file types\r\n        const response = await api.get('/export/attendance-records', {\r\n          params,\r\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\r\n        })\r\n        \r\n        if (response.data && response.data.fileUrl) {\r\n          // Create a full URL by combining the API base URL with the file URL\r\n          const baseUrl = api.defaults.baseURL || ''\r\n          const fullUrl = `${baseUrl}${response.data.fileUrl}`\r\n          \r\n          // Open the file in a new tab or window\r\n          window.open(fullUrl, '_blank')\r\n        } else {\r\n          throw new Error('Failed to get download URL')\r\n        }\r\n        \r\n        showExportModal.value = false\r\n        alert('Export successful!')\r\n      } catch (error) {\r\n        console.error('Error exporting attendance records:', error)\r\n        alert('Failed to export attendance records. Please try again.')\r\n      } finally {\r\n        isExporting.value = false\r\n      }\r\n    }\r\n\r\n    return {\r\n      students,\r\n      searchQuery,\r\n      sortedStudents,\r\n      selectedStudent,\r\n      currentDate,\r\n      formatDate,\r\n      formatDateForInput,\r\n      navigateDate,\r\n      isNextDayDisabled,\r\n      markAttendance,\r\n      slideDirection,\r\n      selectedYear,\r\n      selectedSection,\r\n      selectedSubject,\r\n      sortBy,\r\n      getSortIcon,\r\n      handleSearch,\r\n      viewStudentDetails,\r\n      fetchStudentAttendanceHistory,\r\n      historyStartDate,\r\n      historyEndDate,\r\n      availableYears,\r\n      availableSections,\r\n      sectionsByYear,\r\n      teacherSubjects,\r\n      filteredSections,\r\n      fetchAvailableYearsAndSections,\r\n      fetchTeacherSubjects,\r\n      applyFilters,\r\n      clearFilters,\r\n      getAttendanceStatus,\r\n      setCurrentDate,\r\n      resetHistoryDateFilter,\r\n      setHistoryDateRange,\r\n      openDatePicker,\r\n      showHistoryDatePicker,\r\n      openHistoryDatePicker,\r\n      applyHistoryDateFilter,\r\n      showCalendarPopup,\r\n      openCalendarPopup,\r\n      refreshAttendance,\r\n      currentPage,\r\n      totalPages,\r\n      paginatedStudents,\r\n      paginationInfo,\r\n      nextPage,\r\n      previousPage,\r\n      clearSearch,\r\n      showExportModal,\r\n      exportDateRange,\r\n      exportFormat,\r\n      isExporting,\r\n      exportAttendanceRecords,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Base z-index hierarchy - significantly increased values */\r\n:root {\r\n  --z-base: 1;\r\n  --z-table: 10;\r\n  --z-controls: 1000;\r\n  --z-dropdown: 10000;\r\n  --z-modal-backdrop: 20000;\r\n  --z-modal-wrapper: 20100;\r\n  --z-modal-content: 20200;\r\n  --z-table-header: 20;\r\n}\r\n\r\n.attendance-view {\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  padding: 0;\r\n  position: relative;\r\n}\r\n\r\n/* Controls container */\r\n.controls-container {\r\n  position: relative;\r\n  z-index: var(--z-controls);\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* Dropdown styles */\r\n.dropdown {\r\n  position: relative;\r\n  z-index: var(--z-dropdown);\r\n}\r\n\r\n.dropdown-menu {\r\n  position: absolute !important;\r\n  z-index: var(--z-dropdown) !important;\r\n  transform: none !important;\r\n  top: 100% !important;\r\n  left: 0 !important;\r\n  float: none !important;\r\n  min-width: 10rem !important;\r\n  background-color: #fff !important;\r\n  border: none !important;\r\n  border-radius: 12px !important;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\r\n  padding: 0.5rem 0 !important;\r\n  margin-top: 0.5rem !important;\r\n}\r\n\r\n/* Table container - lower z-index than controls */\r\n.table-responsive {\r\n  position: relative;\r\n  z-index: var(--z-table);\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: visible;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: visible !important;\r\n  position: relative;\r\n}\r\n\r\n.card-body {\r\n  padding: 1.5rem;\r\n  position: relative;\r\n}\r\n\r\n.table-controls {\r\n  position: relative;\r\n  z-index: 10000 !important; /* Same as dropdown z-index to ensure it stays on top */\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 1rem;\r\n  overflow: visible !important;\r\n}\r\n\r\n/* Dropdown button */\r\n.btn-control {\r\n  position: relative;\r\n  background: #f8fafc;\r\n  border: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n  font-size: 0.9rem;\r\n  padding: 0.5rem 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  border-radius: 8px;\r\n  transition: all 0.2s ease;\r\n  z-index: var(--z-controls);\r\n}\r\n\r\n.btn-control:hover {\r\n  background: #f1f5f9;\r\n  border-color: #cbd5e1;\r\n  color: #2d3748;\r\n}\r\n\r\n/* Dropdown menu */\r\n.control-menu {\r\n  border: none !important;\r\n  border-radius: 12px !important;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;\r\n  padding: 0.5rem 0 !important;\r\n  margin-top: 0.5rem !important;\r\n  z-index: var(--z-dropdown) !important;\r\n  position: absolute !important;\r\n  min-width: 10rem !important;\r\n  background-color: #fff !important;\r\n}\r\n\r\n/* Override Bootstrap's dropdown styles */\r\n.dropdown-menu.show {\r\n  display: block !important;\r\n  z-index: var(--z-dropdown) !important;\r\n  position: absolute !important;\r\n}\r\n\r\n.dropdown-item {\r\n  padding: 0.6rem 1rem;\r\n  font-size: 0.9rem;\r\n  color: #4a5568;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.dropdown-item:hover {\r\n  background-color: #f8fafc;\r\n  color: #2d3748;\r\n}\r\n\r\n.dropdown-header {\r\n  color: #2d3748;\r\n  font-weight: 600;\r\n  font-size: 1rem;\r\n}\r\n\r\n.filter-badge {\r\n  position: absolute;\r\n  top: -6px;\r\n  right: -6px;\r\n  background: #e53e3e;\r\n  color: white;\r\n  width: 18px;\r\n  height: 18px;\r\n  border-radius: 50%;\r\n  font-size: 0.7rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 2px solid white;\r\n}\r\n\r\n.search-control {\r\n  position: relative;\r\n  z-index: 10000 !important;\r\n}\r\n\r\n/* Table styles from ClassRecords */\r\n.table {\r\n  width: 100%;\r\n  margin-bottom: 0;\r\n  color: #4a5568;\r\n  vertical-align: top;\r\n  border-color: #e2e8f0;\r\n}\r\n\r\n.table th {\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: var(--z-table-header);\r\n  background-color: #f8f9fa;\r\n  color: #666;\r\n  font-weight: 600;\r\n  padding: 0.75rem 1rem;\r\n  border-top: none;\r\n  white-space: nowrap;\r\n  vertical-align: bottom;\r\n  border-bottom: 2px solid #e2e8f0;\r\n}\r\n\r\n.table td {\r\n  padding: 0.75rem 1rem;\r\n  vertical-align: middle;\r\n  border-color: #eee;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.table tbody tr:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.table-hover tbody tr:hover {\r\n  background-color: rgba(0, 0, 0, 0.02);\r\n}\r\n\r\n.clickable-row {\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.clickable-row:hover {\r\n  background-color: rgba(0, 0, 0, 0.02);\r\n}\r\n\r\n.date-display {\r\n  font-size: 1.1rem;\r\n  font-weight: 500;\r\n  color: #495057;\r\n  padding: 0.5rem 1rem;\r\n  background: #fff;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  min-width: 200px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.date-display:hover {\r\n  background: #f8fafc;\r\n}\r\n\r\n.empty-state-message {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 2rem;\r\n  color: #6c757d;\r\n}\r\n\r\n.empty-state-message i {\r\n  font-size: 2rem;\r\n}\r\n\r\n.pagination-controls {\r\n  background: white;\r\n  padding: 1rem;\r\n  border-top: 1px solid #e2e8f0;\r\n}\r\n\r\n.pagination-info {\r\n  color: #4a5568;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.pagination-buttons .btn {\r\n  min-width: 100px;\r\n}\r\n\r\n.status-badge {\r\n  padding: 0.5em 0.75em;\r\n  border-radius: 0.375rem;\r\n  font-weight: 500;\r\n  font-size: 0.875rem;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.status-present {\r\n  background-color: #48bb78;\r\n  color: white;\r\n}\r\n\r\n.status-absent {\r\n  background-color: #f56565;\r\n  color: white;\r\n}\r\n\r\n.status-late {\r\n  background-color: #ed8936;\r\n  color: white;\r\n}\r\n\r\n.status-excused {\r\n  background-color: #4299e1;\r\n  color: white;\r\n}\r\n\r\n.calendar-popup {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: var(--z-modal-wrapper);\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.calendar-container {\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  z-index: var(--z-modal-content);\r\n  max-width: 400px;\r\n  width: 100%;\r\n}\r\n\r\n.calendar-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.calendar-body {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.quick-date-buttons {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n}\r\n\r\n.student-details {\r\n  display: grid;\r\n  grid-template-columns: 350px 1fr;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.chart-section {\r\n  position: relative;\r\n  z-index: var(--z-modal-content);\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 2rem;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chart-section h6 {\r\n  color: #2d3748;\r\n  font-size: 1.4rem;\r\n  font-weight: 600;\r\n  margin-bottom: 2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 2px solid #e2e8f0;\r\n}\r\n\r\n.attendance-table {\r\n  margin-top: 1rem;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.attendance-table th {\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n  background: white;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: var(--z-table-header);\r\n}\r\n\r\n.attendance-table td {\r\n  font-size: 1.1rem;\r\n  color: #4a5568;\r\n}\r\n\r\n.badge {\r\n  font-size: 1rem;\r\n  padding: 0.5em 1em;\r\n}\r\n\r\n/* Chart container */\r\n.chart-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 300px;\r\n}\r\n\r\n/* Add these styles for attendance status */\r\n.attendance-status-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  position: relative;\r\n}\r\n\r\n.attendance-select {\r\n  flex: 1;\r\n  padding-right: 2.5rem;\r\n  border-radius: 6px;\r\n  border: 1px solid #e2e8f0;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.select-present {\r\n  border-color: #48bb78;\r\n  background-color: rgba(72, 187, 120, 0.1);\r\n}\r\n\r\n.select-absent {\r\n  border-color: #f56565;\r\n  background-color: rgba(245, 101, 101, 0.1);\r\n}\r\n\r\n.select-late {\r\n  border-color: #ed8936;\r\n  background-color: rgba(237, 137, 54, 0.1);\r\n}\r\n\r\n.select-none {\r\n  border-color: #a0aec0;\r\n  background-color: rgba(160, 174, 192, 0.1);\r\n}\r\n\r\n.status-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 50%;\r\n  font-size: 1rem;\r\n  color: white;\r\n}\r\n\r\n.indicator-present {\r\n  background-color: #48bb78;\r\n}\r\n\r\n.indicator-absent {\r\n  background-color: #f56565;\r\n}\r\n\r\n.indicator-late {\r\n  background-color: #ed8936;\r\n}\r\n\r\n.indicator-none {\r\n  background-color: #a0aec0;\r\n}\r\n\r\n/* Add these styles for status row highlighting */\r\n.status-row-present {\r\n  background-color: rgba(72, 187, 120, 0.05);\r\n}\r\n\r\n.status-row-absent {\r\n  background-color: rgba(245, 101, 101, 0.05);\r\n}\r\n\r\n.status-row-late {\r\n  background-color: rgba(237, 137, 54, 0.05);\r\n}\r\n\r\n/* Modal styles */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 9999;\r\n}\r\n\r\n.modal-backdrop {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  backdrop-filter: blur(4px);\r\n  z-index: 9998;\r\n}\r\n\r\n.modal-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 10000;\r\n}\r\n\r\n.modal-dialog {\r\n  position: relative;\r\n  width: 90%;\r\n  max-width: 600px;\r\n  margin: 1.75rem auto;\r\n  pointer-events: auto;\r\n}\r\n</style> \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
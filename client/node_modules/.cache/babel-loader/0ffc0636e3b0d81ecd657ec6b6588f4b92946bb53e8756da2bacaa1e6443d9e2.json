{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const assessmentCompletion = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => averageAttendance.value > 0);\n    const hasPerformanceData = computed(() => averageScore.value > 0);\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0);\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n        if (response.data) {\n          // Update stats\n          totalStudents.value = response.data.totalStudents || 0;\n          totalSections.value = response.data.totalSections || 0;\n          totalSubjects.value = response.data.totalSubjects || 0;\n          averageAttendance.value = response.data.averageAttendance || 0;\n          averageScore.value = response.data.averageScore || 0;\n          assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n          recentActivities.value = response.data.recentActivities || [];\n\n          // Log data before updating charts\n          console.log('Performance Distribution:', response.data.performanceDistribution);\n          console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n          console.log('Performance Trends:', response.data.performanceTrends);\n          console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n          // Update charts with new data\n          if (Array.isArray(response.data.performanceDistribution)) {\n            updatePerformanceChart(response.data);\n          } else {\n            console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n            updatePerformanceChart({\n              performanceDistribution: [0, 0, 0, 0, 0]\n            });\n          }\n          if (Array.isArray(response.data.assessmentTypeDistribution)) {\n            updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n          } else {\n            console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n            updateAssessmentTypeChart([{\n              type: 'Quiz',\n              percentage: 0\n            }, {\n              type: 'Activity',\n              percentage: 0\n            }, {\n              type: 'Performance Task',\n              percentage: 0\n            }]);\n          }\n          if (Array.isArray(response.data.performanceTrends)) {\n            updatePerformanceTrendChart(response.data.performanceTrends);\n          } else {\n            console.warn('Invalid performance trends data:', response.data.performanceTrends);\n            updatePerformanceTrendChart([]);\n          }\n          if (response.data.assessmentCompletion?.byType) {\n            updateAssessmentTypePerformanceChart(response.data);\n          } else {\n            console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n            updateAssessmentTypePerformanceChart({\n              assessmentCompletion: {\n                byType: {\n                  quiz: 0,\n                  activity: 0,\n                  performancetask: 0\n                }\n              }\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Reset data on error\n        totalStudents.value = 0;\n        totalSections.value = 0;\n        totalSubjects.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n        assessmentCompletion.value = 0;\n        recentActivities.value = [];\n\n        // Update charts with empty data\n        updatePerformanceChart({\n          performanceDistribution: [0, 0, 0, 0, 0]\n        });\n        updateAssessmentTypeChart([{\n          type: 'Quiz',\n          percentage: 0\n        }, {\n          type: 'Activity',\n          percentage: 0\n        }, {\n          type: 'Performance Task',\n          percentage: 0\n        }]);\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          assessmentCompletion: {\n            byType: {\n              quiz: 0,\n              activity: 0,\n              performancetask: 0\n            }\n          }\n        });\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process performance distribution data\n      const performanceData = Array.isArray(data.performanceDistribution) ? data.performanceDistribution : [0, 0, 0, 0, 0];\n      console.log('Performance distribution data:', performanceData);\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n          datasets: [{\n            label: 'Number of Students',\n            data: performanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for highest\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow\n            'rgba(251, 146, 60, 0.8)',\n            // Orange\n            'rgba(239, 68, 68, 0.8)' // Red for lowest\n            ],\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${value} students (${percentage}%)`;\n                },\n                title: tooltipItems => {\n                  const item = tooltipItems[0];\n                  const gradeRange = item.label;\n                  return `Grade Range: ${gradeRange}`;\n                }\n              }\n            },\n            title: {\n              display: true,\n              text: 'Student Grade Distribution',\n              font: {\n                size: 16,\n                weight: 'bold'\n              },\n              padding: {\n                bottom: 15\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1,\n                precision: 0\n              },\n              title: {\n                display: true,\n                text: 'Number of Students',\n                font: {\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                display: true,\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            },\n            x: {\n              title: {\n                display: true,\n                text: 'Grade Ranges',\n                font: {\n                  weight: 'bold'\n                }\n              }\n            }\n          },\n          animation: {\n            duration: 1500,\n            easing: 'easeOutQuart'\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the assessment type distribution data\n      const labels = data.labels || [];\n      const datasets = data.datasets || [];\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets.map((dataset, index) => ({\n            label: dataset.type,\n            data: dataset.data,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)' // Yellow\n            ][index],\n            borderWidth: 1\n          }))\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Assessments'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.dataset.label}: ${context.raw || 0} assessments`\n              }\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      // Group data by month to reduce clutter\n      const monthlyData = {};\n      validData.forEach(item => {\n        const date = new Date(item.date);\n        const monthYear = `${date.toLocaleString('default', {\n          month: 'short'\n        })} ${date.getFullYear()}`;\n        if (!monthlyData[monthYear]) {\n          monthlyData[monthYear] = {\n            scores: [],\n            assessments: []\n          };\n        }\n        monthlyData[monthYear].scores.push(Number(item.score) || 0);\n        monthlyData[monthYear].assessments.push(item.name);\n      });\n\n      // Calculate monthly averages\n      const chartData = Object.keys(monthlyData).map(month => {\n        const scores = monthlyData[month].scores;\n        const avgScore = scores.length > 0 ? scores.reduce((sum, score) => sum + score, 0) / scores.length : 0;\n        return {\n          month,\n          score: avgScore,\n          assessments: monthlyData[month].assessments\n        };\n      }).sort((a, b) => {\n        // Sort by month chronologically\n        const monthOrder = {\n          'Jan': 0,\n          'Feb': 1,\n          'Mar': 2,\n          'Apr': 3,\n          'May': 4,\n          'Jun': 5,\n          'Jul': 6,\n          'Aug': 7,\n          'Sep': 8,\n          'Oct': 9,\n          'Nov': 10,\n          'Dec': 11\n        };\n        const [aMonth, aYear] = a.month.split(' ');\n        const [bMonth, bYear] = b.month.split(' ');\n        if (aYear !== bYear) return parseInt(aYear) - parseInt(bYear);\n        return monthOrder[aMonth] - monthOrder[bMonth];\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartData.map(d => d.month),\n          datasets: [{\n            label: 'Average Score',\n            data: chartData.map(d => d.score.toFixed(1)),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 6,\n            pointHoverRadius: 8,\n            pointBackgroundColor: '#4CAF50',\n            pointBorderColor: '#fff',\n            pointBorderWidth: 2\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  return `Average Score: ${context.raw}%`;\n                },\n                afterLabel: context => {\n                  const index = context.dataIndex;\n                  const assessments = chartData[index].assessments;\n                  if (assessments.length > 0) {\n                    if (assessments.length <= 3) {\n                      return ['Assessments:', ...assessments.map(a => `- ${a}`)];\n                    } else {\n                      return [`${assessments.length} assessments in this period`];\n                    }\n                  }\n                  return '';\n                }\n              },\n              titleFont: {\n                weight: 'bold'\n              },\n              padding: 12,\n              backgroundColor: 'rgba(0,0,0,0.8)',\n              bodyFont: {\n                size: 13\n              },\n              usePointStyle: true\n            },\n            title: {\n              display: true,\n              text: 'Class Performance Trends',\n              font: {\n                size: 16,\n                weight: 'bold'\n              },\n              padding: {\n                bottom: 15\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              min: 0,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                },\n                callback: function (value) {\n                  return value + '%';\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12,\n                  weight: 'bold'\n                },\n                maxRotation: 45,\n                minRotation: 45\n              },\n              grid: {\n                display: false\n              }\n            }\n          },\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          animation: {\n            duration: 2000,\n            easing: 'easeOutQuart'\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance data by assessment type\n      let performanceByType = {};\n\n      // Check if we have performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        // Group by assessment type\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || 'Unknown';\n          if (!performanceByType[type]) {\n            performanceByType[type] = {\n              scores: [],\n              count: 0,\n              total: 0\n            };\n          }\n          const score = parseFloat(trend.score) || 0;\n          performanceByType[type].scores.push(score);\n          performanceByType[type].count++;\n          performanceByType[type].total += score;\n        });\n      }\n\n      // Calculate average scores by type\n      const chartData = Object.entries(performanceByType).map(([type, data]) => {\n        return {\n          type,\n          averageScore: data.count > 0 ? data.total / data.count : 0,\n          count: data.count\n        };\n      }).sort((a, b) => b.averageScore - a.averageScore); // Sort by average score descending\n\n      // Color scheme based on score ranges\n      const getColorByScore = score => {\n        if (score >= 90) return 'rgba(52, 211, 153, 0.8)'; // Green\n        if (score >= 80) return 'rgba(59, 130, 246, 0.8)'; // Blue\n        if (score >= 70) return 'rgba(251, 191, 36, 0.8)'; // Yellow\n        if (score >= 60) return 'rgba(251, 146, 60, 0.8)'; // Orange\n        return 'rgba(239, 68, 68, 0.8)'; // Red\n      };\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: chartData.map(d => d.type),\n          datasets: [{\n            label: 'Average Score',\n            data: chartData.map(d => d.averageScore.toFixed(1)),\n            backgroundColor: chartData.map(d => getColorByScore(d.averageScore)),\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          indexAxis: 'y',\n          // Horizontal bar chart\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const index = context.dataIndex;\n                  const item = chartData[index];\n                  return [`Average Score: ${context.raw}%`, `Number of Assessments: ${item.count}`];\n                }\n              },\n              titleFont: {\n                weight: 'bold'\n              },\n              backgroundColor: 'rgba(0,0,0,0.8)'\n            },\n            title: {\n              display: true,\n              text: 'Performance by Assessment Type',\n              font: {\n                size: 16,\n                weight: 'bold'\n              },\n              padding: {\n                bottom: 15\n              }\n            }\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                callback: function (value) {\n                  return value + '%';\n                }\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Assessment Type',\n                font: {\n                  weight: 'bold'\n                }\n              }\n            }\n          },\n          animation: {\n            duration: 1500,\n            easing: 'easeOutQuart'\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n          updateAssessmentTypeChart([{\n            type: 'Quiz',\n            percentage: 0\n          }, {\n            type: 'Activity',\n            percentage: 0\n          }, {\n            type: 'Performance Task',\n            percentage: 0\n          }]);\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageAttendance,\n      averageScore,\n      assessmentCompletion,\n      performanceChart,\n      attendanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageAttendance","averageScore","assessmentCompletion","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","value","hasPerformanceData","hasAssessmentData","hasActivity","length","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","data","uniqueSections","Set","map","record","section","uniqueSubjects","subject","sort","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","startDate","endDate","response","overall","performanceDistribution","assessmentTypeDistribution","performanceTrends","byType","Array","isArray","updatePerformanceChart","warn","updateAssessmentTypeChart","type","percentage","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","quiz","activity","performancetask","ctx","getContext","existingChart","getChart","destroy","performanceData","labels","datasets","label","backgroundColor","borderWidth","borderRadius","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","raw","total","reduce","a","b","toFixed","title","tooltipItems","item","gradeRange","text","font","size","weight","padding","bottom","scales","y","beginAtZero","ticks","stepSize","precision","grid","color","x","animation","duration","easing","dataset","index","stacked","maxRotation","minRotation","position","validData","monthlyData","forEach","date","Date","monthYear","toLocaleString","month","getFullYear","scores","assessments","Number","score","chartData","Object","keys","avgScore","sum","monthOrder","aMonth","aYear","split","bMonth","bYear","parseInt","d","borderColor","tension","fill","pointRadius","pointHoverRadius","pointBackgroundColor","pointBorderColor","pointBorderWidth","afterLabel","dataIndex","titleFont","bodyFont","usePointStyle","min","max","callback","interaction","intersect","mode","performanceByType","trend","count","parseFloat","entries","getColorByScore","indexAxis","formatDate","applyFilters","setItem","removeItem","start","end","isBefore"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option value=\"1st\">1st Year</option>\n              <option value=\"2nd\">2nd Year</option>\n              <option value=\"3rd\">3rd Year</option>\n              <option value=\"4th\">4th Year</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\">{{ totalStudents }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\">{{ totalSections }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\">{{ totalSubjects }}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Secondary Stats Row -->\n    <div class=\"row mt-4\">\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card h-100\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-clock\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Average Attendance</h3>\n            <div class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</div>\n            <div class=\"no-data\" v-else>No attendance data available</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n        <div class=\"dashboard-card h-100\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-tasks\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Assessment Completion</h3>\n            <div class=\"stat-value\" v-if=\"hasAssessmentData\">{{ assessmentCompletion }}%</div>\n            <div class=\"no-data\" v-else>No assessment data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Performance Distribution Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Grade Distribution</h5>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Assessment Type Distribution</h5>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Performance Trends</h5>\n            <div class=\"chart-container\">\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Performance by Assessment Type</h5>\n            <div class=\"chart-container\">\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No performance data available</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageAttendance = ref(0)\n    const averageScore = ref(0)\n    const assessmentCompletion = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => averageAttendance.value > 0)\n    const hasPerformanceData = computed(() => averageScore.value > 0)\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0)\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId,\n            year \n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n          \n          sections.value = uniqueSections.sort()\n          subjects.value = uniqueSubjects.sort()\n          \n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          })\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      selectedSection.value = ''\n      selectedSubject.value = ''\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value)\n      } else {\n        sections.value = []\n        subjects.value = []\n      }\n      await fetchDashboardData()\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        const response = await axios.get(`http://localhost:8000/api/dashboard/teacher/${teacherId}/stats`, {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n\n        console.log('Dashboard data received:', response.data);\n\n        if (response.data) {\n          // Update stats\n          totalStudents.value = response.data.totalStudents || 0;\n          totalSections.value = response.data.totalSections || 0;\n          totalSubjects.value = response.data.totalSubjects || 0;\n          averageAttendance.value = response.data.averageAttendance || 0;\n          averageScore.value = response.data.averageScore || 0;\n          assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n          recentActivities.value = response.data.recentActivities || [];\n\n          // Log data before updating charts\n          console.log('Performance Distribution:', response.data.performanceDistribution);\n          console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n          console.log('Performance Trends:', response.data.performanceTrends);\n          console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n          // Update charts with new data\n          if (Array.isArray(response.data.performanceDistribution)) {\n            updatePerformanceChart(response.data);\n          } else {\n            console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n            updatePerformanceChart({\n              performanceDistribution: [0, 0, 0, 0, 0]\n            });\n          }\n\n          if (Array.isArray(response.data.assessmentTypeDistribution)) {\n            updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n          } else {\n            console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n            updateAssessmentTypeChart([\n              { type: 'Quiz', percentage: 0 },\n              { type: 'Activity', percentage: 0 },\n              { type: 'Performance Task', percentage: 0 }\n            ]);\n          }\n\n          if (Array.isArray(response.data.performanceTrends)) {\n            updatePerformanceTrendChart(response.data.performanceTrends);\n          } else {\n            console.warn('Invalid performance trends data:', response.data.performanceTrends);\n            updatePerformanceTrendChart([]);\n          }\n\n          if (response.data.assessmentCompletion?.byType) {\n            updateAssessmentTypePerformanceChart(response.data);\n          } else {\n            console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n            updateAssessmentTypePerformanceChart({\n              assessmentCompletion: {\n                byType: {\n                  quiz: 0,\n                  activity: 0,\n                  performancetask: 0\n                }\n              }\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        \n        // Reset data on error\n        totalStudents.value = 0;\n        totalSections.value = 0;\n        totalSubjects.value = 0;\n        averageAttendance.value = 0;\n        averageScore.value = 0;\n        assessmentCompletion.value = 0;\n        recentActivities.value = [];\n        \n        // Update charts with empty data\n        updatePerformanceChart({\n          performanceDistribution: [0, 0, 0, 0, 0]\n        });\n        updateAssessmentTypeChart([\n          { type: 'Quiz', percentage: 0 },\n          { type: 'Activity', percentage: 0 },\n          { type: 'Performance Task', percentage: 0 }\n        ]);\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          assessmentCompletion: {\n            byType: {\n              quiz: 0,\n              activity: 0,\n              performancetask: 0\n            }\n          }\n        });\n      }\n    }\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process performance distribution data\n      const performanceData = Array.isArray(data.performanceDistribution) \n        ? data.performanceDistribution \n        : [0, 0, 0, 0, 0];\n      \n      console.log('Performance distribution data:', performanceData);\n\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n          datasets: [{\n            label: 'Number of Students',\n            data: performanceData,\n            backgroundColor: [\n              'rgba(52, 211, 153, 0.8)',  // Green for highest\n              'rgba(59, 130, 246, 0.8)',  // Blue\n              'rgba(251, 191, 36, 0.8)',  // Yellow\n              'rgba(251, 146, 60, 0.8)',  // Orange\n              'rgba(239, 68, 68, 0.8)'    // Red for lowest\n            ],\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${value} students (${percentage}%)`;\n                },\n                title: (tooltipItems) => {\n                  const item = tooltipItems[0];\n                  const gradeRange = item.label;\n                  return `Grade Range: ${gradeRange}`;\n                }\n              }\n            },\n            title: {\n              display: true,\n              text: 'Student Grade Distribution',\n              font: {\n                size: 16,\n                weight: 'bold'\n              },\n              padding: {\n                bottom: 15\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1,\n                precision: 0\n              },\n              title: {\n                display: true,\n                text: 'Number of Students',\n                font: {\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                display: true,\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            },\n            x: {\n              title: {\n                display: true,\n                text: 'Grade Ranges',\n                font: {\n                  weight: 'bold'\n                }\n              }\n            }\n          },\n          animation: {\n            duration: 1500,\n            easing: 'easeOutQuart'\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the assessment type distribution data\n      const labels = data.labels || [];\n      const datasets = data.datasets || [];\n      \n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets.map((dataset, index) => ({\n            label: dataset.type,\n            data: dataset.data,\n            backgroundColor: [\n              'rgba(52, 211, 153, 0.8)',  // Green\n              'rgba(59, 130, 246, 0.8)',  // Blue\n              'rgba(251, 191, 36, 0.8)'   // Yellow\n            ][index],\n            borderWidth: 1\n          }))\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Assessments'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => `${context.dataset.label}: ${context.raw || 0} assessments`\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      // Group data by month to reduce clutter\n      const monthlyData = {};\n      validData.forEach(item => {\n        const date = new Date(item.date);\n        const monthYear = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\n        \n        if (!monthlyData[monthYear]) {\n          monthlyData[monthYear] = {\n            scores: [],\n            assessments: []\n          };\n        }\n        \n        monthlyData[monthYear].scores.push(Number(item.score) || 0);\n        monthlyData[monthYear].assessments.push(item.name);\n      });\n      \n      // Calculate monthly averages\n      const chartData = Object.keys(monthlyData).map(month => {\n        const scores = monthlyData[month].scores;\n        const avgScore = scores.length > 0 \n          ? scores.reduce((sum, score) => sum + score, 0) / scores.length \n          : 0;\n          \n        return {\n          month,\n          score: avgScore,\n          assessments: monthlyData[month].assessments\n        };\n      }).sort((a, b) => {\n        // Sort by month chronologically\n        const monthOrder = {\n          'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,\n          'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11\n        };\n        const [aMonth, aYear] = a.month.split(' ');\n        const [bMonth, bYear] = b.month.split(' ');\n        \n        if (aYear !== bYear) return parseInt(aYear) - parseInt(bYear);\n        return monthOrder[aMonth] - monthOrder[bMonth];\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartData.map(d => d.month),\n          datasets: [{\n            label: 'Average Score',\n            data: chartData.map(d => d.score.toFixed(1)),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 6,\n            pointHoverRadius: 8,\n            pointBackgroundColor: '#4CAF50',\n            pointBorderColor: '#fff',\n            pointBorderWidth: 2\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  return `Average Score: ${context.raw}%`;\n                },\n                afterLabel: (context) => {\n                  const index = context.dataIndex;\n                  const assessments = chartData[index].assessments;\n                  if (assessments.length > 0) {\n                    if (assessments.length <= 3) {\n                      return ['Assessments:', ...assessments.map(a => `- ${a}`)];\n                    } else {\n                      return [`${assessments.length} assessments in this period`];\n                    }\n                  }\n                  return '';\n                }\n              },\n              titleFont: {\n                weight: 'bold'\n              },\n              padding: 12,\n              backgroundColor: 'rgba(0,0,0,0.8)',\n              bodyFont: {\n                size: 13\n              },\n              usePointStyle: true\n            },\n            title: {\n              display: true,\n              text: 'Class Performance Trends',\n              font: {\n                size: 16,\n                weight: 'bold'\n              },\n              padding: {\n                bottom: 15\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              min: 0,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                },\n                callback: function(value) {\n                  return value + '%';\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12,\n                  weight: 'bold'\n                },\n                maxRotation: 45,\n                minRotation: 45\n              },\n              grid: {\n                display: false\n              }\n            }\n          },\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          animation: {\n            duration: 2000,\n            easing: 'easeOutQuart'\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance data by assessment type\n      let performanceByType = {};\n      \n      // Check if we have performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        // Group by assessment type\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || 'Unknown';\n          if (!performanceByType[type]) {\n            performanceByType[type] = {\n              scores: [],\n              count: 0,\n              total: 0\n            };\n          }\n          \n          const score = parseFloat(trend.score) || 0;\n          performanceByType[type].scores.push(score);\n          performanceByType[type].count++;\n          performanceByType[type].total += score;\n        });\n      }\n      \n      // Calculate average scores by type\n      const chartData = Object.entries(performanceByType).map(([type, data]) => {\n        return {\n          type,\n          averageScore: data.count > 0 ? data.total / data.count : 0,\n          count: data.count\n        };\n      }).sort((a, b) => b.averageScore - a.averageScore); // Sort by average score descending\n      \n      // Color scheme based on score ranges\n      const getColorByScore = (score) => {\n        if (score >= 90) return 'rgba(52, 211, 153, 0.8)'; // Green\n        if (score >= 80) return 'rgba(59, 130, 246, 0.8)'; // Blue\n        if (score >= 70) return 'rgba(251, 191, 36, 0.8)'; // Yellow\n        if (score >= 60) return 'rgba(251, 146, 60, 0.8)'; // Orange\n        return 'rgba(239, 68, 68, 0.8)'; // Red\n      };\n\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: chartData.map(d => d.type),\n          datasets: [{\n            label: 'Average Score',\n            data: chartData.map(d => d.averageScore.toFixed(1)),\n            backgroundColor: chartData.map(d => getColorByScore(d.averageScore)),\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          indexAxis: 'y', // Horizontal bar chart\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const index = context.dataIndex;\n                  const item = chartData[index];\n                  return [\n                    `Average Score: ${context.raw}%`,\n                    `Number of Assessments: ${item.count}`\n                  ];\n                }\n              },\n              titleFont: {\n                weight: 'bold'\n              },\n              backgroundColor: 'rgba(0,0,0,0.8)'\n            },\n            title: {\n              display: true,\n              text: 'Performance by Assessment Type',\n              font: {\n                size: 16,\n                weight: 'bold'\n              },\n              padding: {\n                bottom: 15\n              }\n            }\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                callback: function(value) {\n                  return value + '%';\n                }\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Assessment Type',\n                font: {\n                  weight: 'bold'\n                }\n              }\n            }\n          },\n          animation: {\n            duration: 1500,\n            easing: 'easeOutQuart'\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n          updateAssessmentTypeChart([\n            { type: 'Quiz', percentage: 0 },\n            { type: 'Activity', percentage: 0 },\n            { type: 'Performance Task', percentage: 0 }\n          ]);\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageAttendance,\n      averageScore,\n      assessmentCompletion,\n      performanceChart,\n      attendanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 1.5rem;\n  letter-spacing: -0.3px;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n    padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
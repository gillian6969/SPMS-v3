{"ast":null,"code":"import { createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.mySurvey.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"Bar\"], {\n    data: $setup.data,\n    options: $setup.options\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"h4\", null, \"No data available!\", -1 /* HOISTED */)])));\n}","map":{"version":3,"names":["key","$setup","mySurvey","length","_createElementBlock","_hoisted_1","_createVNode","data","options","_hoisted_2","_cache","_createElementVNode"],"sources":["D:\\au_dev\\client\\src\\components\\StudentSurveyStat.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"mySurvey.length\">\r\n        <Bar :data=\"data\" :options=\"options\" />\r\n    </div>\r\n    <div  v-else>\r\n        <h4>No data available!</h4>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport {\r\n    Chart as ChartJS,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    BarElement,\r\n    CategoryScale,\r\n    LinearScale\r\n} from 'chart.js'\r\nimport { onMounted, onUnmounted, ref } from 'vue'\r\nimport { Bar } from 'vue-chartjs'\r\n\r\n// Create axios instance with correct base URL\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8081/api',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nconst props = defineProps({\r\n    _id: String,\r\n    surveyForm : Array\r\n})\r\nconst mySurvey = ref([]);\r\nconst data = ref({})\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)\r\nonUnmounted(() => {\r\n    mySurvey.value = [];\r\n    data.value = {};\r\n})\r\nonMounted(async () => {\r\n    const surveyResponse = await api.get(`/survey/stats`,{\r\n        params: {\r\n            _id : props._id\r\n        }\r\n    })\r\n    \r\n    mySurvey.value = surveyResponse.data;\r\n    data.value = {\r\n        labels: mySurvey.value?.map(s => s.type + ' Problem') || 'Not available',\r\n        datasets: [\r\n            {\r\n                label: 'Average Score Survey',\r\n                backgroundColor: '#f87979',\r\n                data: mySurvey.value?.map(s => s.average) || []\r\n            },\r\n        ]\r\n    }\r\n})\r\n\r\n\r\nconst options = ref({\r\n    //   responsive: true ,\r\n    //   maintainAspectRatio: false\r\n})\r\n\r\n// Render the radar chart\r\nconst renderSurveyChart = () => {\r\n  if (!surveyChart.value) return;\r\n  \r\n  const ctx = surveyChart.value.getContext('2d');\r\n  if (!ctx) return;\r\n  \r\n  const existingChart = Chart.getChart(ctx);\r\n  if (existingChart) existingChart.destroy();\r\n  \r\n  // Extract data from survey stats\r\n  let labels = [];\r\n  let data = [];\r\n  \r\n  if (surveyData.value?.surveyStats && Array.isArray(surveyData.value.surveyStats)) {\r\n    surveyData.value.surveyStats.forEach(stat => {\r\n      if (stat.type && !isNaN(stat.average)) {\r\n        labels.push(stat.type);\r\n        data.push(stat.average);\r\n      }\r\n    });\r\n  }\r\n  \r\n  // If no valid data, use sample data\r\n  if (labels.length === 0) {\r\n    labels = ['Academic', 'Financial', 'Personal', 'Health', 'Social'];\r\n    data = [7.2, 5.8, 3.5, 2.1, 4.6];\r\n  }\r\n  \r\n  // Calculate colors based on severity\r\n  const backgroundColors = data.map(value => {\r\n    if (value >= 7) return 'rgba(220, 53, 69, 0.7)';  // High (red)\r\n    if (value >= 5) return 'rgba(255, 193, 7, 0.7)';  // Medium (yellow)\r\n    if (value >= 3) return 'rgba(13, 110, 253, 0.7)'; // Low (blue)\r\n    return 'rgba(25, 135, 84, 0.7)';                 // Minimal (green)\r\n  });\r\n  \r\n  // Create chart\r\n  new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: labels,\r\n      datasets: [{\r\n        label: 'Problem Severity',\r\n        data: data,\r\n        backgroundColor: backgroundColors,\r\n        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),\r\n        borderWidth: 1\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      indexAxis: 'y',\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          padding: 10,\r\n          titleFont: {\r\n            size: 14,\r\n            weight: 'bold'\r\n          },\r\n          bodyFont: {\r\n            size: 13\r\n          },\r\n          callbacks: {\r\n            title: (context) => {\r\n              return context[0].label + ' Problems';\r\n            },\r\n            label: (context) => {\r\n              const value = context.raw;\r\n              let severity = 'Minimal';\r\n              if (value >= 7) severity = 'High';\r\n              else if (value >= 5) severity = 'Medium';\r\n              else if (value >= 3) severity = 'Low';\r\n              \r\n              return `Severity: ${value.toFixed(1)} (${severity})`;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          beginAtZero: true,\r\n          max: 10,\r\n          title: {\r\n            display: true,\r\n            text: 'Severity Score (0-10)'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;SACeC,MAAA,CAAAC,QAAQ,CAACC,MAAM,I,cAA1BC,mBAAA,CAEM,OAHVC,UAAA,GAEQC,YAAA,CAAuCL,MAAA;IAAjCM,IAAI,EAAEN,MAAA,CAAAM,IAAI;IAAGC,OAAO,EAAEP,MAAA,CAAAO;mEAEhCJ,mBAAA,CAEM,OANVK,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAKQC,mBAAA,CAA2B,YAAvB,oBAAkB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
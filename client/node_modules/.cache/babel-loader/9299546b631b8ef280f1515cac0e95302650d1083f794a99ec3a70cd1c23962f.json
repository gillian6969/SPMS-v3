{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\",\n  ref: \"dashboardContainer\"\n};\nconst _hoisted_2 = {\n  class: \"filter-section mb-4\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"d-flex gap-3 align-items-center\"\n};\nconst _hoisted_4 = {\n  class: \"filter-group\"\n};\nconst _hoisted_5 = {\n  id: \"analytics\",\n  class: \"analytics-grid mb-4\"\n};\nconst _hoisted_6 = {\n  class: \"stat-card\"\n};\nconst _hoisted_7 = {\n  class: \"stat-content\"\n};\nconst _hoisted_8 = {\n  class: \"stat-value\"\n};\nconst _hoisted_9 = {\n  class: \"stat-card\"\n};\nconst _hoisted_10 = {\n  class: \"stat-content\"\n};\nconst _hoisted_11 = {\n  class: \"stat-value\"\n};\nconst _hoisted_12 = {\n  class: \"stat-card\"\n};\nconst _hoisted_13 = {\n  class: \"stat-content\"\n};\nconst _hoisted_14 = {\n  class: \"stat-value\"\n};\nconst _hoisted_15 = {\n  class: \"stat-card\"\n};\nconst _hoisted_16 = {\n  class: \"stat-content\"\n};\nconst _hoisted_17 = {\n  class: \"stat-value\"\n};\nconst _hoisted_18 = {\n  class: \"performance-grid mb-4\"\n};\nconst _hoisted_19 = {\n  class: \"stat-card\"\n};\nconst _hoisted_20 = {\n  class: \"stat-content\"\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_22 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_23 = {\n  class: \"stat-card\"\n};\nconst _hoisted_24 = {\n  class: \"stat-content\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"stat-value\"\n};\nconst _hoisted_26 = {\n  key: 1,\n  class: \"no-data\"\n};\nconst _hoisted_27 = {\n  class: \"charts-grid mb-4\"\n};\nconst _hoisted_28 = {\n  class: \"chart-card\"\n};\nconst _hoisted_29 = {\n  class: \"chart-container\"\n};\nconst _hoisted_30 = {\n  ref: \"performanceChart\"\n};\nconst _hoisted_31 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_32 = {\n  class: \"chart-card\"\n};\nconst _hoisted_33 = {\n  class: \"chart-container\"\n};\nconst _hoisted_34 = {\n  ref: \"assessmentTypeChart\"\n};\nconst _hoisted_35 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_36 = {\n  class: \"chart-card mb-4\"\n};\nconst _hoisted_37 = {\n  class: \"chart-container\"\n};\nconst _hoisted_38 = {\n  ref: \"attendanceChart\"\n};\nconst _hoisted_39 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nconst _hoisted_40 = {\n  class: \"chart-card\"\n};\nconst _hoisted_41 = {\n  class: \"chart-container\"\n};\nconst _hoisted_42 = {\n  ref: \"sectionChart\"\n};\nconst _hoisted_43 = {\n  key: 0,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Year Filter \"), _createElementVNode(\"div\", _hoisted_2, [$setup.isCITHead ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedYear = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.handleYearChange && $setup.handleYearChange(...args))\n  }, _cache[3] || (_cache[3] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-22ba47ca>All Academic Years</option><option value=\\\"1st\\\" data-v-22ba47ca>1st Year</option><option value=\\\"2nd\\\" data-v-22ba47ca>2nd Year</option><option value=\\\"3rd\\\" data-v-22ba47ca>3rd Year</option><option value=\\\"4th\\\" data-v-22ba47ca>4th Year</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"button\", {\n    class: \"btn btn-refresh\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.refreshDashboard && $setup.refreshDashboard(...args))\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"i\", {\n    class: \"fas fa-sync-alt\"\n  }, null, -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Analytics Cards \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-graduate\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h3\", _hoisted_8, _toDisplayString($setup.totalStudents), 1 /* TEXT */), _cache[5] || (_cache[5] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Total Students\", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_9, [_cache[8] || (_cache[8] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chalkboard-teacher\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"h3\", _hoisted_11, _toDisplayString($setup.totalTeachers), 1 /* TEXT */), _cache[7] || (_cache[7] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Total Teachers\", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_12, [_cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-user-tie\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"h3\", _hoisted_14, _toDisplayString($setup.totalAdvisers), 1 /* TEXT */), _cache[9] || (_cache[9] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"SSP Advisers\", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_15, [_cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-users\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"h3\", _hoisted_17, _toDisplayString($setup.activeSections), 1 /* TEXT */), _cache[11] || (_cache[11] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Active Sections\", -1 /* HOISTED */))])])]), _createCommentVNode(\" Performance Stats \"), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[14] || (_cache[14] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-clock\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_20, [$setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_21, _toDisplayString($setup.averageAttendance) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _cache[13] || (_cache[13] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Average Attendance\", -1 /* HOISTED */)), !$setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_22, \"No data available\")) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_23, [_cache[16] || (_cache[16] = _createElementVNode(\"div\", {\n    class: \"stat-icon\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_24, [$setup.hasScoreData ? (_openBlock(), _createElementBlock(\"h3\", _hoisted_25, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _cache[15] || (_cache[15] = _createElementVNode(\"p\", {\n    class: \"stat-label\"\n  }, \"Average Score\", -1 /* HOISTED */)), !$setup.hasScoreData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_26, \"No data available\")) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Charts Grid \"), _createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_cache[17] || (_cache[17] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, \"Performance Distribution\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"canvas\", _hoisted_30, null, 512 /* NEED_PATCH */), !$setup.hasPerformanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_31, \"No data available\")) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_32, [_cache[18] || (_cache[18] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, \"Assessment Types\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"canvas\", _hoisted_34, null, 512 /* NEED_PATCH */), !_ctx.data?.assessmentTypeDistribution ? (_openBlock(), _createElementBlock(\"p\", _hoisted_35, \"No data available\")) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Attendance Trends \"), _createElementVNode(\"div\", _hoisted_36, [_cache[19] || (_cache[19] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, \"Attendance Trends\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"canvas\", _hoisted_38, null, 512 /* NEED_PATCH */), !$setup.hasAttendanceData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_39, \"No data available\")) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" Section Performance \"), _createElementVNode(\"div\", _hoisted_40, [_cache[20] || (_cache[20] = _createElementVNode(\"h5\", {\n    class: \"chart-title\"\n  }, \"Section Performance\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"canvas\", _hoisted_42, null, 512 /* NEED_PATCH */), !$setup.hasSectionData ? (_openBlock(), _createElementBlock(\"p\", _hoisted_43, \"No data available\")) : _createCommentVNode(\"v-if\", true)])])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","key","id","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","$setup","isCITHead","_hoisted_3","_hoisted_4","_cache","$event","selectedYear","onChange","args","handleYearChange","_createStaticVNode","onClick","refreshDashboard","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_toDisplayString","totalStudents","_hoisted_9","_hoisted_10","_hoisted_11","totalTeachers","_hoisted_12","_hoisted_13","_hoisted_14","totalAdvisers","_hoisted_15","_hoisted_16","_hoisted_17","activeSections","_hoisted_18","_hoisted_19","_hoisted_20","hasAttendanceData","_hoisted_21","averageAttendance","_hoisted_22","_hoisted_23","_hoisted_24","hasScoreData","_hoisted_25","averageScore","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","hasPerformanceData","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_ctx","data","assessmentTypeDistribution","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","hasSectionData","_hoisted_43"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\r\n    <!-- Year Filter -->\r\n    <div class=\"filter-section mb-4\">\r\n      <div v-if=\"isCITHead\" class=\"d-flex gap-3 align-items-center\">\r\n        <div class=\"filter-group\">\r\n          <select class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n            <option value=\"\">All Academic Years</option>\r\n            <option value=\"1st\">1st Year</option>\r\n            <option value=\"2nd\">2nd Year</option>\r\n            <option value=\"3rd\">3rd Year</option>\r\n            <option value=\"4th\">4th Year</option>\r\n          </select>\r\n        </div>\r\n        <button class=\"btn btn-refresh\" @click=\"refreshDashboard\">\r\n          <i class=\"fas fa-sync-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Analytics Cards -->\r\n    <div id=\"analytics\" class=\"analytics-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-graduate\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalStudents }}</h3>\r\n          <p class=\"stat-label\">Total Students</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chalkboard-teacher\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalTeachers }}</h3>\r\n          <p class=\"stat-label\">Total Teachers</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-tie\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalAdvisers }}</h3>\r\n          <p class=\"stat-label\">SSP Advisers</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-users\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ activeSections }}</h3>\r\n          <p class=\"stat-label\">Active Sections</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Stats -->\r\n    <div class=\"performance-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-clock\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</h3>\r\n          <p class=\"stat-label\">Average Attendance</p>\r\n          <p v-if=\"!hasAttendanceData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chart-line\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasScoreData\">{{ averageScore }}%</h3>\r\n          <p class=\"stat-label\">Average Score</p>\r\n          <p v-if=\"!hasScoreData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Grid -->\r\n    <div class=\"charts-grid mb-4\">\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">Performance Distribution</h5>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"performanceChart\"></canvas>\r\n          <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No data available</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">Assessment Types</h5>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"assessmentTypeChart\"></canvas>\r\n          <p v-if=\"!data?.assessmentTypeDistribution\" class=\"no-data-message\">No data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Trends -->\r\n    <div class=\"chart-card mb-4\">\r\n      <h5 class=\"chart-title\">Attendance Trends</h5>\r\n      <div class=\"chart-container\">\r\n        <canvas ref=\"attendanceChart\"></canvas>\r\n        <p v-if=\"!hasAttendanceData\" class=\"no-data-message\">No data available</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Section Performance -->\r\n    <div class=\"chart-card\">\r\n      <h5 class=\"chart-title\">Section Performance</h5>\r\n      <div class=\"chart-container\">\r\n        <canvas ref=\"sectionChart\"></canvas>\r\n        <p v-if=\"!hasSectionData\" class=\"no-data-message\">No data available</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, watch, onUnmounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api'\r\n});\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    const performanceChart = ref(null)\r\n    const attendanceChart = ref(null)\r\n    const sectionChart = ref(null)\r\n    const assessmentTypeChart = ref(null)\r\n    const selectedYear = ref('')\r\n\r\n    // Computed properties\r\n    const isCITHead = computed(() => store.getters.isCITHead)\r\n    const token = computed(() => store.state.auth.token)\r\n\r\n    // Set auth token for all requests\r\n    watch(token, (newToken) => {\r\n      if (newToken) {\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n      }\r\n    }, { immediate: true });\r\n\r\n    // Dashboard stats\r\n    const totalStudents = ref(0)\r\n    const totalTeachers = ref(0)\r\n    const totalAdvisers = ref(0)\r\n    const averageAttendance = ref(0)\r\n    const averageScore = ref(0)\r\n    const activeSections = ref(0)\r\n\r\n    // Add computed properties for data availability\r\n    const hasAttendanceData = computed(() => {\r\n      return data.value?.attendanceTrends?.length > 0;\r\n    });\r\n\r\n    const hasScoreData = computed(() => {\r\n      return data.value?.averageScore > 0;\r\n    });\r\n\r\n    const hasPerformanceData = computed(() => {\r\n      return data.value?.performanceDistribution && \r\n             Array.isArray(data.value.performanceDistribution) && \r\n             data.value.performanceDistribution.some(value => value >= 0);\r\n    });\r\n\r\n    const hasSectionData = computed(() => {\r\n      return data.value?.sections?.length > 0;\r\n    });\r\n\r\n    const data = ref(null);\r\n\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        const response = await api.get('/dashboard/stats', {\r\n          params: {\r\n            year: selectedYear.value\r\n          }\r\n        });\r\n\r\n        data.value = response.data;\r\n        \r\n        // Debug logging\r\n        console.log('Raw Dashboard Data:', {\r\n          performanceDistribution: {\r\n            data: data.value.performanceDistribution,\r\n            isArray: Array.isArray(data.value.performanceDistribution),\r\n            length: data.value.performanceDistribution?.length\r\n          },\r\n          assessmentTypeDistribution: {\r\n            data: data.value.assessmentTypeDistribution,\r\n            hasDatasets: Boolean(data.value.assessmentTypeDistribution?.datasets),\r\n            datasetsLength: data.value.assessmentTypeDistribution?.datasets?.length,\r\n            labels: data.value.assessmentTypeDistribution?.labels\r\n          }\r\n        });\r\n\r\n        totalStudents.value = data.value.totalStudents || 0;\r\n        totalTeachers.value = data.value.totalTeachers || 0;\r\n        totalAdvisers.value = data.value.totalAdvisers || 0;\r\n        averageAttendance.value = data.value.averageAttendance || 0;\r\n        averageScore.value = data.value.averageScore || 0;\r\n        activeSections.value = data.value.activeSections || 0;\r\n\r\n        // Update charts with new data\r\n        if (data.value) {\r\n          updateCharts(data.value);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch dashboard data:', error);\r\n        if (error.response) {\r\n          console.error('Error response:', error.response.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    const updateCharts = (data) => {\r\n      // Destroy existing charts if they exist\r\n      if (performanceChart.value) {\r\n        const existingChart = Chart.getChart(performanceChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n      if (attendanceChart.value) {\r\n        const existingChart = Chart.getChart(attendanceChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n      if (sectionChart.value) {\r\n        const existingChart = Chart.getChart(sectionChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n      if (assessmentTypeChart.value) {\r\n        const existingChart = Chart.getChart(assessmentTypeChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n\r\n      // Create performance distribution chart (Grade Distribution)\r\n      if (data.performanceDistribution && Array.isArray(data.performanceDistribution)) {\r\n        console.log('Creating performance chart with data:', data.performanceDistribution);\r\n        \r\n        // Ensure we have valid numbers\r\n        const validData = data.performanceDistribution.map(value => Number(value) || 0);\r\n        \r\n        new Chart(performanceChart.value, {\r\n          type: 'pie',\r\n          data: {\r\n            labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\r\n            datasets: [{\r\n              data: validData,\r\n              backgroundColor: [\r\n                '#4CAF50', // Green for highest range\r\n                '#2196F3', // Blue\r\n                '#FFC107', // Yellow\r\n                '#FF9800', // Orange\r\n                '#F44336'  // Red for lowest range\r\n              ],\r\n              borderWidth: 2,\r\n              borderColor: '#ffffff'\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n                position: 'right',\r\n                labels: {\r\n                  padding: 20,\r\n                  usePointStyle: true,\r\n                  pointStyle: 'circle'\r\n                }\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    const value = context.raw;\r\n                    const total = context.dataset.data.reduce((a, b) => a + b, 0);\r\n                    const percentage = ((value / total) * 100).toFixed(1);\r\n                    return `${context.label}: ${value} students (${percentage}%)`;\r\n                  }\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Student Grade Distribution',\r\n                font: {\r\n                  size: 16\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Create assessment type distribution chart\r\n      if (data.assessmentTypeDistribution) {\r\n        console.log('Creating assessment type chart with data:', data.assessmentTypeDistribution);\r\n        \r\n        const colors = {\r\n          'Quiz': 'rgba(76, 175, 80, 0.7)',\r\n          'Activity': 'rgba(33, 150, 243, 0.7)',\r\n          'Performance Task': 'rgba(255, 193, 7, 0.7)'\r\n        };\r\n        \r\n        const borderColors = {\r\n          'Quiz': '#4CAF50',\r\n          'Activity': '#2196F3',\r\n          'Performance Task': '#FFC107'\r\n        };\r\n        \r\n        // Transform the data structure\r\n        const datasets = data.assessmentTypeDistribution.datasets.map(dataset => ({\r\n          label: dataset.type,\r\n          data: dataset.data.map(value => Number(value) || 0),\r\n          backgroundColor: colors[dataset.type],\r\n          borderColor: borderColors[dataset.type],\r\n          borderWidth: 2,\r\n          tension: 0.4,\r\n          fill: true,\r\n          pointBackgroundColor: borderColors[dataset.type],\r\n          pointBorderColor: '#fff',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 4,\r\n          pointHoverRadius: 6\r\n        }));\r\n\r\n        new Chart(assessmentTypeChart.value, {\r\n          type: 'line',\r\n          data: {\r\n            labels: data.assessmentTypeDistribution.labels || [],\r\n            datasets: datasets\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10\r\n              }\r\n            },\r\n            interaction: {\r\n              mode: 'index',\r\n              intersect: false\r\n            },\r\n            scales: {\r\n              x: {\r\n                title: {\r\n                  display: true,\r\n                  text: 'Month/Year'\r\n                },\r\n                grid: {\r\n                  display: false\r\n                }\r\n              },\r\n              y: {\r\n                beginAtZero: true,\r\n                title: {\r\n                  display: true,\r\n                  text: 'Number of Assessments'\r\n                },\r\n                ticks: {\r\n                  stepSize: 1,\r\n                  precision: 0\r\n                },\r\n                grid: {\r\n                  color: 'rgba(0,0,0,0.05)'\r\n                }\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n                position: 'top',\r\n                labels: {\r\n                  usePointStyle: true,\r\n                  padding: 20,\r\n                  font: {\r\n                    size: 12\r\n                  }\r\n                }\r\n              },\r\n              tooltip: {\r\n                backgroundColor: 'rgba(255,255,255,0.9)',\r\n                titleColor: '#000',\r\n                bodyColor: '#000',\r\n                borderColor: 'rgba(0,0,0,0.1)',\r\n                borderWidth: 1,\r\n                padding: 10,\r\n                displayColors: true,\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    return `${context.dataset.label}: ${context.parsed.y} assessments`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Only create attendance chart if there's data\r\n      if (data.attendanceTrends && data.attendanceTrends.length > 0) {\r\n        new Chart(attendanceChart.value, {\r\n          type: 'line',\r\n          data: {\r\n            labels: data.attendanceTrends.map(d => {\r\n              const date = new Date(d.date);\r\n              return `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\r\n            }),\r\n            datasets: [{\r\n              label: 'Attendance Rate',\r\n              data: data.attendanceTrends.map(d => d.rate),\r\n              borderColor: '#2196F3',\r\n              tension: 0.1,\r\n              fill: false\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10\r\n              }\r\n            },\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                max: 100,\r\n                ticks: {\r\n                  callback: function(value) {\r\n                    return value + '%';\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            plugins: {\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    return `Attendance: ${context.parsed.y.toFixed(1)}%`;\r\n                  }\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Monthly Attendance Trends',\r\n                font: {\r\n                  size: 16\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Create section chart with year information\r\n      if (data.sections && data.sections.length > 0) {\r\n        new Chart(sectionChart.value, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: data.sections.map(s => `${s.year} - ${s.name}`),\r\n            datasets: [{\r\n              label: 'Average Performance',\r\n              data: data.sections.map(s => s.performance),\r\n              backgroundColor: data.sections.map(s => {\r\n                // Different colors for different year levels\r\n                switch(s.year) {\r\n                  case '1st': return '#4CAF50';\r\n                  case '2nd': return '#2196F3';\r\n                  case '3rd': return '#FFC107';\r\n                  case '4th': return '#FF5722';\r\n                  default: return '#9E9E9E';\r\n                }\r\n              }),\r\n              borderColor: '#fff',\r\n              borderWidth: 2\r\n            }]\r\n          },\r\n          options: {\r\n            indexAxis: 'y',\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10,\r\n                left: 10,\r\n                right: 10\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              },\r\n              tooltip: {\r\n                backgroundColor: 'rgba(0,0,0,0.8)',\r\n                titleFont: { size: 14 },\r\n                bodyFont: { size: 12 },\r\n                padding: 10,\r\n                cornerRadius: 5,\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    const section = data.sections[context.dataIndex];\r\n                    return [\r\n                      `Performance: ${context.parsed.x.toFixed(1)}%`,\r\n                      `Students: ${section.studentCount}`\r\n                    ];\r\n                  }\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Section Performance by Year Level',\r\n                font: {\r\n                  size: 16\r\n                }\r\n              }\r\n            },\r\n            scales: {\r\n              x: {\r\n                grid: {\r\n                  display: false\r\n                },\r\n                ticks: {\r\n                  color: '#666',\r\n                  callback: function(value) {\r\n                    return value + '%';\r\n                  }\r\n                },\r\n                title: {\r\n                  display: true,\r\n                  text: 'Performance (%)'\r\n                }\r\n              },\r\n              y: {\r\n                grid: {\r\n                  display: false\r\n                },\r\n                ticks: {\r\n                  color: '#666'\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    const dashboardContainer = ref(null)\r\n    const isLoading = ref(false)\r\n    const lastUpdate = ref(null)\r\n    const autoRefreshInterval = ref(null)\r\n\r\n    // Scroll handling\r\n    const scrollToSection = (sectionId) => {\r\n      const element = document.getElementById(sectionId)\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth', block: 'start' })\r\n      }\r\n    }\r\n\r\n    // Handle year change\r\n    const handleYearChange = async () => {\r\n      isLoading.value = true\r\n      try {\r\n        await fetchDashboardData()\r\n        // Save selected year to localStorage\r\n        if (selectedYear.value) {\r\n          localStorage.setItem('selectedYear', selectedYear.value)\r\n        } else {\r\n          localStorage.removeItem('selectedYear')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating dashboard:', error)\r\n      } finally {\r\n        isLoading.value = false\r\n      }\r\n    }\r\n\r\n    // Refresh dashboard\r\n    const refreshDashboard = async () => {\r\n      isLoading.value = true\r\n      try {\r\n        await fetchDashboardData()\r\n        lastUpdate.value = new Date()\r\n      } catch (error) {\r\n        console.error('Error refreshing dashboard:', error)\r\n      } finally {\r\n        isLoading.value = false\r\n      }\r\n    }\r\n\r\n    // Auto refresh setup\r\n    const setupAutoRefresh = () => {\r\n      // Clear any existing interval\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value)\r\n      }\r\n      \r\n      // Set up new auto-refresh interval (every 5 minutes)\r\n      autoRefreshInterval.value = setInterval(refreshDashboard, 5 * 60 * 1000)\r\n    }\r\n\r\n    // Initialize dashboard with saved filters\r\n    onMounted(() => {\r\n      // Restore saved year filter\r\n      const savedYear = localStorage.getItem('selectedYear')\r\n      if (savedYear) {\r\n        selectedYear.value = savedYear\r\n      }\r\n\r\n      fetchDashboardData()\r\n      setupAutoRefresh()\r\n      lastUpdate.value = new Date()\r\n    })\r\n\r\n    // Clean up on component unmount\r\n    onUnmounted(() => {\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value)\r\n      }\r\n    })\r\n\r\n    return {\r\n      performanceChart,\r\n      attendanceChart,\r\n      sectionChart,\r\n      assessmentTypeChart,\r\n      selectedYear,\r\n      isCITHead,\r\n      totalStudents,\r\n      totalTeachers,\r\n      totalAdvisers,\r\n      averageAttendance,\r\n      averageScore,\r\n      activeSections,\r\n      hasAttendanceData,\r\n      hasScoreData,\r\n      hasPerformanceData,\r\n      hasSectionData,\r\n      dashboardContainer,\r\n      isLoading,\r\n      lastUpdate,\r\n      scrollToSection,\r\n      handleYearChange,\r\n      refreshDashboard\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 1.5rem;\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n.filter-section {\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.form-select {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.5rem 2.5rem 0.5rem 1rem;\r\n  font-size: 0.95rem;\r\n  color: #2d3748;\r\n  background-color: white;\r\n  transition: all 0.2s ease;\r\n  min-width: 200px;\r\n}\r\n\r\n.form-select:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n}\r\n\r\n.btn-refresh {\r\n  background: white;\r\n  border: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-refresh:hover {\r\n  background: #f7fafc;\r\n  color: #2d3748;\r\n  border-color: #cbd5e1;\r\n}\r\n\r\n/* Analytics Grid */\r\n.analytics-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.performance-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.charts-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Stat Cards */\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.25rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  background: #003366;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n  margin: 0;\r\n  line-height: 1.2;\r\n}\r\n\r\n.stat-label {\r\n  color: #718096;\r\n  font-size: 0.95rem;\r\n  margin: 0;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n/* Chart Cards */\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.chart-title {\r\n  color: #2d3748;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 300px;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #a0aec0;\r\n  font-size: 0.95rem;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  color: #a0aec0;\r\n  font-size: 0.875rem;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .analytics-grid,\r\n  .performance-grid,\r\n  .charts-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .stat-card {\r\n    padding: 1.25rem;\r\n  }\r\n\r\n  .stat-value {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
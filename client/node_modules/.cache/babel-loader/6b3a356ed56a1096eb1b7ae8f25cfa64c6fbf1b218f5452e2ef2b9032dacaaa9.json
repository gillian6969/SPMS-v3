{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withModifiers as _withModifiers, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Teleport as _Teleport, createBlock as _createBlock, vModelRadio as _vModelRadio } from \"vue\";\nconst _hoisted_1 = {\n  class: \"class-records\"\n};\nconst _hoisted_2 = {\n  class: \"d-flex justify-content-between align-items-center mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"d-flex gap-2\"\n};\nconst _hoisted_4 = {\n  class: \"d-flex align-items-center gap-3\"\n};\nconst _hoisted_5 = {\n  class: \"date-display\"\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = {\n  class: \"card\"\n};\nconst _hoisted_8 = {\n  class: \"card-body\"\n};\nconst _hoisted_9 = {\n  class: \"table-controls mb-4\"\n};\nconst _hoisted_10 = {\n  class: \"d-flex gap-3 align-items-center\"\n};\nconst _hoisted_11 = {\n  class: \"d-flex gap-3\"\n};\nconst _hoisted_12 = {\n  class: \"dropdown\"\n};\nconst _hoisted_13 = {\n  class: \"dropdown-menu control-menu\"\n};\nconst _hoisted_14 = {\n  class: \"dropdown\"\n};\nconst _hoisted_15 = {\n  class: \"btn btn-control\",\n  type: \"button\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"filter-badge\"\n};\nconst _hoisted_17 = {\n  class: \"dropdown-menu control-menu p-3\",\n  style: {\n    \"width\": \"280px\"\n  }\n};\nconst _hoisted_18 = {\n  class: \"mb-3\"\n};\nconst _hoisted_19 = [\"value\"];\nconst _hoisted_20 = {\n  class: \"mb-3\"\n};\nconst _hoisted_21 = [\"disabled\"];\nconst _hoisted_22 = [\"value\"];\nconst _hoisted_23 = {\n  class: \"mb-3\"\n};\nconst _hoisted_24 = [\"disabled\"];\nconst _hoisted_25 = [\"value\"];\nconst _hoisted_26 = {\n  class: \"d-flex justify-content-end gap-2 mt-3\"\n};\nconst _hoisted_27 = {\n  class: \"search-control\"\n};\nconst _hoisted_28 = {\n  class: \"input-group\"\n};\nconst _hoisted_29 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_30 = {\n  class: \"table table-hover\"\n};\nconst _hoisted_31 = [\"onClick\"];\nconst _hoisted_32 = [\"onClick\"];\nconst _hoisted_33 = [\"value\", \"max\", \"onInput\"];\nconst _hoisted_34 = {\n  key: 1\n};\nconst _hoisted_35 = {\n  colspan: \"5\",\n  class: \"text-center py-4\"\n};\nconst _hoisted_36 = {\n  class: \"empty-state-message\"\n};\nconst _hoisted_37 = {\n  key: 0,\n  class: \"text-muted small\"\n};\nconst _hoisted_38 = {\n  class: \"pagination-controls mt-3 d-flex justify-content-between align-items-center\"\n};\nconst _hoisted_39 = {\n  class: \"pagination-info\"\n};\nconst _hoisted_40 = {\n  class: \"pagination-buttons\"\n};\nconst _hoisted_41 = [\"disabled\"];\nconst _hoisted_42 = [\"disabled\"];\nconst _hoisted_43 = {\n  key: 0,\n  class: \"modal-overlay\"\n};\nconst _hoisted_44 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_45 = {\n  class: \"modal-content\"\n};\nconst _hoisted_46 = {\n  class: \"modal-header\"\n};\nconst _hoisted_47 = {\n  class: \"modal-body\"\n};\nconst _hoisted_48 = {\n  class: \"mb-3\"\n};\nconst _hoisted_49 = [\"value\"];\nconst _hoisted_50 = {\n  key: 1,\n  disabled: \"\"\n};\nconst _hoisted_51 = {\n  class: \"mb-3\"\n};\nconst _hoisted_52 = [\"disabled\"];\nconst _hoisted_53 = [\"value\"];\nconst _hoisted_54 = {\n  key: 1,\n  disabled: \"\"\n};\nconst _hoisted_55 = {\n  class: \"mb-3\"\n};\nconst _hoisted_56 = [\"disabled\"];\nconst _hoisted_57 = [\"value\"];\nconst _hoisted_58 = {\n  key: 1,\n  disabled: \"\"\n};\nconst _hoisted_59 = {\n  class: \"d-flex justify-content-end gap-2\"\n};\nconst _hoisted_60 = [\"disabled\"];\nconst _hoisted_61 = {\n  key: 1,\n  class: \"modal-overlay\"\n};\nconst _hoisted_62 = {\n  class: \"modal-wrapper\"\n};\nconst _hoisted_63 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_64 = {\n  class: \"modal-content\"\n};\nconst _hoisted_65 = {\n  class: \"modal-header\"\n};\nconst _hoisted_66 = {\n  class: \"modal-body\"\n};\nconst _hoisted_67 = {\n  class: \"mb-3\"\n};\nconst _hoisted_68 = {\n  class: \"mb-3\"\n};\nconst _hoisted_69 = {\n  class: \"mb-3\"\n};\nconst _hoisted_70 = {\n  class: \"text-end\"\n};\nconst _hoisted_71 = {\n  class: \"table\"\n};\nconst _hoisted_72 = {\n  key: 0\n};\nconst _hoisted_73 = {\n  class: \"modal-overlay\"\n};\nconst _hoisted_74 = {\n  class: \"modal-wrapper\"\n};\nconst _hoisted_75 = {\n  class: \"modal-dialog modal-sm\"\n};\nconst _hoisted_76 = {\n  class: \"modal-content\"\n};\nconst _hoisted_77 = {\n  class: \"modal-header\"\n};\nconst _hoisted_78 = {\n  class: \"modal-body\"\n};\nconst _hoisted_79 = {\n  class: \"mb-3\"\n};\nconst _hoisted_80 = {\n  class: \"mb-3\"\n};\nconst _hoisted_81 = {\n  class: \"modal-footer\"\n};\nconst _hoisted_82 = {\n  class: \"modal-overlay\"\n};\nconst _hoisted_83 = {\n  class: \"modal-wrapper\"\n};\nconst _hoisted_84 = {\n  class: \"modal-dialog modal-sm\"\n};\nconst _hoisted_85 = {\n  class: \"modal-content\"\n};\nconst _hoisted_86 = {\n  class: \"modal-header\"\n};\nconst _hoisted_87 = {\n  class: \"modal-body\"\n};\nconst _hoisted_88 = {\n  class: \"mb-3\"\n};\nconst _hoisted_89 = {\n  class: \"mb-3\"\n};\nconst _hoisted_90 = {\n  class: \"modal-footer\"\n};\nconst _hoisted_91 = {\n  class: \"modal-overlay\"\n};\nconst _hoisted_92 = {\n  class: \"modal-wrapper\"\n};\nconst _hoisted_93 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_94 = {\n  class: \"modal-content\"\n};\nconst _hoisted_95 = {\n  class: \"modal-header\"\n};\nconst _hoisted_96 = {\n  class: \"modal-body\"\n};\nconst _hoisted_97 = {\n  class: \"mb-3\"\n};\nconst _hoisted_98 = {\n  class: \"mb-3\"\n};\nconst _hoisted_99 = {\n  class: \"mt-4\"\n};\nconst _hoisted_100 = {\n  class: \"form-check\"\n};\nconst _hoisted_101 = {\n  class: \"form-check\"\n};\nconst _hoisted_102 = {\n  class: \"mt-4 text-end\"\n};\nconst _hoisted_103 = [\"disabled\"];\nconst _hoisted_104 = {\n  key: 0\n};\nconst _hoisted_105 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StudentDetailsModal = _resolveComponent(\"StudentDetailsModal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Control Buttons and Date Navigation \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.openAddStudentRecordModal && $setup.openAddStudentRecordModal(...args))\n  }, _cache[58] || (_cache[58] = [_createElementVNode(\"i\", {\n    class: \"fas fa-user-plus\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Add Student Record \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.showAddAssessmentModal = true)\n  }, _cache[59] || (_cache[59] = [_createElementVNode(\"i\", {\n    class: \"fas fa-plus\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Add Assessment \")])), _createElementVNode(\"button\", {\n    class: \"btn btn-success\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.openExportModal && $setup.openExportModal(...args))\n  }, _cache[60] || (_cache[60] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export Records \")]))]), _createCommentVNode(\" Add date navigation controls \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[3] || (_cache[3] = $event => $setup.navigateDate(-1))\n  }, _cache[61] || (_cache[61] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"div\", _hoisted_5, _toDisplayString($setup.formatDateForDisplay($setup.currentDate)), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[4] || (_cache[4] = $event => $setup.navigateDate(1)),\n    disabled: $setup.isNextDayDisabled\n  }, _cache[62] || (_cache[62] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_6)])]), _createCommentVNode(\" Records Table \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" Table Controls \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createCommentVNode(\" Sort Dropdown \"), _createElementVNode(\"div\", _hoisted_12, [_cache[67] || (_cache[67] = _createElementVNode(\"button\", {\n    class: \"btn btn-control\",\n    type: \"button\",\n    \"data-bs-toggle\": \"dropdown\",\n    \"aria-expanded\": \"false\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-sort me-2\"\n  }), _createTextVNode(\" Sort by \")], -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_13, [_createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item d-flex align-items-center\",\n    href: \"#\",\n    onClick: _cache[5] || (_cache[5] = $event => $setup.sortBy('studentNumber'))\n  }, [_cache[63] || (_cache[63] = _createElementVNode(\"i\", {\n    class: \"fas fa-sort me-2\"\n  }, null, -1 /* HOISTED */)), _cache[64] || (_cache[64] = _createTextVNode(\" Student Number \")), _createElementVNode(\"i\", {\n    class: _normalizeClass([$setup.getSortIcon('studentNumber'), \"ms-auto\"])\n  }, null, 2 /* CLASS */)])]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item d-flex align-items-center\",\n    href: \"#\",\n    onClick: _cache[6] || (_cache[6] = $event => $setup.sortBy('lastName'))\n  }, [_cache[65] || (_cache[65] = _createElementVNode(\"i\", {\n    class: \"fas fa-sort-alpha-down me-2\"\n  }, null, -1 /* HOISTED */)), _cache[66] || (_cache[66] = _createTextVNode(\" Name \")), _createElementVNode(\"i\", {\n    class: _normalizeClass([$setup.getSortIcon('lastName'), \"ms-auto\"])\n  }, null, 2 /* CLASS */)])])])]), _createCommentVNode(\" Filter Dropdown \"), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"button\", _hoisted_15, [_cache[68] || (_cache[68] = _createElementVNode(\"i\", {\n    class: \"fas fa-filter me-2\"\n  }, null, -1 /* HOISTED */)), _cache[69] || (_cache[69] = _createTextVNode(\" Filter \")), _ctx.hasActiveFilters ? (_openBlock(), _createElementBlock(\"span\", _hoisted_16, \"!\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_17, [_cache[76] || (_cache[76] = _createElementVNode(\"h6\", {\n    class: \"dropdown-header mb-2\"\n  }, \"Filter Options\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_18, [_cache[71] || (_cache[71] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Year Level\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $setup.selectedYear = $event),\n    onChange: _cache[8] || (_cache[8] = (...args) => $setup.applyFilters && $setup.applyFilters(...args))\n  }, [_cache[70] || (_cache[70] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Years\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_19);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedYear]])]), _createElementVNode(\"div\", _hoisted_20, [_cache[73] || (_cache[73] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $setup.selectedSection = $event),\n    onChange: _cache[10] || (_cache[10] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: !$setup.selectedYear\n  }, [_cache[72] || (_cache[72] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Sections\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableSections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_22);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_21), [[_vModelSelect, $setup.selectedSection]])]), _createElementVNode(\"div\", _hoisted_23, [_cache[75] || (_cache[75] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select form-select-sm\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $setup.selectedSubject = $event),\n    onChange: _cache[12] || (_cache[12] = (...args) => $setup.applyFilters && $setup.applyFilters(...args)),\n    disabled: !$setup.selectedSection\n  }, [_cache[74] || (_cache[74] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Subjects\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.teacherSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_25);\n  }), 128 /* KEYED_FRAGMENT */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_24), [[_vModelSelect, $setup.selectedSubject]])]), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-light\",\n    onClick: _cache[13] || (_cache[13] = (...args) => $setup.clearFilters && $setup.clearFilters(...args))\n  }, \" Clear All \"), _createElementVNode(\"button\", {\n    class: \"btn btn-sm btn-primary\",\n    onClick: _cache[14] || (_cache[14] = (...args) => $setup.applyFilters && $setup.applyFilters(...args))\n  }, \" Apply Filters \")])])])]), _createCommentVNode(\" Search Control \"), _createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_cache[78] || (_cache[78] = _createElementVNode(\"span\", {\n    class: \"input-group-text\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-search\"\n  })], -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => $setup.searchQuery = $event),\n    placeholder: \"Search students...\",\n    onInput: _cache[16] || (_cache[16] = (...args) => $setup.handleSearch && $setup.handleSearch(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.searchQuery]]), $setup.searchQuery ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"btn btn-outline-secondary\",\n    type: \"button\",\n    onClick: _cache[17] || (_cache[17] = (...args) => _ctx.clearSearch && _ctx.clearSearch(...args))\n  }, _cache[77] || (_cache[77] = [_createElementVNode(\"i\", {\n    class: \"fas fa-times\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)])])])]), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"table\", _hoisted_30, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_cache[80] || (_cache[80] = _createElementVNode(\"th\", null, \"Student Number\", -1 /* HOISTED */)), _cache[81] || (_cache[81] = _createElementVNode(\"th\", null, \"Last Name\", -1 /* HOISTED */)), _cache[82] || (_cache[82] = _createElementVNode(\"th\", null, \"First Name\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredAssessmentsByDate, assessment => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: assessment.id\n    }, [_createElementVNode(\"div\", {\n      class: \"assessment-header\",\n      onClick: $event => $setup.editAssessment(assessment)\n    }, [_createTextVNode(_toDisplayString(assessment.type) + \" \" + _toDisplayString(assessment.number) + \" \", 1 /* TEXT */), _cache[79] || (_cache[79] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"small\", null, \"(\" + _toDisplayString(assessment.maxScore) + \" pts)\", 1 /* TEXT */)], 8 /* PROPS */, _hoisted_31)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [$setup.paginatedStudents.length > 0 ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.paginatedStudents, student => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: student.studentNumber,\n      onClick: $event => $setup.viewStudentDetails(student),\n      class: \"clickable-row\"\n    }, [_createElementVNode(\"td\", null, _toDisplayString(student.studentNumber), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.lastName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(student.firstName), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredAssessmentsByDate, assessment => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: assessment.id\n      }, [_createElementVNode(\"input\", {\n        type: \"number\",\n        class: \"form-control form-control-sm score-input\",\n        value: $setup.getStudentScore(student, assessment),\n        max: assessment.maxScore,\n        min: \"0\",\n        onInput: $event => $setup.updateScore(student, assessment, $event.target.value),\n        onClick: _cache[18] || (_cache[18] = _withModifiers(() => {}, [\"stop\"]))\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_33)]);\n    }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_32);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"tr\", _hoisted_34, [_createElementVNode(\"td\", _hoisted_35, [_createElementVNode(\"div\", _hoisted_36, [_cache[83] || (_cache[83] = _createElementVNode(\"i\", {\n    class: \"fas fa-users text-muted mb-2\"\n  }, null, -1 /* HOISTED */)), _cache[84] || (_cache[84] = _createElementVNode(\"p\", {\n    class: \"mb-0\"\n  }, \"No students found\", -1 /* HOISTED */)), _ctx.hasActiveFilters ? (_openBlock(), _createElementBlock(\"p\", _hoisted_37, \" Try adjusting your filters \")) : _createCommentVNode(\"v-if\", true)])])]))])])]), _createCommentVNode(\" Pagination Controls \"), _createElementVNode(\"div\", _hoisted_38, [_createElementVNode(\"div\", _hoisted_39, \" Showing \" + _toDisplayString($setup.paginationInfo.start) + \" to \" + _toDisplayString($setup.paginationInfo.end) + \" of \" + _toDisplayString($setup.sortedStudents.length) + \" entries \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_40, [_createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary me-2\",\n    onClick: _cache[19] || (_cache[19] = (...args) => $setup.previousPage && $setup.previousPage(...args)),\n    disabled: $setup.currentPage === 1\n  }, _cache[85] || (_cache[85] = [_createElementVNode(\"i\", {\n    class: \"fas fa-chevron-left me-1\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Previous \")]), 8 /* PROPS */, _hoisted_41), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[20] || (_cache[20] = (...args) => $setup.nextPage && $setup.nextPage(...args)),\n    disabled: $setup.currentPage >= $setup.totalPages\n  }, _cache[86] || (_cache[86] = [_createTextVNode(\" Next \"), _createElementVNode(\"i\", {\n    class: \"fas fa-chevron-right ms-1\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_42)])])])]), _createCommentVNode(\" Add Student Record Modal \"), $setup.showAddStudentRecordModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_43, [_createElementVNode(\"div\", {\n    class: \"modal-wrapper\",\n    onClick: _cache[27] || (_cache[27] = _withModifiers(() => {}, [\"stop\"]))\n  }, [_createElementVNode(\"div\", _hoisted_44, [_createElementVNode(\"div\", _hoisted_45, [_createElementVNode(\"div\", _hoisted_46, [_cache[87] || (_cache[87] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Add Student Record\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[21] || (_cache[21] = $event => $setup.showAddStudentRecordModal = false)\n  })]), _createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"form\", {\n    onSubmit: _cache[26] || (_cache[26] = _withModifiers((...args) => $setup.handleAddStudentRecord && $setup.handleAddStudentRecord(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" Year Selection \"), _createElementVNode(\"div\", _hoisted_48, [_cache[89] || (_cache[89] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Year\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[22] || (_cache[22] = $event => $setup.newStudentRecord.year = $event),\n    required: \"\"\n  }, [_cache[88] || (_cache[88] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Year\", -1 /* HOISTED */)), $setup.availableYears.length > 0 ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.availableYears, year => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: year,\n      value: year\n    }, _toDisplayString(year), 9 /* TEXT, PROPS */, _hoisted_49);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"option\", _hoisted_50, \"No available years\"))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.newStudentRecord.year]])]), _createCommentVNode(\" Section Selection \"), _createElementVNode(\"div\", _hoisted_51, [_cache[91] || (_cache[91] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Section\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[23] || (_cache[23] = $event => $setup.newStudentRecord.section = $event),\n    disabled: !$setup.newStudentRecord.year,\n    required: \"\"\n  }, [_cache[90] || (_cache[90] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Section\", -1 /* HOISTED */)), $setup.filteredSections.length > 0 ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.filteredSections, section => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: section,\n      value: section\n    }, _toDisplayString(section), 9 /* TEXT, PROPS */, _hoisted_53);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"option\", _hoisted_54, \"No available sections\"))], 8 /* PROPS */, _hoisted_52), [[_vModelSelect, $setup.newStudentRecord.section]])]), _createCommentVNode(\" Subject Selection \"), _createElementVNode(\"div\", _hoisted_55, [_cache[93] || (_cache[93] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Subject\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[24] || (_cache[24] = $event => $setup.newStudentRecord.subject = $event),\n    disabled: !$setup.newStudentRecord.section,\n    required: \"\"\n  }, [_cache[92] || (_cache[92] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Subject\", -1 /* HOISTED */)), $setup.teacherSubjects.length > 0 ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.teacherSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject,\n      value: subject\n    }, _toDisplayString(subject), 9 /* TEXT, PROPS */, _hoisted_57);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"option\", _hoisted_58, \"No available subjects\"))], 8 /* PROPS */, _hoisted_56), [[_vModelSelect, $setup.newStudentRecord.subject]])]), _createElementVNode(\"div\", _hoisted_59, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary\",\n    onClick: _cache[25] || (_cache[25] = $event => $setup.showAddStudentRecordModal = false)\n  }, \" Cancel \"), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-primary\",\n    disabled: !$setup.canAddStudentRecord\n  }, \" Add Record \", 8 /* PROPS */, _hoisted_60)])], 32 /* NEED_HYDRATION */)])])])]), _createElementVNode(\"div\", {\n    class: \"modal-backdrop\",\n    onClick: _cache[28] || (_cache[28] = $event => $setup.showAddStudentRecordModal = false)\n  })])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Add Assessment Modal \"), $setup.showAddAssessmentModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_61, [_createElementVNode(\"div\", _hoisted_62, [_createElementVNode(\"div\", _hoisted_63, [_createElementVNode(\"div\", _hoisted_64, [_createElementVNode(\"div\", _hoisted_65, [_cache[94] || (_cache[94] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Add Assessment\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[29] || (_cache[29] = $event => $setup.showAddAssessmentModal = false)\n  })]), _createElementVNode(\"div\", _hoisted_66, [_createElementVNode(\"form\", {\n    onSubmit: _cache[34] || (_cache[34] = _withModifiers((...args) => $setup.handleAddAssessment && $setup.handleAddAssessment(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" Assessment Type \"), _createElementVNode(\"div\", _hoisted_67, [_cache[96] || (_cache[96] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Type\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[30] || (_cache[30] = $event => $setup.newAssessment.type = $event),\n    required: \"\"\n  }, _cache[95] || (_cache[95] = [_createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select Type\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"Quiz\"\n  }, \"Quiz\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"Activity\"\n  }, \"Activity\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"Performance Task\"\n  }, \"Performance Task\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.newAssessment.type]])]), _createCommentVNode(\" Assessment Number \"), _createElementVNode(\"div\", _hoisted_68, [_cache[97] || (_cache[97] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Number\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[31] || (_cache[31] = $event => $setup.newAssessment.number = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newAssessment.number]])]), _createCommentVNode(\" Max Score \"), _createElementVNode(\"div\", _hoisted_69, [_cache[98] || (_cache[98] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Maximum Score\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[32] || (_cache[32] = $event => $setup.newAssessment.maxScore = $event),\n    min: \"1\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newAssessment.maxScore]])]), _createElementVNode(\"div\", _hoisted_70, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary me-2\",\n    onClick: _cache[33] || (_cache[33] = $event => $setup.showAddAssessmentModal = false)\n  }, \" Cancel \"), _cache[99] || (_cache[99] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-primary\"\n  }, \" Add Assessment \", -1 /* HOISTED */))])], 32 /* NEED_HYDRATION */)])])])]), _createElementVNode(\"div\", {\n    class: \"modal-backdrop\",\n    onClick: _cache[35] || (_cache[35] = $event => $setup.showAddAssessmentModal = false)\n  })])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Student Details Modal \"), _createVNode(_component_StudentDetailsModal, {\n    show: !!$setup.selectedStudent,\n    student: $setup.selectedStudent || {},\n    \"year-level\": $setup.selectedYear,\n    section: $setup.selectedSection,\n    subject: $setup.selectedSubject,\n    title: \"Student Performance Details\",\n    \"chart-title\": \"Assessment Performance\",\n    \"history-title\": \"Assessment History\",\n    \"table-headers\": ['Date', 'Assessment', 'Score', 'Percentage'],\n    \"chart-id\": `performanceChart-${$setup.selectedStudent?.studentNumber}`,\n    \"is-class-record\": true,\n    \"onUpdate:show\": _cache[36] || (_cache[36] = value => !value && ($setup.selectedStudent = null)),\n    onClose: _cache[37] || (_cache[37] = $event => $setup.selectedStudent = null),\n    onDateFilterChange: _ctx.handleDateFilterChange,\n    onAssessmentTypeChange: _ctx.handleAssessmentTypeChange\n  }, {\n    \"history-table\": _withCtx(() => [_createElementVNode(\"table\", _hoisted_71, [_cache[101] || (_cache[101] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Assessment\"), _createElementVNode(\"th\", null, \"Score\"), _createElementVNode(\"th\", null, \"Percentage\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [!$setup.selectedStudent?.assessmentHistory || $setup.selectedStudent.assessmentHistory.length === 0 ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_72, _cache[100] || (_cache[100] = [_createElementVNode(\"td\", {\n      colspan: \"4\",\n      class: \"text-center py-3 text-muted\"\n    }, [_createElementVNode(\"i\", {\n      class: \"fas fa-info-circle me-2\"\n    }), _createTextVNode(\"No assessment records found. \")], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedStudent?.assessmentHistory, record => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: record.date + record.type\n      }, [_createElementVNode(\"td\", null, _toDisplayString($setup.formatDate(record.date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(record.type), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(record.score) + \"/\" + _toDisplayString(record.maxScore), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n        class: _normalizeClass([\"badge\", {\n          'bg-success': record.percentage >= 90,\n          'bg-primary': record.percentage >= 80 && record.percentage < 90,\n          'bg-warning': record.percentage >= 75 && record.percentage < 80,\n          'bg-danger': record.percentage < 75\n        }])\n      }, _toDisplayString(record.percentage.toFixed(1)) + \"% \", 3 /* TEXT, CLASS */)])]);\n    }), 128 /* KEYED_FRAGMENT */))])])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\", \"student\", \"year-level\", \"section\", \"subject\", \"chart-id\", \"onDateFilterChange\", \"onAssessmentTypeChange\"]), _createCommentVNode(\" Chart Date Filter Modal \"), $setup.showChartDateFilter ? (_openBlock(), _createBlock(_Teleport, {\n    key: 2,\n    to: \"body\"\n  }, [_createElementVNode(\"div\", _hoisted_73, [_createElementVNode(\"div\", _hoisted_74, [_createElementVNode(\"div\", _hoisted_75, [_createElementVNode(\"div\", _hoisted_76, [_createElementVNode(\"div\", _hoisted_77, [_cache[102] || (_cache[102] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Filter Chart Date Range\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[38] || (_cache[38] = $event => $setup.showChartDateFilter = false)\n  })]), _createElementVNode(\"div\", _hoisted_78, [_createElementVNode(\"div\", _hoisted_79, [_cache[103] || (_cache[103] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[39] || (_cache[39] = $event => $setup.chartDateRange.start = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.chartDateRange.start]])]), _createElementVNode(\"div\", _hoisted_80, [_cache[104] || (_cache[104] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[40] || (_cache[40] = $event => $setup.chartDateRange.end = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.chartDateRange.end]])])]), _createElementVNode(\"div\", _hoisted_81, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary\",\n    onClick: _cache[41] || (_cache[41] = (...args) => $setup.clearChartDateFilter && $setup.clearChartDateFilter(...args))\n  }, \"Clear\"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    onClick: _cache[42] || (_cache[42] = (...args) => $setup.applyChartDateFilter && $setup.applyChartDateFilter(...args))\n  }, \"Apply\")])])]), _createElementVNode(\"div\", {\n    class: \"modal-backdrop\",\n    onClick: _cache[43] || (_cache[43] = $event => $setup.showChartDateFilter = false)\n  })])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" History Date Filter Modal \"), $setup.showHistoryDateFilter ? (_openBlock(), _createBlock(_Teleport, {\n    key: 3,\n    to: \"body\"\n  }, [_createElementVNode(\"div\", _hoisted_82, [_createElementVNode(\"div\", _hoisted_83, [_createElementVNode(\"div\", _hoisted_84, [_createElementVNode(\"div\", _hoisted_85, [_createElementVNode(\"div\", _hoisted_86, [_cache[105] || (_cache[105] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Filter History Date Range\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[44] || (_cache[44] = $event => $setup.showHistoryDateFilter = false)\n  })]), _createElementVNode(\"div\", _hoisted_87, [_createElementVNode(\"div\", _hoisted_88, [_cache[106] || (_cache[106] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[45] || (_cache[45] = $event => $setup.historyDateRange.start = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.historyDateRange.start]])]), _createElementVNode(\"div\", _hoisted_89, [_cache[107] || (_cache[107] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[46] || (_cache[46] = $event => $setup.historyDateRange.end = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.historyDateRange.end]])])]), _createElementVNode(\"div\", _hoisted_90, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary\",\n    onClick: _cache[47] || (_cache[47] = (...args) => $setup.clearHistoryDateFilter && $setup.clearHistoryDateFilter(...args))\n  }, \"Clear\"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    onClick: _cache[48] || (_cache[48] = (...args) => $setup.applyHistoryDateFilter && $setup.applyHistoryDateFilter(...args))\n  }, \"Apply\")])])]), _createElementVNode(\"div\", {\n    class: \"modal-backdrop\",\n    onClick: _cache[49] || (_cache[49] = $event => $setup.showHistoryDateFilter = false)\n  })])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Export Records Modal \"), $setup.showExportModal ? (_openBlock(), _createBlock(_Teleport, {\n    key: 4,\n    to: \"body\"\n  }, [_createElementVNode(\"div\", _hoisted_91, [_createElementVNode(\"div\", _hoisted_92, [_createElementVNode(\"div\", _hoisted_93, [_createElementVNode(\"div\", _hoisted_94, [_createElementVNode(\"div\", _hoisted_95, [_cache[108] || (_cache[108] = _createElementVNode(\"h5\", {\n    class: \"modal-title\"\n  }, \"Export Class Records\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn-close\",\n    onClick: _cache[50] || (_cache[50] = $event => $setup.showExportModal = false)\n  })]), _createElementVNode(\"div\", _hoisted_96, [_cache[115] || (_cache[115] = _createElementVNode(\"div\", {\n    class: \"alert alert-info\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-info-circle me-2\"\n  }), _createTextVNode(\" Select a date range to export class records. Only assessments within this date range will be included. \")], -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[56] || (_cache[56] = _withModifiers((...args) => $setup.exportRecords && $setup.exportRecords(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_97, [_cache[109] || (_cache[109] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Start Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[51] || (_cache[51] = $event => $setup.exportDateRange.start = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportDateRange.start]])]), _createElementVNode(\"div\", _hoisted_98, [_cache[110] || (_cache[110] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"End Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[52] || (_cache[52] = $event => $setup.exportDateRange.end = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.exportDateRange.end]])]), _createElementVNode(\"div\", _hoisted_99, [_createElementVNode(\"div\", _hoisted_100, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    name: \"exportType\",\n    id: \"exportTypeExcel\",\n    value: \"excel\",\n    \"onUpdate:modelValue\": _cache[53] || (_cache[53] = $event => $setup.exportType = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportType]]), _cache[111] || (_cache[111] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"exportTypeExcel\"\n  }, \" Export to Excel (.xlsx) \", -1 /* HOISTED */))]), _createElementVNode(\"div\", _hoisted_101, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    name: \"exportType\",\n    id: \"exportTypeCsv\",\n    value: \"csv\",\n    \"onUpdate:modelValue\": _cache[54] || (_cache[54] = $event => $setup.exportType = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelRadio, $setup.exportType]]), _cache[112] || (_cache[112] = _createElementVNode(\"label\", {\n    class: \"form-check-label\",\n    for: \"exportTypeCsv\"\n  }, \" Export to CSV (.csv) \", -1 /* HOISTED */))])]), _createElementVNode(\"div\", _hoisted_102, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-secondary me-2\",\n    onClick: _cache[55] || (_cache[55] = $event => $setup.showExportModal = false)\n  }, \" Cancel \"), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-success\",\n    disabled: $setup.isExporting\n  }, [$setup.isExporting ? (_openBlock(), _createElementBlock(\"span\", _hoisted_104, _cache[113] || (_cache[113] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Exporting... \")]))) : (_openBlock(), _createElementBlock(\"span\", _hoisted_105, _cache[114] || (_cache[114] = [_createElementVNode(\"i\", {\n    class: \"fas fa-file-export me-2\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Export \")])))], 8 /* PROPS */, _hoisted_103)])], 32 /* NEED_HYDRATION */)])])])]), _createElementVNode(\"div\", {\n    class: \"modal-backdrop\",\n    onClick: _cache[57] || (_cache[57] = $event => $setup.showExportModal = false)\n  })])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","type","key","style","colspan","disabled","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","onClick","_cache","args","$setup","openAddStudentRecordModal","_createTextVNode","$event","showAddAssessmentModal","openExportModal","_hoisted_4","navigateDate","_hoisted_5","_toDisplayString","formatDateForDisplay","currentDate","isNextDayDisabled","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","href","sortBy","_normalizeClass","getSortIcon","_hoisted_14","_hoisted_15","_ctx","hasActiveFilters","_hoisted_16","_hoisted_17","_hoisted_18","selectedYear","onChange","applyFilters","value","_Fragment","_renderList","availableYears","year","_hoisted_19","_hoisted_20","selectedSection","availableSections","section","_hoisted_22","_hoisted_21","_hoisted_23","selectedSubject","teacherSubjects","subject","_hoisted_25","_hoisted_24","_hoisted_26","clearFilters","_hoisted_27","_hoisted_28","searchQuery","placeholder","onInput","handleSearch","clearSearch","_hoisted_29","_hoisted_30","filteredAssessmentsByDate","assessment","id","editAssessment","number","maxScore","_hoisted_31","paginatedStudents","length","student","studentNumber","viewStudentDetails","lastName","firstName","getStudentScore","max","min","updateScore","target","_withModifiers","_hoisted_33","_hoisted_32","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","paginationInfo","start","end","sortedStudents","_hoisted_40","previousPage","currentPage","_hoisted_41","nextPage","totalPages","_hoisted_42","showAddStudentRecordModal","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","onSubmit","handleAddStudentRecord","_hoisted_48","newStudentRecord","required","_hoisted_49","_hoisted_50","_hoisted_51","filteredSections","_hoisted_53","_hoisted_54","_hoisted_52","_hoisted_55","_hoisted_57","_hoisted_58","_hoisted_56","_hoisted_59","canAddStudentRecord","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","handleAddAssessment","_hoisted_67","newAssessment","_hoisted_68","_hoisted_69","_hoisted_70","_createVNode","_component_StudentDetailsModal","show","selectedStudent","title","onClose","onDateFilterChange","handleDateFilterChange","onAssessmentTypeChange","handleAssessmentTypeChange","_withCtx","_hoisted_71","assessmentHistory","_hoisted_72","record","date","formatDate","score","percentage","toFixed","_","showChartDateFilter","_createBlock","_Teleport","to","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","chartDateRange","_hoisted_80","_hoisted_81","clearChartDateFilter","applyChartDateFilter","showHistoryDateFilter","_hoisted_82","_hoisted_83","_hoisted_84","_hoisted_85","_hoisted_86","_hoisted_87","_hoisted_88","historyDateRange","_hoisted_89","_hoisted_90","clearHistoryDateFilter","applyHistoryDateFilter","showExportModal","_hoisted_91","_hoisted_92","_hoisted_93","_hoisted_94","_hoisted_95","_hoisted_96","exportRecords","_hoisted_97","exportDateRange","_hoisted_98","_hoisted_99","_hoisted_100","name","exportType","for","_hoisted_101","_hoisted_102","isExporting","_hoisted_104","_hoisted_105","_hoisted_103"],"sources":["D:\\au_dev\\client\\src\\views\\ClassRecords.vue"],"sourcesContent":["<template>\n  <div class=\"class-records\">\n    <!-- Control Buttons and Date Navigation -->\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <div class=\"d-flex gap-2\">\n        <button class=\"btn btn-primary\" @click=\"openAddStudentRecordModal\">\n          <i class=\"fas fa-user-plus\"></i> Add Student Record\n        </button>\n        <button class=\"btn btn-primary\" @click=\"showAddAssessmentModal = true\">\n          <i class=\"fas fa-plus\"></i> Add Assessment\n        </button>\n        <button class=\"btn btn-success\" @click=\"openExportModal\">\n          <i class=\"fas fa-file-export\"></i> Export Records\n        </button>\n      </div>\n      <!-- Add date navigation controls -->\n      <div class=\"d-flex align-items-center gap-3\">\n        <button class=\"btn btn-outline-primary\" @click=\"navigateDate(-1)\">\n          <i class=\"fas fa-chevron-left\"></i>\n        </button>\n        <div class=\"date-display\">\n          {{ formatDateForDisplay(currentDate) }}\n        </div>\n        <button \n          class=\"btn btn-outline-primary\" \n          @click=\"navigateDate(1)\"\n          :disabled=\"isNextDayDisabled\"\n        >\n          <i class=\"fas fa-chevron-right\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Records Table -->\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <!-- Table Controls -->\n        <div class=\"table-controls mb-4\">\n          <div class=\"d-flex gap-3 align-items-center\">\n            <div class=\"d-flex gap-3\">\n              <!-- Sort Dropdown -->\n              <div class=\"dropdown\">\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  <i class=\"fas fa-sort me-2\"></i> Sort by\n                </button>\n                <ul class=\"dropdown-menu control-menu\">\n                  <li>\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('studentNumber')\">\n                      <i class=\"fas fa-sort me-2\"></i> Student Number\n                      <i :class=\"getSortIcon('studentNumber')\" class=\"ms-auto\"></i>\n                    </a>\n                  </li>\n                  <li>\n                    <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" @click=\"sortBy('lastName')\">\n                      <i class=\"fas fa-sort-alpha-down me-2\"></i> Name\n                      <i :class=\"getSortIcon('lastName')\" class=\"ms-auto\"></i>\n                    </a>\n                  </li>\n                </ul>\n              </div>\n\n              <!-- Filter Dropdown -->\n              <div class=\"dropdown\">\n                <button class=\"btn btn-control\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  <i class=\"fas fa-filter me-2\"></i> Filter\n                  <span v-if=\"hasActiveFilters\" class=\"filter-badge\">!</span>\n                </button>\n                <div class=\"dropdown-menu control-menu p-3\" style=\"width: 280px\">\n                  <h6 class=\"dropdown-header mb-2\">Filter Options</h6>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Year Level</label>\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedYear\" @change=\"applyFilters\">\n                      <option value=\"\">All Years</option>\n                      <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n                    </select>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Section</label>\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSection\" @change=\"applyFilters\" :disabled=\"!selectedYear\">\n                      <option value=\"\">All Sections</option>\n                      <option v-for=\"section in availableSections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n                    </select>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Subject</label>\n                    <select class=\"form-select form-select-sm\" v-model=\"selectedSubject\" @change=\"applyFilters\" :disabled=\"!selectedSection\">\n                      <option value=\"\">All Subjects</option>\n                      <option v-for=\"subject in teacherSubjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n                    </select>\n                  </div>\n                  <div class=\"d-flex justify-content-end gap-2 mt-3\">\n                    <button class=\"btn btn-sm btn-light\" @click=\"clearFilters\">\n                      Clear All\n                    </button>\n                    <button class=\"btn btn-sm btn-primary\" @click=\"applyFilters\">\n                      Apply Filters\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Search Control -->\n            <div class=\"search-control\">\n              <div class=\"input-group\">\n                <span class=\"input-group-text\">\n                  <i class=\"fas fa-search\"></i>\n                </span>\n                <input \n                  type=\"text\" \n                  class=\"form-control\" \n                  v-model=\"searchQuery\"\n                  placeholder=\"Search students...\"\n                  @input=\"handleSearch\"\n                >\n                <button \n                  v-if=\"searchQuery\"\n                  class=\"btn btn-outline-secondary\" \n                  type=\"button\"\n                  @click=\"clearSearch\"\n                >\n                  <i class=\"fas fa-times\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"table-responsive\">\n            <table class=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th>Student Number</th>\n                  <th>Last Name</th>\n                  <th>First Name</th>\n                  <th v-for=\"assessment in filteredAssessmentsByDate\" :key=\"assessment.id\">\n                    <div class=\"assessment-header\" @click=\"editAssessment(assessment)\">\n                        {{ assessment.type }} {{ assessment.number }}\n                        <br>\n                        <small>({{ assessment.maxScore }} pts)</small>\n                    </div>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n              <template v-if=\"paginatedStudents.length > 0\">\n                  <tr \n                  v-for=\"student in paginatedStudents\" \n                    :key=\"student.studentNumber\"\n                    @click=\"viewStudentDetails(student)\"\n                    class=\"clickable-row\"\n                  >\n                    <td>{{ student.studentNumber }}</td>\n                    <td>{{ student.lastName }}</td>\n                    <td>{{ student.firstName }}</td>\n                    <td v-for=\"assessment in filteredAssessmentsByDate\" :key=\"assessment.id\">\n                      <input \n                        type=\"number\" \n                        class=\"form-control form-control-sm score-input\"\n                        :value=\"getStudentScore(student, assessment)\"\n                        :max=\"assessment.maxScore\"\n                        min=\"0\"\n                        @input=\"updateScore(student, assessment, $event.target.value)\"\n                        @click.stop\n                      >\n                    </td>\n                  </tr>\n                </template>\n                <tr v-else>\n                  <td colspan=\"5\" class=\"text-center py-4\">\n                    <div class=\"empty-state-message\">\n                      <i class=\"fas fa-users text-muted mb-2\"></i>\n                      <p class=\"mb-0\">No students found</p>\n                      <p class=\"text-muted small\" v-if=\"hasActiveFilters\">\n                        Try adjusting your filters\n                      </p>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n        <!-- Pagination Controls -->\n        <div class=\"pagination-controls mt-3 d-flex justify-content-between align-items-center\">\n          <div class=\"pagination-info\">\n            Showing {{ paginationInfo.start }} to {{ paginationInfo.end }} of {{ sortedStudents.length }} entries\n          </div>\n          <div class=\"pagination-buttons\">\n            <button \n              class=\"btn btn-outline-primary me-2\" \n              @click=\"previousPage\" \n              :disabled=\"currentPage === 1\"\n            >\n              <i class=\"fas fa-chevron-left me-1\"></i> Previous\n            </button>\n            <button \n              class=\"btn btn-outline-primary\" \n              @click=\"nextPage\" \n              :disabled=\"currentPage >= totalPages\"\n            >\n              Next <i class=\"fas fa-chevron-right ms-1\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Add Student Record Modal -->\n    <div v-if=\"showAddStudentRecordModal\" class=\"modal-overlay\">\n      <div class=\"modal-wrapper\" @click.stop>\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Add Student Record</h5>\n              <button type=\"button\" class=\"btn-close\" @click=\"showAddStudentRecordModal = false\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <form @submit.prevent=\"handleAddStudentRecord\">\n                <!-- Year Selection -->\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Year</label>\n                  <select class=\"form-select\" v-model=\"newStudentRecord.year\" required>\n                    <option value=\"\">Select Year</option>\n                    <template v-if=\"availableYears.length > 0\">\n                      <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">\n                        {{ year }}\n                      </option>\n                    </template>\n                    <option v-else disabled>No available years</option>\n                  </select>\n                </div>\n                <!-- Section Selection -->\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Section</label>\n                  <select class=\"form-select\" v-model=\"newStudentRecord.section\" :disabled=\"!newStudentRecord.year\" required>\n                    <option value=\"\">Select Section</option>\n                    <template v-if=\"filteredSections.length > 0\">\n                      <option v-for=\"section in filteredSections\" :key=\"section\" :value=\"section\">\n                        {{ section }}\n                      </option>\n                    </template>\n                    <option v-else disabled>No available sections</option>\n                  </select>\n                </div>\n                <!-- Subject Selection -->\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Subject</label>\n                  <select class=\"form-select\" v-model=\"newStudentRecord.subject\" :disabled=\"!newStudentRecord.section\" required>\n                    <option value=\"\">Select Subject</option>\n                    <template v-if=\"teacherSubjects.length > 0\">\n                      <option v-for=\"subject in teacherSubjects\" :key=\"subject\" :value=\"subject\">\n                        {{ subject }}\n                      </option>\n                    </template>\n                    <option v-else disabled>No available subjects</option>\n                  </select>\n                </div>\n                <div class=\"d-flex justify-content-end gap-2\">\n                  <button type=\"button\" class=\"btn btn-secondary\" @click=\"showAddStudentRecordModal = false\">\n                    Cancel\n                  </button>\n                  <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"!canAddStudentRecord\">\n                    Add Record\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-backdrop\" @click=\"showAddStudentRecordModal = false\"></div>\n    </div>\n\n    <!-- Add Assessment Modal -->\n    <div v-if=\"showAddAssessmentModal\" class=\"modal-overlay\">\n      <div class=\"modal-wrapper\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Add Assessment</h5>\n              <button type=\"button\" class=\"btn-close\" @click=\"showAddAssessmentModal = false\"></button>\n            </div>\n            <div class=\"modal-body\">\n              <form @submit.prevent=\"handleAddAssessment\">\n                <!-- Assessment Type -->\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Type</label>\n                  <select class=\"form-select\" v-model=\"newAssessment.type\" required>\n                    <option value=\"\">Select Type</option>\n                    <option value=\"Quiz\">Quiz</option>\n                    <option value=\"Activity\">Activity</option>\n                    <option value=\"Performance Task\">Performance Task</option>\n                  </select>\n                </div>\n\n                <!-- Assessment Number -->\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Number</label>\n                  <input \n                    type=\"number\" \n                    class=\"form-control\" \n                    v-model=\"newAssessment.number\"\n                    min=\"1\"\n                    required\n                  >\n                </div>\n\n                <!-- Max Score -->\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Maximum Score</label>\n                  <input \n                    type=\"number\" \n                    class=\"form-control\" \n                    v-model=\"newAssessment.maxScore\"\n                    min=\"1\"\n                    required\n                  >\n                </div>\n\n                <div class=\"text-end\">\n                  <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showAddAssessmentModal = false\">\n                    Cancel\n                  </button>\n                  <button type=\"submit\" class=\"btn btn-primary\">\n                    Add Assessment\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-backdrop\" @click=\"showAddAssessmentModal = false\"></div>\n    </div>\n\n    <!-- Student Details Modal -->\n    <StudentDetailsModal\n      :show=\"!!selectedStudent\"\n      :student=\"selectedStudent || {}\"\n      :year-level=\"selectedYear\"\n      :section=\"selectedSection\"\n      :subject=\"selectedSubject\"\n      title=\"Student Performance Details\"\n      chart-title=\"Assessment Performance\"\n      history-title=\"Assessment History\"\n      :table-headers=\"['Date', 'Assessment', 'Score', 'Percentage']\"\n      :chart-id=\"`performanceChart-${selectedStudent?.studentNumber}`\"\n      :is-class-record=\"true\"\n      @update:show=\"(value) => !value && (selectedStudent = null)\"\n      @close=\"selectedStudent = null\"\n      @date-filter-change=\"handleDateFilterChange\"\n      @assessment-type-change=\"handleAssessmentTypeChange\"\n    >\n      <template #history-table>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Assessment</th>\n              <th>Score</th>\n              <th>Percentage</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-if=\"!selectedStudent?.assessmentHistory || selectedStudent.assessmentHistory.length === 0\">\n              <td colspan=\"4\" class=\"text-center py-3 text-muted\">\n                <i class=\"fas fa-info-circle me-2\"></i>No assessment records found.\n              </td>\n            </tr>\n            <tr v-for=\"record in selectedStudent?.assessmentHistory\" :key=\"record.date + record.type\">\n              <td>{{ formatDate(record.date) }}</td>\n              <td>{{ record.type }}</td>\n              <td>{{ record.score }}/{{ record.maxScore }}</td>\n              <td>\n                <span \n                  class=\"badge\"\n                  :class=\"{\n                    'bg-success': record.percentage >= 90,\n                    'bg-primary': record.percentage >= 80 && record.percentage < 90,\n                    'bg-warning': record.percentage >= 75 && record.percentage < 80,\n                    'bg-danger': record.percentage < 75\n                  }\"\n                >\n                  {{ record.percentage.toFixed(1) }}%\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </template>\n    </StudentDetailsModal>\n\n    <!-- Chart Date Filter Modal -->\n    <teleport to=\"body\" v-if=\"showChartDateFilter\">\n      <div class=\"modal-overlay\">\n        <div class=\"modal-wrapper\">\n          <div class=\"modal-dialog modal-sm\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Filter Chart Date Range</h5>\n                <button type=\"button\" class=\"btn-close\" @click=\"showChartDateFilter = false\"></button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Start Date</label>\n                  <input type=\"date\" class=\"form-control\" v-model=\"chartDateRange.start\">\n                </div>\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">End Date</label>\n                  <input type=\"date\" class=\"form-control\" v-model=\"chartDateRange.end\">\n                </div>\n                </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" @click=\"clearChartDateFilter\">Clear</button>\n                <button type=\"button\" class=\"btn btn-primary\" @click=\"applyChartDateFilter\">Apply</button>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-backdrop\" @click=\"showChartDateFilter = false\"></div>\n        </div>\n      </div>\n    </teleport>\n\n    <!-- History Date Filter Modal -->\n    <teleport to=\"body\" v-if=\"showHistoryDateFilter\">\n      <div class=\"modal-overlay\">\n        <div class=\"modal-wrapper\">\n          <div class=\"modal-dialog modal-sm\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Filter History Date Range</h5>\n                <button type=\"button\" class=\"btn-close\" @click=\"showHistoryDateFilter = false\"></button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">Start Date</label>\n                  <input type=\"date\" class=\"form-control\" v-model=\"historyDateRange.start\">\n                </div>\n                <div class=\"mb-3\">\n                  <label class=\"form-label\">End Date</label>\n                  <input type=\"date\" class=\"form-control\" v-model=\"historyDateRange.end\">\n                </div>\n                </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" @click=\"clearHistoryDateFilter\">Clear</button>\n                <button type=\"button\" class=\"btn btn-primary\" @click=\"applyHistoryDateFilter\">Apply</button>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-backdrop\" @click=\"showHistoryDateFilter = false\"></div>\n        </div>\n      </div>\n    </teleport>\n\n    <!-- Export Records Modal -->\n    <teleport to=\"body\" v-if=\"showExportModal\">\n      <div class=\"modal-overlay\">\n        <div class=\"modal-wrapper\">\n          <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Export Class Records</h5>\n                <button type=\"button\" class=\"btn-close\" @click=\"showExportModal = false\"></button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"alert alert-info\">\n                  <i class=\"fas fa-info-circle me-2\"></i>\n                  Select a date range to export class records. Only assessments within this date range will be included.\n                </div>\n\n                <form @submit.prevent=\"exportRecords\">\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">Start Date</label>\n                    <input type=\"date\" class=\"form-control\" v-model=\"exportDateRange.start\" required>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\">End Date</label>\n                    <input type=\"date\" class=\"form-control\" v-model=\"exportDateRange.end\" required>\n                  </div>\n                  \n                  <div class=\"mt-4\">\n                    <div class=\"form-check\">\n                      <input class=\"form-check-input\" type=\"radio\" name=\"exportType\" id=\"exportTypeExcel\" value=\"excel\" v-model=\"exportType\">\n                      <label class=\"form-check-label\" for=\"exportTypeExcel\">\n                        Export to Excel (.xlsx)\n                      </label>\n                    </div>\n                    <div class=\"form-check\">\n                      <input class=\"form-check-input\" type=\"radio\" name=\"exportType\" id=\"exportTypeCsv\" value=\"csv\" v-model=\"exportType\">\n                      <label class=\"form-check-label\" for=\"exportTypeCsv\">\n                        Export to CSV (.csv)\n                      </label>\n                    </div>\n                  </div>\n                  \n                  <div class=\"mt-4 text-end\">\n                    <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showExportModal = false\">\n                      Cancel\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-success\" :disabled=\"isExporting\">\n                      <span v-if=\"isExporting\">\n                        <i class=\"fas fa-spinner fa-spin me-2\"></i> Exporting...\n                      </span>\n                      <span v-else>\n                        <i class=\"fas fa-file-export me-2\"></i> Export\n                      </span>\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-backdrop\" @click=\"showExportModal = false\"></div>\n      </div>\n    </teleport>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRoute, useRouter } from 'vue-router'\nimport axios from 'axios'\nimport moment from 'moment-timezone'\nimport Chart from 'chart.js/auto'\nimport 'chartjs-adapter-moment'\nimport StudentDetailsModal from '@/components/modals/StudentDetailsModal.vue'\nimport * as XLSX from 'xlsx'\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000, // 10 seconds timeout\n  validateStatus: function (status) {\n    return status >= 200 && status < 500; // Accept all status codes from 200-499\n  }\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(\n  config => {\n    console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`, config.data || config.params);\n    return config;\n  },\n  error => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for logging\napi.interceptors.response.use(\n  response => {\n    console.log(`API Response: ${response.status} ${response.config.url}`, response.data);\n    return response;\n  },\n  error => {\n    if (error.response) {\n      console.error(`API Error Response: ${error.response.status} ${error.config?.url}`, error.response.data);\n    } else if (error.request) {\n      console.error('API No Response:', error.request);\n    } else {\n      console.error('API Error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default {\n  name: 'ClassRecords',\n  components: {\n    StudentDetailsModal\n  },\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n    const user = ref(store.state.auth.user || null)\n    \n    // Add user profile fetching\n    const fetchUserProfile = async () => {\n      try {\n        console.log('Fetching user profile...');\n        const response = await api.get('/users/profile', {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('User profile response:', response.data);\n        user.value = response.data;\n        \n        // Check if user is a teacher\n        if (!user.value || user.value.role !== 'teacher') {\n          console.log('User is not a teacher:', user.value?.role);\n          router.push('/dashboard');\n          return;\n        }\n        \n        // Log teaching year and subjects\n        console.log('Teaching year:', user.value.teachingYear);\n        console.log('Subjects:', user.value.subjects);\n        \n        // If teaching year is not set, default to '1st'\n        if (!user.value.teachingYear) {\n          console.log('Teaching year not set, defaulting to 1st');\n          user.value.teachingYear = '1st';\n        }\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n        router.push('/login');\n      }\n    };\n\n    // Call fetchUserProfile when component mounts\n    onMounted(async () => {\n      try {\n        console.log('Component mounted, fetching user profile and subjects');\n        await fetchUserProfile();\n        console.log('User profile fetched, now fetching user preferences');\n        \n        // First check localStorage for preferences\n        const localPrefs = localStorage.getItem('classRecordPreferences');\n        if (localPrefs) {\n          try {\n            const prefs = JSON.parse(localPrefs);\n            console.log('Found preferences in localStorage:', prefs);\n            \n            // Apply local preferences immediately\n            if (prefs.selectedYear) selectedYear.value = prefs.selectedYear;\n            if (prefs.selectedSection) selectedSection.value = prefs.selectedSection;\n            if (prefs.selectedSubject) selectedSubject.value = prefs.selectedSubject;\n            if (prefs.currentPage) currentPage.value = parseInt(prefs.currentPage) || 1;\n          } catch (parseError) {\n            console.error('Error parsing localStorage preferences:', parseError);\n          }\n        } else {\n          // If no preferences in localStorage, try to load last used filters\n          await loadLastUsedFilters();\n        }\n        \n        // Then fetch from API\n        await fetchUserPreferences();\n        \n        // Ensure we have the necessary data to fetch records\n        if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n          console.log('Fetching available sections for year:', selectedYear.value);\n          await fetchAvailableSections();\n          \n          console.log('Updating teacher subjects for section:', selectedSection.value);\n          await updateTeacherSubjects();\n          \n          console.log('Fetching class data for subject:', selectedSubject.value);\n          await fetchClassData();\n        } else {\n          console.log('Missing required filters, cannot fetch class data');\n          // Try to load last used filters if we still don't have them\n          if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\n            await loadLastUsedFilters();\n            \n            // Try again with the loaded filters\n            if (selectedYear.value) {\n              await fetchAvailableSections();\n              \n              if (selectedSection.value) {\n                await updateTeacherSubjects();\n                \n                if (selectedSubject.value) {\n                  await fetchClassData();\n                }\n              }\n            }\n          }\n        }\n        \n        console.log('Initial data loading complete');\n      } catch (error) {\n        console.error('Error during component initialization:', error);\n      }\n    });\n\n    const selectedYear = ref('');\n    const selectedSection = ref('');\n    const selectedSubject = ref('');\n    const searchQuery = ref('');\n    const students = ref([]);\n    const assessments = ref([]);\n    const currentDate = ref(moment().tz('Asia/Manila').startOf('day').toDate());\n    const showAddAssessmentModal = ref(false);\n    const selectedStudent = ref(null);\n    const quizChart = ref(null);\n    const activityChart = ref(null);\n    const performanceChart = ref(null);\n    const showAddStudentRecordModal = ref(false);\n    const showSearch = ref(false);\n    const sortField = ref('');\n    const sortOrder = ref('asc');\n    const newStudentRecord = ref({\n      year: '',\n      section: '',\n      subject: ''\n    });\n\n    // Add new refs for filters\n    const selectedAssessmentType = ref('');\n    const showChartDateFilter = ref(false);\n    const showHistoryDateFilter = ref(false);\n    const chartDateRange = ref({\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n      end: moment().format('YYYY-MM-DD')\n    });\n    const historyDateRange = ref({\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n      end: moment().format('YYYY-MM-DD')\n    });\n\n    const newAssessment = ref({\n      type: '',\n      number: '',\n      maxScore: ''\n    })\n\n    // State for available years, sections, and subjects\n    const availableYears = ref([])\n    const availableSections = ref([])\n    const sectionsByYear = ref({})\n    const teacherSubjects = ref([])\n\n    const teachingYear = computed(() => {\n      console.log('User object:', user.value);\n      console.log('Teaching year:', user.value?.teachingYear);\n      return user.value?.teachingYear || 'N/A';\n    });\n\n    // Get available subjects based on teaching year\n    const availableSubjects = computed(() => {\n      const year = teachingYear.value\n      switch (year) {\n        case '1st':\n          return ['ITE 100', 'ITE 101', 'ITE 102', 'ITE 103']\n        case '2nd':\n          return ['ITE 200', 'ITE 201', 'ITE 202', 'ITE 203']\n        case '3rd':\n          return ['ITE 301', 'ITE 302', 'ITE 303', 'ITE 304']\n        case '4th':\n          return ['ITE 400', 'ITE 401', 'ITE 402', 'ITE 403', 'ITE 404']\n        default:\n          return []\n      }\n    })\n\n    // Filter students\n    const filteredStudents = computed(() => {\n      return students.value.filter(student => {\n        const searchLower = searchQuery.value.toLowerCase()\n        return (\n          student.studentNumber.toLowerCase().includes(searchLower) ||\n          student.firstName.toLowerCase().includes(searchLower) ||\n          student.lastName.toLowerCase().includes(searchLower)\n        )\n      })\n    })\n\n    // Sort students\n    const sortedStudents = computed(() => {\n      let sortedList = [...filteredStudents.value]\n\n      if (sortField.value) {\n        sortedList.sort((a, b) => {\n          let aVal = a[sortField.value]\n          let bVal = b[sortField.value]\n\n          // Handle case-insensitive string comparison\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase()\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase()\n\n          if (aVal < bVal) return sortOrder.value === 'asc' ? -1 : 1\n          if (aVal > bVal) return sortOrder.value === 'asc' ? 1 : -1\n          return 0\n        })\n      }\n\n      return sortedList\n    })\n\n    // Sort functions\n    const sortBy = (field) => {\n      if (sortField.value === field) {\n        sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc'\n      } else {\n        sortField.value = field\n        sortOrder.value = 'asc'\n      }\n    }\n\n    const getSortIcon = (field) => {\n      if (sortField.value !== field) return 'fas fa-sort'\n      return sortOrder.value === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down'\n    }\n\n    // Search functions\n    const toggleSearch = () => {\n      showSearch.value = !showSearch.value\n      if (!showSearch.value) {\n        searchQuery.value = ''\n      }\n    }\n\n    const handleSearch = () => {\n      // Additional search logic can be added here if needed\n      console.log('Searching for:', searchQuery.value)\n    }\n\n    // Filter functions\n    const applyFilters = async () => {\n      try {\n        console.log('Applying filters:', {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value\n        });\n        \n        // Save the applied filters as preferences first\n        await saveUserPreferences();\n        \n        // Save to recent filters\n        if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n          saveToRecentFilters({\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            timestamp: new Date().toISOString()\n          });\n        }\n        \n        // Record the timestamp for this filter combination\n        try {\n          const token = store.state.auth.token;\n          const userId = store.state.auth.user?._id;\n          \n          if (userId && selectedYear.value && selectedSection.value && selectedSubject.value) {\n            await api.post('/users/record-filter-usage', {\n              userId,\n              year: selectedYear.value,\n              section: selectedSection.value,\n              subject: selectedSubject.value,\n              timestamp: new Date().toISOString()\n            }, {\n              headers: { 'Authorization': `Bearer ${token}` }\n            });\n            \n            console.log('Filter usage recorded');\n          }\n        } catch (recordError) {\n          console.error('Error recording filter usage:', recordError);\n          // Non-critical error, continue with the rest of the function\n        }\n        \n        // Always fetch data when filters are applied, regardless of whether all filters are selected\n        await fetchClassData();\n        \n        // Only fetch assessments if we have all the necessary filters\n        if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n          await fetchAssessments();\n        }\n      } catch (error) {\n        console.error('Error applying filters:', error);\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n        \n        // Try to recover by using localStorage values\n        try {\n          const localPrefs = localStorage.getItem('classRecordPreferences');\n          if (localPrefs) {\n            const prefs = JSON.parse(localPrefs);\n            console.log('Recovering with localStorage preferences:', prefs);\n            \n            // Only update if values are different to avoid infinite loops\n            let changed = false;\n            \n            if (prefs.selectedYear && prefs.selectedYear !== selectedYear.value) {\n              selectedYear.value = prefs.selectedYear;\n              changed = true;\n            }\n            \n            if (prefs.selectedSection && prefs.selectedSection !== selectedSection.value) {\n              selectedSection.value = prefs.selectedSection;\n              changed = true;\n            }\n            \n            if (prefs.selectedSubject && prefs.selectedSubject !== selectedSubject.value) {\n              selectedSubject.value = prefs.selectedSubject;\n              changed = true;\n            }\n            \n            // If we made changes, try to fetch data again\n            if (changed) {\n              console.log('Recovered with localStorage values, fetching data again');\n              await fetchClassData();\n              \n              if (selectedYear.value && selectedSection.value && selectedSubject.value) {\n                await fetchAssessments();\n              }\n            }\n          }\n        } catch (recoveryError) {\n          console.error('Failed to recover with localStorage:', recoveryError);\n        }\n      }\n    };\n\n    // Computed property to check if record can be added\n    const canAddStudentRecord = computed(() => {\n      return newStudentRecord.value.year && \n             newStudentRecord.value.section && \n             newStudentRecord.value.subject\n    })\n\n    // Fetch class data\n    const fetchClassData = async () => {\n      try {\n        if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\n          console.log('Missing required filters for fetchClassData:', {\n            year: selectedYear.value || 'missing',\n            section: selectedSection.value || 'missing',\n            subject: selectedSubject.value || 'missing'\n          });\n          students.value = [];\n          return;\n        }\n\n        // Create a params object with the teacher ID\n        const teacherId = store.state.auth.user?._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n        \n        const params = { \n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value\n        };\n        \n        console.log('Fetching class data with filters:', params);\n        \n        // Make the API call with the available filters\n        const response = await api.get('/teacher-class-records/students', { \n          params,\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\n          console.log('No students found for the selected filters');\n          students.value = [];\n          return;\n        }\n        \n        // Map the students and initialize scores\n        students.value = response.data.map(student => ({\n            ...student,\n          scores: {}\n        }));\n\n        // Fetch assessments after loading students\n        await fetchAssessments();\n\n        console.log('Fetched students:', students.value.length);\n      } catch (error) {\n        console.error('Failed to fetch class data:', error);\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n        \n        // Don't show alert for every error to avoid overwhelming the user\n        if (error.response?.status !== 400) {\n        alert('Failed to load class data. Please try again.');\n        }\n        \n        students.value = [];\n      }\n    };\n\n    // Handle adding new assessment\n    const handleAddAssessment = async () => {\n      try {\n        if (!selectedSection.value || !selectedSubject.value) {\n          alert('Please select a section and subject first');\n          return;\n        }\n\n        const teacherId = store.state.auth.user?._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          return;\n        }\n\n        // Use the current table date for the assessment\n        const assessment = {\n          type: newAssessment.value.type,\n          number: parseInt(newAssessment.value.number),\n          maxScore: parseInt(newAssessment.value.maxScore),\n          teacherId,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          date: currentDate.value.toISOString()\n        };\n\n        const response = await api.post(\n          '/assessments',\n          assessment,\n          {\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n\n        // Add the new assessment to the list\n        assessments.value.push(response.data);\n        \n        // Reset form and close modal\n        newAssessment.value = {\n          type: '',\n          number: '',\n          maxScore: ''\n        };\n        showAddAssessmentModal.value = false;\n      } catch (error) {\n        console.error('Failed to add assessment:', error);\n        alert('Failed to add assessment. ' + (error.response?.data?.message || 'Please try again.'));\n      }\n    };\n\n    // Update the fetchAssessments function\n    const fetchAssessments = async () => {\n      try {\n        if (!selectedSection.value || !selectedSubject.value) {\n          console.log('Missing required filters for fetching assessments');\n          return;\n        }\n\n        const teacherId = store.state.auth.user?._id || user.value?._id;\n        const date = moment(currentDate.value).format('YYYY-MM-DD');\n        \n        console.log('Fetching assessments for:', {\n          teacherId,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          date\n        });\n\n        // Show loading indicator\n        const loadingToast = showToast('Loading assessments...', 'info', 0);\n\n        const response = await api.get('/assessments', {\n          params: {\n            teacherId,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            date\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n\n        // Hide loading indicator\n        hideToast(loadingToast);\n\n        if (!response.data || !Array.isArray(response.data)) {\n          console.error('Invalid response data:', response.data);\n          showToast('Failed to load assessments', 'error', 3000);\n          return;\n        }\n\n        console.log(`Loaded ${response.data.length} assessments`);\n\n        // Sort assessments by date and type\n        const sortedAssessments = response.data.sort((a, b) => {\n          // First sort by date\n          const dateA = new Date(a.date);\n          const dateB = new Date(b.date);\n          if (dateA.getTime() !== dateB.getTime()) {\n            return dateA - dateB;\n          }\n          \n          // If dates are equal, sort by type\n          const typeOrder = { 'Quiz': 1, 'Activity': 2, 'Performance Task': 3 };\n          if (typeOrder[a.type] !== typeOrder[b.type]) {\n            return typeOrder[a.type] - typeOrder[b.type];\n          }\n          \n          // If types are equal, sort by number\n          return a.number - b.number;\n        });\n\n        // Map the assessments and initialize scores\n        assessments.value = sortedAssessments.map(assessment => {\n          // Create a title if it doesn't exist\n          const title = assessment.title || `${assessment.type} ${assessment.number}`;\n          \n          return {\n            ...assessment,\n            id: assessment._id,\n            title,\n            scores: assessment.scores || {},\n            date: assessment.date ? new Date(assessment.date) : new Date()\n          };\n        });\n\n        console.log('Processed assessments:', assessments.value);\n\n        // If a student is selected, update their assessment data\n        if (selectedStudent.value) {\n          await viewStudentDetails(selectedStudent.value);\n        }\n\n        // Show success message if assessments were loaded\n        if (assessments.value.length > 0) {\n          showToast(`Loaded ${assessments.value.length} assessments`, 'success', 2000);\n        } else {\n          showToast('No assessments found for the selected filters', 'info', 3000);\n        }\n      } catch (error) {\n        console.error('Error fetching assessments:', error);\n        showToast('Failed to load assessments: ' + (error.message || 'Unknown error'), 'error', 3000);\n      }\n    };\n\n    // Update the computed property for filtered assessments\n    const filteredAssessmentsByDate = computed(() => {\n      return assessments.value.filter(assessment => {\n        const assessmentDate = new Date(assessment.date);\n        const currentDateStart = new Date(currentDate.value);\n        currentDateStart.setUTCHours(0, 0, 0, 0);\n        currentDateStart.setHours(currentDateStart.getHours() + 8); // Adjust for Philippine timezone\n        \n        const currentDateEnd = new Date(currentDate.value);\n        currentDateEnd.setUTCHours(23, 59, 59, 999);\n        currentDateEnd.setHours(currentDateEnd.getHours() + 8); // Adjust for Philippine timezone\n        \n        return assessmentDate >= currentDateStart && assessmentDate <= currentDateEnd;\n      }).sort((a, b) => {\n        // Sort by type first\n        const typeOrder = { 'Quiz': 1, 'Activity': 2, 'Performance Task': 3 };\n        if (typeOrder[a.type] !== typeOrder[b.type]) {\n          return typeOrder[a.type] - typeOrder[b.type];\n        }\n        \n        // Then by number\n        return a.number - b.number;\n      });\n    });\n\n    // Add watcher for currentDate to refresh assessments\n    watch(currentDate, async () => {\n      await fetchAssessments();\n    });\n\n    // Update student score\n    const updateScore = async (student, assessment, inputValue) => {\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          showToast('Teacher ID not available. Please log in again.', 'error', 3000);\n          return;\n        }\n\n        // Get the assessment ID\n        const assessmentId = assessment._id || assessment.id;\n        \n        if (!assessmentId) {\n          console.error('Assessment ID not available');\n          showToast('Assessment ID not available. Please try again.', 'error', 3000);\n          return;\n        }\n\n        // Get the score from the input field or parameter\n        let scoreValue = inputValue;\n        if (scoreValue === undefined) {\n          scoreValue = student.scores?.[assessmentId];\n        }\n        \n        // Validate score\n        if (scoreValue === null || scoreValue === '') {\n          // Handle empty score\n          scoreValue = null;\n          console.log(`Removing score for student ${student.studentNumber}, assessment ${assessmentId}`);\n        } else {\n          const scoreNum = parseInt(scoreValue);\n          if (isNaN(scoreNum) || scoreNum < 0 || scoreNum > assessment.maxScore) {\n            showToast(`Please enter a valid score between 0 and ${assessment.maxScore}`, 'error', 3000);\n            return;\n          }\n          scoreValue = scoreNum; // Ensure it's a number\n        }\n\n        console.log(`Updating score for student ${student.studentNumber}, assessment ${assessmentId}: ${scoreValue}`);\n\n        // Create the request payload for the new endpoint\n        const payload = {\n          assessmentId,\n          teacherId,\n          studentNumber: student.studentNumber,\n          score: scoreValue\n        };\n\n        console.log('Sending score update request with payload:', payload);\n\n        // Show loading indicator\n        const loadingToast = showToast('Updating score...', 'info', 0);\n\n        // Use the new direct score update endpoint\n        const response = await api.post(\n          `/assessments/update-score-direct`,\n          payload,\n          {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n\n        // Hide loading indicator\n        hideToast(loadingToast);\n\n        console.log('Score update response:', response.data);\n\n        if (!response.data || !response.data.success) {\n          console.error('Error updating score:', response.data?.message || 'Unknown error');\n          showToast(response.data?.message || 'Failed to update score', 'error', 3000);\n          return;\n        }\n\n        // Show success message\n        showToast('Score updated successfully', 'success', 2000);\n\n        // Update the local assessment scores\n        const updatedAssessment = response.data.assessment;\n        \n        if (!updatedAssessment) {\n          console.error('No assessment returned from server');\n          return;\n        }\n        \n        console.log('Updated assessment:', updatedAssessment);\n        console.log('Updated scores:', updatedAssessment.scores);\n        \n        // Find the assessment in the local array\n        const assessmentIndex = assessments.value.findIndex(a => \n          a._id === assessmentId || a.id === assessmentId\n        );\n        \n        if (assessmentIndex !== -1) {\n          // Update the assessment in the array with the new scores\n          assessments.value[assessmentIndex] = {\n            ...assessments.value[assessmentIndex],\n            scores: updatedAssessment.scores || {}\n          };\n\n          // Force a UI update\n          assessments.value = [...assessments.value];\n          \n          // Update the student's scores in the UI\n          if (students.value) {\n            const studentIndex = students.value.findIndex(s => \n              s.studentNumber === student.studentNumber\n            );\n            \n            if (studentIndex !== -1) {\n              // Make sure the scores object exists\n              if (!students.value[studentIndex].scores) {\n                students.value[studentIndex].scores = {};\n              }\n              \n              // Update the score\n              students.value[studentIndex].scores[assessmentId] = scoreValue;\n              \n              // Force a UI update\n              students.value = [...students.value];\n            }\n          }\n          \n          // If the student is currently selected in the details modal, update their chart\n          if (selectedStudent.value && selectedStudent.value.studentNumber === student.studentNumber) {\n            // Update the chart on the next tick to ensure the DOM is updated\n            nextTick(() => {\n              createPerformanceChart();\n              updateAssessmentHistoryTable();\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error updating score:', error);\n        showToast('Failed to update score. Please try again.', 'error', 3000);\n      }\n    };\n    \n    // Helper function to show toast messages\n    const showToast = (message, type = 'info', duration = 3000) => {\n      const toast = document.createElement('div');\n      toast.className = `toast toast-${type}`;\n      toast.innerHTML = message;\n      document.body.appendChild(toast);\n      \n      // Add styles if they don't exist\n      if (!document.getElementById('toast-styles')) {\n        const style = document.createElement('style');\n        style.id = 'toast-styles';\n        style.innerHTML = `\n          .toast {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 12px 20px;\n            border-radius: 4px;\n            color: white;\n            font-weight: bold;\n            z-index: 9999;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            animation: toast-in 0.3s ease-out;\n          }\n          .toast-info {\n            background-color: #3498db;\n          }\n          .toast-success {\n            background-color: #2ecc71;\n          }\n          .toast-warning {\n            background-color: #f39c12;\n          }\n          .toast-error {\n            background-color: #e74c3c;\n          }\n          @keyframes toast-in {\n            from { transform: translateY(-20px); opacity: 0; }\n            to { transform: translateY(0); opacity: 1; }\n          }\n        `;\n        document.head.appendChild(style);\n      }\n      \n      // Remove toast after duration (if not 0)\n      if (duration > 0) {\n        setTimeout(() => {\n          hideToast(toast);\n        }, duration);\n      }\n      \n      return toast;\n    };\n    \n    // Helper function to hide toast\n    const hideToast = (toast) => {\n      if (!toast || !document.body.contains(toast)) return;\n      \n      toast.style.opacity = '0';\n      toast.style.transform = 'translateY(-20px)';\n      toast.style.transition = 'all 0.3s ease-out';\n      \n      setTimeout(() => {\n        if (document.body.contains(toast)) {\n          document.body.removeChild(toast);\n        }\n      }, 300);\n    };\n\n    // View student details\n    const viewStudentDetails = async (student) => {\n      try {\n        if (!student) {\n          console.error('Invalid student data provided to viewStudentDetails');\n          return;\n        }\n\n        // Clean up existing charts if any\n        if (selectedStudent.value) {\n          const chartIdBase = `performanceChart-${selectedStudent.value.studentNumber}`;\n          const chartIds = [\n            `all-${chartIdBase}`,\n            `quiz-${chartIdBase}`,\n            `activity-${chartIdBase}`,\n            `performance-${chartIdBase}`\n          ];\n          \n          chartIds.forEach(id => {\n            const chartElement = document.getElementById(id);\n            if (chartElement) {\n              const chart = Chart.getChart(chartElement);\n              if (chart) {\n                chart.destroy();\n              }\n            }\n          });\n        }\n\n        // Reset assessment type to 'All'\n        selectedAssessmentType.value = 'All';\n\n        // Get all assessments for this student\n        const response = await api.get('/assessments', {\n          params: {\n            teacherId: store.state.auth.user?._id,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n\n        if (!response.data) {\n          throw new Error('Failed to fetch assessment data');\n        }\n\n        // Map the assessments to include scores\n        const assessmentsData = response.data.map(assessment => ({\n          ...assessment,\n          id: assessment._id,\n          scores: assessment.scores || {}\n        }));\n\n        // Update the selected student with assessment data\n        selectedStudent.value = {\n          ...student,\n          assessments: assessmentsData\n        };\n\n        // Set default date ranges if not already set\n        const today = moment().format('YYYY-MM-DD');\n        const thirtyDaysAgo = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        \n        chartDateRange.value = {\n          start: thirtyDaysAgo,\n          end: today\n        };\n        \n        historyDateRange.value = {\n          start: thirtyDaysAgo,\n          end: today\n        };\n\n        // Create charts on next tick to ensure DOM is ready\n        nextTick(() => {\n          createPerformanceChart();\n        });\n      } catch (error) {\n        console.error('Error fetching student details:', error);\n        alert('Failed to load student details. Please try again.');\n      }\n    };\n\n    // Add watch for currentDate to update student details when date changes\n    watch(currentDate, async () => {\n      if (selectedStudent.value) {\n        await viewStudentDetails(selectedStudent.value);\n      }\n    });\n\n    // Format date\n    const formatDate = (date) => {\n      if (!date) return ''\n      return moment(date).tz('Asia/Manila').format('MMMM D, YYYY')\n    }\n\n    // Function to update teacher subjects\n    const updateTeacherSubjects = async () => {\n      try {\n        if (!selectedYear.value || !selectedSection.value) {\n          console.log('Missing year or section for fetching subjects');\n          teacherSubjects.value = [];\n          return;\n        }\n\n        const teacherId = store.state.auth.user?._id;\n        const response = await api.get('/teacher-class-records/available-subjects', {\n          params: {\n            teacherId,\n            year: selectedYear.value,\n            section: selectedSection.value\n          },\n          headers: { \n            'Authorization': `Bearer ${store.state.auth.token}` \n          }\n        });\n\n        if (response.data && response.data.subjects) {\n          teacherSubjects.value = response.data.subjects.sort();\n          console.log('Fetched teacher subjects:', teacherSubjects.value);\n\n          // If no subject is selected but we have subjects available, select the first one\n          if (!selectedSubject.value && teacherSubjects.value.length > 0) {\n            selectedSubject.value = teacherSubjects.value[0];\n          }\n        } else {\n          teacherSubjects.value = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch teacher subjects:', error);\n        teacherSubjects.value = [];\n      }\n    }\n\n    // Handle adding new student record\n    const handleAddStudentRecord = async () => {\n      console.log('handleAddStudentRecord function called');\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id || user.value?._id;\n\n        console.log('Adding student record with:', {\n          year: newStudentRecord.value.year,\n          section: newStudentRecord.value.section,\n          subject: newStudentRecord.value.subject\n        });\n\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          alert('Teacher information is not available. Please try logging in again.');\n          store.dispatch('logout');\n          router.push('/login');\n          return;\n        }\n\n        // First get students from the selected section\n        console.log('Fetching students for section:', newStudentRecord.value.year, newStudentRecord.value.section);\n        const studentsResponse = await api.get(`/students/by-section`, {\n          params: {\n            year: newStudentRecord.value.year,\n            section: newStudentRecord.value.section\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        console.log('Students response:', studentsResponse.data);\n\n        if (!studentsResponse.data || studentsResponse.data.length === 0) {\n          alert('No students found in the selected section.');\n          return;\n        }\n\n        // Map students to the required format\n        const mappedStudents = studentsResponse.data.map(student => ({\n          studentId: student._id,\n          studentNumber: student.studentId,\n          firstName: student.firstName,\n          lastName: student.lastName,\n          year: student.year,\n          section: student.section\n        }));\n\n        console.log('Mapped students:', mappedStudents);\n\n        // Create the class record\n        const classRecordData = {\n          teacherId,\n          year: newStudentRecord.value.year,\n          section: newStudentRecord.value.section,\n          subject: newStudentRecord.value.subject,\n          students: mappedStudents\n        };\n\n        console.log('Creating class record with data:', classRecordData);\n\n        // Save the class record\n        const createResponse = await api.post(\n          '/teacher-class-records/create', \n          classRecordData,\n          {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n\n        console.log('Create response:', createResponse.data);\n\n        if (createResponse.data) {\n          try {\n            // Initialize attendance records for all students\n            // Get the current date in Philippine timezone\n            const today = moment().tz('Asia/Manila').startOf('day').format('YYYY-MM-DD');\n            \n            console.log('Creating attendance records for date:', today);\n            \n            // Create attendance records for each student\n            const attendancePromises = mappedStudents.map(student => {\n              console.log(`Creating attendance record for student ${student.firstName} ${student.lastName} (${student.studentNumber})`);\n              return api.post('/attendance', {\n                studentId: student.studentId,\n                teacherId,\n                date: today,\n                subject: newStudentRecord.value.subject,\n                section: newStudentRecord.value.section,\n                status: 'present' // Default status\n              }, {\n                headers: {\n                  'Authorization': `Bearer ${token}`,\n                  'Content-Type': 'application/json'\n                }\n              }).then(response => {\n                console.log(`Successfully created attendance record for student ${student.studentNumber}:`, response.data);\n                return response;\n              }).catch(error => {\n                console.warn(`Failed to create attendance record for student ${student.studentNumber}:`, error);\n                \n                // If the endpoint doesn't exist, log a more specific message\n                if (error.response && error.response.status === 404) {\n                  console.warn('Attendance API endpoint not found. This is expected if the attendance service is not yet implemented.');\n                }\n                \n                // Return a resolved promise to prevent Promise.all from failing\n                return Promise.resolve();\n              });\n            });\n            \n            // Wait for all attendance records to be created\n            await Promise.all(attendancePromises);\n            console.log('Attendance records creation completed');\n          } catch (attendanceError) {\n            console.warn('Error creating attendance records:', attendanceError);\n            // Continue with the process even if attendance creation fails\n          }\n\n          // Close modal and reset form\n          showAddStudentRecordModal.value = false;\n          newStudentRecord.value = {\n            year: '',\n            section: '',\n            subject: ''\n          };\n\n          // Update the selected filters to show the new record\n          selectedYear.value = classRecordData.year;\n          selectedSection.value = classRecordData.section;\n          selectedSubject.value = classRecordData.subject;\n\n          console.log('Selected filters updated to:', {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          });\n\n          // Refresh the data\n          console.log('Refreshing class data and attendance...');\n          await fetchClassData();\n          \n          // Check if data was loaded correctly\n          if (students.value.length === 0) {\n            console.log('No students loaded after fetchClassData, trying again...');\n            // Try again with a slight delay\n            setTimeout(async () => {\n              await fetchClassData();\n              console.log('Second attempt to fetch class data complete, students:', students.value.length);\n            }, 500);\n          }\n          \n          try {\n            await fetchAttendance();\n            console.log('Attendance data refreshed successfully');\n          } catch (attendanceError) {\n            console.warn('Error fetching attendance:', attendanceError);\n            // Continue with the process even if attendance fetching fails\n          }\n          console.log('Data refresh complete');\n\n          alert('Student records added successfully!');\n        }\n      } catch (error) {\n        console.error('Failed to add student record:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n        \n        // Check if the class record was created successfully\n        let classRecordCreated = false;\n        try {\n          // Try to fetch the class record to see if it was created\n          if (newStudentRecord.value.year && newStudentRecord.value.section && newStudentRecord.value.subject) {\n            const checkResponse = await api.get('/teacher-class-records', {\n              params: {\n                teacherId: store.state.auth.user?._id || user.value?._id,\n                year: newStudentRecord.value.year,\n                section: newStudentRecord.value.section,\n                subject: newStudentRecord.value.subject\n              },\n              headers: {\n                'Authorization': `Bearer ${store.state.auth.token}`\n              }\n            });\n            \n            if (checkResponse.data && checkResponse.data.length > 0) {\n              classRecordCreated = true;\n              console.log('Class record was created successfully despite errors');\n            }\n          }\n        } catch (checkError) {\n          console.error('Error checking if class record was created:', checkError);\n        }\n        \n        if (classRecordCreated) {\n          // If the class record was created, consider it a success\n          showAddStudentRecordModal.value = false;\n          \n          // Store the values before resetting the form\n          const year = newStudentRecord.value.year;\n          const section = newStudentRecord.value.section;\n          const subject = newStudentRecord.value.subject;\n          \n          // Reset the form\n          newStudentRecord.value = {\n            year: '',\n            section: '',\n            subject: ''\n          };\n          \n          // Update the selected filters to show the new record\n          selectedYear.value = year;\n          selectedSection.value = section;\n          selectedSubject.value = subject;\n          \n          // Refresh the data\n          await fetchClassData();\n          try {\n            await fetchAttendance();\n            console.log('Attendance data refreshed successfully after recovery');\n          } catch (attendanceError) {\n            console.warn('Error fetching attendance after recovery:', attendanceError);\n          }\n          \n          alert('Student records added successfully, but there was an issue with attendance records. You may need to set attendance separately.');\n        } else if (error.response?.data?.message === 'A class record already exists for this combination') {\n          alert('A class record already exists for this combination of teacher, year, section, and subject.');\n        } else {\n          alert('Failed to add student record. Please try again.');\n        }\n      }\n    };\n\n    // Watch for changes in year selection\n    watch(selectedYear, async (newYear) => {\n      if (newYear) {\n        selectedSection.value = ''; // Reset section\n        selectedSubject.value = ''; // Reset subject\n        await fetchAvailableSections(); // Fetch sections based on selected year\n        await saveUserPreferences(); // Save the updated preference\n      } else {\n        availableSections.value = [];\n      }\n    });\n\n    // Watch for changes in section selection\n    watch(selectedSection, async (newSection) => {\n      if (newSection) {\n        selectedSubject.value = ''; // Reset subject\n        await updateTeacherSubjects(); // Fetch subjects based on selected year and section\n        await saveUserPreferences(); // Save the updated preference\n      } else {\n        teacherSubjects.value = [];\n      }\n    });\n\n    // Watch for changes in subject selection\n    watch(selectedSubject, async (newSubject) => {\n      if (newSubject) {\n        await fetchClassData(); // Fetch class data based on selected year, section, and subject\n        await saveUserPreferences(); // Save the updated preference\n      } else {\n        students.value = [];\n      }\n    });\n\n    // Add clearFilters function\n    const clearFilters = async () => {\n      // Reset all filter values\n      selectedYear.value = '';\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      currentPage.value = 1;\n      \n      // Clear students array to avoid showing stale data\n      students.value = [];\n      assessments.value = [];\n      \n      // Remove preferences from localStorage\n      localStorage.removeItem('classRecordPreferences');\n      \n      try {\n        // Then clear from backend\n        const token = store.state.auth.token;\n        const userId = store.state.auth.user?._id;\n        \n        if (userId) {\n          const emptyPreferences = {\n            selectedYear: '',\n            selectedSection: '',\n            selectedSubject: '',\n            currentPage: 1\n          };\n          \n          await api.post('/users/preferences', \n            { userId, preferences: emptyPreferences },\n            { headers: { 'Authorization': `Bearer ${token}` } }\n          );\n          \n          console.log('Preferences cleared successfully');\n        }\n      } catch (error) {\n        console.error('Error clearing preferences:', error);\n      }\n    };\n\n    // Add onMounted hook to fetch initial data\n    onMounted(async () => {\n      if (store.getters.isLoggedIn) {\n        try {\n          const token = store.state.auth.token;\n          if (!token) {\n            console.error('No auth token found');\n            router.push('/login');\n            return;\n          }\n\n          console.log('Fetching user profile...');\n          const response = await api.get('/users/profile', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          \n          console.log('User profile response:', response.data);\n          \n          if (response.data && response.data.role === 'teacher') {\n            user.value = response.data;\n            console.log('Teacher data loaded:', user.value);\n            \n            // Fetch available years first\n            await fetchAvailableYears();\n            \n            // If year is selected, fetch sections\n            if (selectedYear.value) {\n              await fetchAvailableSections();\n              \n              // If section is selected, fetch subjects\n              if (selectedSection.value) {\n                await updateTeacherSubjects();\n                \n                // If subject is selected, fetch class data and assessments\n                if (selectedSubject.value) {\n                  await Promise.all([\n                    fetchClassData(),\n                    fetchAssessments()\n                  ]);\n                }\n              }\n            }\n          } else {\n            console.error('User is not a teacher:', response.data);\n            router.push('/login');\n          }\n        } catch (error) {\n          handleApiError(error, 'onMounted');\n        }\n      } else {\n        console.log('User not logged in, redirecting to login');\n        router.push('/login');\n      }\n    })\n\n    // Add these new methods in the setup function\n    const getAssessmentBadgeClass = (type) => {\n      switch (type) {\n        case 'Quiz': return 'badge-quiz'\n        case 'Activity': return 'badge-activity'\n        case 'Performance Task': return 'badge-performance'\n        default: return ''\n      }\n    }\n\n    const getScoreClass = (percentage) => {\n      if (percentage >= 90) return 'score-excellent'\n      if (percentage >= 80) return 'score-good'\n      if (percentage >= 75) return 'score-average'\n      return 'score-poor'\n    }\n\n    // Watch for changes in section or subject\n    watch([selectedSection, selectedSubject], async () => {\n      if (selectedSection.value && selectedSubject.value) {\n        await fetchClassData()\n        await fetchAssessments()\n      }\n    })\n\n    const createChart = (chartRef, data) => {\n      // Destroy existing chart if it exists\n      if (chartRef.value) {\n        const existingChart = Chart.getChart(chartRef.value);\n        if (existingChart) {\n          existingChart.destroy();\n        }\n      }\n\n      const chartColors = {\n        Quiz: '#4e73df',\n        Activity: '#1cc88a',\n        'Performance Task': '#f6c23e'\n      };\n\n      const chartConfig = {\n        type: 'bar',\n        data: {\n          labels: data.labels,\n          datasets: [{\n            data: data.scores,\n            backgroundColor: chartColors[data.type],\n            borderRadius: 6,\n            maxBarThickness: 40,\n            borderSkipped: false\n          }]\n        },\n        options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            backgroundColor: '#fff',\n            titleColor: '#203464',\n            bodyColor: '#203464',\n            borderColor: '#e9ecef',\n            borderWidth: 1,\n            padding: 12,\n            displayColors: false,\n            callbacks: {\n              label: function(context) {\n                return `Score: ${context.parsed.y}%`;\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              color: '#6c757d',\n              font: {\n                size: 11\n              }\n            }\n          },\n          y: {\n            beginAtZero: true,\n            max: 100,\n            grid: {\n              color: '#f8f9fa',\n              drawBorder: false\n            },\n            ticks: {\n              color: '#6c757d',\n              font: {\n                size: 11,\n                callback: function(value) {\n                  return value + '%';\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n\n      return new Chart(chartRef.value, chartConfig);\n    };\n\n    const updateCharts = () => {\n      // Destroy existing charts\n      [quizChart, activityChart, performanceChart].forEach(chartRef => {\n        if (chartRef.value) {\n          const existingChart = Chart.getChart(chartRef.value);\n          if (existingChart) {\n            existingChart.destroy();\n          }\n        }\n      });\n\n      if (!selectedStudent.value) return;\n\n      const chartTypes = {\n        Quiz: quizChart,\n        Activity: activityChart,\n        'Performance Task': performanceChart\n      };\n\n      // Create new charts for each assessment type\n      Object.entries(chartTypes).forEach(([type, chartRef]) => {\n        const assessments = selectedStudent.value.assessments\n          .filter(a => a.type === type)\n          .sort((a, b) => new Date(a.date) - new Date(b.date));\n\n        if (assessments.length > 0) {\n          const data = {\n            type,\n            labels: assessments.map(a => formatDate(a.date)),\n            scores: assessments.map(a => (a.score / a.maxScore * 100).toFixed(1))\n          };\n\n          createChart(chartRef, data);\n        }\n      });\n    };\n\n    // Add these to the setup function\n    const showEditAssessmentModal = ref(false)\n    const editingAssessment = ref({\n      type: '',\n      number: '',\n      maxScore: ''\n    })\n\n    const editAssessment = (assessment) => {\n      editingAssessment.value = { ...assessment }\n      showEditAssessmentModal.value = true\n    }\n\n    const handleEditAssessment = async () => {\n      try {\n        const token = store.state.auth.token\n        const response = await api.put(\n          `/assessments/${editingAssessment.value._id}`,\n          {\n            type: editingAssessment.value.type,\n            number: editingAssessment.value.number,\n            maxScore: editingAssessment.value.maxScore\n          },\n          {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }\n        )\n\n        if (response.data) {\n          // Update the assessment in the local state\n          const index = assessments.value.findIndex(a => a._id === editingAssessment.value._id)\n          if (index !== -1) {\n            assessments.value[index] = {\n              ...response.data,\n              id: response.data._id\n            }\n          }\n\n          // Close modal and show success message\n          showEditAssessmentModal.value = false\n          alert('Assessment updated successfully!')\n        }\n      } catch (error) {\n        console.error('Failed to update assessment:', error)\n        alert('Failed to update assessment. Please try again.')\n      }\n    }\n\n    const handleDeleteAssessment = async () => {\n      if (!confirm('Are you sure you want to delete this assessment? This action cannot be undone.')) {\n        return\n      }\n\n      try {\n        const token = store.state.auth.token\n        await api.delete(\n          `/assessments/${editingAssessment.value._id}`,\n          {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }\n        )\n\n        // Remove the assessment from the local state\n        assessments.value = assessments.value.filter(a => a._id !== editingAssessment.value._id)\n        \n        // Close modal and show success message\n        showEditAssessmentModal.value = false\n        alert('Assessment deleted successfully!')\n      } catch (error) {\n        console.error('Failed to delete assessment:', error)\n        alert('Failed to delete assessment. Please try again.')\n      }\n    }\n\n    // Fetch available years for the teacher\n    const fetchAvailableYears = async () => {\n      try {\n        console.log('Starting fetchAvailableYears...');\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n\n        if (!teacherId) {\n          console.error('No teacherId available');\n          return;\n        }\n\n        console.log('Making API request for available years...');\n        const response = await api.get('/teacher-class-records', {\n          params: { teacherId },\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n\n        console.log('Available years response:', response.data);\n        // Extract unique years from teacher's records\n        const years = [...new Set(response.data.map(record => record.year))]\n        availableYears.value = years.sort()\n\n        // If no year is selected but we have years available, select the first one\n        if (!selectedYear.value && availableYears.value.length > 0) {\n          selectedYear.value = availableYears.value[0]\n        }\n      } catch (error) {\n        handleApiError(error, 'fetchAvailableYears');\n      }\n    }\n\n    // Fetch available sections for the selected year\n    const fetchAvailableSections = async () => {\n      try {\n        if (!selectedYear.value) {\n          console.log('No year selected for fetching sections');\n          availableSections.value = [];\n          return;\n        }\n\n        const teacherId = store.state.auth.user?._id;\n        const response = await api.get('/teacher-class-records/available-sections', {\n          params: { \n            teacherId,\n            year: selectedYear.value\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n\n        // Extract unique sections from teacher's records for the selected year\n        const sections = [...new Set(response.data.map(record => record.section))];\n        availableSections.value = sections.sort();\n\n        console.log('Fetched available sections:', availableSections.value);\n      } catch (error) {\n        console.error('Failed to fetch available sections:', error);\n        availableSections.value = [];\n      }\n    };\n\n    // Disable section and subject until year is selected\n    const canSelectSection = computed(() => !!selectedYear.value);\n    const canSelectSubject = computed(() => !!selectedSection.value);\n\n    // Add computed property for filtered assessments\n    const filteredAssessments = computed(() => {\n      if (!selectedStudent.value?.assessments) return [];\n\n      return selectedStudent.value.assessments.filter(assessment => {\n        // Apply type filter\n        if (selectedAssessmentType.value && assessment.type !== selectedAssessmentType.value) {\n          return false;\n        }\n\n        // Apply date filter\n        if (historyDateRange.value.start && historyDateRange.value.end) {\n          const assessmentDate = new Date(assessment.date);\n          const startDate = new Date(historyDateRange.value.start);\n          startDate.setUTCHours(0, 0, 0, 0);\n          startDate.setHours(startDate.getHours() + 8);\n          \n          const endDate = new Date(historyDateRange.value.end);\n          endDate.setUTCHours(23, 59, 59, 999);\n          endDate.setHours(endDate.getHours() + 8); // Adjust for Philippine timezone\n          \n          if (assessmentDate < startDate || assessmentDate > endDate) {\n            return false;\n          }\n        }\n\n        return true;\n      }).sort((a, b) => new Date(b.date) - new Date(a.date)); // Sort by date, newest first\n    });\n\n    // Add filter handling functions\n    const applyChartDateFilter = () => {\n      if (chartDateRange.value.start && chartDateRange.value.end) {\n        // Create charts with the new date range\n        nextTick(() => {\n          createPerformanceChart();\n        });\n      }\n      showChartDateFilter = false;\n    };\n\n    const clearChartDateFilter = () => {\n      chartDateRange.value = { \n        start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n        end: moment().format('YYYY-MM-DD')\n      };\n      \n      // Create charts with the reset date range\n      nextTick(() => {\n        createPerformanceChart();\n      });\n      \n      showChartDateFilter = false;\n    };\n\n    const applyHistoryDateFilter = () => {\n        // The filteredAssessments computed property will automatically update\n        // based on the new date range\n      showHistoryDateFilter = false;\n    };\n\n    const clearHistoryDateFilter = () => {\n      historyDateRange.value = { \n        start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n        end: moment().format('YYYY-MM-DD')\n      };\n      showHistoryDateFilter = false;\n    };\n\n    // Watch for assessment type changes\n    watch(selectedAssessmentType, () => {\n      // The computed filteredAssessments will automatically update\n    });\n\n    const handleLogout = async () => {\n      try {\n        await store.dispatch('logout')\n        router.push('/login')\n      } catch (error) {\n        console.error('Logout failed:', error)\n      }\n    }\n\n    // Add date navigation function\n    const navigateDate = (direction) => {\n      const now = moment().tz('Asia/Manila').startOf('day')\n      const newDate = moment(currentDate.value).tz('Asia/Manila').startOf('day').add(direction, 'days')\n      \n      // Only allow navigation to past dates or current date\n      if (direction < 0 || (direction > 0 && !newDate.isAfter(now, 'day'))) {\n        slideDirection.value = direction > 0 ? 'slide-left' : 'slide-right'\n        currentDate.value = newDate.toDate()\n        \n        // Refresh data for the new date\n        fetchClassData()\n        fetchAttendance()\n        \n        setTimeout(() => {\n          slideDirection.value = ''\n        }, 300)\n      }\n    }\n\n    // Format date for display\n    const formatDateForDisplay = (dateString) => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      // Adjust for Philippine timezone\n      date.setHours(date.getHours() + 8);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        timeZone: 'Asia/Manila'\n      });\n    };\n\n    const openChartDateFilter = () => {\n      showChartDateFilter.value = true\n      // Close other modals if open\n      showHistoryDateFilter.value = false\n    }\n\n    const openHistoryDateFilter = () => {\n      showHistoryDateFilter.value = true\n      // Close other modals if open\n      showChartDateFilter.value = false\n    }\n\n    const slideDirection = ref('')\n\n    // Add computed property for next day button\n    const isNextDayDisabled = computed(() => {\n      const now = moment().tz('Asia/Manila').startOf('day')\n      const selected = moment(currentDate.value).tz('Asia/Manila').startOf('day')\n      return selected.isSameOrAfter(now, 'day')\n    })\n\n    // Add this near the top of the setup function\n    const handleApiError = (error, context) => {\n      console.error(`Error in ${context}:`, error);\n      console.error('Error details:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      \n      if (error.response?.status === 401) {\n        store.dispatch('logout');\n        router.push('/login');\n      }\n    };\n\n    // Add new method to fetch available years and sections\n    const fetchAvailableYearsAndSections = async () => {\n      try {\n        const token = store.state.auth.token;\n        \n        console.log('Fetching available years and sections...');\n        \n        // Use the available-years-sections endpoint\n        const response = await api.get('/students/available-years-sections', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n\n        console.log('API Response:', response.data);\n\n        if (response.data) {\n          // Set available years and sections from the response\n          availableYears.value = response.data.years || [];\n          availableSections.value = response.data.sections || [];\n          \n          // Use sectionsByYear from the API response\n          if (response.data.sectionsByYear) {\n            sectionsByYear.value = response.data.sectionsByYear;\n          } else {\n            sectionsByYear.value = {};\n          }\n          \n          // If no years are available, add default values\n          if (availableYears.value.length === 0) {\n            availableYears.value = ['1st', '2nd', '3rd', '4th'];\n            console.log('No years found, using default values:', availableYears.value);\n          }\n          \n          // If no sections are available, add default values\n          if (availableSections.value.length === 0) {\n            availableSections.value = ['South 1', 'South 2', 'South 3'];\n            console.log('No sections found, using default values:', availableSections.value);\n          }\n          \n          // If sectionsByYear is empty, create a default mapping\n          if (Object.keys(sectionsByYear.value).length === 0) {\n            const defaultYears = ['1st', '2nd', '3rd', '4th'];\n            const defaultSections = ['South 1', 'South 2', 'South 3'];\n            \n            defaultYears.forEach(year => {\n              sectionsByYear.value[year] = defaultSections;\n            });\n            \n            console.log('No sections by year found, using default mapping:', sectionsByYear.value);\n          }\n          \n          console.log('Available years:', availableYears.value);\n          console.log('Available sections:', availableSections.value);\n          console.log('Sections by year:', sectionsByYear.value);\n        }\n      } catch (error) {\n        console.error('Failed to fetch available years and sections:', error);\n        \n        // Set default values in case of error\n        availableYears.value = ['1st', '2nd', '3rd', '4th'];\n        availableSections.value = ['South 1', 'South 2', 'South 3'];\n        \n        // Create default sectionsByYear mapping\n        sectionsByYear.value = {\n          '1st': ['South 1', 'South 2', 'South 3'],\n          '2nd': ['South 1', 'South 2', 'South 3'],\n          '3rd': ['South 1', 'South 2', 'South 3'],\n          '4th': ['South 1', 'South 2', 'South 3']\n        };\n        \n        console.log('Using default values due to error');\n      }\n    };\n\n    // Add method to fetch teacher subjects\n    const fetchTeacherSubjects = async () => {\n      try {\n        const token = store.state.auth.token;\n        const teacherId = store.state.auth.user?._id;\n        \n        console.log('Fetching teacher subjects...');\n\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          teacherSubjects.value = [];\n          return;\n        }\n\n        const response = await api.get('/users/profile', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n\n        console.log('Teacher profile response:', response.data);\n\n        if (response.data && response.data.subjects && response.data.subjects.length > 0) {\n          teacherSubjects.value = response.data.subjects.sort();\n          console.log('Fetched teacher subjects:', teacherSubjects.value);\n        } else {\n          console.log('No subjects found in teacher profile');\n          teacherSubjects.value = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch teacher subjects:', error);\n        teacherSubjects.value = [];\n      }\n    };\n\n    // Helper function to set default subjects based on teaching year\n    const setDefaultSubjects = () => {\n      const year = user.value?.teachingYear || '1st';\n      console.log('Setting default subjects for teaching year:', year);\n      \n      switch (year) {\n        case '1st':\n          teacherSubjects.value = ['ITE 100', 'ITE 101', 'ITE 102', 'ITE 103'];\n          break;\n        case '2nd':\n          teacherSubjects.value = ['ITE 200', 'ITE 201', 'ITE 202', 'ITE 203'];\n          break;\n        case '3rd':\n          teacherSubjects.value = ['ITE 301', 'ITE 302', 'ITE 303', 'ITE 304'];\n          break;\n        case '4th':\n          teacherSubjects.value = ['ITE 400', 'ITE 401', 'ITE 402', 'ITE 403', 'ITE 404'];\n          break;\n        default:\n          teacherSubjects.value = [\n            'ITE 100', 'ITE 101', 'ITE 102', 'ITE 103',\n            'ITE 200', 'ITE 201', 'ITE 202', 'ITE 203',\n            'ITE 301', 'ITE 302', 'ITE 303', 'ITE 304',\n            'ITE 400', 'ITE 401', 'ITE 402', 'ITE 403', 'ITE 404'\n          ];\n      }\n      \n      console.log('Default subjects set:', teacherSubjects.value);\n    };\n\n    // Modify the existing showAddStudentRecordModal watcher or toggle function\n    const openAddStudentRecordModal = async () => {\n      // Reset form fields\n      newStudentRecord.value = {\n        year: '',\n        section: '',\n        subject: ''\n      };\n      \n      console.log('Opening Add Student Record modal');\n      \n      try {\n        // Fetch available options\n        await fetchAvailableYearsAndSections();\n        await fetchTeacherSubjects();\n        \n        console.log('Form reset and data fetched, opening modal');\n        \n        // Log available options for debugging\n        console.log('- Years:', availableYears.value);\n        console.log('- Sections by year:', sectionsByYear.value);\n        console.log('- Subjects:', teacherSubjects.value);\n        \n        // Always open the modal, even if no options are available\n        showAddStudentRecordModal.value = true;\n      } catch (error) {\n        console.error('Error preparing Add Student Record modal:', error);\n        alert('Failed to prepare the Add Student Record form. Please try again.');\n      }\n    };\n\n    // Add computed property for filtered sections based on selected year\n    const filteredSections = computed(() => {\n      if (!newStudentRecord.value.year) return [];\n      \n      console.log('Filtering sections for year:', newStudentRecord.value.year);\n      console.log('Available sections by year:', sectionsByYear.value);\n      \n      const sections = sectionsByYear.value[newStudentRecord.value.year] || [];\n      console.log('Filtered sections:', sections);\n      \n      return sections;\n    });\n\n    // Watch for year changes to reset section\n    watch(() => newStudentRecord.value.year, (newYear) => {\n      newStudentRecord.value.section = '';\n    });\n\n    // Add auto date update interval\n    let dateUpdateInterval = null\n\n    // Add function to check and update date at midnight\n    const setupDateAutoUpdate = () => {\n      const checkAndUpdateDate = () => {\n        const now = moment().tz('Asia/Manila')\n        const current = moment(currentDate.value).tz('Asia/Manila')\n        \n        // If it's past midnight and we're showing yesterday's date\n        if (now.isAfter(current, 'day')) {\n          currentDate.value = now.toDate()\n          fetchClassData()\n          fetchAttendance()\n        }\n      }\n\n      // Clear existing interval if any\n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval)\n      }\n\n      // Check every minute\n      dateUpdateInterval = setInterval(checkAndUpdateDate, 60000)\n    }\n\n    // Add attendance-related state and functions\n    const attendanceRecords = ref([])\n    const attendanceStatistics = ref(null)\n\n    const fetchAttendance = async () => {\n      try {\n        if (!selectedSection.value || !selectedSubject.value) {\n          console.log('fetchAttendance: Missing required filters', {\n            section: selectedSection.value,\n            subject: selectedSubject.value\n          });\n          return;\n        }\n\n        console.log('fetchAttendance: Fetching attendance data with filters', {\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          date: moment(currentDate.value).tz('Asia/Manila').format('YYYY-MM-DD')\n        });\n        const date = moment(currentDate.value).tz('Asia/Manila').format('YYYY-MM-DD')\n        const response = await api.get(`/attendance/date/${date}`, {\n          params: {\n            subject: selectedSubject.value,\n            section: selectedSection.value\n          },\n          headers: { 'Authorization': `Bearer ${store.state.auth.token}` }\n        })\n\n        attendanceRecords.value = response.data\n      } catch (error) {\n        console.error('Error fetching attendance:', error)\n      }\n    }\n\n    // Add attendance chart creation\n    const createAttendanceChart = () => {\n      // This function is no longer needed as attendance is handled in the Attendance.vue page\n      console.log('Attendance functionality moved to Attendance.vue page');\n    }\n\n    // Add cleanup on component unmount\n    onUnmounted(() => {\n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval)\n      }\n    })\n\n    // Update onMounted to include new initialization\n    onMounted(async () => {\n      if (store.getters.isLoggedIn) {\n        try {\n          await fetchUserProfile()\n          await fetchTeacherSubjects()\n          setupDateAutoUpdate()\n        } catch (error) {\n          handleApiError(error, 'component mount')\n        }\n      } else {\n        router.push('/login')\n      }\n    })\n\n    const syncStudentRecords = async () => {\n      try {\n        if (!selectedYear.value || !selectedSection.value) {\n          alert('Please select a year and section first');\n          return;\n        }\n\n        const response = await api.post(\n          '/teacher-class-records/sync-records',\n          {\n            year: selectedYear.value,\n            section: selectedSection.value\n          },\n          {\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n\n        if (response.data.success) {\n          // Refresh the data after sync\n          await fetchClassData();\n          await fetchAttendance();\n          alert('Student records synchronized successfully!');\n        }\n      } catch (error) {\n        console.error('Failed to sync student records:', error);\n        alert('Failed to sync student records. Please try again.');\n      }\n    };\n\n    // Add redirection method\n    const redirectToAttendance = () => {\n      if (!selectedYear.value || !selectedSection.value || !selectedSubject.value) {\n        alert('Please select a year, section, and subject first');\n        return;\n      }\n      router.push({\n        name: 'Attendance',\n        query: {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value\n        }\n      });\n    };\n\n    // Add pagination state\n    const currentPage = ref(1)\n    const itemsPerPage = 25\n\n    // Compute total pages\n    const totalPages = computed(() => Math.ceil(sortedStudents.value.length / itemsPerPage))\n\n    // Get paginated students\n    const paginatedStudents = computed(() => {\n      const start = (currentPage.value - 1) * itemsPerPage\n      const end = start + itemsPerPage\n      return sortedStudents.value.slice(start, end)\n    })\n\n    // Compute pagination info\n    const paginationInfo = computed(() => {\n      const start = sortedStudents.value.length === 0 ? 0 : (currentPage.value - 1) * itemsPerPage + 1\n      const end = Math.min(start + itemsPerPage - 1, sortedStudents.value.length)\n      return { start, end }\n    })\n\n    // Pagination methods\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++\n        saveUserPreferences(); // Save the updated page\n      }\n    }\n\n    const previousPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--\n        saveUserPreferences(); // Save the updated page\n      }\n    }\n\n    // Reset pagination when filters change\n    watch([searchQuery, selectedYear, selectedSection, selectedSubject], () => {\n      currentPage.value = 1\n      // No need to save here as the filter change will trigger the filter watcher\n    })\n\n    // Add chart instances\n    let quizChartInstance = null;\n    let activityChartInstance = null;\n    let performanceChartInstance = null;\n\n    // Helper function to destroy chart\n    const destroyChart = (chartInstance, canvasRef) => {\n      try {\n        // Destroy the chart instance if it exists\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n        \n        // Clear any existing chart from the canvas\n        if (canvasRef && canvasRef.value) {\n          const existingChart = Chart.getChart(canvasRef.value);\n          if (existingChart) {\n            existingChart.destroy();\n          }\n          \n          // Clear any \"no data\" messages\n          const container = canvasRef.value.parentElement;\n          if (container) {\n            // Preserve the canvas but remove other elements\n            const canvas = canvasRef.value;\n            container.innerHTML = '';\n            if (canvas) {\n              container.appendChild(canvas);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error destroying chart:', error);\n      }\n    };\n\n    // Handle date filter change from the modal\n    const handleDateFilterChange = (dateFilter) => {\n      console.log('Date filter changed:', dateFilter);\n      \n      // Update chart date range\n      if (dateFilter.start) {\n        chartDateRange.value.start = dateFilter.start;\n        historyDateRange.value.start = dateFilter.start;\n      }\n      \n      if (dateFilter.end) {\n        chartDateRange.value.end = dateFilter.end;\n        historyDateRange.value.end = dateFilter.end;\n      }\n      \n      // Recreate charts with the new date range\n      nextTick(() => {\n        createPerformanceChart();\n        // The assessment history table will be updated by createPerformanceChart\n      });\n    };\n\n    // Handle assessment type change from the modal\n    const handleAssessmentTypeChange = (type) => {\n      console.log('Assessment type changed:', type);\n      \n      // Update the selected assessment type\n      selectedAssessmentType.value = type;\n      \n      // Recreate charts with the new assessment type\n      nextTick(() => {\n        createPerformanceChart();\n      });\n    };\n\n    // Create performance chart function\n    const createPerformanceChart = () => {\n      if (!selectedStudent.value) {\n        console.error('No student selected, cannot create performance chart');\n        return;\n      }\n\n      console.log('Creating performance charts for student:', selectedStudent.value.studentNumber);\n      console.log('Selected assessment type:', selectedAssessmentType.value);\n      console.log('Date range:', chartDateRange.value);\n\n      // Group assessments by type\n      const assessmentsByType = {\n        'Quiz': [],\n        'Activity': [],\n        'Performance Task': []\n      };\n\n      // Process assessments if they exist\n      if (selectedStudent.value.assessments && selectedStudent.value.assessments.length > 0) {\n        console.log(`Processing ${selectedStudent.value.assessments.length} assessments for charts`);\n        \n        selectedStudent.value.assessments.forEach(assessment => {\n          if (assessment && assessment.type in assessmentsByType) {\n            // Get the score for this student\n            const studentNumber = selectedStudent.value.studentNumber;\n            let scoreValue = null;\n            \n            // Check if scores is a Map or an object\n            if (assessment.scores) {\n              if (assessment.scores instanceof Map) {\n                scoreValue = assessment.scores.get(studentNumber);\n              } else if (typeof assessment.scores === 'object') {\n                scoreValue = assessment.scores[studentNumber];\n              }\n            }\n            \n            // If score is not found in assessment.scores, check student.scores\n            if ((scoreValue === null || scoreValue === undefined) && \n                selectedStudent.value.scores && \n                (assessment._id in selectedStudent.value.scores || assessment.id in selectedStudent.value.scores)) {\n              scoreValue = selectedStudent.value.scores[assessment._id] || selectedStudent.value.scores[assessment.id];\n            }\n            \n            // Only include assessments with scores\n            if (scoreValue !== null && scoreValue !== undefined) {\n              const maxScore = assessment.maxScore || 100;\n              const scorePercentage = (scoreValue / maxScore) * 100;\n              \n              // Apply date filter if set\n              const assessmentDate = new Date(assessment.date);\n              const startDate = chartDateRange.value.start ? new Date(chartDateRange.value.start) : null;\n              const endDate = chartDateRange.value.end ? new Date(chartDateRange.value.end) : null;\n              \n              // Skip if outside date range\n              if ((startDate && assessmentDate < startDate) || \n                  (endDate && assessmentDate > endDate)) {\n                console.log(`Skipping assessment ${assessment.type} #${assessment.number} due to date filter`);\n                return;\n              }\n              \n              console.log(`Including assessment ${assessment.type} #${assessment.number}: Score=${scoreValue}/${maxScore} (${scorePercentage.toFixed(1)}%)`);\n              \n              assessmentsByType[assessment.type].push({\n                date: assessment.date,\n                score: scorePercentage,\n                rawScore: scoreValue,\n                maxScore: maxScore,\n                number: assessment.number,\n                title: `${assessment.type} #${assessment.number}`\n              });\n            }\n          }\n        });\n      }\n\n      // Log the grouped assessments for debugging\n      Object.keys(assessmentsByType).forEach(type => {\n        console.log(`${type} assessments: ${assessmentsByType[type].length}`);\n      });\n\n      // Create charts for each type using the new chart IDs\n      const chartIdBase = `performanceChart-${selectedStudent.value.studentNumber}`;\n      \n      // First, clean up any existing charts\n      const chartIds = [\n        `all-${chartIdBase}`,\n        `quiz-${chartIdBase}`,\n        `activity-${chartIdBase}`,\n        `performance-${chartIdBase}`\n      ];\n      \n      chartIds.forEach(id => {\n        const chartElement = document.getElementById(id);\n        if (chartElement) {\n          const existingChart = Chart.getChart(chartElement);\n          if (existingChart) {\n            console.log(`Destroying existing chart: ${id}`);\n            existingChart.destroy();\n          }\n        }\n      });\n      \n      // Update the assessment history table with the filtered data\n      updateAssessmentHistoryTable(assessmentsByType);\n      \n      // Create \"All\" chart that combines all assessment types\n      if (selectedAssessmentType.value === 'All') {\n        const allChartElement = document.getElementById(`all-${chartIdBase}`);\n        if (allChartElement) {\n          const ctx = allChartElement.getContext('2d');\n          if (ctx) {\n            // Combine all assessment types into one dataset\n            const allAssessments = [\n              ...assessmentsByType['Quiz'].map(item => ({ ...item, type: 'Quiz' })),\n              ...assessmentsByType['Activity'].map(item => ({ ...item, type: 'Activity' })),\n              ...assessmentsByType['Performance Task'].map(item => ({ ...item, type: 'Performance Task' }))\n            ].sort((a, b) => new Date(a.date) - new Date(b.date));\n            \n            if (allAssessments.length === 0) {\n              // Display no data message\n              const container = allChartElement.parentElement;\n              if (container) {\n                container.innerHTML = '';\n                const noDataMessage = document.createElement('div');\n                noDataMessage.className = 'text-center py-5 text-muted';\n                noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No assessment data available for this student in the selected date range.';\n                container.appendChild(noDataMessage);\n              }\n            } else {\n              // Create datasets for each type\n              const datasets = [\n                {\n                  label: 'Quiz',\n                  data: allAssessments.filter(item => item.type === 'Quiz').map(item => ({ x: new Date(item.date), y: item.score })),\n                  borderColor: '#4285F4',\n                  backgroundColor: 'rgba(66, 133, 244, 0.1)',\n                  borderWidth: 2,\n                  tension: 0.4,\n                  pointBackgroundColor: '#4285F4',\n                  pointBorderColor: '#fff',\n                  pointRadius: 5\n                },\n                {\n                  label: 'Activity',\n                  data: allAssessments.filter(item => item.type === 'Activity').map(item => ({ x: new Date(item.date), y: item.score })),\n                  borderColor: '#34A853',\n                  backgroundColor: 'rgba(52, 168, 83, 0.1)',\n                  borderWidth: 2,\n                  tension: 0.4,\n                  pointBackgroundColor: '#34A853',\n                  pointBorderColor: '#fff',\n                  pointRadius: 5\n                },\n                {\n                  label: 'Performance Task',\n                  data: allAssessments.filter(item => item.type === 'Performance Task').map(item => ({ x: new Date(item.date), y: item.score })),\n                  borderColor: '#FBBC05',\n                  backgroundColor: 'rgba(251, 188, 5, 0.1)',\n                  borderWidth: 2,\n                  tension: 0.4,\n                  pointBackgroundColor: '#FBBC05',\n                  pointBorderColor: '#fff',\n                  pointRadius: 5\n                }\n              ].filter(dataset => dataset.data.length > 0); // Only include datasets with data\n              \n              // Create the combined chart\n              new Chart(ctx, {\n                type: 'line',\n                data: { datasets },\n                options: {\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    x: {\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        displayFormats: {\n                          day: 'MMM D, YYYY'\n                        },\n                        tooltipFormat: 'MMM D, YYYY'\n                      },\n                      adapters: {\n                        date: {\n                          locale: 'en'\n                        }\n                      },\n                      title: {\n                        display: true,\n                        text: 'Date'\n                      },\n                      grid: {\n                        display: false\n                      },\n                      ticks: {\n                        font: {\n                          size: 12,\n                          weight: 'bold'\n                        },\n                        padding: 10\n                      }\n                    },\n                    y: {\n                      beginAtZero: true,\n                      max: 100,\n                      title: {\n                        display: true,\n                        text: 'Score (%)'\n                      },\n                      ticks: {\n                        callback: value => value + '%'\n                      }\n                    }\n                  },\n                  plugins: {\n                    tooltip: {\n                      callbacks: {\n                        title: (context) => {\n                          return moment(context[0].parsed.x).format('MMMM D, YYYY');\n                        },\n                        label: (context) => {\n                          const datasetLabel = context.dataset.label;\n                          const value = context.parsed.y;\n                          return `${datasetLabel}: ${value.toFixed(1)}%`;\n                        }\n                      }\n                    },\n                    legend: {\n                      position: 'top'\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n      \n      // Create Quiz chart\n      if (selectedAssessmentType.value === 'Quiz') {\n        const quizChartElement = document.getElementById(`quiz-${chartIdBase}`);\n        if (quizChartElement) {\n          const ctx = quizChartElement.getContext('2d');\n          if (ctx) {\n            const data = assessmentsByType['Quiz'].sort((a, b) => new Date(a.date) - new Date(b.date));\n            \n            if (data.length === 0) {\n              // Display no data message\n              const container = quizChartElement.parentElement;\n              if (container) {\n                container.innerHTML = '';\n                const noDataMessage = document.createElement('div');\n                noDataMessage.className = 'text-center py-5 text-muted';\n                noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No quiz data available for this student in the selected date range.';\n                container.appendChild(noDataMessage);\n              }\n            } else {\n              // Create time series data\n              const timeSeriesData = data.map(item => ({\n                x: new Date(item.date),\n                y: item.score,\n                rawScore: item.rawScore,\n                maxScore: item.maxScore,\n                number: item.number\n              }));\n              \n              // Create chart\n              new Chart(ctx, {\n                type: 'line',\n                data: {\n                  datasets: [{\n                    label: 'Quiz Scores',\n                    data: timeSeriesData,\n                    borderColor: '#4285F4',\n                    backgroundColor: 'rgba(66, 133, 244, 0.1)',\n                    borderWidth: 2,\n                    tension: 0.4,\n                    fill: true,\n                    pointBackgroundColor: '#4285F4',\n                    pointBorderColor: '#fff',\n                    pointRadius: 5\n                  }]\n                },\n                options: {\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    x: {\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        displayFormats: {\n                          day: 'MMM D, YYYY'\n                        },\n                        tooltipFormat: 'MMM D, YYYY'\n                      },\n                      adapters: {\n                        date: {\n                          locale: 'en'\n                        }\n                      },\n                      title: {\n                        display: true,\n                        text: 'Date'\n                      },\n                      grid: {\n                        display: false\n                      }\n                    },\n                    y: {\n                      beginAtZero: true,\n                      max: 100,\n                      title: {\n                        display: true,\n                        text: 'Score (%)'\n                      },\n                      ticks: {\n                        callback: value => value + '%'\n                      }\n                    }\n                  },\n                  plugins: {\n                    tooltip: {\n                      callbacks: {\n                        title: (context) => {\n                          return moment(context[0].parsed.x).format('MMMM D, YYYY');\n                        },\n                        label: (context) => {\n                          const item = context.raw;\n                          return [\n                            `Quiz #${item.number}`,\n                            `Score: ${item.rawScore}/${item.maxScore} (${item.y.toFixed(1)}%)`\n                          ];\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n\n      // Create Activity chart\n      if (selectedAssessmentType.value === 'Activity') {\n        const activityChartElement = document.getElementById(`activity-${chartIdBase}`);\n        if (activityChartElement) {\n          const ctx = activityChartElement.getContext('2d');\n          if (ctx) {\n            const data = assessmentsByType['Activity'].sort((a, b) => new Date(a.date) - new Date(b.date));\n            \n            if (data.length === 0) {\n              // Display no data message\n              const container = activityChartElement.parentElement;\n              if (container) {\n                container.innerHTML = '';\n                const noDataMessage = document.createElement('div');\n                noDataMessage.className = 'text-center py-5 text-muted';\n                noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No activity data available for this student in the selected date range.';\n                container.appendChild(noDataMessage);\n              }\n            } else {\n              // Create time series data\n              const timeSeriesData = data.map(item => ({\n                x: new Date(item.date),\n                y: item.score,\n                rawScore: item.rawScore,\n                maxScore: item.maxScore,\n                number: item.number\n              }));\n              \n              // Create chart\n              new Chart(ctx, {\n                type: 'line',\n                data: {\n                  datasets: [{\n                    label: 'Activity Scores',\n                    data: timeSeriesData,\n                    borderColor: '#34A853',\n                    backgroundColor: 'rgba(52, 168, 83, 0.1)',\n                    borderWidth: 2,\n                    tension: 0.4,\n                    fill: true,\n                    pointBackgroundColor: '#34A853',\n                    pointBorderColor: '#fff',\n                    pointRadius: 5\n                  }]\n                },\n                options: {\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    x: {\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        displayFormats: {\n                          day: 'MMM D, YYYY'\n                        },\n                        tooltipFormat: 'MMM D, YYYY'\n                      },\n                      adapters: {\n                        date: {\n                          locale: 'en'\n                        }\n                      },\n                      title: {\n                        display: true,\n                        text: 'Date'\n                      },\n                      grid: {\n                        display: false\n                      }\n                    },\n                    y: {\n                      beginAtZero: true,\n                      max: 100,\n                      title: {\n                        display: true,\n                        text: 'Score (%)'\n                      },\n                      ticks: {\n                        callback: value => value + '%'\n                      }\n                    }\n                  },\n                  plugins: {\n                    tooltip: {\n                      callbacks: {\n                        title: (context) => {\n                          return moment(context[0].parsed.x).format('MMMM D, YYYY');\n                        },\n                        label: (context) => {\n                          const item = context.raw;\n                          return [\n                            `Activity #${item.number}`,\n                            `Score: ${item.rawScore}/${item.maxScore} (${item.y.toFixed(1)}%)`\n                          ];\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n\n      // Create Performance Task chart\n      if (selectedAssessmentType.value === 'Performance Task') {\n        const performanceChartElement = document.getElementById(`performance-${chartIdBase}`);\n        if (performanceChartElement) {\n          const ctx = performanceChartElement.getContext('2d');\n          if (ctx) {\n            const data = assessmentsByType['Performance Task'].sort((a, b) => new Date(a.date) - new Date(b.date));\n            \n            if (data.length === 0) {\n              // Display no data message\n              const container = performanceChartElement.parentElement;\n              if (container) {\n                container.innerHTML = '';\n                const noDataMessage = document.createElement('div');\n                noDataMessage.className = 'text-center py-5 text-muted';\n                noDataMessage.innerHTML = '<i class=\"fas fa-info-circle me-2\"></i>No performance task data available for this student in the selected date range.';\n                container.appendChild(noDataMessage);\n              }\n            } else {\n              // Create time series data\n              const timeSeriesData = data.map(item => ({\n                x: new Date(item.date),\n                y: item.score,\n                rawScore: item.rawScore,\n                maxScore: item.maxScore,\n                number: item.number\n              }));\n              \n              // Create chart\n              new Chart(ctx, {\n                type: 'line',\n                data: {\n                  datasets: [{\n                    label: 'Performance Task Scores',\n                    data: timeSeriesData,\n                    borderColor: '#FBBC05',\n                    backgroundColor: 'rgba(251, 188, 5, 0.1)',\n                    borderWidth: 2,\n                    tension: 0.4,\n                    fill: true,\n                    pointBackgroundColor: '#FBBC05',\n                    pointBorderColor: '#fff',\n                    pointRadius: 5\n                  }]\n                },\n                options: {\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    x: {\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        displayFormats: {\n                          day: 'MMM D, YYYY'\n                        },\n                        tooltipFormat: 'MMM D, YYYY'\n                      },\n                      adapters: {\n                        date: {\n                          locale: 'en'\n                        }\n                      },\n                      title: {\n                        display: true,\n                        text: 'Date'\n                      },\n                      grid: {\n                        display: false\n                      }\n                    },\n                    y: {\n                      beginAtZero: true,\n                      max: 100,\n                      title: {\n                        display: true,\n                        text: 'Score (%)'\n                      },\n                      ticks: {\n                        callback: value => value + '%'\n                      }\n                    }\n                  },\n                  plugins: {\n                    tooltip: {\n                      callbacks: {\n                        title: (context) => {\n                          return moment(context[0].parsed.x).format('MMMM D, YYYY');\n                        },\n                        label: (context) => {\n                          const item = context.raw;\n                          return [\n                            `Performance Task #${item.number}`,\n                            `Score: ${item.rawScore}/${item.maxScore} (${item.y.toFixed(1)}%)`\n                          ];\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n    };\n\n    // Helper function to create individual charts\n    const createChartInstance = (ctx, type, data) => {\n      if (!ctx) return null;\n\n      // Generate a unique ID for the chart\n      const chartId = `${type.toLowerCase()}-${Date.now()}`;\n      ctx.canvas.id = chartId;\n\n      if (data.length === 0) {\n        try {\n          // Find the parent container safely\n          const canvas = ctx.canvas;\n          if (!canvas) return null;\n          \n          const container = canvas.parentElement;\n          if (!container) return null;\n          \n          // Create a wrapper div for the message\n          const messageWrapper = document.createElement('div');\n          messageWrapper.className = 'text-center py-4 text-muted';\n          messageWrapper.innerHTML = `<i class=\"fas fa-info-circle me-2\"></i>No ${type.toLowerCase()} data available`;\n          \n          // Clear the container and append the message\n          container.innerHTML = '';\n          container.appendChild(messageWrapper);\n          \n          return null;\n        } catch (error) {\n          console.error('Error displaying no data message:', error);\n          return null;\n        }\n      }\n\n      // Define chart colors based on type\n      const getChartColors = (type) => {\n        switch(type) {\n          case 'Quiz':\n            return {\n              gradient: ['rgba(66, 133, 244, 0.8)', 'rgba(66, 133, 244, 0.1)'],\n              border: '#4285F4',\n              point: '#4285F4',\n              pointHover: '#3367D6'\n            };\n          case 'Activity':\n            return {\n              gradient: ['rgba(52, 168, 83, 0.8)', 'rgba(52, 168, 83, 0.1)'],\n              border: '#34A853',\n              point: '#34A853',\n              pointHover: '#2E7D32'\n            };\n          case 'Performance Task':\n            return {\n              gradient: ['rgba(251, 188, 5, 0.8)', 'rgba(251, 188, 5, 0.1)'],\n              border: '#FBBC05',\n              point: '#FBBC05',\n              pointHover: '#F57F17'\n            };\n          default:\n            return {\n              gradient: ['rgba(66, 133, 244, 0.8)', 'rgba(66, 133, 244, 0.1)'],\n              border: '#4285F4',\n              point: '#4285F4',\n              pointHover: '#3367D6'\n            };\n        }\n      };\n\n      const colors = getChartColors(type);\n      \n      // Create gradient for background\n      const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n      gradient.addColorStop(0, colors.gradient[0]);\n      gradient.addColorStop(1, colors.gradient[1]);\n\n      // Convert data to time series format\n      const timeSeriesData = data.map(item => ({\n        x: new Date(item.date),\n        y: item.score\n      }));\n\n      return new Chart(ctx, {\n        type: 'line',\n        data: {\n          datasets: [{\n            label: `${type} Scores`,\n            data: timeSeriesData,\n            borderColor: colors.border,\n            backgroundColor: gradient,\n            borderWidth: 3,\n            tension: 0.4,\n            fill: true,\n            pointBackgroundColor: colors.point,\n            pointBorderColor: '#fff',\n            pointBorderWidth: 2,\n            pointRadius: 5,\n            pointHoverRadius: 7,\n            pointHoverBackgroundColor: colors.pointHover,\n            pointHoverBorderColor: '#fff',\n            pointHoverBorderWidth: 2\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animations: {\n            tension: {\n              duration: 1000,\n              easing: 'linear',\n              from: 0.4,\n              to: 0.4,\n              loop: false\n            }\n          },\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'day',\n                displayFormats: {\n                  day: 'MMM D, YYYY'\n                },\n                tooltipFormat: 'MMM D, YYYY'\n              },\n              adapters: {\n                date: {\n                  locale: 'en'\n                }\n              },\n              title: {\n                display: true,\n                text: 'Date'\n              },\n              grid: {\n                display: false\n              },\n              ticks: {\n                font: {\n                  size: 12,\n                  weight: 'bold'\n                },\n                padding: 10\n              }\n            },\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)',\n                borderDash: [5, 5]\n              },\n              ticks: {\n                font: {\n                  size: 12,\n                  weight: 'bold'\n                },\n                padding: 10,\n                callback: value => value + '%'\n              },\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                boxWidth: 15,\n                padding: 15,\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            tooltip: {\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 15,\n              cornerRadius: 8,\n              displayColors: false,\n              callbacks: {\n                title: (tooltipItems) => {\n                  return moment(tooltipItems[0].parsed.x).format('MMMM D, YYYY');\n                },\n                label: (context) => {\n                  const index = context.dataIndex;\n                  const item = data[index];\n                  return [\n                    `${type} #${item.number}`,\n                    `Score: ${item.rawScore}/${item.maxScore} (${item.score.toFixed(1)}%)`\n                  ];\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Clean up charts when component unmounts\n    onUnmounted(() => {\n      // Clean up all charts\n      const chartIdBase = selectedStudent.value ? `performanceChart-${selectedStudent.value.studentNumber}` : '';\n      \n      if (chartIdBase) {\n        // Destroy all charts\n        const chartIds = [\n          `all-${chartIdBase}`,\n          `quiz-${chartIdBase}`,\n          `activity-${chartIdBase}`,\n          `performance-${chartIdBase}`\n        ];\n        \n        chartIds.forEach(id => {\n          const chartElement = document.getElementById(id);\n          if (chartElement) {\n            const chart = Chart.getChart(chartElement);\n            if (chart) {\n              chart.destroy();\n            }\n          }\n        });\n      }\n    });\n\n    // Watch for changes in selected student to update charts\n    watch(selectedStudent, () => {\n      if (selectedStudent.value) {\n        nextTick(() => {\n          createPerformanceChart();\n        });\n      } else {\n        // Clean up all charts when student is deselected\n        const chartIdBase = `performanceChart-${selectedStudent.value?.studentNumber}`;\n        \n        if (chartIdBase) {\n          // Destroy all charts\n          const chartIds = [\n            `all-${chartIdBase}`,\n            `quiz-${chartIdBase}`,\n            `activity-${chartIdBase}`,\n            `performance-${chartIdBase}`\n          ];\n          \n          chartIds.forEach(id => {\n            const chartElement = document.getElementById(id);\n            if (chartElement) {\n              const chart = Chart.getChart(chartElement);\n              if (chart) {\n                chart.destroy();\n              }\n            }\n          });\n        }\n      }\n    });\n\n    // Watch for changes in date range to update charts\n    watch([chartDateRange, historyDateRange], () => {\n      if (selectedStudent.value) {\n        nextTick(() => {\n          createPerformanceChart();\n        });\n      }\n    });\n\n    // Watch for changes in current date to refresh data\n    watch(currentDate, async () => {\n      await fetchAssessments();\n      if (selectedStudent.value) {\n        await viewStudentDetails(selectedStudent.value);\n      }\n    });\n\n    // Function to fetch user preferences from the API\n    const fetchUserPreferences = async () => {\n      try {\n        console.log('Fetching user preferences...');\n        \n        // First try to get from localStorage\n        const localPrefs = localStorage.getItem('classRecordPreferences');\n        let localPrefsObj = null;\n        \n        if (localPrefs) {\n          try {\n            localPrefsObj = JSON.parse(localPrefs);\n            console.log('Found preferences in localStorage:', localPrefsObj);\n            \n            // Apply local preferences first\n            if (localPrefsObj.selectedYear) selectedYear.value = localPrefsObj.selectedYear;\n            if (localPrefsObj.selectedSection) selectedSection.value = localPrefsObj.selectedSection;\n            if (localPrefsObj.selectedSubject) selectedSubject.value = localPrefsObj.selectedSubject;\n            if (localPrefsObj.currentPage) currentPage.value = parseInt(localPrefsObj.currentPage) || 1;\n          } catch (parseError) {\n            console.error('Error parsing localStorage preferences:', parseError);\n            localStorage.removeItem('classRecordPreferences');\n          }\n        } else {\n          console.log('No preferences found in localStorage');\n        }\n\n        // Then try to get from backend\n        const token = store.state.auth.token;\n        const userId = store.state.auth.user?._id;\n        \n        if (!userId) {\n          console.error('User ID not available for fetching preferences');\n          return;\n        }\n        \n        console.log('Fetching preferences from backend for user:', userId);\n        \n        const response = await api.get('/users/preferences', {\n          params: { userId },\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n        \n        console.log('Backend preferences response:', response.data);\n        \n        if (response.data && response.data.preferences) {\n          const prefs = response.data.preferences;\n          \n          // Update preferences if available\n          if (prefs.selectedYear) selectedYear.value = prefs.selectedYear;\n          if (prefs.selectedSection) selectedSection.value = prefs.selectedSection;\n          if (prefs.selectedSubject) selectedSubject.value = prefs.selectedSubject;\n          if (prefs.currentPage) currentPage.value = parseInt(prefs.currentPage) || 1;\n          \n          // Save to localStorage to ensure consistency\n          localStorage.setItem('classRecordPreferences', JSON.stringify(prefs));\n          console.log('Updated preferences from backend:', prefs);\n        } else {\n          console.log('No preferences found in backend, using localStorage values');\n          \n          // If we have local preferences but none from backend, save local to backend\n          if (localPrefsObj) {\n            await saveUserPreferences();\n          }\n        }\n        \n        console.log('Final preferences after fetching:', {\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          page: currentPage.value\n        });\n        \n        // Fetch data based on preferences in a specific order\n        if (selectedYear.value) {\n          console.log('Fetching sections for year:', selectedYear.value);\n          await fetchAvailableSections();\n        \n          if (selectedSection.value) {\n            console.log('Updating teacher subjects for section:', selectedSection.value);\n          await updateTeacherSubjects();\n        \n            if (selectedSubject.value) {\n              console.log('Fetching class data for subject:', selectedSubject.value);\n              // Ensure we fetch the data with the current filters\n          await fetchClassData();\n              \n              // Ensure the current page is applied after data is loaded\n              console.log('Applying saved page number:', currentPage.value);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user preferences:', error);\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n        \n        // Try to use localStorage preferences if API call fails\n        const localPrefs = localStorage.getItem('classRecordPreferences');\n        if (localPrefs) {\n          try {\n            const prefs = JSON.parse(localPrefs);\n            console.log('Falling back to localStorage preferences:', prefs);\n            \n            selectedYear.value = prefs.selectedYear || '';\n            selectedSection.value = prefs.selectedSection || '';\n            selectedSubject.value = prefs.selectedSubject || '';\n            if (prefs.currentPage) currentPage.value = parseInt(prefs.currentPage) || 1;\n            \n            // Try to fetch data with these preferences\n            if (selectedYear.value) {\n              await fetchAvailableSections();\n              \n              if (selectedSection.value) {\n                await updateTeacherSubjects();\n                \n                if (selectedSubject.value) {\n                  await fetchClassData();\n                }\n              }\n            }\n          } catch (parseError) {\n            console.error('Error parsing localStorage preferences during fallback:', parseError);\n          }\n        }\n      }\n    };\n    \n    // Function to save user preferences to the API\n    const saveUserPreferences = async () => {\n      try {\n        const token = store.state.auth.token;\n        const userId = store.state.auth.user?._id;\n        \n        if (!userId) {\n          console.error('User ID not available for saving preferences');\n          return;\n        }\n        \n        const preferences = {\n          selectedYear: selectedYear.value,\n          selectedSection: selectedSection.value,\n          selectedSubject: selectedSubject.value,\n          currentPage: currentPage.value\n        };\n\n        console.log('Saving preferences:', preferences);\n\n        // Save to localStorage first for immediate persistence\n        localStorage.setItem('classRecordPreferences', JSON.stringify(preferences));\n        \n        // Then save to backend\n        const response = await api.post('/users/preferences', \n          { userId, preferences },\n          { headers: { 'Authorization': `Bearer ${token}` } }\n        );\n        \n        console.log('User preferences saved successfully:', response.data);\n      } catch (error) {\n        console.error('Error saving user preferences:', error);\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n        \n        // Ensure localStorage is still updated even if API call fails\n        try {\n          const preferences = {\n            selectedYear: selectedYear.value,\n            selectedSection: selectedSection.value,\n            selectedSubject: selectedSubject.value,\n            currentPage: currentPage.value\n          };\n          localStorage.setItem('classRecordPreferences', JSON.stringify(preferences));\n          console.log('Preferences saved to localStorage as fallback');\n        } catch (localStorageError) {\n          console.error('Failed to save preferences to localStorage:', localStorageError);\n        }\n      }\n    };\n\n    // Update the watchers for filter changes\n    watch([selectedYear, selectedSection, selectedSubject], async ([newYear, newSection, newSubject], [oldYear, oldSection, oldSubject]) => {\n      // Save preferences whenever they change\n      await saveUserPreferences();\n      \n      // Handle year changes\n      if (newYear !== oldYear) {\n        selectedSection.value = '';\n        selectedSubject.value = '';\n        if (newYear) {\n          await fetchAvailableSections();\n        }\n      }\n      \n      // Handle section changes\n      if (newSection !== oldSection) {\n        selectedSubject.value = '';\n        if (newSection) {\n          await updateTeacherSubjects();\n        }\n      }\n      \n      // Handle subject changes\n      if (newSubject !== oldSubject && newSubject) {\n        await fetchClassData();\n      }\n    });\n\n    // Add watcher for currentPage\n    watch(currentPage, () => {\n      console.log('Current page changed to:', currentPage.value);\n      saveUserPreferences();\n    });\n\n    // Add cleanup on component unmount\n    onUnmounted(() => {\n      // Save preferences before unmounting\n      saveUserPreferences();\n      \n      // Clear intervals if any\n      if (dateUpdateInterval) {\n        clearInterval(dateUpdateInterval);\n      }\n    });\n\n    // Add a function to load the last used filters\n    const loadLastUsedFilters = async () => {\n      try {\n        console.log('Attempting to load last used filters');\n        const token = store.state.auth.token;\n        const userId = store.state.auth.user?._id;\n        \n        if (!userId) {\n          console.error('User ID not available for loading last used filters');\n          return false;\n        }\n        \n        // First check if we have any recent filters in localStorage\n        const recentFilters = localStorage.getItem('recentFilters');\n        if (recentFilters) {\n          try {\n            const filters = JSON.parse(recentFilters);\n            console.log('Found recent filters in localStorage:', filters);\n            \n            if (filters.length > 0) {\n              // Get the most recent filter\n              const mostRecent = filters[0];\n              \n              // Apply the values\n              if (mostRecent.year) selectedYear.value = mostRecent.year;\n              if (mostRecent.section) selectedSection.value = mostRecent.section;\n              if (mostRecent.subject) selectedSubject.value = mostRecent.subject;\n              \n              // Save to classRecordPreferences\n              const preferences = {\n                selectedYear: selectedYear.value,\n                selectedSection: selectedSection.value,\n                selectedSubject: selectedSubject.value,\n                currentPage: currentPage.value\n              };\n              \n              localStorage.setItem('classRecordPreferences', JSON.stringify(preferences));\n              console.log('Recent filters applied from localStorage:', preferences);\n              \n              return true;\n            }\n          } catch (parseError) {\n            console.error('Error parsing recent filters from localStorage:', parseError);\n          }\n        }\n        \n        // If no recent filters in localStorage, try to get from API\n        try {\n          // First try to get the user's teaching assignments\n          const response = await api.get('/users/teaching-assignments', {\n            params: { userId },\n            headers: { 'Authorization': `Bearer ${token}` }\n          });\n          \n          if (response.data && response.data.assignments && response.data.assignments.length > 0) {\n            // Sort by last accessed timestamp if available\n            const sortedAssignments = [...response.data.assignments].sort((a, b) => {\n              // If lastAccessed is available, use it for sorting\n              if (a.lastAccessed && b.lastAccessed) {\n                return new Date(b.lastAccessed) - new Date(a.lastAccessed);\n              }\n              return 0;\n            });\n            \n            // Use the most recently accessed assignment\n            const mostRecent = sortedAssignments[0];\n            console.log('Most recently used assignment from API:', mostRecent);\n            \n            // Apply the values\n            if (mostRecent.year) selectedYear.value = mostRecent.year;\n            if (mostRecent.section) selectedSection.value = mostRecent.section;\n            if (mostRecent.subject) selectedSubject.value = mostRecent.subject;\n            \n            // Save to localStorage\n            const preferences = {\n              selectedYear: selectedYear.value,\n              selectedSection: selectedSection.value,\n              selectedSubject: selectedSubject.value,\n              currentPage: currentPage.value\n            };\n            \n            localStorage.setItem('classRecordPreferences', JSON.stringify(preferences));\n            console.log('Last used filters applied from API:', preferences);\n            \n            // Also save to recentFilters\n            saveToRecentFilters({\n              year: selectedYear.value,\n              section: selectedSection.value,\n              subject: selectedSubject.value,\n              timestamp: new Date().toISOString()\n            });\n            \n            return true;\n          } else {\n            console.log('No teaching assignments found in API');\n            return false;\n          }\n        } catch (apiError) {\n          console.error('Error fetching teaching assignments from API:', apiError);\n          return false;\n        }\n      } catch (error) {\n        console.error('Error loading last used filters:', error);\n        return false;\n      }\n    };\n\n    // Function to save a filter combination to the recent filters list\n    const saveToRecentFilters = (filter) => {\n      try {\n        // Get existing recent filters or initialize empty array\n        const recentFiltersStr = localStorage.getItem('recentFilters');\n        let recentFilters = [];\n        \n        if (recentFiltersStr) {\n          try {\n            recentFilters = JSON.parse(recentFiltersStr);\n          } catch (parseError) {\n            console.error('Error parsing recent filters, resetting:', parseError);\n          }\n        }\n        \n        // Check if this filter combination already exists\n        const existingIndex = recentFilters.findIndex(f => \n          f.year === filter.year && \n          f.section === filter.section && \n          f.subject === filter.subject\n        );\n        \n        // If it exists, remove it (we'll add it back at the top)\n        if (existingIndex !== -1) {\n          recentFilters.splice(existingIndex, 1);\n        }\n        \n        // Add the new filter at the beginning\n        recentFilters.unshift(filter);\n        \n        // Keep only the 5 most recent filters\n        if (recentFilters.length > 5) {\n          recentFilters = recentFilters.slice(0, 5);\n        }\n        \n        // Save back to localStorage\n        localStorage.setItem('recentFilters', JSON.stringify(recentFilters));\n        console.log('Updated recent filters:', recentFilters);\n      } catch (error) {\n        console.error('Error saving to recent filters:', error);\n      }\n    };\n\n    // Update assessment history table\n    const updateAssessmentHistoryTable = (assessmentsByType) => {\n      if (!selectedStudent.value) return;\n      \n      console.log('Updating assessment history table with date range:', historyDateRange.value);\n      \n      // If assessmentsByType is not provided, use the current assessments\n      if (!assessmentsByType) {\n        // Group assessments by type\n        assessmentsByType = {\n          'Quiz': [],\n          'Activity': [],\n          'Performance Task': []\n        };\n        \n        // Filter assessments for the selected student\n        if (selectedStudent.value.assessments && selectedStudent.value.assessments.length > 0) {\n          selectedStudent.value.assessments.forEach(assessment => {\n            // Get the score for this student\n            const studentNumber = selectedStudent.value.studentNumber;\n            let scoreValue = null;\n            \n            // Check if scores is a Map or an object\n            if (assessment.scores) {\n              if (assessment.scores instanceof Map) {\n                scoreValue = assessment.scores.get(studentNumber);\n              } else if (typeof assessment.scores === 'object') {\n                scoreValue = assessment.scores[studentNumber];\n              }\n            }\n            \n            // If score is not found in assessment.scores, check student.scores\n            if ((scoreValue === null || scoreValue === undefined) && \n                selectedStudent.value.scores && \n                (assessment._id in selectedStudent.value.scores || assessment.id in selectedStudent.value.scores)) {\n              scoreValue = selectedStudent.value.scores[assessment._id] || selectedStudent.value.scores[assessment.id];\n            }\n            \n            if (scoreValue !== null && scoreValue !== undefined) {\n              const maxScore = assessment.maxScore || 100;\n              const scorePercentage = (scoreValue / maxScore) * 100;\n              \n              // Apply date filter if set\n              const assessmentDate = new Date(assessment.date);\n              const startDate = historyDateRange.value.start ? new Date(historyDateRange.value.start) : null;\n              const endDate = historyDateRange.value.end ? new Date(historyDateRange.value.end) : null;\n              \n              // Skip if outside date range\n              if ((startDate && assessmentDate < startDate) || \n                  (endDate && assessmentDate > endDate)) {\n                return;\n              }\n              \n              const type = assessment.type || 'Quiz'; // Default to Quiz if type is not specified\n              \n              assessmentsByType[type].push({\n                ...assessment,\n                date: assessment.date,\n                rawScore: scoreValue,\n                score: scorePercentage,\n                maxScore: maxScore,\n                number: assessment.number,\n                title: `${assessment.type} #${assessment.number}`\n              });\n            }\n          });\n        }\n      }\n      \n      // Get all assessments across all types\n      const allAssessments = [\n        ...(assessmentsByType['Quiz'] || []),\n        ...(assessmentsByType['Activity'] || []),\n        ...(assessmentsByType['Performance Task'] || [])\n      ];\n      \n      // Apply date filter to the history table\n      const filteredAssessments = allAssessments.filter(assessment => {\n        const assessmentDate = new Date(assessment.date);\n        const startDate = historyDateRange.value.start ? new Date(historyDateRange.value.start) : null;\n        const endDate = historyDateRange.value.end ? new Date(historyDateRange.value.end) : null;\n        \n        return (!startDate || assessmentDate >= startDate) && \n               (!endDate || assessmentDate <= endDate);\n      });\n      \n      // Sort by date (newest first)\n      filteredAssessments.sort((a, b) => new Date(b.date) - new Date(a.date));\n      \n      // Store in the selected student object\n      selectedStudent.value.assessmentHistory = filteredAssessments.map(assessment => ({\n        date: assessment.date,\n        type: assessment.title || `${assessment.type} #${assessment.number}`,\n        score: assessment.rawScore,\n        maxScore: assessment.maxScore,\n        percentage: assessment.score\n      }));\n      \n      console.log(`Updated assessment history with ${selectedStudent.value.assessmentHistory.length} records`);\n    };\n\n    // Helper function to get the student's score for an assessment\n    const getStudentScore = (student, assessment) => {\n      // Get the assessment ID\n      const assessmentId = assessment._id || assessment.id;\n      \n      // Check if the student has a score for this assessment\n      if (student.scores && (assessmentId in student.scores)) {\n        return student.scores[assessmentId];\n      }\n      \n      // Check if the assessment has a score for this student\n      if (assessment.scores) {\n        let score;\n        \n        // Handle both Map and plain object\n        if (assessment.scores instanceof Map) {\n          score = assessment.scores.get(student.studentNumber);\n        } else if (typeof assessment.scores === 'object') {\n          score = assessment.scores[student.studentNumber];\n        }\n        \n        if (score !== undefined) {\n          // Store the score in the student object for future reference\n          if (!student.scores) {\n            student.scores = {};\n          }\n          student.scores[assessmentId] = score;\n          return score;\n        }\n      }\n      \n      // No score found\n      return '';\n    };\n\n    // Add new refs for export functionality\n    const showExportModal = ref(false)\n    const exportDateRange = ref({\n      start: moment().subtract(30, 'days').format('YYYY-MM-DD'),\n      end: moment().format('YYYY-MM-DD')\n    })\n    const exportType = ref('excel')\n    const isExporting = ref(false)\n\n    // Function to open export modal\n    const openExportModal = () => {\n      showExportModal.value = true\n    }\n\n    // Function to export records\n    const exportRecords = async () => {\n      try {\n        isExporting.value = true\n        \n        // Validate date range\n        const startDate = new Date(exportDateRange.value.start)\n        const endDate = new Date(exportDateRange.value.end)\n        \n        if (startDate > endDate) {\n          alert('Start date cannot be after end date')\n          isExporting.value = false\n          return\n        }\n        \n        const teacherId = store.state.auth.user?._id\n        if (!teacherId) {\n          throw new Error('Teacher ID not available')\n        }\n        \n        // Fetch export data from API\n        const response = await api.get('/users/export/class-records', {\n          params: {\n            teacherId,\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: exportDateRange.value.start,\n            endDate: exportDateRange.value.end\n          },\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        })\n        \n        const data = response.data\n        \n        // Prepare worksheet data\n        const worksheetData = []\n        \n        // Add header rows with class information\n        worksheetData.push(['Class Records Export'])\n        worksheetData.push(['Teacher:', data.teacherName])\n        worksheetData.push(['Year:', data.year])\n        worksheetData.push(['Section:', data.section])\n        worksheetData.push(['Subject:', data.subject])\n        worksheetData.push(['Date Range:', data.dateRange])\n        worksheetData.push([]) // Empty row\n        \n        // Add table headers\n        const headers = ['Student Number', 'Last Name', 'First Name']\n        \n        // Add assessment headers\n        data.assessments.forEach(assessment => {\n          headers.push(`${assessment.type} ${assessment.number} (${assessment.maxScore} pts) - ${moment(assessment.date).format('MM/DD/YYYY')}`)\n        })\n        \n        worksheetData.push(headers)\n        \n        // Add student data rows\n        data.students.forEach(student => {\n          const row = [\n            student.studentNumber,\n            student.lastName,\n            student.firstName\n          ]\n          \n          // Add scores for each assessment\n          student.scores.forEach(scoreObj => {\n            row.push(scoreObj.score !== null && scoreObj.score !== '' ? scoreObj.score : 'N/A')\n          })\n          \n          worksheetData.push(row)\n        })\n        \n        // Create worksheet and workbook\n        const worksheet = XLSX.utils.aoa_to_sheet(worksheetData)\n        const workbook = XLSX.utils.book_new()\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Class Records')\n        \n        // Set column widths\n        const colWidths = [\n          { wch: 15 }, // Student Number\n          { wch: 15 }, // Last Name\n          { wch: 15 }, // First Name\n        ]\n        \n        // Add widths for each assessment column\n        data.assessments.forEach(() => {\n          colWidths.push({ wch: 20 })\n        })\n        \n        worksheet['!cols'] = colWidths\n        \n        // Export based on selected type\n        if (exportType.value === 'excel') {\n          XLSX.writeFile(workbook, `${data.subject}_${data.year}_${data.section}_ClassRecord.xlsx`)\n        } else {\n          XLSX.writeFile(workbook, `${data.subject}_${data.year}_${data.section}_ClassRecord.csv`, { bookType: 'csv' })\n        }\n        \n        showExportModal.value = false\n      } catch (error) {\n        console.error('Error exporting records:', error)\n        alert('Failed to export records. Please try again.')\n      } finally {\n        isExporting.value = false\n      }\n    }\n\n    return {\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      searchQuery,\n      students,\n      assessments,\n      filteredAssessmentsByDate,\n      currentDate,\n      showAddAssessmentModal,\n      newAssessment,\n      selectedStudent,\n      quizChart,\n      activityChart,\n      performanceChart,\n      handleAddAssessment,\n      updateScore,\n      viewStudentDetails,\n      formatDate,\n      formatDateForDisplay,\n      navigateDate,\n      user,\n      showAddStudentRecordModal,\n      newStudentRecord,\n      canAddStudentRecord,\n      handleAddStudentRecord,\n      clearFilters,\n      sortField,\n      sortOrder,\n      sortBy,\n      getSortIcon,\n      sortedStudents,\n      showSearch,\n      toggleSearch,\n      handleSearch,\n      applyFilters,\n      getAssessmentBadgeClass,\n      getScoreClass,\n      updateCharts,\n      showEditAssessmentModal,\n      editingAssessment,\n      editAssessment,\n      handleEditAssessment,\n      handleDeleteAssessment,\n      selectedAssessmentType,\n      showChartDateFilter,\n      showHistoryDateFilter,\n      chartDateRange,\n      historyDateRange,\n      filteredAssessments,\n      applyChartDateFilter,\n      clearChartDateFilter,\n      applyHistoryDateFilter,\n      clearHistoryDateFilter,\n      handleLogout,\n      availableYears,\n      availableSections,\n      teacherSubjects,\n      openChartDateFilter,\n      openHistoryDateFilter,\n      slideDirection,\n      isNextDayDisabled,\n      openAddStudentRecordModal,\n      filteredSections,\n      canSelectSection,\n      canSelectSubject,\n      attendanceRecords,\n      attendanceStatistics,\n      fetchAttendance,\n      syncStudentRecords,\n      redirectToAttendance,\n      currentPage,\n      totalPages,\n      paginatedStudents,\n      paginationInfo,\n      nextPage,\n      previousPage,\n      createPerformanceChart,\n      loadLastUsedFilters, // Add the new function\n      saveToRecentFilters, // Add the new function\n      getStudentScore,\n      showExportModal,\n      exportDateRange,\n      exportType,\n      isExporting,\n      openExportModal,\n      exportRecords\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Remove all modal-related styles since they're now in StudentDetailsModal.vue */\n/* Keep only the styles needed for the main component */\n.class-records {\n  padding: 1.5rem;\n}\n\n.table-controls {\n  background: white;\n  padding: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n}\n\n.btn-control {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  color: #4a5568;\n  font-size: 0.9rem;\n  padding: 0.5rem 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.btn-control:hover {\n  background: #f1f5f9;\n  border-color: #cbd5e1;\n  color: #2d3748;\n}\n\n.control-menu {\n  border: none;\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  padding: 0.5rem 0;\n  margin-top: 0.5rem;\n}\n\n.dropdown-item {\n  padding: 0.6rem 1rem;\n  font-size: 0.9rem;\n  color: #4a5568;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.filter-badge {\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  background: #e53e3e;\n  color: white;\n  width: 18px;\n  height: 18px;\n  border-radius: 50%;\n  font-size: 0.7rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid white;\n}\n\n.search-control {\n  flex: 1;\n  max-width: 400px;\n}\n\n.table-responsive {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.table th {\n  background-color: #f8f9fa;\n  color: #666;\n  font-weight: 600;\n  padding: 0.75rem 1rem;\n  border-top: none;\n  white-space: nowrap;\n}\n\n.table td {\n  padding: 0.75rem 1rem;\n  vertical-align: middle;\n  border-color: #eee;\n}\n\n.table tbody tr:hover {\n  background-color: #f8f9fa;\n  cursor: pointer;\n}\n\n.score-input {\n  width: 80px;\n  text-align: center;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  padding: 0.25rem;\n}\n\n.score-input:focus {\n  border-color: #4299e1;\n  box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.25);\n  outline: none;\n}\n\n.date-display {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #495057;\n  padding: 0.5rem 1rem;\n  background: #fff;\n  border-radius: 0.5rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  min-width: 200px;\n  text-align: center;\n}\n\n.empty-state-message {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 2rem;\n  color: #6c757d;\n}\n\n.empty-state-message i {\n  font-size: 2rem;\n}\n\n.pagination-controls {\n  background: white;\n  padding: 1rem;\n  border-top: 1px solid #e2e8f0;\n}\n\n.pagination-info {\n  color: #4a5568;\n  font-size: 0.9rem;\n}\n\n.pagination-buttons .btn {\n  min-width: 100px;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(4px);\n  z-index: 9998;\n}\n\n.modal-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 10000;\n}\n\n.modal-dialog {\n  position: relative;\n  width: 90%;\n  max-width: 600px;\n  margin: 1.75rem auto;\n  pointer-events: auto;\n}\n\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: none;\n  border-radius: 0.5rem;\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n  outline: 0;\n  max-height: calc(100vh - 3.5rem);\n  overflow-y: auto;\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1.5rem;\n  border-bottom: 1px solid #dee2e6;\n  border-top-left-radius: calc(0.5rem - 1px);\n  border-top-right-radius: calc(0.5rem - 1px);\n}\n\n.modal-body {\n  position: relative;\n  flex: 1 1 auto;\n  padding: 1.5rem;\n}\n\n.modal-xxl {\n  max-width: 1400px;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAwD;;EAC5DA,KAAK,EAAC;AAAc;;EAYpBA,KAAK,EAAC;AAAiC;;EAIrCA,KAAK,EAAC;AAAc;mBApBjC;;EAkCSA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAqB;;EACzBA,KAAK,EAAC;AAAiC;;EACrCA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAU;;EAIfA,KAAK,EAAC;AAA4B;;EAiBnCA,KAAK,EAAC;AAAU;;EACXA,KAAK,EAAC,iBAAiB;EAACC,IAAI,EAAC,QAAQ;EAAC,gBAAc,EAAC,UAAU;EAAC,eAAa,EAAC;;;EA/DtGC,GAAA;EAiEgDF,KAAK,EAAC;;;EAEjCA,KAAK,EAAC,gCAAgC;EAACG,KAAoB,EAApB;IAAA;EAAA;;;EAErCH,KAAK,EAAC;AAAM;oBArEnC;;EA4EuBA,KAAK,EAAC;AAAM;oBA5EnC;oBAAA;;EAmFuBA,KAAK,EAAC;AAAM;oBAnFnC;oBAAA;;EA0FuBA,KAAK,EAAC;AAAuC;;EAanDA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAa;;EAwBzBA,KAAK,EAAC;AAAkB;;EAClBA,KAAK,EAAC;AAAmB;oBAjI5C;oBAAA;oBAAA;;EAAAE,GAAA;AAAA;;EAyKsBE,OAAO,EAAC,GAAG;EAACJ,KAAK,EAAC;;;EACfA,KAAK,EAAC;AAAqB;;EA1KpDE,GAAA;EA6KyBF,KAAK,EAAC;;;EAWlBA,KAAK,EAAC;AAA4E;;EAChFA,KAAK,EAAC;AAAiB;;EAGvBA,KAAK,EAAC;AAAoB;oBA5LzC;oBAAA;;EAAAE,GAAA;EAiN0CF,KAAK,EAAC;;;EAEnCA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAY;;EAGdA,KAAK,EAAC;AAAM;oBA5NjC;;EAAAE,GAAA;EAqOmCG,QAAQ,EAAR;;;EAIdL,KAAK,EAAC;AAAM;oBAzOjC;oBAAA;;EAAAE,GAAA;EAkPmCG,QAAQ,EAAR;;;EAIdL,KAAK,EAAC;AAAM;oBAtPjC;oBAAA;;EAAAE,GAAA;EA+PmCG,QAAQ,EAAR;;;EAGdL,KAAK,EAAC;AAAkC;oBAlQ7D;;EAAAE,GAAA;EAmRuCF,KAAK,EAAC;;;EAClCA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAY;;EAGdA,KAAK,EAAC;AAAM;;EAWZA,KAAK,EAAC;AAAM;;EAYZA,KAAK,EAAC;AAAM;;EAWZA,KAAK,EAAC;AAAU;;EAmCtBA,KAAK,EAAC;AAAO;;EAnW5BE,GAAA;AAAA;;EA2YWF,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAuB;;EAC3BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAM;;EAIZA,KAAK,EAAC;AAAM;;EAKdA,KAAK,EAAC;AAAc;;EAa5BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAuB;;EAC3BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAM;;EAIZA,KAAK,EAAC;AAAM;;EAKdA,KAAK,EAAC;AAAc;;EAa5BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAY;;EAOdA,KAAK,EAAC;AAAM;;EAIZA,KAAK,EAAC;AAAM;;EAKZA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAY;;EAMlBA,KAAK,EAAC;AAAY;;EAQpBA,KAAK,EAAC;AAAe;qBAhf5C;;EAAAE,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEI,mBAAA,CAogBM,OApgBNC,UAogBM,GAngBJC,mBAAA,yCAA4C,EAC5CC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJD,mBAAA,CAUM,OAVNE,UAUM,GATJF,mBAAA,CAES;IAFDT,KAAK,EAAC,iBAAiB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,yBAAA,IAAAD,MAAA,CAAAC,yBAAA,IAAAF,IAAA,CAAyB;kCAC/DL,mBAAA,CAAgC;IAA7BT,KAAK,EAAC;EAAkB,4BANrCiB,gBAAA,CAM0C,sBAClC,E,IACAR,mBAAA,CAES;IAFDT,KAAK,EAAC,iBAAiB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEH,MAAA,CAAAI,sBAAsB;kCAC5DV,mBAAA,CAA2B;IAAxBT,KAAK,EAAC;EAAa,4BAThCiB,gBAAA,CASqC,kBAC7B,E,IACAR,mBAAA,CAES;IAFDT,KAAK,EAAC,iBAAiB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAK,eAAA,IAAAL,MAAA,CAAAK,eAAA,IAAAN,IAAA,CAAe;kCACrDL,mBAAA,CAAkC;IAA/BT,KAAK,EAAC;EAAoB,4BAZvCiB,gBAAA,CAY4C,kBACpC,E,MAEFT,mBAAA,kCAAqC,EACrCC,mBAAA,CAcM,OAdNY,UAcM,GAbJZ,mBAAA,CAES;IAFDT,KAAK,EAAC,yBAAyB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEH,MAAA,CAAAO,YAAY;kCAC1Db,mBAAA,CAAmC;IAAhCT,KAAK,EAAC;EAAqB,2B,IAEhCS,mBAAA,CAEM,OAFNc,UAEM,EAAAC,gBAAA,CADDT,MAAA,CAAAU,oBAAoB,CAACV,MAAA,CAAAW,WAAW,mBAErCjB,mBAAA,CAMS;IALPT,KAAK,EAAC,yBAAyB;IAC9BY,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEH,MAAA,CAAAO,YAAY;IACnBjB,QAAQ,EAAEU,MAAA,CAAAY;kCAEXlB,mBAAA,CAAoC;IAAjCT,KAAK,EAAC;EAAsB,2B,kBA5BzC4B,UAAA,E,KAiCIpB,mBAAA,mBAAsB,EACtBC,mBAAA,CA4KM,OA5KNoB,UA4KM,GA3KJpB,mBAAA,CA0KM,OA1KNqB,UA0KM,GAzKJtB,mBAAA,oBAAuB,EACvBC,mBAAA,CAyFM,OAzFNsB,UAyFM,GAxFJtB,mBAAA,CAuFM,OAvFNuB,WAuFM,GAtFJvB,mBAAA,CA6DM,OA7DNwB,WA6DM,GA5DJzB,mBAAA,mBAAsB,EACtBC,mBAAA,CAkBM,OAlBNyB,WAkBM,G,4BAjBJzB,mBAAA,CAES;IAFDT,KAAK,EAAC,iBAAiB;IAACC,IAAI,EAAC,QAAQ;IAAC,gBAAc,EAAC,UAAU;IAAC,eAAa,EAAC;MACpFQ,mBAAA,CAAgC;IAA7BT,KAAK,EAAC;EAAkB,IA3C7CiB,gBAAA,CA2CkD,WAClC,E,sBACAR,mBAAA,CAaK,MAbL0B,WAaK,GAZH1B,mBAAA,CAKK,aAJHA,mBAAA,CAGI;IAHDT,KAAK,EAAC,yCAAyC;IAACoC,IAAI,EAAC,GAAG;IAAExB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEH,MAAA,CAAAsB,MAAM;kCACxE5B,mBAAA,CAAgC;IAA7BT,KAAK,EAAC;EAAkB,6B,4BAhDjDiB,gBAAA,CAgDsD,kBAChC,IAAAR,mBAAA,CAA6D;IAAzDT,KAAK,EAjD/BsC,eAAA,EAiDiCvB,MAAA,CAAAwB,WAAW,mBAAyB,SAAS;+BAG5D9B,mBAAA,CAKK,aAJHA,mBAAA,CAGI;IAHDT,KAAK,EAAC,yCAAyC;IAACoC,IAAI,EAAC,GAAG;IAAExB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAAEH,MAAA,CAAAsB,MAAM;kCACxE5B,mBAAA,CAA2C;IAAxCT,KAAK,EAAC;EAA6B,6B,4BAtD5DiB,gBAAA,CAsDiE,QAC3C,IAAAR,mBAAA,CAAwD;IAApDT,KAAK,EAvD/BsC,eAAA,EAuDiCvB,MAAA,CAAAwB,WAAW,cAAoB,SAAS;mCAM3D/B,mBAAA,qBAAwB,EACxBC,mBAAA,CAqCM,OArCN+B,WAqCM,GApCJ/B,mBAAA,CAGS,UAHTgC,WAGS,G,4BAFPhC,mBAAA,CAAkC;IAA/BT,KAAK,EAAC;EAAoB,6B,4BAhE/CiB,gBAAA,CAgEoD,UAClC,IAAYyB,IAAA,CAAAC,gBAAgB,I,cAA5BrC,mBAAA,CAA2D,QAA3DsC,WAA2D,EAAR,GAAC,KAjEtEpC,mBAAA,e,GAmEgBC,mBAAA,CA+BM,OA/BNoC,WA+BM,G,4BA9BJpC,mBAAA,CAAoD;IAAhDT,KAAK,EAAC;EAAsB,GAAC,gBAAc,sBAC/CS,mBAAA,CAMM,OANNqC,WAMM,G,4BALJrC,mBAAA,CAA4C;IAArCT,KAAK,EAAC;EAAY,GAAC,YAAU,sB,gBACpCS,mBAAA,CAGS;IAHDT,KAAK,EAAC,4BAA4B;IAvE9D,uBAAAa,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAuEwEH,MAAA,CAAAgC,YAAY,GAAA7B,MAAA;IAAG8B,QAAM,EAAAnC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAkC,YAAA,IAAAlC,MAAA,CAAAkC,YAAA,IAAAnC,IAAA,CAAY;kCACrFL,mBAAA,CAAmC;IAA3ByC,KAAK,EAAC;EAAE,GAAC,WAAS,uB,kBAC1B5C,mBAAA,CAAoF6C,SAAA,QAzE1GC,WAAA,CAyE6CrC,MAAA,CAAAsC,cAAc,EAAtBC,IAAI;yBAAnBhD,mBAAA,CAAoF;MAA5CJ,GAAG,EAAEoD,IAAI;MAAGJ,KAAK,EAAEI;wBAASA,IAAI,wBAzE9FC,WAAA;2FAuEwExC,MAAA,CAAAgC,YAAY,E,KAKlEtC,mBAAA,CAMM,OANN+C,WAMM,G,4BALJ/C,mBAAA,CAAyC;IAAlCT,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCS,mBAAA,CAGS;IAHDT,KAAK,EAAC,4BAA4B;IA9E9D,uBAAAa,MAAA,QAAAA,MAAA,MAAAK,MAAA,IA8EwEH,MAAA,CAAA0C,eAAe,GAAAvC,MAAA;IAAG8B,QAAM,EAAAnC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAkC,YAAA,IAAAlC,MAAA,CAAAkC,YAAA,IAAAnC,IAAA,CAAY;IAAGT,QAAQ,GAAGU,MAAA,CAAAgC;kCACtGtC,mBAAA,CAAsC;IAA9ByC,KAAK,EAAC;EAAE,GAAC,cAAY,uB,kBAC7B5C,mBAAA,CAAmG6C,SAAA,QAhFzHC,WAAA,CAgFgDrC,MAAA,CAAA2C,iBAAiB,EAA5BC,OAAO;yBAAtBrD,mBAAA,CAAmG;MAArDJ,GAAG,EAAEyD,OAAO;MAAGT,KAAK,EAAES;wBAAYA,OAAO,wBAhF7GC,WAAA;mEAAAC,WAAA,I,gBA8EwE9C,MAAA,CAAA0C,eAAe,E,KAKrEhD,mBAAA,CAMM,OANNqD,WAMM,G,4BALJrD,mBAAA,CAAyC;IAAlCT,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCS,mBAAA,CAGS;IAHDT,KAAK,EAAC,4BAA4B;IArF9D,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAqFwEH,MAAA,CAAAgD,eAAe,GAAA7C,MAAA;IAAG8B,QAAM,EAAAnC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAkC,YAAA,IAAAlC,MAAA,CAAAkC,YAAA,IAAAnC,IAAA,CAAY;IAAGT,QAAQ,GAAGU,MAAA,CAAA0C;kCACtGhD,mBAAA,CAAsC;IAA9ByC,KAAK,EAAC;EAAE,GAAC,cAAY,uB,kBAC7B5C,mBAAA,CAAiG6C,SAAA,QAvFvHC,WAAA,CAuFgDrC,MAAA,CAAAiD,eAAe,EAA1BC,OAAO;yBAAtB3D,mBAAA,CAAiG;MAArDJ,GAAG,EAAE+D,OAAO;MAAGf,KAAK,EAAEe;wBAAYA,OAAO,wBAvF3GC,WAAA;mEAAAC,WAAA,I,gBAqFwEpD,MAAA,CAAAgD,eAAe,E,KAKrEtD,mBAAA,CAOM,OAPN2D,WAOM,GANJ3D,mBAAA,CAES;IAFDT,KAAK,EAAC,sBAAsB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAsD,YAAA,IAAAtD,MAAA,CAAAsD,YAAA,IAAAvD,IAAA,CAAY;KAAE,aAE3D,GACAL,mBAAA,CAES;IAFDT,KAAK,EAAC,wBAAwB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAkC,YAAA,IAAAlC,MAAA,CAAAkC,YAAA,IAAAnC,IAAA,CAAY;KAAE,iBAE7D,E,SAMRN,mBAAA,oBAAuB,EACvBC,mBAAA,CAqBM,OArBN6D,WAqBM,GApBJ7D,mBAAA,CAmBM,OAnBN8D,WAmBM,G,4BAlBJ9D,mBAAA,CAEO;IAFDT,KAAK,EAAC;EAAkB,IAC5BS,mBAAA,CAA6B;IAA1BT,KAAK,EAAC;EAAe,G,sCAE1BS,mBAAA,CAMC;IALCR,IAAI,EAAC,MAAM;IACXD,KAAK,EAAC,cAAc;IA9GtC,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA+G2BH,MAAA,CAAAyD,WAAW,GAAAtD,MAAA;IACpBuD,WAAW,EAAC,oBAAoB;IAC/BC,OAAK,EAAA7D,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAA4D,YAAA,IAAA5D,MAAA,CAAA4D,YAAA,IAAA7D,IAAA,CAAY;iEAFXC,MAAA,CAAAyD,WAAW,E,GAKdzD,MAAA,CAAAyD,WAAW,I,cADnBlE,mBAAA,CAOS;IA1HzBJ,GAAA;IAqHkBF,KAAK,EAAC,2BAA2B;IACjCC,IAAI,EAAC,QAAQ;IACZW,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAE4B,IAAA,CAAAkC,WAAA,IAAAlC,IAAA,CAAAkC,WAAA,IAAA9D,IAAA,CAAW;kCAEnBL,mBAAA,CAA4B;IAAzBT,KAAK,EAAC;EAAc,2B,MAzHzCQ,mBAAA,e,SAgIQC,mBAAA,CAqDQ,OArDRoE,WAqDQ,GApDJpE,mBAAA,CAmDQ,SAnDRqE,WAmDQ,GAlDNrE,mBAAA,CAaQ,gBAZNA,mBAAA,CAWK,a,4BAVHA,mBAAA,CAAuB,YAAnB,gBAAc,sB,4BAClBA,mBAAA,CAAkB,YAAd,WAAS,sB,4BACbA,mBAAA,CAAmB,YAAf,YAAU,uB,kBACdH,mBAAA,CAMK6C,SAAA,QA7IvBC,WAAA,CAuI2CrC,MAAA,CAAAgE,yBAAyB,EAAvCC,UAAU;yBAArB1E,mBAAA,CAMK;MANgDJ,GAAG,EAAE8E,UAAU,CAACC;QACnExE,mBAAA,CAIM;MAJDT,KAAK,EAAC,mBAAmB;MAAEY,OAAK,EAAAM,MAAA,IAAEH,MAAA,CAAAmE,cAAc,CAACF,UAAU;QAxIpF/D,gBAAA,CAAAO,gBAAA,CAyI2BwD,UAAU,CAAC/E,IAAI,IAAG,GAAC,GAAAuB,gBAAA,CAAGwD,UAAU,CAACG,MAAM,IAAG,GAC7C,iB,4BAAA1E,mBAAA,CAAI,sCACJA,mBAAA,CAA8C,eAAvC,GAAC,GAAAe,gBAAA,CAAGwD,UAAU,CAACI,QAAQ,IAAG,OAAK,gB,iBA3I9DC,WAAA,E;sCAgJc5E,mBAAA,CAmCQ,gBAlCQM,MAAA,CAAAuE,iBAAiB,CAACC,MAAM,Q,kBACpCjF,mBAAA,CAoBK6C,SAAA;IAtKvBjD,GAAA;EAAA,GAAAkD,WAAA,CAmJoCrC,MAAA,CAAAuE,iBAAiB,EAA5BE,OAAO;yBADdlF,mBAAA,CAoBK;MAlBFJ,GAAG,EAAEsF,OAAO,CAACC,aAAa;MAC1B7E,OAAK,EAAAM,MAAA,IAAEH,MAAA,CAAA2E,kBAAkB,CAACF,OAAO;MAClCxF,KAAK,EAAC;QAENS,mBAAA,CAAoC,YAAAe,gBAAA,CAA7BgE,OAAO,CAACC,aAAa,kBAC5BhF,mBAAA,CAA+B,YAAAe,gBAAA,CAAxBgE,OAAO,CAACG,QAAQ,kBACvBlF,mBAAA,CAAgC,YAAAe,gBAAA,CAAzBgE,OAAO,CAACI,SAAS,mB,kBACxBtF,mBAAA,CAUK6C,SAAA,QArKzBC,WAAA,CA2J6CrC,MAAA,CAAAgE,yBAAyB,EAAvCC,UAAU;2BAArB1E,mBAAA,CAUK;QAVgDJ,GAAG,EAAE8E,UAAU,CAACC;UACnExE,mBAAA,CAQC;QAPCR,IAAI,EAAC,QAAQ;QACbD,KAAK,EAAC,0CAA0C;QAC/CkD,KAAK,EAAEnC,MAAA,CAAA8E,eAAe,CAACL,OAAO,EAAER,UAAU;QAC1Cc,GAAG,EAAEd,UAAU,CAACI,QAAQ;QACzBW,GAAG,EAAC,GAAG;QACNrB,OAAK,EAAAxD,MAAA,IAAEH,MAAA,CAAAiF,WAAW,CAACR,OAAO,EAAER,UAAU,EAAE9D,MAAM,CAAC+E,MAAM,CAAC/C,KAAK;QAC3DtC,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAnK9BqF,cAAA,CAmKwB,QAAW;+CAnKnCC,WAAA,E;oDAAAC,WAAA;kDAwKgB9F,mBAAA,CAUK,MAlLrB+F,WAAA,GAyKkB5F,mBAAA,CAQK,MARL6F,WAQK,GAPH7F,mBAAA,CAMM,OANN8F,WAMM,G,4BALJ9F,mBAAA,CAA4C;IAAzCT,KAAK,EAAC;EAA8B,6B,4BACvCS,mBAAA,CAAqC;IAAlCT,KAAK,EAAC;EAAM,GAAC,mBAAiB,sBACC0C,IAAA,CAAAC,gBAAgB,I,cAAlDrC,mBAAA,CAEI,KAFJkG,WAEI,EAFgD,8BAEpD,KA/KtBhG,mBAAA,e,cAuLQA,mBAAA,yBAA4B,EAC5BC,mBAAA,CAoBM,OApBNgG,WAoBM,GAnBJhG,mBAAA,CAEM,OAFNiG,WAEM,EAFuB,WACnB,GAAAlF,gBAAA,CAAGT,MAAA,CAAA4F,cAAc,CAACC,KAAK,IAAG,MAAI,GAAApF,gBAAA,CAAGT,MAAA,CAAA4F,cAAc,CAACE,GAAG,IAAG,MAAI,GAAArF,gBAAA,CAAGT,MAAA,CAAA+F,cAAc,CAACvB,MAAM,IAAG,WAC/F,iBACA9E,mBAAA,CAeM,OAfNsG,WAeM,GAdJtG,mBAAA,CAMS;IALPT,KAAK,EAAC,8BAA8B;IACnCY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAiG,YAAA,IAAAjG,MAAA,CAAAiG,YAAA,IAAAlG,IAAA,CAAY;IACnBT,QAAQ,EAAEU,MAAA,CAAAkG,WAAW;kCAEtBxG,mBAAA,CAAwC;IAArCT,KAAK,EAAC;EAA0B,4BAlMjDiB,gBAAA,CAkMsD,YAC1C,E,kBAnMZiG,WAAA,GAoMYzG,mBAAA,CAMS;IALPT,KAAK,EAAC,yBAAyB;IAC9BY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAoG,QAAA,IAAApG,MAAA,CAAAoG,QAAA,IAAArG,IAAA,CAAQ;IACfT,QAAQ,EAAEU,MAAA,CAAAkG,WAAW,IAAIlG,MAAA,CAAAqG;kCAvMxCnG,gBAAA,CAwMa,QACM,GAAAR,mBAAA,CAAyC;IAAtCT,KAAK,EAAC;EAA2B,2B,kBAzMvDqH,WAAA,E,SAgNI7G,mBAAA,8BAAiC,EACtBO,MAAA,CAAAuG,yBAAyB,I,cAApChH,mBAAA,CA+DM,OA/DNiH,WA+DM,GA9DJ9G,mBAAA,CA4DM;IA5DDT,KAAK,EAAC,eAAe;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAlNvCqF,cAAA,CAkNiC,QAAW;MACpCzF,mBAAA,CA0DM,OA1DN+G,WA0DM,GAzDJ/G,mBAAA,CAwDM,OAxDNgH,WAwDM,GAvDJhH,mBAAA,CAGM,OAHNiH,WAGM,G,4BAFJjH,mBAAA,CAA+C;IAA3CT,KAAK,EAAC;EAAa,GAAC,oBAAkB,sBAC1CS,mBAAA,CAA4F;IAApFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,WAAW;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAuG,yBAAyB;QAE3E7G,mBAAA,CAkDM,OAlDNkH,WAkDM,GAjDJlH,mBAAA,CAgDO;IAhDAmH,QAAM,EAAA/G,MAAA,SAAAA,MAAA,OA1N3BqF,cAAA,KAAApF,IAAA,KA0NqCC,MAAA,CAAA8G,sBAAA,IAAA9G,MAAA,CAAA8G,sBAAA,IAAA/G,IAAA,CAAsB;MAC3CN,mBAAA,oBAAuB,EACvBC,mBAAA,CAWM,OAXNqH,WAWM,G,4BAVJrH,mBAAA,CAAsC;IAA/BT,KAAK,EAAC;EAAY,GAAC,MAAI,sB,gBAC9BS,mBAAA,CAQS;IARDT,KAAK,EAAC,aAAa;IA9N7C,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA8NuDH,MAAA,CAAAgH,gBAAgB,CAACzE,IAAI,GAAApC,MAAA;IAAE8G,QAAQ,EAAR;kCAC1DvH,mBAAA,CAAqC;IAA7ByC,KAAK,EAAC;EAAE,GAAC,aAAW,sBACZnC,MAAA,CAAAsC,cAAc,CAACkC,MAAM,Q,kBACnCjF,mBAAA,CAES6C,SAAA;IAnO/BjD,GAAA;EAAA,GAAAkD,WAAA,CAiO6CrC,MAAA,CAAAsC,cAAc,EAAtBC,IAAI;yBAAnBhD,mBAAA,CAES;MAF+BJ,GAAG,EAAEoD,IAAI;MAAGJ,KAAK,EAAEI;wBACtDA,IAAI,wBAlO/B2E,WAAA;kDAqOoB3H,mBAAA,CAAmD,UAAnD4H,WAAmD,EAA3B,oBAAkB,G,0CAPPnH,MAAA,CAAAgH,gBAAgB,CAACzE,IAAI,E,KAU5D9C,mBAAA,uBAA0B,EAC1BC,mBAAA,CAWM,OAXN0H,WAWM,G,4BAVJ1H,mBAAA,CAAyC;IAAlCT,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCS,mBAAA,CAQS;IARDT,KAAK,EAAC,aAAa;IA3O7C,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA2OuDH,MAAA,CAAAgH,gBAAgB,CAACpE,OAAO,GAAAzC,MAAA;IAAGb,QAAQ,GAAGU,MAAA,CAAAgH,gBAAgB,CAACzE,IAAI;IAAE0E,QAAQ,EAAR;kCAChGvH,mBAAA,CAAwC;IAAhCyC,KAAK,EAAC;EAAE,GAAC,gBAAc,sBACfnC,MAAA,CAAAqH,gBAAgB,CAAC7C,MAAM,Q,kBACrCjF,mBAAA,CAES6C,SAAA;IAhP/BjD,GAAA;EAAA,GAAAkD,WAAA,CA8OgDrC,MAAA,CAAAqH,gBAAgB,EAA3BzE,OAAO;yBAAtBrD,mBAAA,CAES;MAFoCJ,GAAG,EAAEyD,OAAO;MAAGT,KAAK,EAAES;wBAC9DA,OAAO,wBA/OlC0E,WAAA;kDAkPoB/H,mBAAA,CAAsD,UAAtDgI,WAAsD,EAA9B,uBAAqB,G,iBAlPjEC,WAAA,I,gBA2OuDxH,MAAA,CAAAgH,gBAAgB,CAACpE,OAAO,E,KAU/DnD,mBAAA,uBAA0B,EAC1BC,mBAAA,CAWM,OAXN+H,WAWM,G,4BAVJ/H,mBAAA,CAAyC;IAAlCT,KAAK,EAAC;EAAY,GAAC,SAAO,sB,gBACjCS,mBAAA,CAQS;IARDT,KAAK,EAAC,aAAa;IAxP7C,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAwPuDH,MAAA,CAAAgH,gBAAgB,CAAC9D,OAAO,GAAA/C,MAAA;IAAGb,QAAQ,GAAGU,MAAA,CAAAgH,gBAAgB,CAACpE,OAAO;IAAEqE,QAAQ,EAAR;kCACnGvH,mBAAA,CAAwC;IAAhCyC,KAAK,EAAC;EAAE,GAAC,gBAAc,sBACfnC,MAAA,CAAAiD,eAAe,CAACuB,MAAM,Q,kBACpCjF,mBAAA,CAES6C,SAAA;IA7P/BjD,GAAA;EAAA,GAAAkD,WAAA,CA2PgDrC,MAAA,CAAAiD,eAAe,EAA1BC,OAAO;yBAAtB3D,mBAAA,CAES;MAFmCJ,GAAG,EAAE+D,OAAO;MAAGf,KAAK,EAAEe;wBAC7DA,OAAO,wBA5PlCwE,WAAA;kDA+PoBnI,mBAAA,CAAsD,UAAtDoI,WAAsD,EAA9B,uBAAqB,G,iBA/PjEC,WAAA,I,gBAwPuD5H,MAAA,CAAAgH,gBAAgB,CAAC9D,OAAO,E,KAU/DxD,mBAAA,CAOM,OAPNmI,WAOM,GANJnI,mBAAA,CAES;IAFDR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,mBAAmB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAuG,yBAAyB;KAAU,UAE3F,GACA7G,mBAAA,CAES;IAFDR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,iBAAiB;IAAEK,QAAQ,GAAGU,MAAA,CAAA8H;KAAqB,cAE/E,iBAxQlBC,WAAA,E,sCA+QMrI,mBAAA,CAA6E;IAAxET,KAAK,EAAC,gBAAgB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAuG,yBAAyB;UA/QnE9G,mBAAA,gBAkRIA,mBAAA,0BAA6B,EAClBO,MAAA,CAAAI,sBAAsB,I,cAAjCb,mBAAA,CA2DM,OA3DNyI,WA2DM,GA1DJtI,mBAAA,CAwDM,OAxDNuI,WAwDM,GAvDJvI,mBAAA,CAsDM,OAtDNwI,WAsDM,GArDJxI,mBAAA,CAoDM,OApDNyI,WAoDM,GAnDJzI,mBAAA,CAGM,OAHN0I,WAGM,G,4BAFJ1I,mBAAA,CAA2C;IAAvCT,KAAK,EAAC;EAAa,GAAC,gBAAc,sBACtCS,mBAAA,CAAyF;IAAjFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,WAAW;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAI,sBAAsB;QAExEV,mBAAA,CA8CM,OA9CN2I,WA8CM,GA7CJ3I,mBAAA,CA4CO;IA5CAmH,QAAM,EAAA/G,MAAA,SAAAA,MAAA,OA5R3BqF,cAAA,KAAApF,IAAA,KA4RqCC,MAAA,CAAAsI,mBAAA,IAAAtI,MAAA,CAAAsI,mBAAA,IAAAvI,IAAA,CAAmB;MACxCN,mBAAA,qBAAwB,EACxBC,mBAAA,CAQM,OARN6I,WAQM,G,4BAPJ7I,mBAAA,CAAsC;IAA/BT,KAAK,EAAC;EAAY,GAAC,MAAI,sB,gBAC9BS,mBAAA,CAKS;IALDT,KAAK,EAAC,aAAa;IAhS7C,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAgSuDH,MAAA,CAAAwI,aAAa,CAACtJ,IAAI,GAAAiB,MAAA;IAAE8G,QAAQ,EAAR;kCACvDvH,mBAAA,CAAqC;IAA7ByC,KAAK,EAAC;EAAE,GAAC,aAAW,qBAC5BzC,mBAAA,CAAkC;IAA1ByC,KAAK,EAAC;EAAM,GAAC,MAAI,qBACzBzC,mBAAA,CAA0C;IAAlCyC,KAAK,EAAC;EAAU,GAAC,UAAQ,qBACjCzC,mBAAA,CAA0D;IAAlDyC,KAAK,EAAC;EAAkB,GAAC,kBAAgB,oB,2CAJdnC,MAAA,CAAAwI,aAAa,CAACtJ,IAAI,E,KAQzDO,mBAAA,uBAA0B,EAC1BC,mBAAA,CASM,OATN+I,WASM,G,4BARJ/I,mBAAA,CAAwC;IAAjCT,KAAK,EAAC;EAAY,GAAC,QAAM,sB,gBAChCS,mBAAA,CAMC;IALCR,IAAI,EAAC,QAAQ;IACbD,KAAK,EAAC,cAAc;IA7SxC,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA8S6BH,MAAA,CAAAwI,aAAa,CAACpE,MAAM,GAAAjE,MAAA;IAC7B6E,GAAG,EAAC,GAAG;IACPiC,QAAQ,EAAR;iDAFSjH,MAAA,CAAAwI,aAAa,CAACpE,MAAM,E,KAMjC3E,mBAAA,eAAkB,EAClBC,mBAAA,CASM,OATNgJ,WASM,G,4BARJhJ,mBAAA,CAA+C;IAAxCT,KAAK,EAAC;EAAY,GAAC,eAAa,sB,gBACvCS,mBAAA,CAMC;IALCR,IAAI,EAAC,QAAQ;IACbD,KAAK,EAAC,cAAc;IAzTxC,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA0T6BH,MAAA,CAAAwI,aAAa,CAACnE,QAAQ,GAAAlE,MAAA;IAC/B6E,GAAG,EAAC,GAAG;IACPiC,QAAQ,EAAR;iDAFSjH,MAAA,CAAAwI,aAAa,CAACnE,QAAQ,E,KAMnC3E,mBAAA,CAOM,OAPNiJ,WAOM,GANJjJ,mBAAA,CAES;IAFDR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,wBAAwB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAI,sBAAsB;KAAU,UAE7F,G,4BACAV,mBAAA,CAES;IAFDR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC;KAAkB,kBAE9C,qB,sCAOZS,mBAAA,CAA0E;IAArET,KAAK,EAAC,gBAAgB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAI,sBAAsB;UA7UhEX,mBAAA,gBAgVIA,mBAAA,2BAA8B,EAC9BmJ,YAAA,CAsDsBC,8BAAA;IArDnBC,IAAI,IAAI9I,MAAA,CAAA+I,eAAe;IACvBtE,OAAO,EAAEzE,MAAA,CAAA+I,eAAe;IACxB,YAAU,EAAE/I,MAAA,CAAAgC,YAAY;IACxBY,OAAO,EAAE5C,MAAA,CAAA0C,eAAe;IACxBQ,OAAO,EAAElD,MAAA,CAAAgD,eAAe;IACzBgG,KAAK,EAAC,6BAA6B;IACnC,aAAW,EAAC,wBAAwB;IACpC,eAAa,EAAC,oBAAoB;IACjC,eAAa,EAAE,6CAA6C;IAC5D,UAAQ,sBAAsBhJ,MAAA,CAAA+I,eAAe,EAAErE,aAAa;IAC5D,iBAAe,EAAE,IAAI;IACrB,eAAW,EAAA5E,MAAA,SAAAA,MAAA,OAAGqC,KAAK,KAAMA,KAAK,KAAKnC,MAAA,CAAA+I,eAAe;IAClDE,OAAK,EAAAnJ,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAA+I,eAAe;IACtBG,kBAAkB,EAAEvH,IAAA,CAAAwH,sBAAsB;IAC1CC,sBAAsB,EAAEzH,IAAA,CAAA0H;;IAEd,eAAa,EAAAC,QAAA,CACtB,MAkCQ,CAlCR5J,mBAAA,CAkCQ,SAlCR6J,WAkCQ,G,8BAjCN7J,mBAAA,CAOQ,gBANNA,mBAAA,CAKK,aAJHA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAmB,YAAf,YAAU,GACdA,mBAAA,CAAc,YAAV,OAAK,GACTA,mBAAA,CAAmB,YAAf,YAAU,E,wBAGlBA,mBAAA,CAwBQ,gB,CAvBKM,MAAA,CAAA+I,eAAe,EAAES,iBAAiB,IAAIxJ,MAAA,CAAA+I,eAAe,CAACS,iBAAiB,CAAChF,MAAM,U,cAAzFjF,mBAAA,CAIK,MAjXjBkK,WAAA,EAAA3J,MAAA,UAAAA,MAAA,SA8WcJ,mBAAA,CAEK;MAFDL,OAAO,EAAC,GAAG;MAACJ,KAAK,EAAC;QACpBS,mBAAA,CAAuC;MAApCT,KAAK,EAAC;IAAyB,IA/WlDiB,gBAAA,CA+WuD,+BACzC,E,0BAhXdT,mBAAA,iB,kBAkXYF,mBAAA,CAiBK6C,SAAA,QAnYjBC,WAAA,CAkXiCrC,MAAA,CAAA+I,eAAe,EAAES,iBAAiB,EAA5CE,MAAM;2BAAjBnK,mBAAA,CAiBK;QAjBqDJ,GAAG,EAAEuK,MAAM,CAACC,IAAI,GAAGD,MAAM,CAACxK;UAClFQ,mBAAA,CAAsC,YAAAe,gBAAA,CAA/BT,MAAA,CAAA4J,UAAU,CAACF,MAAM,CAACC,IAAI,mBAC7BjK,mBAAA,CAA0B,YAAAe,gBAAA,CAAnBiJ,MAAM,CAACxK,IAAI,kBAClBQ,mBAAA,CAAiD,YAAAe,gBAAA,CAA1CiJ,MAAM,CAACG,KAAK,IAAG,GAAC,GAAApJ,gBAAA,CAAGiJ,MAAM,CAACrF,QAAQ,kBACzC3E,mBAAA,CAYK,aAXHA,mBAAA,CAUO;QATLT,KAAK,EAxXvBsC,eAAA,EAwXwB,OAAO;wBAC+BmI,MAAM,CAACI,UAAU;wBAA0CJ,MAAM,CAACI,UAAU,UAAUJ,MAAM,CAACI,UAAU;wBAAyCJ,MAAM,CAACI,UAAU,UAAUJ,MAAM,CAACI,UAAU;uBAAwCJ,MAAM,CAACI,UAAU;;0BAO9RJ,MAAM,CAACI,UAAU,CAACC,OAAO,OAAM,IACpC,uB;;IAjYhBC,CAAA;0IAyYIvK,mBAAA,6BAAgC,EACNO,MAAA,CAAAiK,mBAAmB,I,cAA7CC,YAAA,CA4BWC,SAAA;IAtafhL,GAAA;IA0YciL,EAAE,EAAC;MACX1K,mBAAA,CA0BM,OA1BN2K,WA0BM,GAzBJ3K,mBAAA,CAwBM,OAxBN4K,WAwBM,GAvBJ5K,mBAAA,CAqBI,OArBJ6K,WAqBI,GApBF7K,mBAAA,CAmBI,OAnBJ8K,WAmBI,GAlBF9K,mBAAA,CAGM,OAHN+K,WAGM,G,8BAFJ/K,mBAAA,CAAoD;IAAhDT,KAAK,EAAC;EAAa,GAAC,yBAAuB,sBAC/CS,mBAAA,CAAsF;IAA9ER,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,WAAW;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAiK,mBAAmB;QAErEvK,mBAAA,CASQ,OATRgL,WASQ,GARNhL,mBAAA,CAGM,OAHNiL,WAGM,G,8BAFJjL,mBAAA,CAA4C;IAArCT,KAAK,EAAC;EAAY,GAAC,YAAU,sB,gBACpCS,mBAAA,CAAuE;IAAhER,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IAtZzD,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAsZmEH,MAAA,CAAA4K,cAAc,CAAC/E,KAAK,GAAA1F,MAAA;iDAApBH,MAAA,CAAA4K,cAAc,CAAC/E,KAAK,E,KAEvEnG,mBAAA,CAGM,OAHNmL,WAGM,G,8BAFJnL,mBAAA,CAA0C;IAAnCT,KAAK,EAAC;EAAY,GAAC,UAAQ,sB,gBAClCS,mBAAA,CAAqE;IAA9DR,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IA1ZzD,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA0ZmEH,MAAA,CAAA4K,cAAc,CAAC9E,GAAG,GAAA3F,MAAA;iDAAlBH,MAAA,CAAA4K,cAAc,CAAC9E,GAAG,E,OAGvEpG,mBAAA,CAGI,OAHJoL,WAGI,GAFFpL,mBAAA,CAA4F;IAApFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,mBAAmB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAA+K,oBAAA,IAAA/K,MAAA,CAAA+K,oBAAA,IAAAhL,IAAA,CAAoB;KAAE,OAAK,GACnFL,mBAAA,CAA0F;IAAlFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,iBAAiB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAAgL,oBAAA,IAAAhL,MAAA,CAAAgL,oBAAA,IAAAjL,IAAA,CAAoB;KAAE,OAAK,E,OAIzFL,mBAAA,CAAuE;IAAlET,KAAK,EAAC,gBAAgB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAiK,mBAAmB;cAna/DxK,mBAAA,gBAwaIA,mBAAA,+BAAkC,EACRO,MAAA,CAAAiL,qBAAqB,I,cAA/Cf,YAAA,CA4BWC,SAAA;IArcfhL,GAAA;IAyaciL,EAAE,EAAC;MACX1K,mBAAA,CA0BM,OA1BNwL,WA0BM,GAzBJxL,mBAAA,CAwBM,OAxBNyL,WAwBM,GAvBJzL,mBAAA,CAqBI,OArBJ0L,WAqBI,GApBF1L,mBAAA,CAmBI,OAnBJ2L,WAmBI,GAlBF3L,mBAAA,CAGM,OAHN4L,WAGM,G,8BAFJ5L,mBAAA,CAAsD;IAAlDT,KAAK,EAAC;EAAa,GAAC,2BAAyB,sBACjDS,mBAAA,CAAwF;IAAhFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,WAAW;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAiL,qBAAqB;QAEvEvL,mBAAA,CASQ,OATR6L,WASQ,GARN7L,mBAAA,CAGM,OAHN8L,WAGM,G,8BAFJ9L,mBAAA,CAA4C;IAArCT,KAAK,EAAC;EAAY,GAAC,YAAU,sB,gBACpCS,mBAAA,CAAyE;IAAlER,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IArbzD,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAqbmEH,MAAA,CAAAyL,gBAAgB,CAAC5F,KAAK,GAAA1F,MAAA;iDAAtBH,MAAA,CAAAyL,gBAAgB,CAAC5F,KAAK,E,KAEzEnG,mBAAA,CAGM,OAHNgM,WAGM,G,8BAFJhM,mBAAA,CAA0C;IAAnCT,KAAK,EAAC;EAAY,GAAC,UAAQ,sB,gBAClCS,mBAAA,CAAuE;IAAhER,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IAzbzD,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAybmEH,MAAA,CAAAyL,gBAAgB,CAAC3F,GAAG,GAAA3F,MAAA;iDAApBH,MAAA,CAAAyL,gBAAgB,CAAC3F,GAAG,E,OAGzEpG,mBAAA,CAGI,OAHJiM,WAGI,GAFFjM,mBAAA,CAA8F;IAAtFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,mBAAmB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAA4L,sBAAA,IAAA5L,MAAA,CAAA4L,sBAAA,IAAA7L,IAAA,CAAsB;KAAE,OAAK,GACrFL,mBAAA,CAA4F;IAApFR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,iBAAiB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAEC,MAAA,CAAA6L,sBAAA,IAAA7L,MAAA,CAAA6L,sBAAA,IAAA9L,IAAA,CAAsB;KAAE,OAAK,E,OAI3FL,mBAAA,CAAyE;IAApET,KAAK,EAAC,gBAAgB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAAiL,qBAAqB;cAlcjExL,mBAAA,gBAucIA,mBAAA,0BAA6B,EACHO,MAAA,CAAA8L,eAAe,I,cAAzC5B,YAAA,CA4DWC,SAAA;IApgBfhL,GAAA;IAwcciL,EAAE,EAAC;MACX1K,mBAAA,CA0DM,OA1DNqM,WA0DM,GAzDJrM,mBAAA,CAuDM,OAvDNsM,WAuDM,GAtDJtM,mBAAA,CAqDM,OArDNuM,WAqDM,GApDJvM,mBAAA,CAmDM,OAnDNwM,WAmDM,GAlDJxM,mBAAA,CAGM,OAHNyM,WAGM,G,8BAFJzM,mBAAA,CAAiD;IAA7CT,KAAK,EAAC;EAAa,GAAC,sBAAoB,sBAC5CS,mBAAA,CAAkF;IAA1ER,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,WAAW;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAA8L,eAAe;QAEjEpM,mBAAA,CA6CM,OA7CN0M,WA6CM,G,8BA5CJ1M,mBAAA,CAGM;IAHDT,KAAK,EAAC;EAAkB,IAC3BS,mBAAA,CAAuC;IAApCT,KAAK,EAAC;EAAyB,IAndpDiB,gBAAA,CAmdyD,0GAEzC,E,sBAEAR,mBAAA,CAsCO;IAtCAmH,QAAM,EAAA/G,MAAA,SAAAA,MAAA,OAvd7BqF,cAAA,KAAApF,IAAA,KAuduCC,MAAA,CAAAqM,aAAA,IAAArM,MAAA,CAAAqM,aAAA,IAAAtM,IAAA,CAAa;MAClCL,mBAAA,CAGM,OAHN4M,WAGM,G,8BAFJ5M,mBAAA,CAA4C;IAArCT,KAAK,EAAC;EAAY,GAAC,YAAU,sB,gBACpCS,mBAAA,CAAiF;IAA1ER,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IA1d3D,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA0dqEH,MAAA,CAAAuM,eAAe,CAAC1G,KAAK,GAAA1F,MAAA;IAAE8G,QAAQ,EAAR;iDAAvBjH,MAAA,CAAAuM,eAAe,CAAC1G,KAAK,E,KAExEnG,mBAAA,CAGM,OAHN8M,WAGM,G,8BAFJ9M,mBAAA,CAA0C;IAAnCT,KAAK,EAAC;EAAY,GAAC,UAAQ,sB,gBAClCS,mBAAA,CAA+E;IAAxER,IAAI,EAAC,MAAM;IAACD,KAAK,EAAC,cAAc;IA9d3D,uBAAAa,MAAA,SAAAA,MAAA,OAAAK,MAAA,IA8dqEH,MAAA,CAAAuM,eAAe,CAACzG,GAAG,GAAA3F,MAAA;IAAE8G,QAAQ,EAAR;iDAArBjH,MAAA,CAAAuM,eAAe,CAACzG,GAAG,E,KAGtEpG,mBAAA,CAaM,OAbN+M,WAaM,GAZJ/M,mBAAA,CAKM,OALNgN,YAKM,G,gBAJJhN,mBAAA,CAAuH;IAAhHT,KAAK,EAAC,kBAAkB;IAACC,IAAI,EAAC,OAAO;IAACyN,IAAI,EAAC,YAAY;IAACzI,EAAE,EAAC,iBAAiB;IAAC/B,KAAK,EAAC,OAAO;IAnevH,uBAAArC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAmeiIH,MAAA,CAAA4M,UAAU,GAAAzM,MAAA;kDAAVH,MAAA,CAAA4M,UAAU,E,iCACrHlN,mBAAA,CAEQ;IAFDT,KAAK,EAAC,kBAAkB;IAAC4N,GAAG,EAAC;KAAkB,2BAEtD,qB,GAEFnN,mBAAA,CAKM,OALNoN,YAKM,G,gBAJJpN,mBAAA,CAAmH;IAA5GT,KAAK,EAAC,kBAAkB;IAACC,IAAI,EAAC,OAAO;IAACyN,IAAI,EAAC,YAAY;IAACzI,EAAE,EAAC,eAAe;IAAC/B,KAAK,EAAC,KAAK;IAzenH,uBAAArC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAye6HH,MAAA,CAAA4M,UAAU,GAAAzM,MAAA;kDAAVH,MAAA,CAAA4M,UAAU,E,iCACjHlN,mBAAA,CAEQ;IAFDT,KAAK,EAAC,kBAAkB;IAAC4N,GAAG,EAAC;KAAgB,wBAEpD,qB,KAIJnN,mBAAA,CAYM,OAZNqN,YAYM,GAXJrN,mBAAA,CAES;IAFDR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,wBAAwB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAA8L,eAAe;KAAU,UAEtF,GACApM,mBAAA,CAOS;IAPDR,IAAI,EAAC,QAAQ;IAACD,KAAK,EAAC,iBAAiB;IAAEK,QAAQ,EAAEU,MAAA,CAAAgN;MAC3ChN,MAAA,CAAAgN,WAAW,I,cAAvBzN,mBAAA,CAEO,QAvf7B0N,YAAA,EAAAnN,MAAA,UAAAA,MAAA,SAsfwBJ,mBAAA,CAA2C;IAAxCT,KAAK,EAAC;EAA6B,4BAtf9DiB,gBAAA,CAsfmE,gBAC7C,E,qBACAX,mBAAA,CAEO,QA1f7B2N,YAAA,EAAApN,MAAA,UAAAA,MAAA,SAyfwBJ,mBAAA,CAAuC;IAApCT,KAAK,EAAC;EAAyB,4BAzf1DiB,gBAAA,CAyf+D,UACzC,E,qBA1ftBiN,YAAA,E,sCAkgBQzN,mBAAA,CAAmE;IAA9DT,KAAK,EAAC,gBAAgB;IAAEY,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAK,MAAA,IAAEH,MAAA,CAAA8L,eAAe;YAlgB3DrM,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
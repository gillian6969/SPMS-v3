{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport AllSurveyStat from '../components/AllSurveyStat.vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  __name: 'SSPDashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const quizzesChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n    const problemByYearChart = ref(null);\n    const severityDistributionChart = ref(null);\n    const surveyStatsChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const failingStudents = ref(0);\n    const completedSurveys = ref(0);\n    const averageScore = ref(0);\n    const assessmentCompletion = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n    const quizzesGrades = ref([]);\n    const surveyData = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Loading states\n    const loadingSurveyData = ref(false);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasPerformanceData = computed(() => averageScore.value > 0);\n    const hasAssessmentData = computed(() => assessmentCompletion.value > 0);\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n    const hasSurveyData = computed(() => surveyData.value.length > 0);\n\n    // Calculated average survey statistics\n    const averageSurveyStats = computed(() => {\n      if (!surveyData.value || !Array.isArray(surveyData.value) || surveyData.value.length === 0) {\n        return [];\n      }\n\n      // Collect all problem types and their scores across all surveys\n      const problemsData = {};\n      surveyData.value.forEach(survey => {\n        if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n          survey.surveyStats.forEach(stat => {\n            if (!problemsData[stat.type]) {\n              problemsData[stat.type] = {\n                totalScore: 0,\n                count: 0\n              };\n            }\n            problemsData[stat.type].totalScore += stat.average || 0;\n            problemsData[stat.type].count += 1;\n          });\n        }\n      });\n\n      // Calculate average for each problem type\n      return Object.entries(problemsData).map(([type, data]) => ({\n        type,\n        average: data.count > 0 ? data.totalScore / data.count : 0\n      })).sort((a, b) => b.average - a.average); // Sort by average score descending\n    });\n\n    // Get severity class for progress bar\n    const getSeverityClass = score => {\n      if (score >= 7) return 'bg-danger';\n      if (score >= 5) return 'bg-warning';\n      if (score >= 3) return 'bg-info';\n      return 'bg-success';\n    };\n\n    // Get severity badge class\n    const getSeverityBadgeClass = score => {\n      if (score >= 7) return 'bg-danger';\n      if (score >= 5) return 'bg-warning';\n      if (score >= 3) return 'bg-info';\n      return 'bg-success';\n    };\n\n    // Get severity label\n    const getSeverityLabel = score => {\n      if (score >= 7) return 'High';\n      if (score >= 5) return 'Medium';\n      if (score >= 3) return 'Low';\n      return 'Minimal';\n    };\n\n    // Get recommendation\n    const getRecommendation = score => {\n      if (score >= 7) return 'Immediate attention required';\n      if (score >= 5) return 'Consider additional support';\n      if (score >= 3) return 'Monitor closely';\n      return 'No concerns';\n    };\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId,\n            year\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data) {\n          // Extract unique sections and subjects\n          const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))];\n          const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))];\n          sections.value = uniqueSections.sort();\n          subjects.value = uniqueSubjects.sort();\n          console.log('Loaded sections and subjects:', {\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        sections.value = [];\n        subjects.value = [];\n      }\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n    const fetchDashboardData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) {\n          console.error('No teacher ID found');\n          return;\n        }\n        const token = store.state.auth.token;\n        if (!token) {\n          console.error('No auth token found');\n          return;\n        }\n        console.log('Fetching dashboard data with params:', {\n          teacherId,\n          year: selectedYear.value,\n          section: selectedSection.value,\n          subject: selectedSubject.value,\n          startDate: selectedStartDate.value,\n          endDate: selectedEndDate.value\n        });\n\n        // Get dashboard stats\n        const response = await axios.get(`http://localhost:8000/api/dashboard/stats`, {\n          params: {\n            year: selectedYear.value,\n            section: selectedSection.value,\n            subject: selectedSubject.value,\n            startDate: selectedStartDate.value,\n            endDate: selectedEndDate.value\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n        if (response.data) {\n          // Update stats\n          totalStudents.value = response.data.totalStudents || 0;\n          totalSections.value = response.data.totalSections || 0;\n          totalSubjects.value = response.data.totalSubjects || 0;\n          averageScore.value = response.data.averageScore || 0;\n          assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n          recentActivities.value = response.data.recentActivities || [];\n        }\n\n        // Get failing students count directly from failing students list\n        try {\n          const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n\n          // Get completed surveys to exclude those students\n          const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          const completedSurveyIds = new Set();\n          if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n            completedSurveysResponse.data.forEach(survey => {\n              completedSurveyIds.add(survey.studentId);\n            });\n\n            // Set completed surveys count\n            completedSurveys.value = completedSurveysResponse.data.length;\n\n            // Also store survey data for visualization\n            surveyData.value = completedSurveysResponse.data;\n          } else {\n            completedSurveys.value = 0;\n            surveyData.value = [];\n          }\n\n          // Filter out students who have completed surveys\n          const failingStudentList = failingListResponse.data?.list || [];\n          if (Array.isArray(failingStudentList)) {\n            const filteredCount = failingStudentList.filter(student => !completedSurveyIds.has(student.info._id)).length;\n            failingStudents.value = filteredCount;\n          } else {\n            failingStudents.value = 0;\n          }\n        } catch (error) {\n          console.error('Error fetching failing students:', error);\n          failingStudents.value = 0;\n          completedSurveys.value = 0;\n          surveyData.value = [];\n        }\n\n        // Log data before updating charts\n        console.log('Performance Distribution:', response.data.performanceDistribution);\n        console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n        console.log('Performance Trends:', response.data.performanceTrends);\n        console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n        // Update charts with new data\n        if (Array.isArray(response.data.performanceDistribution)) {\n          updatePerformanceChart(response.data);\n        } else {\n          console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n        }\n        if (response.data.assessmentTypeDistribution) {\n          updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n        } else {\n          console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n          updateAssessmentTypeChart([{\n            type: 'Quiz',\n            percentage: 0\n          }, {\n            type: 'Activity',\n            percentage: 0\n          }, {\n            type: 'Performance Task',\n            percentage: 0\n          }]);\n        }\n        if (Array.isArray(response.data.performanceTrends)) {\n          updatePerformanceTrendChart(response.data.performanceTrends);\n        } else {\n          console.warn('Invalid performance trends data:', response.data.performanceTrends);\n          updatePerformanceTrendChart([]);\n        }\n        if (response.data.assessmentCompletion?.byType) {\n          updateAssessmentTypePerformanceChart(response.data);\n        } else {\n          console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n\n        // Reset data on error\n        totalStudents.value = 0;\n        totalSections.value = 0;\n        totalSubjects.value = 0;\n        failingStudents.value = 0;\n        averageScore.value = 0;\n        assessmentCompletion.value = 0;\n        recentActivities.value = [];\n\n        // Update charts with empty data\n        updatePerformanceChart({\n          performanceDistribution: [0, 0, 0, 0, 0]\n        });\n        updateAssessmentTypeChart([{\n          type: 'Quiz',\n          percentage: 0\n        }, {\n          type: 'Activity',\n          percentage: 0\n        }, {\n          type: 'Performance Task',\n          percentage: 0\n        }]);\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          assessmentCompletion: {\n            byType: {\n              quiz: 0,\n              activity: 0,\n              performancetask: 0\n            }\n          }\n        });\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process performance distribution data\n      const performanceData = Array.isArray(data.performanceDistribution) ? data.performanceDistribution : [0, 0, 0, 0, 0];\n      console.log('Performance distribution data:', performanceData);\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n          datasets: [{\n            label: 'Number of Students',\n            data: performanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for highest\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow\n            'rgba(251, 146, 60, 0.8)',\n            // Orange\n            'rgba(239, 68, 68, 0.8)' // Red for lowest\n            ],\n            borderWidth: 1,\n            borderRadius: 5\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${value} students (${percentage}%)`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1\n              },\n              title: {\n                display: true,\n                text: 'Number of Students'\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the assessment type distribution data\n      const labels = data.labels || [];\n      const datasets = data.datasets || [];\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets.map((dataset, index) => ({\n            label: dataset.type,\n            data: dataset.data,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green\n            'rgba(59, 130, 246, 0.8)',\n            // Blue\n            'rgba(251, 191, 36, 0.8)' // Yellow\n            ][index],\n            borderWidth: 1\n          }))\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Assessments'\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.dataset.label}: ${context.raw || 0} assessments`\n              }\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n\n    // Watch surveyData for changes to update charts\n    watch(surveyData, () => {\n      loadingSurveyData.value = true;\n\n      // Use nextTick to ensure DOM is updated\n      nextTick(() => {\n        try {\n          createProblemByYearChart();\n          createSeverityDistributionChart();\n        } catch (error) {\n          console.error('Error creating survey charts:', error);\n        } finally {\n          loadingSurveyData.value = false;\n        }\n      });\n    }, {\n      deep: true\n    });\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          updatePerformanceChart({\n            performanceDistribution: [0, 0, 0, 0, 0]\n          });\n          updateAssessmentTypeChart([{\n            type: 'Quiz',\n            percentage: 0\n          }, {\n            type: 'Activity',\n            percentage: 0\n          }, {\n            type: 'Performance Task',\n            percentage: 0\n          }]);\n          updatePerformanceTrendChart([]);\n          updateAssessmentTypePerformanceChart({\n            assessmentCompletion: {\n              byType: {\n                quiz: 0,\n                activity: 0,\n                performancetask: 0\n              }\n            }\n          });\n\n          // Initialize survey charts\n          loadingSurveyData.value = true;\n          createProblemByYearChart();\n          createSeverityDistributionChart();\n          loadingSurveyData.value = false;\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n\n          // Fetch Grades\n          const grades = await axios.get('http://localhost:8000/api/dashboard/failing/analytics');\n          const quizzes = grades.data.filter(a => a.type === 'Quiz') || [];\n          const activity = grades.data.filter(a => a.type === 'Activity') || [];\n          const performanceTask = grades.data.filter(a => a.type === 'Performance Task') || [];\n          quizzes[0].data.map(datas => {\n            // console.log(datas.scores);\n            let temp = 0;\n            let counter = 0;\n            Object.entries(datas.scores).forEach(([id, score]) => {\n              if (score <= 50) {\n                temp = temp + score;\n                counter++;\n              }\n            });\n            quizzesGrades.value.push({\n              average: Number((temp / counter).toFixed(2)) || 0,\n              subject: datas.subject\n            });\n          });\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n    });\n\n    // Create chart for problem types by year level\n    const createProblemByYearChart = () => {\n      if (!problemByYearChart.value) return;\n      const ctx = problemByYearChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      if (!surveyData.value || surveyData.value.length === 0) {\n        // If no data, show empty chart\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: ['1st Year', '2nd Year', '3rd Year', '4th Year'],\n            datasets: [{\n              label: 'Academic',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(54, 162, 235, 0.7)'\n            }, {\n              label: 'Financial',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(255, 99, 132, 0.7)'\n            }, {\n              label: 'Personal',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(255, 206, 86, 0.7)'\n            }, {\n              label: 'Health',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(75, 192, 192, 0.7)'\n            }, {\n              label: 'Social',\n              data: [0, 0, 0, 0],\n              backgroundColor: 'rgba(153, 102, 255, 0.7)'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                stacked: true\n              },\n              y: {\n                stacked: true,\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: 'Number of Problems'\n                }\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Process data - group problem types by year\n      const problemTypesByYear = {\n        '1st': {},\n        '2nd': {},\n        '3rd': {},\n        '4th': {},\n        '5th': {},\n        '6th': {}\n      };\n\n      // Collect all unique problem types\n      const allProblemTypes = new Set();\n\n      // Process all surveys and their stats\n      surveyData.value.forEach(survey => {\n        const yearLevel = survey.year || 'Unknown';\n        if (!problemTypesByYear[yearLevel]) {\n          problemTypesByYear[yearLevel] = {};\n        }\n        if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n          survey.surveyStats.forEach(stat => {\n            const problemType = stat.type;\n            allProblemTypes.add(problemType);\n            if (!problemTypesByYear[yearLevel][problemType]) {\n              problemTypesByYear[yearLevel][problemType] = 0;\n            }\n            problemTypesByYear[yearLevel][problemType]++;\n          });\n        }\n      });\n\n      // Convert to chart data format\n      const problemTypesArray = Array.from(allProblemTypes);\n      const yearsArray = Object.keys(problemTypesByYear).filter(year => year !== 'Unknown' && Object.keys(problemTypesByYear[year]).length > 0);\n\n      // Create datasets for each problem type\n      const datasets = problemTypesArray.map((problemType, index) => {\n        const colors = ['rgba(54, 162, 235, 0.7)',\n        // Blue\n        'rgba(255, 99, 132, 0.7)',\n        // Red\n        'rgba(255, 206, 86, 0.7)',\n        // Yellow\n        'rgba(75, 192, 192, 0.7)',\n        // Green\n        'rgba(153, 102, 255, 0.7)',\n        // Purple\n        'rgba(255, 159, 64, 0.7)' // Orange\n        ];\n        return {\n          label: problemType,\n          data: yearsArray.map(year => problemTypesByYear[year][problemType] || 0),\n          backgroundColor: colors[index % colors.length]\n        };\n      });\n\n      // Create the chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: yearsArray,\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Problems'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  return `${context.dataset.label}: ${value} problems`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Create chart for problem severity distribution\n    const createSeverityDistributionChart = () => {\n      if (!severityDistributionChart.value) return;\n      const ctx = severityDistributionChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      if (!surveyData.value || surveyData.value.length === 0) {\n        // If no data, show empty chart\n        new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['High', 'Medium', 'Low', 'Minimal'],\n            datasets: [{\n              data: [0, 0, 0, 0],\n              backgroundColor: ['rgba(239, 68, 68, 0.8)',\n              // Red (High)\n              'rgba(251, 191, 36, 0.8)',\n              // Yellow (Medium)\n              'rgba(59, 130, 246, 0.8)',\n              // Blue (Low)\n              'rgba(52, 211, 153, 0.8)' // Green (Minimal)\n              ]\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right'\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Process data - count problems by severity\n      const severityCounts = {\n        High: 0,\n        Medium: 0,\n        Low: 0,\n        Minimal: 0\n      };\n\n      // Process all surveys and their stats\n      surveyData.value.forEach(survey => {\n        if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n          survey.surveyStats.forEach(stat => {\n            const average = stat.average || 0;\n            if (average >= 7) {\n              severityCounts.High++;\n            } else if (average >= 5) {\n              severityCounts.Medium++;\n            } else if (average >= 3) {\n              severityCounts.Low++;\n            } else {\n              severityCounts.Minimal++;\n            }\n          });\n        }\n      });\n\n      // Create the chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['High', 'Medium', 'Low', 'Minimal'],\n          datasets: [{\n            data: [severityCounts.High, severityCounts.Medium, severityCounts.Low, severityCounts.Minimal],\n            backgroundColor: ['rgba(239, 68, 68, 0.8)',\n            // Red (High)\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow (Medium)\n            'rgba(59, 130, 246, 0.8)',\n            // Blue (Low)\n            'rgba(52, 211, 153, 0.8)' // Green (Minimal)\n            ]\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                boxWidth: 15,\n                padding: 15\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = Object.values(severityCounts).reduce((sum, val) => sum + val, 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Create survey stats chart\n    const createSurveyStatsChart = () => {\n      if (!surveyStatsChart.value) return;\n      const ctx = surveyStatsChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n      if (!averageSurveyStats.value || averageSurveyStats.value.length === 0) {\n        // If no data, show empty chart\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: ['No data available'],\n            datasets: [{\n              label: 'Average Severity',\n              data: [0],\n              backgroundColor: 'rgba(54, 162, 235, 0.7)'\n            }]\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                beginAtZero: true,\n                max: 10,\n                title: {\n                  display: true,\n                  text: 'Average Severity (0-10)'\n                }\n              }\n            }\n          }\n        });\n        return;\n      }\n\n      // Sort data by severity (highest to lowest)\n      const sortedStats = [...averageSurveyStats.value].sort((a, b) => b.average - a.average);\n\n      // Create arrays for chart data\n      const labels = sortedStats.map(stat => stat.type);\n      const data = sortedStats.map(stat => stat.average);\n\n      // Create color array based on severity\n      const backgroundColors = data.map(value => {\n        if (value >= 7) return 'rgba(220, 53, 69, 0.7)'; // High - danger\n        if (value >= 5) return 'rgba(255, 193, 7, 0.7)'; // Medium - warning\n        if (value >= 3) return 'rgba(23, 162, 184, 0.7)'; // Low - info\n        return 'rgba(40, 167, 69, 0.7)'; // Minimal - success\n      });\n\n      // Create the chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Average Severity',\n            data: data,\n            backgroundColor: backgroundColors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          indexAxis: 'y',\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              beginAtZero: true,\n              max: 10,\n              title: {\n                display: true,\n                text: 'Average Severity (0-10)'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const severity = getSeverityLabel(value);\n                  return `Severity: ${value.toFixed(2)} (${severity})`;\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const __returned__ = {\n      store,\n      performanceChart,\n      attendanceChart,\n      assessmentTypeChart,\n      performanceTrendChart,\n      quizzesChart,\n      assessmentTypePerformanceChart,\n      problemByYearChart,\n      severityDistributionChart,\n      surveyStatsChart,\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      failingStudents,\n      completedSurveys,\n      averageScore,\n      assessmentCompletion,\n      recentActivities,\n      sections,\n      subjects,\n      quizzesGrades,\n      surveyData,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loadingSurveyData,\n      getTeacherId,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      hasSurveyData,\n      averageSurveyStats,\n      getSeverityClass,\n      getSeverityBadgeClass,\n      getSeverityLabel,\n      getRecommendation,\n      fetchTeacherSectionsAndSubjects,\n      handleYearChange,\n      getFilterDisplay,\n      fetchDashboardData,\n      updatePerformanceChart,\n      updateAssessmentTypeChart,\n      updatePerformanceTrendChart,\n      updateAssessmentTypePerformanceChart,\n      formatDate,\n      applyFilters,\n      createProblemByYearChart,\n      createSeverityDistributionChart,\n      createSurveyStatsChart,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      nextTick,\n      AllSurveyStat,\n      get useStore() {\n        return useStore;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get axios() {\n        return axios;\n      },\n      get moment() {\n        return moment;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","AllSurveyStat","useStore","Chart","axios","moment","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","quizzesChart","assessmentTypePerformanceChart","problemByYearChart","severityDistributionChart","surveyStatsChart","totalStudents","totalSections","totalSubjects","failingStudents","completedSurveys","averageScore","assessmentCompletion","recentActivities","sections","subjects","quizzesGrades","surveyData","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","loadingSurveyData","getTeacherId","user","state","auth","_id","console","error","hasPerformanceData","value","hasAssessmentData","hasActivity","length","hasSurveyData","averageSurveyStats","Array","isArray","problemsData","forEach","survey","surveyStats","stat","type","totalScore","count","average","Object","entries","map","data","sort","a","b","getSeverityClass","score","getSeverityBadgeClass","getSeverityLabel","getRecommendation","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueSections","Set","record","section","uniqueSubjects","subject","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","startDate","endDate","response","overall","failingListResponse","completedSurveysResponse","completedSurveyIds","add","studentId","failingStudentList","list","filteredCount","filter","student","has","info","performanceDistribution","assessmentTypeDistribution","performanceTrends","byType","updatePerformanceChart","warn","updateAssessmentTypeChart","percentage","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","quiz","activity","performancetask","ctx","getContext","existingChart","getChart","destroy","performanceData","labels","datasets","label","backgroundColor","borderWidth","borderRadius","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","raw","total","reduce","toFixed","scales","y","beginAtZero","ticks","stepSize","title","text","dataset","index","x","stacked","maxRotation","minRotation","position","validData","d","date","Number","borderColor","tension","fill","pointRadius","pointHoverRadius","dataPoint","dataIndex","name","max","font","size","weight","trendsByType","Quiz","Activity","trend","Date","parseFloat","keys","allDates","values","flat","item","colors","color","point","find","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore","createProblemByYearChart","createSeverityDistributionChart","deep","grades","quizzes","performanceTask","datas","temp","counter","scores","id","problemTypesByYear","allProblemTypes","yearLevel","problemType","problemTypesArray","from","yearsArray","severityCounts","High","Medium","Low","Minimal","boxWidth","padding","sum","val","createSurveyStatsChart","indexAxis","sortedStats","backgroundColors","severity"],"sources":["D:/au_dev/client/src/views/SSPDashboard.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport AllSurveyStat from '../components/AllSurveyStat.vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst store = useStore()\nconst performanceChart = ref(null)\nconst attendanceChart = ref(null)\nconst assessmentTypeChart = ref(null)\nconst performanceTrendChart = ref(null)\nconst quizzesChart = ref(null)\nconst assessmentTypePerformanceChart = ref(null)\nconst problemByYearChart = ref(null)\nconst severityDistributionChart = ref(null)\nconst surveyStatsChart = ref(null)\n\n// Data refs\nconst totalStudents = ref(0)\nconst totalSections = ref(0)\nconst totalSubjects = ref(0)\nconst failingStudents = ref(0)\nconst completedSurveys = ref(0)\nconst averageScore = ref(0)\nconst assessmentCompletion = ref(0)\nconst recentActivities = ref([])\nconst sections = ref([])\nconst subjects = ref([])\nconst quizzesGrades = ref([]);\nconst surveyData = ref([]);\n\n// Filter refs\nconst selectedYear = ref(localStorage.getItem('selectedYear') || '')\nconst selectedSection = ref(localStorage.getItem('selectedSection') || '')\nconst selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\nconst selectedStartDate = ref('')\nconst selectedEndDate = ref('')\nconst today = computed(() => moment().format('YYYY-MM-DD'))\n\n// Loading states\nconst loadingSurveyData = ref(false)\n\n// Get teacher ID from store\nconst getTeacherId = () => {\n  const user = store.state.auth.user\n  if (!user || !user._id) {\n    console.error('No teacher ID found in store')\n    return null\n  }\n  return user._id\n}\n\n// Computed properties for data availability\nconst hasPerformanceData = computed(() => averageScore.value > 0)\nconst hasAssessmentData = computed(() => assessmentCompletion.value > 0)\nconst hasActivity = computed(() => recentActivities.value.length > 0)\nconst hasSurveyData = computed(() => surveyData.value.length > 0)\n\n// Calculated average survey statistics\nconst averageSurveyStats = computed(() => {\n  if (!surveyData.value || !Array.isArray(surveyData.value) || surveyData.value.length === 0) {\n    return [];\n  }\n  \n  // Collect all problem types and their scores across all surveys\n  const problemsData = {};\n  \n  surveyData.value.forEach(survey => {\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        if (!problemsData[stat.type]) {\n          problemsData[stat.type] = {\n            totalScore: 0,\n            count: 0\n          };\n        }\n        \n        problemsData[stat.type].totalScore += stat.average || 0;\n        problemsData[stat.type].count += 1;\n      });\n    }\n  });\n  \n  // Calculate average for each problem type\n  return Object.entries(problemsData).map(([type, data]) => ({\n    type,\n    average: data.count > 0 ? data.totalScore / data.count : 0\n  })).sort((a, b) => b.average - a.average); // Sort by average score descending\n});\n\n// Get severity class for progress bar\nconst getSeverityClass = (score) => {\n  if (score >= 7) return 'bg-danger';\n  if (score >= 5) return 'bg-warning';\n  if (score >= 3) return 'bg-info';\n  return 'bg-success';\n}\n\n// Get severity badge class\nconst getSeverityBadgeClass = (score) => {\n  if (score >= 7) return 'bg-danger';\n  if (score >= 5) return 'bg-warning';\n  if (score >= 3) return 'bg-info';\n  return 'bg-success';\n}\n\n// Get severity label\nconst getSeverityLabel = (score) => {\n  if (score >= 7) return 'High';\n  if (score >= 5) return 'Medium';\n  if (score >= 3) return 'Low';\n  return 'Minimal';\n}\n\n// Get recommendation\nconst getRecommendation = (score) => {\n  if (score >= 7) return 'Immediate attention required';\n  if (score >= 5) return 'Consider additional support';\n  if (score >= 3) return 'Monitor closely';\n  return 'No concerns';\n}\n\nconst fetchTeacherSectionsAndSubjects = async (year = '') => {\n  try {\n    const teacherId = getTeacherId()\n    if (!teacherId) return\n\n    const token = store.state.auth.token\n    console.log('Fetching sections and subjects for:', { teacherId, year })\n\n    // First get all class records to extract sections\n    const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n      params: { \n        teacherId,\n        year \n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n\n    if (recordsResponse.data) {\n      // Extract unique sections and subjects\n      const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))]\n      const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))]\n      \n      sections.value = uniqueSections.sort()\n      subjects.value = uniqueSubjects.sort()\n      \n      console.log('Loaded sections and subjects:', {\n        sections: sections.value,\n        subjects: subjects.value\n      })\n    }\n  } catch (error) {\n    console.error('Error fetching teacher sections and subjects:', error)\n    sections.value = []\n    subjects.value = []\n  }\n}\n\nconst handleYearChange = async () => {\n  selectedSection.value = ''\n  selectedSubject.value = ''\n  if (selectedYear.value) {\n    await fetchTeacherSectionsAndSubjects(selectedYear.value)\n  } else {\n    sections.value = []\n    subjects.value = []\n  }\n  await fetchDashboardData()\n}\n\nconst getFilterDisplay = () => {\n  const filters = []\n  if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n  if (selectedSection.value) filters.push(selectedSection.value)\n  if (selectedSubject.value) filters.push(selectedSubject.value)\n  return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n}\n\nconst fetchDashboardData = async () => {\n  try {\n    const teacherId = getTeacherId();\n    if (!teacherId) {\n      console.error('No teacher ID found');\n      return;\n    }\n\n    const token = store.state.auth.token;\n    if (!token) {\n      console.error('No auth token found');\n      return;\n    }\n\n    console.log('Fetching dashboard data with params:', {\n      teacherId,\n      year: selectedYear.value,\n      section: selectedSection.value,\n      subject: selectedSubject.value,\n      startDate: selectedStartDate.value,\n      endDate: selectedEndDate.value\n    });\n\n    // Get dashboard stats\n    const response = await axios.get(`http://localhost:8000/api/dashboard/stats`, {\n      params: {\n        year: selectedYear.value,\n        section: selectedSection.value,\n        subject: selectedSubject.value,\n        startDate: selectedStartDate.value,\n        endDate: selectedEndDate.value\n      },\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n\n    console.log('Dashboard data received:', response.data);\n\n    if (response.data) {\n      // Update stats\n      totalStudents.value = response.data.totalStudents || 0;\n      totalSections.value = response.data.totalSections || 0;\n      totalSubjects.value = response.data.totalSubjects || 0;\n      averageScore.value = response.data.averageScore || 0;\n      assessmentCompletion.value = response.data.assessmentCompletion?.overall || 0;\n      recentActivities.value = response.data.recentActivities || [];\n    }\n    \n    // Get failing students count directly from failing students list\n    try {\n      const failingListResponse = await axios.get('http://localhost:8000/api/students/failing/list', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      // Get completed surveys to exclude those students\n      const completedSurveysResponse = await axios.get('http://localhost:8000/api/survey/submitted', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      const completedSurveyIds = new Set();\n      if (completedSurveysResponse.data && Array.isArray(completedSurveysResponse.data)) {\n        completedSurveysResponse.data.forEach(survey => {\n          completedSurveyIds.add(survey.studentId);\n        });\n        \n        // Set completed surveys count\n        completedSurveys.value = completedSurveysResponse.data.length;\n        \n        // Also store survey data for visualization\n        surveyData.value = completedSurveysResponse.data;\n      } else {\n        completedSurveys.value = 0;\n        surveyData.value = [];\n      }\n      \n      // Filter out students who have completed surveys\n      const failingStudentList = failingListResponse.data?.list || [];\n      if (Array.isArray(failingStudentList)) {\n        const filteredCount = failingStudentList.filter(student => \n          !completedSurveyIds.has(student.info._id)\n        ).length;\n        \n        failingStudents.value = filteredCount;\n      } else {\n        failingStudents.value = 0;\n      }\n    } catch (error) {\n      console.error('Error fetching failing students:', error);\n      failingStudents.value = 0;\n      completedSurveys.value = 0;\n      surveyData.value = [];\n    }\n\n    // Log data before updating charts\n    console.log('Performance Distribution:', response.data.performanceDistribution);\n    console.log('Assessment Type Distribution:', response.data.assessmentTypeDistribution);\n    console.log('Performance Trends:', response.data.performanceTrends);\n    console.log('Assessment Completion by Type:', response.data.assessmentCompletion?.byType);\n\n    // Update charts with new data\n    if (Array.isArray(response.data.performanceDistribution)) {\n      updatePerformanceChart(response.data);\n    } else {\n      console.warn('Invalid performance distribution data:', response.data.performanceDistribution);\n      updatePerformanceChart({\n        performanceDistribution: [0, 0, 0, 0, 0]\n      });\n    }\n\n    if (response.data.assessmentTypeDistribution){\n      updateAssessmentTypeChart(response.data.assessmentTypeDistribution);\n    } else {\n      console.warn('Invalid assessment type distribution data:', response.data.assessmentTypeDistribution);\n      updateAssessmentTypeChart([\n        { type: 'Quiz', percentage: 0 },\n        { type: 'Activity', percentage: 0 },\n        { type: 'Performance Task', percentage: 0 }\n      ]);\n    }\n\n    if (Array.isArray(response.data.performanceTrends)) {\n      updatePerformanceTrendChart(response.data.performanceTrends);\n    } else {\n      console.warn('Invalid performance trends data:', response.data.performanceTrends);\n      updatePerformanceTrendChart([]);\n    }\n\n    if (response.data.assessmentCompletion?.byType) {\n      updateAssessmentTypePerformanceChart(response.data);\n    } else {\n      console.warn('Invalid assessment completion data:', response.data.assessmentCompletion);\n      updateAssessmentTypePerformanceChart({\n        assessmentCompletion: {\n          byType: {\n            quiz: 0,\n            activity: 0,\n            performancetask: 0\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n    }\n    \n    // Reset data on error\n    totalStudents.value = 0;\n    totalSections.value = 0;\n    totalSubjects.value = 0;\n    failingStudents.value = 0;\n    averageScore.value = 0;\n    assessmentCompletion.value = 0;\n    recentActivities.value = [];\n    \n    // Update charts with empty data\n    updatePerformanceChart({\n      performanceDistribution: [0, 0, 0, 0, 0]\n    });\n    updateAssessmentTypeChart([\n      { type: 'Quiz', percentage: 0 },\n      { type: 'Activity', percentage: 0 },\n      { type: 'Performance Task', percentage: 0 }\n    ]);\n    updatePerformanceTrendChart([]);\n    updateAssessmentTypePerformanceChart({\n      assessmentCompletion: {\n        byType: {\n          quiz: 0,\n          activity: 0,\n          performancetask: 0\n        }\n      }\n    });\n  }\n}\n\nconst updatePerformanceChart = (data) => {\n  if (!performanceChart.value) return;\n  \n  const ctx = performanceChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process performance distribution data\n  const performanceData = Array.isArray(data.performanceDistribution) \n    ? data.performanceDistribution \n    : [0, 0, 0, 0, 0];\n  \n  console.log('Performance distribution data:', performanceData);\n\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n      datasets: [{\n        label: 'Number of Students',\n        data: performanceData,\n        backgroundColor: [\n          'rgba(52, 211, 153, 0.8)',  // Green for highest\n          'rgba(59, 130, 246, 0.8)',  // Blue\n          'rgba(251, 191, 36, 0.8)',  // Yellow\n          'rgba(251, 146, 60, 0.8)',  // Orange\n          'rgba(239, 68, 68, 0.8)'    // Red for lowest\n        ],\n        borderWidth: 1,\n        borderRadius: 5\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = performanceData.reduce((a, b) => a + (b || 0), 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${value} students (${percentage}%)`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            stepSize: 1\n          },\n          title: {\n            display: true,\n            text: 'Number of Students'\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updateAssessmentTypeChart = (data) => {\n  if (!assessmentTypeChart.value) return;\n  \n  const ctx = assessmentTypeChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process the assessment type distribution data\n  const labels = data.labels || [];\n  const datasets = data.datasets || [];\n  \n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: datasets.map((dataset, index) => ({\n        label: dataset.type,\n        data: dataset.data,\n        backgroundColor: [\n          'rgba(52, 211, 153, 0.8)',  // Green\n          'rgba(59, 130, 246, 0.8)',  // Blue\n          'rgba(251, 191, 36, 0.8)'   // Yellow\n        ][index],\n        borderWidth: 1\n      }))\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          stacked: true,\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n          }\n        },\n        y: {\n          stacked: true,\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Number of Assessments'\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => `${context.dataset.label}: ${context.raw || 0} assessments`\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updatePerformanceTrendChart = (data) => {\n  if (!performanceTrendChart.value) {\n    console.warn('Performance trend chart reference not found');\n    return;\n  }\n  \n  const ctx = performanceTrendChart.value.getContext('2d');\n  if (!ctx) {\n    console.warn('Could not get 2d context for performance trend chart');\n    return;\n  }\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) {\n    existingChart.destroy();\n  }\n\n  // Ensure data is valid\n  const validData = Array.isArray(data) ? data : [];\n  console.log('Creating performance trend chart with data:', validData);\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n      datasets: [{\n        label: 'Average Score',\n        data: validData.map(d => Number(d.score) || 0),\n        borderColor: '#4CAF50',\n        backgroundColor: 'rgba(76, 175, 80, 0.1)',\n        tension: 0.4,\n        fill: true,\n        pointRadius: 4,\n        pointHoverRadius: 6\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const dataPoint = validData[context.dataIndex];\n              return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          ticks: {\n            stepSize: 20,\n            font: {\n              size: 12\n            }\n          },\n          title: {\n            display: true,\n            text: 'Average Score (%)',\n            font: {\n              size: 14,\n              weight: 'bold'\n            }\n          }\n        },\n        x: {\n          ticks: {\n            font: {\n              size: 12\n            },\n            maxRotation: 45,\n            minRotation: 45\n          }\n        }\n      }\n    }\n  });\n};\n\nconst updateAssessmentTypePerformanceChart = (data) => {\n  if (!assessmentTypePerformanceChart.value) return;\n  \n  const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n  if (!ctx) return;\n\n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n\n  // Process the performance trends data by assessment type\n  const trendsByType = {\n    Quiz: [],\n    Activity: [],\n    'Performance Task': []\n  };\n\n  // Process performance trends data\n  if (Array.isArray(data.performanceTrends)) {\n    data.performanceTrends.forEach(trend => {\n      const type = trend.type || trend.name;\n      if (type in trendsByType) {\n        trendsByType[type].push({\n          date: new Date(trend.date),\n          score: parseFloat(trend.score) || 0\n        });\n      }\n    });\n  }\n\n  // Sort data points by date for each type\n  Object.keys(trendsByType).forEach(type => {\n    trendsByType[type].sort((a, b) => a.date - b.date);\n  });\n\n  // Get unique dates across all types\n  const allDates = [...new Set(\n    Object.values(trendsByType)\n      .flat()\n      .map(item => item.date)\n  )].sort((a, b) => a - b);\n\n  // Create datasets\n  const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n    const colors = [\n      'rgb(52, 211, 153)',   // Green for Quiz\n      'rgb(59, 130, 246)',   // Blue for Activity\n      'rgb(251, 191, 36)'    // Yellow for Performance Task\n    ];\n    const color = colors[index];\n\n    return {\n      label: type,\n      data: allDates.map(date => {\n        const point = data.find(d => d.date.getTime() === date.getTime());\n        return point ? point.score : null;\n      }),\n      borderColor: color,\n      backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n      fill: true,\n      tension: 0.4,\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      spanGaps: true // This will connect points even if there are null values\n    };\n  });\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n      datasets\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      interaction: {\n        intersect: false,\n        mode: 'index'\n      },\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n              return `${context.dataset.label}: ${value}%`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          title: {\n            display: true,\n            text: 'Score (%)'\n          }\n        },\n        x: {\n          ticks: {\n            maxRotation: 45,\n            minRotation: 45\n        }\n      }\n    }\n}\n  });\n};\n\nconst formatDate = (date) => {\n  return moment(date).format('MMM D, YYYY')\n}\n\nconst applyFilters = async () => {\n  // Save selected values to localStorage\n  if (selectedYear.value) {\n    localStorage.setItem('selectedYear', selectedYear.value)\n  } else {\n    localStorage.removeItem('selectedYear')\n  }\n\n  if (selectedSection.value) {\n    localStorage.setItem('selectedSection', selectedSection.value)\n  } else {\n    localStorage.removeItem('selectedSection')\n  }\n\n  if (selectedSubject.value) {\n    localStorage.setItem('selectedSubject', selectedSubject.value)\n  } else {\n    localStorage.removeItem('selectedSubject')\n  }\n\n  await fetchDashboardData()\n}\n\n// Watch for filter changes\nwatch(selectedYear, handleYearChange)\nwatch([selectedSection, selectedSubject], applyFilters)\nwatch([selectedStartDate, selectedEndDate], () => {\n  if (selectedStartDate.value && selectedEndDate.value) {\n    // Validate date range\n    const start = moment(selectedStartDate.value);\n    const end = moment(selectedEndDate.value);\n    \n    if (end.isBefore(start)) {\n      selectedEndDate.value = selectedStartDate.value;\n    }\n    \n    fetchDashboardData();\n  }\n})\n\n// Watch surveyData for changes to update charts\nwatch(surveyData, () => {\n  loadingSurveyData.value = true;\n  \n  // Use nextTick to ensure DOM is updated\n  nextTick(() => {\n    try {\n      createProblemByYearChart();\n      createSeverityDistributionChart();\n    } catch (error) {\n      console.error('Error creating survey charts:', error);\n    } finally {\n      loadingSurveyData.value = false;\n    }\n  });\n}, { deep: true })\n\nonMounted(async () => {\n  if (store.state.auth.user?._id && store.state.auth.token) {\n    console.log('Component mounted, initializing...');\n    \n    // Wait for the next tick to ensure DOM elements are rendered\n    await nextTick();\n    \n    try {\n      // Initialize empty charts first\n      console.log('Initializing empty charts...');\n      \n      updatePerformanceChart({\n        performanceDistribution: [0, 0, 0, 0, 0]\n      });\n      updateAssessmentTypeChart([\n        { type: 'Quiz', percentage: 0 },\n        { type: 'Activity', percentage: 0 },\n        { type: 'Performance Task', percentage: 0 }\n      ]);\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        assessmentCompletion: {\n          byType: {\n            quiz: 0,\n            activity: 0,\n            performancetask: 0\n          }\n        }\n      });\n      \n      // Initialize survey charts\n      loadingSurveyData.value = true;\n      createProblemByYearChart();\n      createSeverityDistributionChart();\n      loadingSurveyData.value = false;\n      \n      // Fetch sections and subjects\n      await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      console.log('Sections and subjects fetched');\n      \n      // Fetch actual dashboard data\n      await fetchDashboardData();\n      console.log('Initial data fetch completed');\n\n      // Fetch Grades\n      const grades = await axios.get('http://localhost:8000/api/dashboard/failing/analytics',);\n      const quizzes = grades.data.filter(a => a.type === 'Quiz') || [];\n      \n      const activity = grades.data.filter(a => a.type === 'Activity') || [];\n      const performanceTask = grades.data.filter(a => a.type === 'Performance Task') || [];\n\n      quizzes[0].data.map((datas) => {\n        // console.log(datas.scores);\n        let temp = 0\n        let counter = 0;\n        Object.entries(datas.scores).forEach(([id, score]) => {\n          if(score <= 50){\n            temp = temp + score;\n            counter++;\n          }\n        })\n        quizzesGrades.value.push({average : Number((temp / counter).toFixed(2)) || 0, subject : datas.subject});\n      });\n      \n    } catch (error) {\n      console.error('Error during initialization:', error);\n    }\n  } else {\n    console.error('No user ID or token found');\n  }\n})\n\n// Create chart for problem types by year level\nconst createProblemByYearChart = () => {\n  if (!problemByYearChart.value) return;\n  \n  const ctx = problemByYearChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!surveyData.value || surveyData.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['1st Year', '2nd Year', '3rd Year', '4th Year'],\n        datasets: [\n          { label: 'Academic', data: [0, 0, 0, 0], backgroundColor: 'rgba(54, 162, 235, 0.7)' },\n          { label: 'Financial', data: [0, 0, 0, 0], backgroundColor: 'rgba(255, 99, 132, 0.7)' },\n          { label: 'Personal', data: [0, 0, 0, 0], backgroundColor: 'rgba(255, 206, 86, 0.7)' },\n          { label: 'Health', data: [0, 0, 0, 0], backgroundColor: 'rgba(75, 192, 192, 0.7)' },\n          { label: 'Social', data: [0, 0, 0, 0], backgroundColor: 'rgba(153, 102, 255, 0.7)' }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: { stacked: true },\n          y: { \n            stacked: true,\n            beginAtZero: true,\n            title: { display: true, text: 'Number of Problems' }\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Process data - group problem types by year\n  const problemTypesByYear = {\n    '1st': {},\n    '2nd': {},\n    '3rd': {},\n    '4th': {},\n    '5th': {},\n    '6th': {}\n  };\n  \n  // Collect all unique problem types\n  const allProblemTypes = new Set();\n  \n  // Process all surveys and their stats\n  surveyData.value.forEach(survey => {\n    const yearLevel = survey.year || 'Unknown';\n    \n    if (!problemTypesByYear[yearLevel]) {\n      problemTypesByYear[yearLevel] = {};\n    }\n    \n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        const problemType = stat.type;\n        allProblemTypes.add(problemType);\n        \n        if (!problemTypesByYear[yearLevel][problemType]) {\n          problemTypesByYear[yearLevel][problemType] = 0;\n        }\n        \n        problemTypesByYear[yearLevel][problemType]++;\n      });\n    }\n  });\n  \n  // Convert to chart data format\n  const problemTypesArray = Array.from(allProblemTypes);\n  const yearsArray = Object.keys(problemTypesByYear).filter(year => \n    year !== 'Unknown' && Object.keys(problemTypesByYear[year]).length > 0\n  );\n  \n  // Create datasets for each problem type\n  const datasets = problemTypesArray.map((problemType, index) => {\n    const colors = [\n      'rgba(54, 162, 235, 0.7)',   // Blue\n      'rgba(255, 99, 132, 0.7)',   // Red\n      'rgba(255, 206, 86, 0.7)',   // Yellow\n      'rgba(75, 192, 192, 0.7)',   // Green\n      'rgba(153, 102, 255, 0.7)',  // Purple\n      'rgba(255, 159, 64, 0.7)'    // Orange\n    ];\n    \n    return {\n      label: problemType,\n      data: yearsArray.map(year => problemTypesByYear[year][problemType] || 0),\n      backgroundColor: colors[index % colors.length]\n    };\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: yearsArray,\n      datasets: datasets\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { stacked: true },\n        y: { \n          stacked: true,\n          beginAtZero: true,\n          title: { display: true, text: 'Number of Problems' }\n        }\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              return `${context.dataset.label}: ${value} problems`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create chart for problem severity distribution\nconst createSeverityDistributionChart = () => {\n  if (!severityDistributionChart.value) return;\n  \n  const ctx = severityDistributionChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!surveyData.value || surveyData.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels: ['High', 'Medium', 'Low', 'Minimal'],\n        datasets: [{\n          data: [0, 0, 0, 0],\n          backgroundColor: [\n            'rgba(239, 68, 68, 0.8)',    // Red (High)\n            'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n            'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n            'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n          ]\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right'\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Process data - count problems by severity\n  const severityCounts = {\n    High: 0,\n    Medium: 0,\n    Low: 0,\n    Minimal: 0\n  };\n  \n  // Process all surveys and their stats\n  surveyData.value.forEach(survey => {\n    if (survey.surveyStats && Array.isArray(survey.surveyStats)) {\n      survey.surveyStats.forEach(stat => {\n        const average = stat.average || 0;\n        \n        if (average >= 7) {\n          severityCounts.High++;\n        } else if (average >= 5) {\n          severityCounts.Medium++;\n        } else if (average >= 3) {\n          severityCounts.Low++;\n        } else {\n          severityCounts.Minimal++;\n        }\n      });\n    }\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      labels: ['High', 'Medium', 'Low', 'Minimal'],\n      datasets: [{\n        data: [\n          severityCounts.High,\n          severityCounts.Medium,\n          severityCounts.Low,\n          severityCounts.Minimal\n        ],\n        backgroundColor: [\n          'rgba(239, 68, 68, 0.8)',    // Red (High)\n          'rgba(251, 191, 36, 0.8)',   // Yellow (Medium)\n          'rgba(59, 130, 246, 0.8)',   // Blue (Low)\n          'rgba(52, 211, 153, 0.8)'    // Green (Minimal)\n        ]\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            boxWidth: 15,\n            padding: 15\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const total = Object.values(severityCounts).reduce((sum, val) => sum + val, 0);\n              const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n              return `${context.label}: ${value} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n\n// Create survey stats chart\nconst createSurveyStatsChart = () => {\n  if (!surveyStatsChart.value) return;\n  \n  const ctx = surveyStatsChart.value.getContext('2d');\n  if (!ctx) return;\n  \n  const existingChart = Chart.getChart(ctx);\n  if (existingChart) existingChart.destroy();\n  \n  if (!averageSurveyStats.value || averageSurveyStats.value.length === 0) {\n    // If no data, show empty chart\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['No data available'],\n        datasets: [{\n          label: 'Average Severity',\n          data: [0],\n          backgroundColor: 'rgba(54, 162, 235, 0.7)'\n        }]\n      },\n      options: {\n        indexAxis: 'y',\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: { \n            beginAtZero: true,\n            max: 10,\n            title: { display: true, text: 'Average Severity (0-10)' }\n          }\n        }\n      }\n    });\n    return;\n  }\n  \n  // Sort data by severity (highest to lowest)\n  const sortedStats = [...averageSurveyStats.value].sort((a, b) => b.average - a.average);\n  \n  // Create arrays for chart data\n  const labels = sortedStats.map(stat => stat.type);\n  const data = sortedStats.map(stat => stat.average);\n  \n  // Create color array based on severity\n  const backgroundColors = data.map(value => {\n    if (value >= 7) return 'rgba(220, 53, 69, 0.7)';     // High - danger\n    if (value >= 5) return 'rgba(255, 193, 7, 0.7)';     // Medium - warning\n    if (value >= 3) return 'rgba(23, 162, 184, 0.7)';    // Low - info\n    return 'rgba(40, 167, 69, 0.7)';                    // Minimal - success\n  });\n  \n  // Create the chart\n  new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Average Severity',\n        data: data,\n        backgroundColor: backgroundColors,\n        borderWidth: 1\n      }]\n    },\n    options: {\n      indexAxis: 'y',\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { \n          beginAtZero: true,\n          max: 10,\n          title: { display: true, text: 'Average Severity (0-10)' }\n        }\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: (context) => {\n              const value = context.raw || 0;\n              const severity = getSeverityLabel(value);\n              return `Severity: ${value.toFixed(2)} (${severity})`;\n            }\n          }\n        }\n      }\n    }\n  });\n};\n</script>\n\n<template>\n    <div class=\"dashboard\">\n        <div class=\"d-flex justify-content-between align-items-center mb-4\">\n            <h2 class=\"dashboard-title\"></h2>\n\n            <!-- Combined Filter Dropdown -->\n            <div class=\"dropdown\">\n                <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\"\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                    <i class=\"fas fa-filter me-2\"></i>\n                    {{ getFilterDisplay() }}\n                </button>\n                <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n                    <h6 class=\"dropdown-header\">Filter Options</h6>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Academic Year</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n                            <option value=\"\">All Years</option>\n                            <option value=\"1st\">1st Year</option>\n                            <option value=\"2nd\">2nd Year</option>\n                            <option value=\"3rd\">3rd Year</option>\n                            <option value=\"4th\">4th Year</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Section</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n                            <option value=\"\">All Sections</option>\n                            <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Subject</label>\n                        <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n                            <option value=\"\">All Subjects</option>\n                            <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n                        </select>\n                    </div>\n                    <div class=\"mb-3\">\n                        <label class=\"form-label\">Date Range</label>\n                        <div class=\"d-flex gap-2\">\n                            <div class=\"flex-grow-1\">\n                                <label class=\"small text-muted\">From</label>\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedStartDate\"\n                                    :max=\"today\">\n                            </div>\n                            <div class=\"flex-grow-1\">\n                                <label class=\"small text-muted\">To</label>\n                                <input type=\"date\" class=\"form-control form-control-sm\" v-model=\"selectedEndDate\"\n                                    :max=\"today\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"dropdown-divider\"></div>\n                    <button class=\"btn btn-primary w-100\" @click=\"applyFilters\">Apply Filters</button>\n                </div>\n            </div>\n        </div>\n\n        <!-- Analytics Cards -->\n        <div class=\"row g-4\">\n            <!-- Failing Students Card -->\n            <div class=\"col-md-6\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-exclamation-triangle\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">Failing Students</h3>\n                        <div class=\"stat-value\">{{ failingStudents }}</div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Completed Surveys Card -->\n            <div class=\"col-md-6\">\n                <div class=\"dashboard-card\">\n                    <div class=\"icon-container\">\n                        <i class=\"fas fa-poll\"></i>\n                    </div>\n                    <div class=\"card-info\">\n                        <h3 class=\"stat-title\">Completed Surveys</h3>\n                        <div class=\"stat-value\">{{ completedSurveys }}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Survey Statistics -->\n        <div class=\"row mt-4\">\n            <div class=\"col-12\">\n                <div class=\"chart-card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">\n                            <i class=\"fas fa-chart-pie me-2\"></i>\n                            Survey Statistics\n                        </h5>\n                        \n                        <div v-if=\"loadingSurveyData\" class=\"text-center py-4\">\n                            <div class=\"spinner-border text-primary\" role=\"status\">\n                                <span class=\"visually-hidden\">Loading survey data...</span>\n                            </div>\n                            <p class=\"mt-2\">Loading survey statistics...</p>\n                        </div>\n                        \n                        <div v-else-if=\"!hasSurveyData\" class=\"text-center py-4\">\n                            <i class=\"fas fa-chart-bar fa-3x text-muted mb-3\"></i>\n                            <h5>No Survey Data Available</h5>\n                            <p class=\"text-muted\">No survey responses have been submitted yet.</p>\n                        </div>\n                        \n                        <div v-else>\n                            <div class=\"survey-stats\">\n                                <div class=\"table-responsive\">\n                                    <table class=\"table table-hover stats-table\">\n                                        <thead class=\"table-light\">\n                                            <tr>\n                                                <th>Problem Type</th>\n                                                <th>Average Score</th>\n                                                <th>Severity</th>\n                                                <th>Recommendation</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr v-for=\"(stat, index) in averageSurveyStats\" :key=\"index\">\n                                                <td>\n                                                    <span class=\"problem-type\">{{ stat.type }}</span>\n                                                </td>\n                                                <td>\n                                                    <div class=\"d-flex align-items-center\">\n                                                        <div class=\"progress flex-grow-1 me-2\" style=\"height: 8px;\">\n                                                            <div \n                                                                class=\"progress-bar\" \n                                                                :class=\"getSeverityClass(stat.average)\"\n                                                                :style=\"`width: ${Math.min(stat.average * 10, 100)}%`\"\n                                                            ></div>\n                                                        </div>\n                                                        <span>{{ stat.average.toFixed(2) }}</span>\n                                                    </div>\n                                                </td>\n                                                <td>\n                                                    <span \n                                                        class=\"badge\" \n                                                        :class=\"getSeverityBadgeClass(stat.average)\"\n                                                    >\n                                                        {{ getSeverityLabel(stat.average) }}\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    <span class=\"recommendation\">{{ getRecommendation(stat.average) }}</span>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                                <div class=\"text-muted survey-note mt-3\">\n                                    <i class=\"fas fa-info-circle me-1\"></i>\n                                    <small>Higher scores indicate more significant student concerns in that problem area.</small>\n                                </div>\n                            </div>\n                            \n                            <div class=\"survey-visualization row g-4 mt-4\">\n                                <div class=\"col-12\">\n                                    <div class=\"chart-container\">\n                                        <h6 class=\"chart-title\">Average Problem Severity</h6>\n                                        <canvas ref=\"surveyStatsChart\"></canvas>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 1.5rem;\n  letter-spacing: -0.3px;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n    padding: 1rem;\n}\n\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, onMounted, computed, watch, onUnmounted } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api'\n});\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const sectionChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const selectedYear = ref('');\n\n    // Computed properties\n    const isCITHead = computed(() => store.getters.isCITHead);\n    const token = computed(() => store.state.auth.token);\n\n    // Set auth token for all requests\n    watch(token, newToken => {\n      if (newToken) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n      }\n    }, {\n      immediate: true\n    });\n\n    // Dashboard stats\n    const totalStudents = ref(0);\n    const totalTeachers = ref(0);\n    const totalAdvisers = ref(0);\n    const averageAttendance = ref(0);\n    const averageScore = ref(0);\n    const activeSections = ref(0);\n\n    // Add computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      return data.value?.attendanceTrends?.length > 0;\n    });\n    const hasScoreData = computed(() => {\n      return data.value?.averageScore > 0;\n    });\n    const hasPerformanceData = computed(() => {\n      return data.value?.performanceDistribution && Array.isArray(data.value.performanceDistribution) && data.value.performanceDistribution.some(value => value >= 0);\n    });\n    const hasSectionData = computed(() => {\n      return data.value?.sections?.length > 0;\n    });\n    const data = ref(null);\n    const fetchDashboardData = async () => {\n      try {\n        const response = await api.get('/dashboard/stats', {\n          params: {\n            year: selectedYear.value\n          }\n        });\n        data.value = response.data;\n\n        // Debug logging\n        console.log('Raw Dashboard Data:', {\n          performanceDistribution: {\n            data: data.value.performanceDistribution,\n            isArray: Array.isArray(data.value.performanceDistribution),\n            length: data.value.performanceDistribution?.length\n          },\n          assessmentTypeDistribution: {\n            data: data.value.assessmentTypeDistribution,\n            hasDatasets: Boolean(data.value.assessmentTypeDistribution?.datasets),\n            datasetsLength: data.value.assessmentTypeDistribution?.datasets?.length,\n            labels: data.value.assessmentTypeDistribution?.labels\n          }\n        });\n        totalStudents.value = data.value.totalStudents || 0;\n        totalTeachers.value = data.value.totalTeachers || 0;\n        totalAdvisers.value = data.value.totalAdvisers || 0;\n        averageAttendance.value = data.value.averageAttendance || 0;\n        averageScore.value = data.value.averageScore || 0;\n        activeSections.value = data.value.activeSections || 0;\n\n        // Update charts with new data\n        if (data.value) {\n          updateCharts(data.value);\n        }\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        if (error.response) {\n          console.error('Error response:', error.response.data);\n        }\n      }\n    };\n    const updateCharts = data => {\n      // Destroy existing charts if they exist\n      if (performanceChart.value) {\n        const existingChart = Chart.getChart(performanceChart.value);\n        if (existingChart) {\n          existingChart.destroy();\n        }\n      }\n      if (attendanceChart.value) {\n        const existingChart = Chart.getChart(attendanceChart.value);\n        if (existingChart) {\n          existingChart.destroy();\n        }\n      }\n      if (sectionChart.value) {\n        const existingChart = Chart.getChart(sectionChart.value);\n        if (existingChart) {\n          existingChart.destroy();\n        }\n      }\n      if (assessmentTypeChart.value) {\n        const existingChart = Chart.getChart(assessmentTypeChart.value);\n        if (existingChart) {\n          existingChart.destroy();\n        }\n      }\n\n      // Create performance distribution chart (Grade Distribution)\n      if (data.performanceDistribution && Array.isArray(data.performanceDistribution)) {\n        console.log('Creating performance chart with data:', data.performanceDistribution);\n\n        // Ensure we have valid numbers\n        const validData = data.performanceDistribution.map(value => Number(value) || 0);\n        new Chart(performanceChart.value, {\n          type: 'pie',\n          data: {\n            labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\n            datasets: [{\n              data: validData,\n              backgroundColor: ['#4CAF50',\n              // Green for highest range\n              '#2196F3',\n              // Blue\n              '#FFC107',\n              // Yellow\n              '#FF9800',\n              // Orange\n              '#F44336' // Red for lowest range\n              ],\n              borderWidth: 2,\n              borderColor: '#ffffff'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            layout: {\n              padding: {\n                top: 10,\n                bottom: 10\n              }\n            },\n            plugins: {\n              legend: {\n                display: true,\n                position: 'right',\n                labels: {\n                  padding: 20,\n                  usePointStyle: true,\n                  pointStyle: 'circle'\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const value = context.raw;\n                    const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                    const percentage = (value / total * 100).toFixed(1);\n                    return `${context.label}: ${value} students (${percentage}%)`;\n                  }\n                }\n              },\n              title: {\n                display: true,\n                text: 'Student Grade Distribution',\n                font: {\n                  size: 16\n                }\n              }\n            }\n          }\n        });\n      }\n\n      // Create assessment type distribution chart\n      if (data.assessmentTypeDistribution) {\n        console.log('Creating assessment type chart with data:', data.assessmentTypeDistribution);\n        const colors = {\n          'Quiz': 'rgba(76, 175, 80, 0.7)',\n          'Activity': 'rgba(33, 150, 243, 0.7)',\n          'Performance Task': 'rgba(255, 193, 7, 0.7)'\n        };\n        const borderColors = {\n          'Quiz': '#4CAF50',\n          'Activity': '#2196F3',\n          'Performance Task': '#FFC107'\n        };\n\n        // Transform the data structure\n        const datasets = data.assessmentTypeDistribution.datasets.map(dataset => ({\n          label: dataset.type,\n          data: dataset.data.map(value => Number(value) || 0),\n          backgroundColor: colors[dataset.type],\n          borderColor: borderColors[dataset.type],\n          borderWidth: 2,\n          tension: 0.4,\n          fill: true,\n          pointBackgroundColor: borderColors[dataset.type],\n          pointBorderColor: '#fff',\n          pointBorderWidth: 2,\n          pointRadius: 4,\n          pointHoverRadius: 6\n        }));\n        new Chart(assessmentTypeChart.value, {\n          type: 'line',\n          data: {\n            labels: data.assessmentTypeDistribution.labels || [],\n            datasets: datasets\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            layout: {\n              padding: {\n                top: 10,\n                bottom: 10\n              }\n            },\n            interaction: {\n              mode: 'index',\n              intersect: false\n            },\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: 'Month/Year'\n                },\n                grid: {\n                  display: false\n                }\n              },\n              y: {\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: 'Number of Assessments'\n                },\n                ticks: {\n                  stepSize: 1,\n                  precision: 0\n                },\n                grid: {\n                  color: 'rgba(0,0,0,0.05)'\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                display: true,\n                position: 'top',\n                labels: {\n                  usePointStyle: true,\n                  padding: 20,\n                  font: {\n                    size: 12\n                  }\n                }\n              },\n              tooltip: {\n                backgroundColor: 'rgba(255,255,255,0.9)',\n                titleColor: '#000',\n                bodyColor: '#000',\n                borderColor: 'rgba(0,0,0,0.1)',\n                borderWidth: 1,\n                padding: 10,\n                displayColors: true,\n                callbacks: {\n                  label: function (context) {\n                    return `${context.dataset.label}: ${context.parsed.y} assessments`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n\n      // Only create attendance chart if there's data\n      if (data.attendanceTrends && data.attendanceTrends.length > 0) {\n        new Chart(attendanceChart.value, {\n          type: 'line',\n          data: {\n            labels: data.attendanceTrends.map(d => {\n              const date = new Date(d.date);\n              return `${date.toLocaleString('default', {\n                month: 'short'\n              })} ${date.getFullYear()}`;\n            }),\n            datasets: [{\n              label: 'Attendance Rate',\n              data: data.attendanceTrends.map(d => d.rate),\n              borderColor: '#2196F3',\n              tension: 0.1,\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            layout: {\n              padding: {\n                top: 10,\n                bottom: 10\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  callback: function (value) {\n                    return value + '%';\n                  }\n                }\n              }\n            },\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    return `Attendance: ${context.parsed.y.toFixed(1)}%`;\n                  }\n                }\n              },\n              title: {\n                display: true,\n                text: 'Monthly Attendance Trends',\n                font: {\n                  size: 16\n                }\n              }\n            }\n          }\n        });\n      }\n\n      // Create section chart with year information\n      if (data.sections && data.sections.length > 0) {\n        new Chart(sectionChart.value, {\n          type: 'bar',\n          data: {\n            labels: data.sections.map(s => `${s.year} - ${s.name}`),\n            datasets: [{\n              label: 'Average Performance',\n              data: data.sections.map(s => s.performance),\n              backgroundColor: data.sections.map(s => {\n                // Different colors for different year levels\n                switch (s.year) {\n                  case '1st':\n                    return '#4CAF50';\n                  case '2nd':\n                    return '#2196F3';\n                  case '3rd':\n                    return '#FFC107';\n                  case '4th':\n                    return '#FF5722';\n                  default:\n                    return '#9E9E9E';\n                }\n              }),\n              borderColor: '#fff',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            maintainAspectRatio: false,\n            layout: {\n              padding: {\n                top: 10,\n                bottom: 10,\n                left: 10,\n                right: 10\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                backgroundColor: 'rgba(0,0,0,0.8)',\n                titleFont: {\n                  size: 14\n                },\n                bodyFont: {\n                  size: 12\n                },\n                padding: 10,\n                cornerRadius: 5,\n                callbacks: {\n                  label: function (context) {\n                    const section = data.sections[context.dataIndex];\n                    return [`Performance: ${context.parsed.x.toFixed(1)}%`, `Students: ${section.studentCount}`];\n                  }\n                }\n              },\n              title: {\n                display: true,\n                text: 'Section Performance by Year Level',\n                font: {\n                  size: 16\n                }\n              }\n            },\n            scales: {\n              x: {\n                grid: {\n                  display: false\n                },\n                ticks: {\n                  color: '#666',\n                  callback: function (value) {\n                    return value + '%';\n                  }\n                },\n                title: {\n                  display: true,\n                  text: 'Performance (%)'\n                }\n              },\n              y: {\n                grid: {\n                  display: false\n                },\n                ticks: {\n                  color: '#666'\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const dashboardContainer = ref(null);\n    const isLoading = ref(false);\n    const lastUpdate = ref(null);\n    const autoRefreshInterval = ref(null);\n\n    // Scroll handling\n    const scrollToSection = sectionId => {\n      const element = document.getElementById(sectionId);\n      if (element) {\n        element.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n      }\n    };\n\n    // Handle year change\n    const handleYearChange = async () => {\n      isLoading.value = true;\n      try {\n        await fetchDashboardData();\n        // Save selected year to localStorage\n        if (selectedYear.value) {\n          localStorage.setItem('selectedYear', selectedYear.value);\n        } else {\n          localStorage.removeItem('selectedYear');\n        }\n      } catch (error) {\n        console.error('Error updating dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Refresh dashboard\n    const refreshDashboard = async () => {\n      isLoading.value = true;\n      try {\n        await fetchDashboardData();\n        lastUpdate.value = new Date();\n      } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Auto refresh setup\n    const setupAutoRefresh = () => {\n      // Clear any existing interval\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n\n      // Set up new auto-refresh interval (every 5 minutes)\n      autoRefreshInterval.value = setInterval(refreshDashboard, 5 * 60 * 1000);\n    };\n\n    // Initialize dashboard with saved filters\n    onMounted(() => {\n      // Restore saved year filter\n      const savedYear = localStorage.getItem('selectedYear');\n      if (savedYear) {\n        selectedYear.value = savedYear;\n      }\n      fetchDashboardData();\n      setupAutoRefresh();\n      lastUpdate.value = new Date();\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      if (autoRefreshInterval.value) {\n        clearInterval(autoRefreshInterval.value);\n      }\n    });\n    return {\n      performanceChart,\n      attendanceChart,\n      sectionChart,\n      assessmentTypeChart,\n      selectedYear,\n      isCITHead,\n      totalStudents,\n      totalTeachers,\n      totalAdvisers,\n      averageAttendance,\n      averageScore,\n      activeSections,\n      hasAttendanceData,\n      hasScoreData,\n      hasPerformanceData,\n      hasSectionData,\n      dashboardContainer,\n      isLoading,\n      lastUpdate,\n      scrollToSection,\n      handleYearChange,\n      refreshDashboard\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","onUnmounted","useStore","Chart","axios","api","create","baseURL","name","setup","store","performanceChart","attendanceChart","sectionChart","assessmentTypeChart","selectedYear","isCITHead","getters","token","state","auth","newToken","defaults","headers","common","immediate","totalStudents","totalTeachers","totalAdvisers","averageAttendance","averageScore","activeSections","hasAttendanceData","data","value","attendanceTrends","length","hasScoreData","hasPerformanceData","performanceDistribution","Array","isArray","some","hasSectionData","sections","fetchDashboardData","response","get","params","year","console","log","assessmentTypeDistribution","hasDatasets","Boolean","datasets","datasetsLength","labels","updateCharts","error","existingChart","getChart","destroy","validData","map","Number","type","backgroundColor","borderWidth","borderColor","options","responsive","maintainAspectRatio","layout","padding","top","bottom","plugins","legend","display","position","usePointStyle","pointStyle","tooltip","callbacks","label","context","raw","total","dataset","reduce","a","b","percentage","toFixed","title","text","font","size","colors","borderColors","tension","fill","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","interaction","mode","intersect","scales","x","grid","y","beginAtZero","ticks","stepSize","precision","color","titleColor","bodyColor","displayColors","parsed","d","date","Date","toLocaleString","month","getFullYear","rate","max","callback","s","performance","indexAxis","left","right","titleFont","bodyFont","cornerRadius","section","dataIndex","studentCount","dashboardContainer","isLoading","lastUpdate","autoRefreshInterval","scrollToSection","sectionId","element","document","getElementById","scrollIntoView","behavior","block","handleYearChange","localStorage","setItem","removeItem","refreshDashboard","setupAutoRefresh","clearInterval","setInterval","savedYear","getItem"],"sources":["D:\\au_dev\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\" ref=\"dashboardContainer\">\r\n    <!-- Year Filter -->\r\n    <div class=\"filter-section mb-4\">\r\n      <div v-if=\"isCITHead\" class=\"d-flex gap-3 align-items-center\">\r\n        <div class=\"filter-group\">\r\n          <select class=\"form-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n            <option value=\"\">All Academic Years</option>\r\n            <option value=\"1st\">1st Year</option>\r\n            <option value=\"2nd\">2nd Year</option>\r\n            <option value=\"3rd\">3rd Year</option>\r\n            <option value=\"4th\">4th Year</option>\r\n          </select>\r\n        </div>\r\n        <button class=\"btn btn-refresh\" @click=\"refreshDashboard\">\r\n          <i class=\"fas fa-sync-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Analytics Cards -->\r\n    <div id=\"analytics\" class=\"analytics-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-graduate\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalStudents }}</h3>\r\n          <p class=\"stat-label\">Total Students</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chalkboard-teacher\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalTeachers }}</h3>\r\n          <p class=\"stat-label\">Total Teachers</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-user-tie\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ totalAdvisers }}</h3>\r\n          <p class=\"stat-label\">SSP Advisers</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-users\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\">{{ activeSections }}</h3>\r\n          <p class=\"stat-label\">Active Sections</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Performance Stats -->\r\n    <div class=\"performance-grid mb-4\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-clock\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasAttendanceData\">{{ averageAttendance }}%</h3>\r\n          <p class=\"stat-label\">Average Attendance</p>\r\n          <p v-if=\"!hasAttendanceData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i class=\"fas fa-chart-line\"></i>\r\n        </div>\r\n        <div class=\"stat-content\">\r\n          <h3 class=\"stat-value\" v-if=\"hasScoreData\">{{ averageScore }}%</h3>\r\n          <p class=\"stat-label\">Average Score</p>\r\n          <p v-if=\"!hasScoreData\" class=\"no-data\">No data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Grid -->\r\n    <div class=\"charts-grid mb-4\">\r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">Performance Distribution</h5>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"performanceChart\"></canvas>\r\n          <p v-if=\"!hasPerformanceData\" class=\"no-data-message\">No data available</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-card\">\r\n        <h5 class=\"chart-title\">Assessment Types</h5>\r\n        <div class=\"chart-container\">\r\n          <canvas ref=\"assessmentTypeChart\"></canvas>\r\n          <p v-if=\"!data?.assessmentTypeDistribution\" class=\"no-data-message\">No data available</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attendance Trends -->\r\n    <div class=\"chart-card mb-4\">\r\n      <h5 class=\"chart-title\">Attendance Trends</h5>\r\n      <div class=\"chart-container\">\r\n        <canvas ref=\"attendanceChart\"></canvas>\r\n        <p v-if=\"!hasAttendanceData\" class=\"no-data-message\">No data available</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Section Performance -->\r\n    <div class=\"chart-card\">\r\n      <h5 class=\"chart-title\">Section Performance</h5>\r\n      <div class=\"chart-container\">\r\n        <canvas ref=\"sectionChart\"></canvas>\r\n        <p v-if=\"!hasSectionData\" class=\"no-data-message\">No data available</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, watch, onUnmounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport Chart from 'chart.js/auto'\r\nimport axios from 'axios'\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api'\r\n});\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  setup() {\r\n    const store = useStore()\r\n    const performanceChart = ref(null)\r\n    const attendanceChart = ref(null)\r\n    const sectionChart = ref(null)\r\n    const assessmentTypeChart = ref(null)\r\n    const selectedYear = ref('')\r\n\r\n    // Computed properties\r\n    const isCITHead = computed(() => store.getters.isCITHead)\r\n    const token = computed(() => store.state.auth.token)\r\n\r\n    // Set auth token for all requests\r\n    watch(token, (newToken) => {\r\n      if (newToken) {\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n      }\r\n    }, { immediate: true });\r\n\r\n    // Dashboard stats\r\n    const totalStudents = ref(0)\r\n    const totalTeachers = ref(0)\r\n    const totalAdvisers = ref(0)\r\n    const averageAttendance = ref(0)\r\n    const averageScore = ref(0)\r\n    const activeSections = ref(0)\r\n\r\n    // Add computed properties for data availability\r\n    const hasAttendanceData = computed(() => {\r\n      return data.value?.attendanceTrends?.length > 0;\r\n    });\r\n\r\n    const hasScoreData = computed(() => {\r\n      return data.value?.averageScore > 0;\r\n    });\r\n\r\n    const hasPerformanceData = computed(() => {\r\n      return data.value?.performanceDistribution && \r\n             Array.isArray(data.value.performanceDistribution) && \r\n             data.value.performanceDistribution.some(value => value >= 0);\r\n    });\r\n\r\n    const hasSectionData = computed(() => {\r\n      return data.value?.sections?.length > 0;\r\n    });\r\n\r\n    const data = ref(null);\r\n\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        const response = await api.get('/dashboard/stats', {\r\n          params: {\r\n            year: selectedYear.value\r\n          }\r\n        });\r\n\r\n        data.value = response.data;\r\n        \r\n        // Debug logging\r\n        console.log('Raw Dashboard Data:', {\r\n          performanceDistribution: {\r\n            data: data.value.performanceDistribution,\r\n            isArray: Array.isArray(data.value.performanceDistribution),\r\n            length: data.value.performanceDistribution?.length\r\n          },\r\n          assessmentTypeDistribution: {\r\n            data: data.value.assessmentTypeDistribution,\r\n            hasDatasets: Boolean(data.value.assessmentTypeDistribution?.datasets),\r\n            datasetsLength: data.value.assessmentTypeDistribution?.datasets?.length,\r\n            labels: data.value.assessmentTypeDistribution?.labels\r\n          }\r\n        });\r\n\r\n        totalStudents.value = data.value.totalStudents || 0;\r\n        totalTeachers.value = data.value.totalTeachers || 0;\r\n        totalAdvisers.value = data.value.totalAdvisers || 0;\r\n        averageAttendance.value = data.value.averageAttendance || 0;\r\n        averageScore.value = data.value.averageScore || 0;\r\n        activeSections.value = data.value.activeSections || 0;\r\n\r\n        // Update charts with new data\r\n        if (data.value) {\r\n          updateCharts(data.value);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch dashboard data:', error);\r\n        if (error.response) {\r\n          console.error('Error response:', error.response.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    const updateCharts = (data) => {\r\n      // Destroy existing charts if they exist\r\n      if (performanceChart.value) {\r\n        const existingChart = Chart.getChart(performanceChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n      if (attendanceChart.value) {\r\n        const existingChart = Chart.getChart(attendanceChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n      if (sectionChart.value) {\r\n        const existingChart = Chart.getChart(sectionChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n      if (assessmentTypeChart.value) {\r\n        const existingChart = Chart.getChart(assessmentTypeChart.value);\r\n        if (existingChart) {\r\n          existingChart.destroy();\r\n        }\r\n      }\r\n\r\n      // Create performance distribution chart (Grade Distribution)\r\n      if (data.performanceDistribution && Array.isArray(data.performanceDistribution)) {\r\n        console.log('Creating performance chart with data:', data.performanceDistribution);\r\n        \r\n        // Ensure we have valid numbers\r\n        const validData = data.performanceDistribution.map(value => Number(value) || 0);\r\n        \r\n        new Chart(performanceChart.value, {\r\n          type: 'pie',\r\n          data: {\r\n            labels: ['90-100', '80-89', '70-79', '60-69', 'Below 60'],\r\n            datasets: [{\r\n              data: validData,\r\n              backgroundColor: [\r\n                '#4CAF50', // Green for highest range\r\n                '#2196F3', // Blue\r\n                '#FFC107', // Yellow\r\n                '#FF9800', // Orange\r\n                '#F44336'  // Red for lowest range\r\n              ],\r\n              borderWidth: 2,\r\n              borderColor: '#ffffff'\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n                position: 'right',\r\n                labels: {\r\n                  padding: 20,\r\n                  usePointStyle: true,\r\n                  pointStyle: 'circle'\r\n                }\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    const value = context.raw;\r\n                    const total = context.dataset.data.reduce((a, b) => a + b, 0);\r\n                    const percentage = ((value / total) * 100).toFixed(1);\r\n                    return `${context.label}: ${value} students (${percentage}%)`;\r\n                  }\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Student Grade Distribution',\r\n                font: {\r\n                  size: 16\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Create assessment type distribution chart\r\n      if (data.assessmentTypeDistribution) {\r\n        console.log('Creating assessment type chart with data:', data.assessmentTypeDistribution);\r\n        \r\n        const colors = {\r\n          'Quiz': 'rgba(76, 175, 80, 0.7)',\r\n          'Activity': 'rgba(33, 150, 243, 0.7)',\r\n          'Performance Task': 'rgba(255, 193, 7, 0.7)'\r\n        };\r\n        \r\n        const borderColors = {\r\n          'Quiz': '#4CAF50',\r\n          'Activity': '#2196F3',\r\n          'Performance Task': '#FFC107'\r\n        };\r\n        \r\n        // Transform the data structure\r\n        const datasets = data.assessmentTypeDistribution.datasets.map(dataset => ({\r\n          label: dataset.type,\r\n          data: dataset.data.map(value => Number(value) || 0),\r\n          backgroundColor: colors[dataset.type],\r\n          borderColor: borderColors[dataset.type],\r\n          borderWidth: 2,\r\n          tension: 0.4,\r\n          fill: true,\r\n          pointBackgroundColor: borderColors[dataset.type],\r\n          pointBorderColor: '#fff',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 4,\r\n          pointHoverRadius: 6\r\n        }));\r\n\r\n        new Chart(assessmentTypeChart.value, {\r\n          type: 'line',\r\n          data: {\r\n            labels: data.assessmentTypeDistribution.labels || [],\r\n            datasets: datasets\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10\r\n              }\r\n            },\r\n            interaction: {\r\n              mode: 'index',\r\n              intersect: false\r\n            },\r\n            scales: {\r\n              x: {\r\n                title: {\r\n                  display: true,\r\n                  text: 'Month/Year'\r\n                },\r\n                grid: {\r\n                  display: false\r\n                }\r\n              },\r\n              y: {\r\n                beginAtZero: true,\r\n                title: {\r\n                  display: true,\r\n                  text: 'Number of Assessments'\r\n                },\r\n                ticks: {\r\n                  stepSize: 1,\r\n                  precision: 0\r\n                },\r\n                grid: {\r\n                  color: 'rgba(0,0,0,0.05)'\r\n                }\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: true,\r\n                position: 'top',\r\n                labels: {\r\n                  usePointStyle: true,\r\n                  padding: 20,\r\n                  font: {\r\n                    size: 12\r\n                  }\r\n                }\r\n              },\r\n              tooltip: {\r\n                backgroundColor: 'rgba(255,255,255,0.9)',\r\n                titleColor: '#000',\r\n                bodyColor: '#000',\r\n                borderColor: 'rgba(0,0,0,0.1)',\r\n                borderWidth: 1,\r\n                padding: 10,\r\n                displayColors: true,\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    return `${context.dataset.label}: ${context.parsed.y} assessments`;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Only create attendance chart if there's data\r\n      if (data.attendanceTrends && data.attendanceTrends.length > 0) {\r\n        new Chart(attendanceChart.value, {\r\n          type: 'line',\r\n          data: {\r\n            labels: data.attendanceTrends.map(d => {\r\n              const date = new Date(d.date);\r\n              return `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\r\n            }),\r\n            datasets: [{\r\n              label: 'Attendance Rate',\r\n              data: data.attendanceTrends.map(d => d.rate),\r\n              borderColor: '#2196F3',\r\n              tension: 0.1,\r\n              fill: false\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10\r\n              }\r\n            },\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                max: 100,\r\n                ticks: {\r\n                  callback: function(value) {\r\n                    return value + '%';\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            plugins: {\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    return `Attendance: ${context.parsed.y.toFixed(1)}%`;\r\n                  }\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Monthly Attendance Trends',\r\n                font: {\r\n                  size: 16\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Create section chart with year information\r\n      if (data.sections && data.sections.length > 0) {\r\n        new Chart(sectionChart.value, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: data.sections.map(s => `${s.year} - ${s.name}`),\r\n            datasets: [{\r\n              label: 'Average Performance',\r\n              data: data.sections.map(s => s.performance),\r\n              backgroundColor: data.sections.map(s => {\r\n                // Different colors for different year levels\r\n                switch(s.year) {\r\n                  case '1st': return '#4CAF50';\r\n                  case '2nd': return '#2196F3';\r\n                  case '3rd': return '#FFC107';\r\n                  case '4th': return '#FF5722';\r\n                  default: return '#9E9E9E';\r\n                }\r\n              }),\r\n              borderColor: '#fff',\r\n              borderWidth: 2\r\n            }]\r\n          },\r\n          options: {\r\n            indexAxis: 'y',\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            layout: {\r\n              padding: {\r\n                top: 10,\r\n                bottom: 10,\r\n                left: 10,\r\n                right: 10\r\n              }\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              },\r\n              tooltip: {\r\n                backgroundColor: 'rgba(0,0,0,0.8)',\r\n                titleFont: { size: 14 },\r\n                bodyFont: { size: 12 },\r\n                padding: 10,\r\n                cornerRadius: 5,\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    const section = data.sections[context.dataIndex];\r\n                    return [\r\n                      `Performance: ${context.parsed.x.toFixed(1)}%`,\r\n                      `Students: ${section.studentCount}`\r\n                    ];\r\n                  }\r\n                }\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Section Performance by Year Level',\r\n                font: {\r\n                  size: 16\r\n                }\r\n              }\r\n            },\r\n            scales: {\r\n              x: {\r\n                grid: {\r\n                  display: false\r\n                },\r\n                ticks: {\r\n                  color: '#666',\r\n                  callback: function(value) {\r\n                    return value + '%';\r\n                  }\r\n                },\r\n                title: {\r\n                  display: true,\r\n                  text: 'Performance (%)'\r\n                }\r\n              },\r\n              y: {\r\n                grid: {\r\n                  display: false\r\n                },\r\n                ticks: {\r\n                  color: '#666'\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    const dashboardContainer = ref(null)\r\n    const isLoading = ref(false)\r\n    const lastUpdate = ref(null)\r\n    const autoRefreshInterval = ref(null)\r\n\r\n    // Scroll handling\r\n    const scrollToSection = (sectionId) => {\r\n      const element = document.getElementById(sectionId)\r\n      if (element) {\r\n        element.scrollIntoView({ behavior: 'smooth', block: 'start' })\r\n      }\r\n    }\r\n\r\n    // Handle year change\r\n    const handleYearChange = async () => {\r\n      isLoading.value = true\r\n      try {\r\n        await fetchDashboardData()\r\n        // Save selected year to localStorage\r\n        if (selectedYear.value) {\r\n          localStorage.setItem('selectedYear', selectedYear.value)\r\n        } else {\r\n          localStorage.removeItem('selectedYear')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating dashboard:', error)\r\n      } finally {\r\n        isLoading.value = false\r\n      }\r\n    }\r\n\r\n    // Refresh dashboard\r\n    const refreshDashboard = async () => {\r\n      isLoading.value = true\r\n      try {\r\n        await fetchDashboardData()\r\n        lastUpdate.value = new Date()\r\n      } catch (error) {\r\n        console.error('Error refreshing dashboard:', error)\r\n      } finally {\r\n        isLoading.value = false\r\n      }\r\n    }\r\n\r\n    // Auto refresh setup\r\n    const setupAutoRefresh = () => {\r\n      // Clear any existing interval\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value)\r\n      }\r\n      \r\n      // Set up new auto-refresh interval (every 5 minutes)\r\n      autoRefreshInterval.value = setInterval(refreshDashboard, 5 * 60 * 1000)\r\n    }\r\n\r\n    // Initialize dashboard with saved filters\r\n    onMounted(() => {\r\n      // Restore saved year filter\r\n      const savedYear = localStorage.getItem('selectedYear')\r\n      if (savedYear) {\r\n        selectedYear.value = savedYear\r\n      }\r\n\r\n      fetchDashboardData()\r\n      setupAutoRefresh()\r\n      lastUpdate.value = new Date()\r\n    })\r\n\r\n    // Clean up on component unmount\r\n    onUnmounted(() => {\r\n      if (autoRefreshInterval.value) {\r\n        clearInterval(autoRefreshInterval.value)\r\n      }\r\n    })\r\n\r\n    return {\r\n      performanceChart,\r\n      attendanceChart,\r\n      sectionChart,\r\n      assessmentTypeChart,\r\n      selectedYear,\r\n      isCITHead,\r\n      totalStudents,\r\n      totalTeachers,\r\n      totalAdvisers,\r\n      averageAttendance,\r\n      averageScore,\r\n      activeSections,\r\n      hasAttendanceData,\r\n      hasScoreData,\r\n      hasPerformanceData,\r\n      hasSectionData,\r\n      dashboardContainer,\r\n      isLoading,\r\n      lastUpdate,\r\n      scrollToSection,\r\n      handleYearChange,\r\n      refreshDashboard\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 1.5rem;\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n.filter-section {\r\n  background: white;\r\n  padding: 1rem;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.form-select {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n  padding: 0.5rem 2.5rem 0.5rem 1rem;\r\n  font-size: 0.95rem;\r\n  color: #2d3748;\r\n  background-color: white;\r\n  transition: all 0.2s ease;\r\n  min-width: 200px;\r\n}\r\n\r\n.form-select:focus {\r\n  border-color: #4299e1;\r\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);\r\n}\r\n\r\n.btn-refresh {\r\n  background: white;\r\n  border: 1px solid #e2e8f0;\r\n  color: #4a5568;\r\n  padding: 0.5rem;\r\n  border-radius: 8px;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-refresh:hover {\r\n  background: #f7fafc;\r\n  color: #2d3748;\r\n  border-color: #cbd5e1;\r\n}\r\n\r\n/* Analytics Grid */\r\n.analytics-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.performance-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n.charts-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Stat Cards */\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1.25rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  background: #003366;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n  color: #2d3748;\r\n  margin: 0;\r\n  line-height: 1.2;\r\n}\r\n\r\n.stat-label {\r\n  color: #718096;\r\n  font-size: 0.95rem;\r\n  margin: 0;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n/* Chart Cards */\r\n.chart-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.chart-title {\r\n  color: #2d3748;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  min-height: 300px;\r\n}\r\n\r\n.no-data-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #a0aec0;\r\n  font-size: 0.95rem;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  color: #a0aec0;\r\n  font-size: 0.875rem;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .dashboard {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .analytics-grid,\r\n  .performance-grid,\r\n  .charts-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .stat-card {\r\n    padding: 1.25rem;\r\n  }\r\n\r\n  .stat-value {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
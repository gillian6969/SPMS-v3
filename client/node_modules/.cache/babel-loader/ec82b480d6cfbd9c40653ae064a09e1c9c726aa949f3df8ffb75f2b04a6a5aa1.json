{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, onMounted, computed, watch, nextTick } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore();\n    const performanceChart = ref(null);\n    const attendanceChart = ref(null);\n    const assessmentTypeChart = ref(null);\n    const performanceTrendChart = ref(null);\n    const assessmentTypePerformanceChart = ref(null);\n\n    // Data refs\n    const totalStudents = ref(0);\n    const totalSections = ref(0);\n    const totalSubjects = ref(0);\n    const averageScore = ref(0);\n    const recentActivities = ref([]);\n    const sections = ref([]);\n    const subjects = ref([]);\n\n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '');\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '');\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '');\n    const selectedStartDate = ref('');\n    const selectedEndDate = ref('');\n    const today = computed(() => moment().format('YYYY-MM-DD'));\n\n    // Chart date filter state - initialize early to avoid undefined errors\n    const chartFilters = ref({\n      attendance: {\n        period: 'month'\n      },\n      assessmentType: {\n        period: 'month'\n      },\n      performanceTrend: {\n        period: 'month'\n      },\n      assessmentTypePerformance: {\n        period: 'month'\n      }\n    });\n\n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user;\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store');\n        return null;\n      }\n      return user._id;\n    };\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      try {\n        if (data.value && data.value.attendanceDistribution) {\n          // Check if we have an array and if any value is > 0\n          const distribution = data.value.attendanceDistribution;\n          if (Array.isArray(distribution) && distribution.length > 0) {\n            return distribution.some(val => {\n              const numVal = Number(val);\n              return !isNaN(numVal) && numVal > 0;\n            });\n          }\n        }\n\n        // Also check chartData as a fallback\n        if (chartData.value && chartData.value.attendance) {\n          const attendance = chartData.value.attendance;\n          return !!(Number(attendance.present) > 0 || Number(attendance.late) > 0 || Number(attendance.absent) > 0);\n        }\n        return false;\n      } catch (err) {\n        console.error('Error in hasAttendanceData:', err);\n        return false;\n      }\n    });\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n\n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n\n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n\n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n    const hasActivity = computed(() => recentActivities.value.length > 0);\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        const token = store.state.auth.token;\n        console.log('Fetching sections and subjects for:', {\n          teacherId,\n          year\n        });\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: {\n            teacherId\n          },\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n\n          // Save available years\n          availableYears.value = uniqueYears.sort();\n\n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n\n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n\n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error);\n        sections.value = [];\n        subjects.value = [];\n      }\n    };\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n\n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n\n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    };\n    const getFilterDisplay = () => {\n      const filters = [];\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year');\n      if (selectedSection.value) filters.push(selectedSection.value);\n      if (selectedSubject.value) filters.push(selectedSubject.value);\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View';\n    };\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      updatePerformanceTrendChart([]);\n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to apply date filter for a specific chart\n    const applyChartDateFilter = async (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n\n      // Update the filter period\n      chartFilters.value[chartType].period = period;\n\n      // Calculate date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n\n      // Fetch and update the specific chart\n      await fetchChartData(chartType, startDate, endDate);\n    };\n\n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare query parameters with URLSearchParams to ensure proper encoding\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n\n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        console.log(`Fetching ${chartType} data with params:`, Object.fromEntries(params));\n        let endpoint;\n        let url;\n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        url = `http://localhost:8000/api/${endpoint}?${params.toString()}`;\n        console.log(`Requesting URL: ${url}`);\n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log(`${chartType} data received:`, response.data);\n\n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n\n        // Update the specific chart\n        switch (chartType) {\n          case 'attendance':\n            if (response.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = response.data;\n\n              // Ensure we have numbers for the chart\n              const present = parseInt(attendanceStats.present) || 0;\n              const late = parseInt(attendanceStats.late) || 0;\n              const absent = parseInt(attendanceStats.absent) || 0;\n              console.log('Attendance stats for chart:', {\n                present,\n                late,\n                absent\n              });\n              const formattedData = {\n                attendanceDistribution: [present, late, absent]\n              };\n\n              // Update the attendance data in our main data store too\n              if (data.value) {\n                data.value.attendanceDistribution = formattedData.attendanceDistribution;\n              }\n              updatePerformanceChart(formattedData);\n            }\n            break;\n          case 'assessmentType':\n            if (response.data && response.data.assessmentTypes) {\n              const assessmentData = [];\n              Object.keys(response.data.assessmentTypes).forEach(type => {\n                const typeData = response.data.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  }\n                  assessmentData.push({\n                    type: type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                }\n              });\n              updateAssessmentTypeChart({\n                assessmentData\n              });\n            }\n            break;\n          case 'performanceTrend':\n            if (response.data) {\n              // Create performance trends data\n              const performanceTrends = Array.isArray(response.data) ? response.data.filter(a => a.date) // Only include assessments with dates\n              .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n              .map(assessment => {\n                // Calculate average score for this assessment\n                let averageScore = 0;\n                let scoreArray = [];\n                if (assessment.scores) {\n                  if (Array.isArray(assessment.scores)) {\n                    scoreArray = assessment.scores;\n                  } else if (typeof assessment.scores === 'object') {\n                    scoreArray = Object.values(assessment.scores);\n                  }\n                  const validScores = scoreArray.filter(score => typeof score === 'number');\n                  if (validScores.length > 0) {\n                    const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                    averageScore = totalScore / validScores.length;\n                  }\n                }\n                return {\n                  date: assessment.date,\n                  score: averageScore,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                };\n              }) : [];\n              updatePerformanceTrendChart(performanceTrends);\n            }\n            break;\n          case 'assessmentTypePerformance':\n            if (response.data) {\n              // Create performance trends data for assessment type performance\n              const performanceTrends = Array.isArray(response.data) ? response.data.filter(a => a.date) // Only include assessments with dates\n              .map(assessment => ({\n                date: assessment.date,\n                score: assessment.averageScore || 0,\n                name: assessment.name || assessment.title || assessment.type,\n                type: assessment.type\n              })) : [];\n              updateAssessmentTypePerformanceChart({\n                performanceTrends\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n        // If the chart type is attendance, ensure we update with empty data\n        if (chartType === 'attendance') {\n          updatePerformanceChart({\n            attendanceDistribution: [0, 0, 0]\n          });\n        }\n      }\n    };\n\n    // Function to generate and download chart data\n    const generateChartData = async (chartType, format = 'excel') => {\n      try {\n        console.log(`Generating ${format} for ${chartType} chart`);\n\n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n\n            // Format attendance data for export - ensure we have proper data structure\n            const attendanceData = chartData.value[chartType] || {};\n            const present = attendanceData.present || data.value?.attendanceDistribution?.[0] || 0;\n            const late = attendanceData.late || data.value?.attendanceDistribution?.[1] || 0;\n            const absent = attendanceData.absent || data.value?.attendanceDistribution?.[2] || 0;\n            console.log('Attendance data for export:', {\n              present,\n              late,\n              absent\n            });\n            dataToExport = [{\n              'Status': 'Present',\n              'Count': present\n            }, {\n              'Status': 'Late',\n              'Count': late\n            }, {\n              'Status': 'Absent',\n              'Count': absent\n            }];\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n\n            // Format assessment type data for export\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n\n            // Format performance trend data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData.filter(assessment => assessment.date).map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment': assessment.name || assessment.title || '',\n                  'Type': assessment.type || '',\n                  'Average Score': assessment.averageScore || 0\n                }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n\n            // Format assessment type performance data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData.filter(assessment => assessment.date && assessment.type).map(assessment => ({\n                  'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                  'Assessment Type': assessment.type || '',\n                  'Assessment Name': assessment.name || assessment.title || '',\n                  'Average Score': assessment.averageScore || 0\n                }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment Type': trend.type || '',\n                'Assessment Name': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n\n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          return;\n        }\n        if (format === 'excel') {\n          // Create and download Excel file\n          const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n          const workbook = XLSX.utils.book_new();\n          XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n          const excelBuffer = XLSX.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array'\n          });\n          const excelData = new Blob([excelBuffer], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          });\n          saveAs(excelData, `${fileName}.xlsx`);\n        } else if (format === 'pdf') {\n          // Create and download PDF file\n          try {\n            const doc = new jsPDF();\n\n            // Add header\n            doc.setFontSize(18);\n            doc.setTextColor(40, 40, 40);\n\n            // Customize header based on chart type\n            let title = '';\n            switch (chartType) {\n              case 'attendance':\n                title = 'Attendance Distribution Report';\n                break;\n              case 'assessmentType':\n                title = 'Assessment Types Performance Report';\n                break;\n              case 'performanceTrend':\n                title = 'Performance Trends Report';\n                break;\n              case 'assessmentTypePerformance':\n                title = 'Performance by Assessment Type Report';\n                break;\n            }\n            doc.text(title, 14, 22);\n\n            // Add date and filters info\n            doc.setFontSize(11);\n            doc.setTextColor(100, 100, 100);\n            const dateText = `Generated on: ${moment().format('MMMM D, YYYY')}`;\n            doc.text(dateText, 14, 30);\n\n            // Add filter info if available\n            let filterText = '';\n            if (selectedYear.value) filterText += `Year: ${selectedYear.value} `;\n            if (selectedSection.value) filterText += `Section: ${selectedSection.value} `;\n            if (selectedSubject.value) filterText += `Subject: ${selectedSubject.value} `;\n            if (filterText) {\n              doc.text(`Filters: ${filterText}`, 14, 38);\n            }\n\n            // Filter settings\n            const periodText = `Period: ${chartFilters.value[chartType]?.period || 'month'}`;\n            doc.text(periodText, 14, 46);\n\n            // Convert data to table format\n            const tableColumn = Object.keys(dataToExport[0]);\n            const tableRows = dataToExport.map(item => Object.values(item));\n\n            // Add table\n            doc.autoTable({\n              startY: 55,\n              head: [tableColumn],\n              body: tableRows,\n              theme: 'striped',\n              headStyles: {\n                fillColor: [0, 51, 102],\n                textColor: 255,\n                fontStyle: 'bold'\n              },\n              styles: {\n                fontSize: 10,\n                cellPadding: 3\n              },\n              margin: {\n                top: 50\n              }\n            });\n\n            // If it's attendance data, add a pie chart visualization\n            if (chartType === 'attendance') {\n              const present = dataToExport.find(i => i.Status === 'Present')?.Count || 0;\n              const late = dataToExport.find(i => i.Status === 'Late')?.Count || 0;\n              const absent = dataToExport.find(i => i.Status === 'Absent')?.Count || 0;\n              const total = present + late + absent;\n              if (total > 0) {\n                // Add attendance summary\n                const presentPercent = (present / total * 100).toFixed(1);\n                const latePercent = (late / total * 100).toFixed(1);\n                const absentPercent = (absent / total * 100).toFixed(1);\n\n                // Get Y position after table\n                const finalY = doc.lastAutoTable.finalY || 150;\n                doc.setFontSize(12);\n                doc.setTextColor(40, 40, 40);\n                doc.text('Attendance Summary:', 14, finalY + 15);\n                doc.setFontSize(10);\n                doc.setTextColor(100, 100, 100);\n                doc.text(`Total Records: ${total}`, 14, finalY + 25);\n                doc.text(`Present: ${present} (${presentPercent}%)`, 14, finalY + 33);\n                doc.text(`Late: ${late} (${latePercent}%)`, 14, finalY + 41);\n                doc.text(`Absent: ${absent} (${absentPercent}%)`, 14, finalY + 49);\n              }\n            }\n\n            // Add footer with teacher's name\n            const pageCount = doc.internal.getNumberOfPages();\n            doc.setFontSize(10);\n            doc.setTextColor(100, 100, 100);\n            const teacherName = store.state.auth.user ? `${store.state.auth.user.firstName || ''} ${store.state.auth.user.lastName || ''}`.trim() : 'Teacher';\n            for (let i = 1; i <= pageCount; i++) {\n              doc.setPage(i);\n              doc.text(`Generated by: ${teacherName} | Page ${i} of ${pageCount}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, {\n                align: 'center'\n              });\n            }\n\n            // Save the PDF\n            doc.save(`${fileName}.pdf`);\n            console.log(`PDF generated successfully for ${chartType}`);\n          } catch (pdfError) {\n            console.error('Error generating PDF:', pdfError);\n            alert('Failed to generate PDF report. Please try again.');\n          }\n        }\n        console.log(`Data exported for ${chartType} as ${format}`);\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating report: ${error.message || 'Unknown error'}`);\n      }\n    };\n\n    // Enhanced fetchDashboardData function\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n\n        // Prepare query parameters with URLSearchParams for consistency\n        const params = new URLSearchParams();\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        console.log('Fetching dashboard data with params:', Object.fromEntries(params));\n\n        // Fetch dashboard stats\n        const url = `http://localhost:8000/api/dashboard/teacher/${teacherId}/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Dashboard data received:', response.data);\n\n        // Store complete data for reference\n        data.value = response.data;\n\n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = response.data.totalStudents > 0 || response.data.totalSections > 0 || Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0) || Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0;\n\n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n\n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n\n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n\n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n\n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n\n        // ALWAYS fetch attendance data separately to ensure we have the latest\n        await fetchAttendanceData();\n\n        // Fetch assessment data separately\n        await fetchAssessmentData();\n\n        // After updating the charts, apply the default filter (month) to each chart\n        // This ensures the charts' data is consistent with the filter state\n        const endDate = moment().format('YYYY-MM-DD');\n        const startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        await Promise.all([fetchChartData('attendance', startDate, endDate), fetchChartData('assessmentType', startDate, endDate), fetchChartData('performanceTrend', startDate, endDate), fetchChartData('assessmentTypePerformance', startDate, endDate)]);\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    // Add a dedicated function to fetch attendance data\n    const fetchAttendanceData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare attendance parameters\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n\n        // Add date range - default to last 30 days if not specified\n        params.append('startDate', selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'));\n        params.append('endDate', selectedEndDate.value || moment().format('YYYY-MM-DD'));\n\n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        console.log('Fetching attendance data with params:', Object.fromEntries(params));\n        const url = `http://localhost:8000/api/attendance/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        console.log('Attendance data received:', response.data);\n        if (response.data) {\n          // Store in chartData for export\n          chartData.value.attendance = response.data;\n\n          // Parse attendance counts\n          const present = parseInt(response.data.present) || 0;\n          const late = parseInt(response.data.late) || 0;\n          const absent = parseInt(response.data.absent) || 0;\n\n          // Update main data store\n          if (data.value) {\n            data.value.attendanceDistribution = [present, late, absent];\n          }\n\n          // Update attendance chart\n          updatePerformanceChart({\n            attendanceDistribution: [present, late, absent]\n          });\n          console.log('Attendance distribution updated:', [present, late, absent]);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n\n        // Initialize with empty data on error\n        if (data.value) {\n          data.value.attendanceDistribution = [0, 0, 0];\n        }\n        updatePerformanceChart({\n          attendanceDistribution: [0, 0, 0]\n        });\n        return false;\n      }\n    };\n    const updatePerformanceChart = data => {\n      if (!performanceChart.value) return;\n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) ? data.attendanceDistribution.slice(0, 3) : [0, 0, 0];\n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n\n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [{\n            data: attendanceData,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for present\n            'rgba(251, 191, 36, 0.8)',\n            // Yellow for late\n            'rgba(239, 68, 68, 0.8)' // Red for absent\n            ],\n            borderColor: ['rgb(15, 140, 80)',\n            // Darker borders for contrast\n            'rgb(220, 160, 20)', 'rgb(220, 50, 50)'],\n            borderWidth: 1,\n            hoverOffset: 15\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? (value / total * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypeChart = data => {\n      if (!assessmentTypeChart.value) return;\n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n\n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n\n      // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n\n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n\n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      console.log('Processed assessment chart data:', processedData);\n\n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [{\n            label: 'Average Score (%)',\n            data: processedData.scores,\n            backgroundColor: ['rgba(52, 211, 153, 0.8)',\n            // Green for Quiz\n            'rgba(59, 130, 246, 0.8)',\n            // Blue for Activity\n            'rgba(251, 191, 36, 0.8)' // Yellow for Performance Task\n            ].slice(0, processedData.types.length),\n            borderColor: ['rgb(15, 140, 80)', 'rgb(45, 110, 220)', 'rgb(220, 160, 20)'].slice(0, processedData.types.length),\n            borderWidth: 1,\n            borderRadius: 6,\n            barPercentage: 0.6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: context => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n    const updatePerformanceTrendChart = data => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const updateAssessmentTypePerformanceChart = data => {\n      if (!assessmentTypePerformanceChart.value) return;\n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(Object.values(trendsByType).flat().map(item => item.date))].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = ['rgb(52, 211, 153)',\n        // Green for Quiz\n        'rgb(59, 130, 246)',\n        // Blue for Activity\n        'rgb(251, 191, 36)' // Yellow for Performance Task\n        ];\n        const color = colors[index];\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n    const formatDate = date => {\n      return moment(date).format('MMM D, YYYY');\n    };\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value);\n      } else {\n        localStorage.removeItem('selectedYear');\n      }\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value);\n      } else {\n        localStorage.removeItem('selectedSection');\n      }\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value);\n      } else {\n        localStorage.removeItem('selectedSubject');\n      }\n      await fetchDashboardData();\n    };\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange);\n    watch([selectedSection, selectedSubject], applyFilters);\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        fetchDashboardData();\n      }\n    });\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n\n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        console.log('Fetching assessment data with params:', params);\n\n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({\n          assessmentData: []\n        });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = data => {\n      if (data) {\n        console.log('Assessment data received:', data);\n\n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            },\n            'Activity': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            },\n            'Performance Task': {\n              count: 0,\n              totalScore: 0,\n              scoreCount: 0\n            }\n          };\n\n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n\n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n\n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 ? (typeData.totalScore / typeData.scoreCount).toFixed(1) : 0;\n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          updateAssessmentTypeChart({\n            assessmentData\n          });\n\n          // Create performance trends data\n          const performanceTrends = data.filter(a => a.date) // Only include assessments with dates\n          .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n          .map(assessment => {\n            // Calculate average score for this assessment\n            let averageScore = 0;\n            let scoreArray = [];\n            if (assessment.scores) {\n              if (Array.isArray(assessment.scores)) {\n                scoreArray = assessment.scores;\n              } else if (typeof assessment.scores === 'object') {\n                scoreArray = Object.values(assessment.scores);\n              }\n              const validScores = scoreArray.filter(score => typeof score === 'number');\n              if (validScores.length > 0) {\n                const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                averageScore = totalScore / validScores.length;\n              }\n            }\n            return {\n              date: assessment.date,\n              score: averageScore,\n              name: assessment.name || assessment.title || assessment.type,\n              type: assessment.type\n            };\n          });\n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n\n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          initEmptyCharts();\n          console.log('Empty charts initialized');\n\n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n\n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n\n      // Add default chart filter periods\n      Object.keys(chartFilters.value).forEach(chartType => {\n        chartFilters.value[chartType].period = 'month';\n      });\n    });\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","useStore","Chart","axios","moment","saveAs","XLSX","jsPDF","name","setup","store","performanceChart","attendanceChart","assessmentTypeChart","performanceTrendChart","assessmentTypePerformanceChart","totalStudents","totalSections","totalSubjects","averageScore","recentActivities","sections","subjects","selectedYear","localStorage","getItem","selectedSection","selectedSubject","selectedStartDate","selectedEndDate","today","format","chartFilters","attendance","period","assessmentType","performanceTrend","assessmentTypePerformance","chartData","availableYears","getTeacherId","user","state","auth","_id","console","error","hasAttendanceData","data","value","attendanceDistribution","distribution","Array","isArray","length","some","val","numVal","Number","isNaN","present","late","absent","err","hasPerformanceData","performanceTrends","assessmentTypes","Object","values","type","count","hasAssessmentData","assessmentTypeDistribution","hasActivity","loading","userName","firstName","lastName","trim","fetchTeacherSectionsAndSubjects","year","teacherId","token","log","recordsResponse","get","params","headers","uniqueYears","Set","map","record","filter","Boolean","sort","filteredRecords","section","subject","uniqueSections","uniqueSubjects","warn","handleYearChange","fetchDashboardData","getFilterDisplay","filters","push","join","initEmptyCharts","updatePerformanceChart","updateAssessmentTypeChart","assessmentData","updatePerformanceTrendChart","updateAssessmentTypePerformanceChart","applyChartDateFilter","chartType","endDate","startDate","subtract","fetchChartData","URLSearchParams","append","fromEntries","endpoint","url","Error","toString","response","attendanceStats","parseInt","formattedData","keys","forEach","typeData","avgScore","scoreCount","totalScore","toFixed","a","date","b","Date","assessment","scoreArray","scores","validScores","score","reduce","sum","title","generateChartData","dataToExport","fileName","attendanceData","rawData","trend","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","excelData","Blob","doc","setFontSize","setTextColor","text","dateText","filterText","periodText","tableColumn","tableRows","item","autoTable","startY","head","body","theme","headStyles","fillColor","textColor","fontStyle","styles","fontSize","cellPadding","margin","top","find","i","Status","Count","total","presentPercent","latePercent","absentPercent","finalY","lastAutoTable","pageCount","internal","getNumberOfPages","teacherName","setPage","pageSize","width","height","align","save","pdfError","alert","message","hasValidData","hasOwnProperty","scoreValue","parseFloat","fetchAttendanceData","fetchAssessmentData","Promise","all","ctx","getContext","existingChart","getChart","destroy","slice","totalAttendance","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","cutout","plugins","legend","display","position","padding","font","size","tooltip","callbacks","label","context","raw","percentage","titleFont","weight","bodyFont","cornerRadius","layout","right","bottom","left","processedData","types","counts","availableTypes","borderRadius","barPercentage","scales","y","beginAtZero","max","grid","color","ticks","x","dataset","afterLabel","dataIndex","validData","d","tension","fill","pointRadius","pointHoverRadius","dataPoint","stepSize","maxRotation","minRotation","trendsByType","Quiz","Activity","allDates","flat","entries","index","colors","point","getTime","replace","spanGaps","interaction","intersect","mode","formatDate","applyFilters","setItem","removeItem","start","end","isBefore","assessmentResponse","processAssessmentResponse"],"sources":["D:\\au_dev\\client\\src\\views\\TeacherDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <!-- Greeting Section -->\n    <div class=\"greeting-section mb-4\">\n      <h2 class=\"greeting\">Welcome, {{ userName }}</h2>\n      <p class=\"greeting-subtitle\">Here's your dashboard overview</p>\n    </div>\n    \n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n      <h2 class=\"dashboard-title\"></h2>\n      \n      <!-- Combined Filter Dropdown -->\n      <div class=\"dropdown\">\n        <button class=\"btn btn-filter dropdown-toggle\" type=\"button\" id=\"filterDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          <i class=\"fas fa-filter me-2\"></i>\n          {{ getFilterDisplay() }}\n        </button>\n        <div class=\"dropdown-menu filter-menu p-3\" aria-labelledby=\"filterDropdown\">\n          <h6 class=\"dropdown-header\">Filter Options</h6>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Academic Year</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedYear\" @change=\"handleYearChange\">\n              <option value=\"\">All Years</option>\n              <option v-for=\"year in availableYears\" :key=\"year\" :value=\"year\">{{ year }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Section</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSection\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Sections</option>\n              <option v-for=\"section in sections\" :key=\"section\" :value=\"section\">{{ section }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Subject</label>\n            <select class=\"form-select mb-2\" v-model=\"selectedSubject\" :disabled=\"!selectedYear\">\n              <option value=\"\">All Subjects</option>\n              <option v-for=\"subject in subjects\" :key=\"subject\" :value=\"subject\">{{ subject }}</option>\n            </select>\n          </div>\n          <div class=\"mb-3\">\n            <label class=\"form-label\">Date Range</label>\n            <div class=\"d-flex gap-2\">\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">From</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedStartDate\"\n                  :max=\"today\"\n                >\n              </div>\n              <div class=\"flex-grow-1\">\n                <label class=\"small text-muted\">To</label>\n                <input \n                  type=\"date\" \n                  class=\"form-control form-control-sm\" \n                  v-model=\"selectedEndDate\"\n                  :max=\"today\"\n                >\n              </div>\n            </div>\n          </div>\n          <div class=\"dropdown-divider\"></div>\n          <button class=\"btn btn-primary w-100\" @click=\"applyFilters\" :disabled=\"loading\">\n            <span v-if=\"loading\"><i class=\"fas fa-spinner fa-spin me-2\"></i>Loading...</span>\n            <span v-else>Apply Filters</span>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Analytics Cards -->\n    <div class=\"row g-4 mb-4\">\n      <!-- Total Students Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-user-graduate\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Total Students</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalStudents }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Sections Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chalkboard\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Active Sections</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSections }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Total Subjects Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-book\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">My Subjects</h3>\n            <div class=\"stat-value\" v-if=\"!loading\">{{ totalSubjects }}</div>\n            <div class=\"stat-value loading\" v-else><i class=\"fas fa-spinner fa-spin\"></i></div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Average Score Card -->\n      <div class=\"col-md-3\">\n        <div class=\"dashboard-card\">\n          <div class=\"icon-container\">\n            <i class=\"fas fa-chart-line\"></i>\n          </div>\n          <div class=\"card-info\">\n            <h3 class=\"stat-title\">Class Average</h3>\n            <div class=\"stat-value\" v-if=\"!loading && hasPerformanceData\">{{ averageScore }}%</div>\n            <div class=\"stat-value loading\" v-else-if=\"loading\"><i class=\"fas fa-spinner fa-spin\"></i></div>\n            <div class=\"no-data\" v-else>No data available</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row mb-4\">\n      <!-- Attendance Distribution Chart (previously Performance Distribution) -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-calendar-check me-2\"></i>\n              Attendance Distribution\n            </h5>\n            <p class=\"chart-description\">Breakdown of student attendance patterns</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('attendance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('attendance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('attendance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.attendance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceChart\"></canvas>\n              <p v-if=\"!hasAttendanceData && !loading\" class=\"no-data-message\">No attendance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"generateAttendanceDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasAttendanceData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"generateAttendanceDropdown\">\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('attendance', 'excel')\"><i class=\"fas fa-file-excel me-2\"></i>Excel</a></li>\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('attendance', 'pdf')\"><i class=\"fas fa-file-pdf me-2\"></i>PDF</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Assessment Type Distribution -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-tasks me-2\"></i>\n              Assessment Performance Analysis\n            </h5>\n            <p class=\"chart-description\">Average scores by assessment type</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentType', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentType', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentType?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypeChart\"></canvas>\n              <p v-if=\"!hasAssessmentData && !loading\" class=\"no-data-message\">No assessment data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"generateAssessmentTypeDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasAssessmentData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"generateAssessmentTypeDropdown\">\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('assessmentType', 'excel')\"><i class=\"fas fa-file-excel me-2\"></i>Excel</a></li>\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('assessmentType', 'pdf')\"><i class=\"fas fa-file-pdf me-2\"></i>PDF</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Performance Trend Chart -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-chart-line me-2\"></i>\n              Performance Trends Over Time\n            </h5>\n            <p class=\"chart-description\">Class average scores across recent assessments</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('performanceTrend', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('performanceTrend', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.performanceTrend?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"performanceTrendChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"generatePerformanceTrendDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasPerformanceData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"generatePerformanceTrendDropdown\">\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('performanceTrend', 'excel')\"><i class=\"fas fa-file-excel me-2\"></i>Excel</a></li>\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('performanceTrend', 'pdf')\"><i class=\"fas fa-file-pdf me-2\"></i>PDF</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Assessment Type Performance -->\n      <div class=\"col-md-6 mb-4\">\n        <div class=\"chart-card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">\n              <i class=\"fas fa-graduation-cap me-2\"></i>\n              Performance by Assessment Type\n            </h5>\n            <p class=\"chart-description\">Visualizes how students perform across different assessment types</p>\n            <div class=\"chart-filters mb-3\">\n              <div class=\"btn-group date-filter-group\">\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'day')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'day' ? 'btn-primary' : 'btn-outline-primary']\">Day</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'week')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'week' ? 'btn-primary' : 'btn-outline-primary']\">Week</button>\n                <button @click=\"applyChartDateFilter('assessmentTypePerformance', 'month')\" :class=\"['btn', 'btn-sm', chartFilters?.assessmentTypePerformance?.period === 'month' ? 'btn-primary' : 'btn-outline-primary']\">Month</button>\n              </div>\n            </div>\n            <div class=\"chart-container\">\n              <div v-if=\"loading\" class=\"loading-overlay\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                <p>Loading chart data...</p>\n              </div>\n              <canvas ref=\"assessmentTypePerformanceChart\"></canvas>\n              <p v-if=\"!hasPerformanceData && !loading\" class=\"no-data-message\">No performance data available</p>\n            </div>\n            <div class=\"text-end mt-3\">\n              <div class=\"dropdown d-inline-block\">\n                <button class=\"btn btn-sm btn-outline-success dropdown-toggle\" type=\"button\" id=\"generateAssessmentTypePerformanceDropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" :disabled=\"!hasPerformanceData || loading\">\n                  <i class=\"fas fa-download me-1\"></i> Generate\n                </button>\n                <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"generateAssessmentTypePerformanceDropdown\">\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('assessmentTypePerformance', 'excel')\"><i class=\"fas fa-file-excel me-2\"></i>Excel</a></li>\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"generateChartData('assessmentTypePerformance', 'pdf')\"><i class=\"fas fa-file-pdf me-2\"></i>PDF</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Recent Activity -->\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Recent Activity</h5>\n        <div class=\"table-responsive\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-if=\"loading\">\n                <td colspan=\"3\" class=\"text-center\">\n                  <i class=\"fas fa-spinner fa-spin me-2\"></i>Loading activities...\n                </td>\n              </tr>\n              <tr v-else-if=\"!hasActivity\">\n                <td colspan=\"3\" class=\"text-center\">No recent activity</td>\n              </tr>\n              <tr v-else v-for=\"activity in recentActivities\" :key=\"activity.id\">\n                <td>{{ formatDate(activity.date) }}</td>\n                <td>{{ activity.type }}</td>\n                <td>{{ activity.details }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, watch, nextTick } from 'vue'\nimport { useStore } from 'vuex'\nimport Chart from 'chart.js/auto'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { saveAs } from 'file-saver'\nimport * as XLSX from 'xlsx'\nimport jsPDF from 'jspdf'\nimport 'jspdf-autotable'\n\nexport default {\n  name: 'TeacherDashboard',\n  setup() {\n    const store = useStore()\n    const performanceChart = ref(null)\n    const attendanceChart = ref(null)\n    const assessmentTypeChart = ref(null)\n    const performanceTrendChart = ref(null)\n    const assessmentTypePerformanceChart = ref(null)\n\n    // Data refs\n    const totalStudents = ref(0)\n    const totalSections = ref(0)\n    const totalSubjects = ref(0)\n    const averageScore = ref(0)\n    const recentActivities = ref([])\n    const sections = ref([])\n    const subjects = ref([])\n    \n    // Filter refs\n    const selectedYear = ref(localStorage.getItem('selectedYear') || '')\n    const selectedSection = ref(localStorage.getItem('selectedSection') || '')\n    const selectedSubject = ref(localStorage.getItem('selectedSubject') || '')\n    const selectedStartDate = ref('')\n    const selectedEndDate = ref('')\n    const today = computed(() => moment().format('YYYY-MM-DD'))\n\n    // Chart date filter state - initialize early to avoid undefined errors\n    const chartFilters = ref({\n      attendance: { period: 'month' },\n      assessmentType: { period: 'month' },\n      performanceTrend: { period: 'month' },\n      assessmentTypePerformance: { period: 'month' }\n    });\n    \n    // Chart raw data for export\n    const chartData = ref({\n      attendance: [],\n      assessmentType: [],\n      performanceTrend: [],\n      assessmentTypePerformance: []\n    });\n\n    // We'll maintain available years that come from the API\n    const availableYears = ref([]);\n\n    // Get teacher ID from store\n    const getTeacherId = () => {\n      const user = store.state.auth.user\n      if (!user || !user._id) {\n        console.error('No teacher ID found in store')\n        return null\n      }\n      return user._id\n    }\n\n    // Computed properties for data availability\n    const hasAttendanceData = computed(() => {\n      try {\n        if (data.value && data.value.attendanceDistribution) {\n          // Check if we have an array and if any value is > 0\n          const distribution = data.value.attendanceDistribution;\n          if (Array.isArray(distribution) && distribution.length > 0) {\n            return distribution.some(val => {\n              const numVal = Number(val);\n              return !isNaN(numVal) && numVal > 0;\n            });\n          }\n        }\n        \n        // Also check chartData as a fallback\n        if (chartData.value && chartData.value.attendance) {\n          const attendance = chartData.value.attendance;\n          return !!(\n            (Number(attendance.present) > 0) || \n            (Number(attendance.late) > 0) || \n            (Number(attendance.absent) > 0)\n          );\n        }\n        \n        return false;\n      } catch (err) {\n        console.error('Error in hasAttendanceData:', err);\n        return false;\n      }\n    });\n\n    const hasPerformanceData = computed(() => {\n      // Check if we have any assessment or performance data\n      if (data.value) {\n        // Check for averageScore > 0\n        if (typeof data.value.averageScore === 'number' && data.value.averageScore > 0) {\n          return true;\n        }\n        \n        // Check for performance trends\n        if (Array.isArray(data.value.performanceTrends) && data.value.performanceTrends.length > 0) {\n          return true;\n        }\n        \n        // Check for assessment types with data\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n      }\n      return false;\n    });\n\n    const hasAssessmentData = computed(() => {\n      if (data.value) {\n        // Check directly in assessmentTypes\n        if (data.value.assessmentTypes) {\n          const assessmentTypes = Object.values(data.value.assessmentTypes);\n          return assessmentTypes.some(type => type.count > 0);\n        }\n        \n        // Fallback to assessmentTypeDistribution\n        if (data.value.assessmentTypeDistribution) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    const hasActivity = computed(() => recentActivities.value.length > 0)\n\n    // Store all dashboard data in a ref for easier access\n    const data = ref({\n      attendanceDistribution: [0, 0, 0],\n      assessmentTypes: {},\n      performanceTrends: []\n    });\n\n    // In setup function, add loading state\n    const loading = ref(false);\n\n    const userName = computed(() => {\n      const user = store.state.auth.user;\n      return user ? user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Teacher' : 'Teacher';\n    });\n\n    const fetchTeacherSectionsAndSubjects = async (year = '') => {\n      try {\n        const teacherId = getTeacherId()\n        if (!teacherId) return\n\n        const token = store.state.auth.token\n        console.log('Fetching sections and subjects for:', { teacherId, year })\n\n        // First get all class records to extract sections and years\n        const recordsResponse = await axios.get('http://localhost:8000/api/teacher-class-records', {\n          params: { \n            teacherId\n          },\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (recordsResponse.data && Array.isArray(recordsResponse.data)) {\n          // Extract unique years, sections and subjects\n          const uniqueYears = [...new Set(recordsResponse.data.map(record => record.year))].filter(Boolean);\n          console.log('All unique years found:', uniqueYears);\n          \n          // Save available years\n          availableYears.value = uniqueYears.sort();\n          \n          // Filter sections and subjects based on year if provided\n          if (year) {\n            const filteredRecords = recordsResponse.data.filter(record => record.year === year);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          } else {\n            const uniqueSections = [...new Set(recordsResponse.data.map(record => record.section))].filter(Boolean);\n            const uniqueSubjects = [...new Set(recordsResponse.data.map(record => record.subject))].filter(Boolean);\n            sections.value = uniqueSections.sort();\n            subjects.value = uniqueSubjects.sort();\n          }\n          \n          // If no selectedYear but we have years\n          if (!selectedYear.value && uniqueYears.length > 0) {\n            selectedYear.value = uniqueYears[0];\n            \n            // Also update sections and subjects for this year\n            const filteredRecords = recordsResponse.data.filter(record => record.year === uniqueYears[0]);\n            sections.value = [...new Set(filteredRecords.map(record => record.section))].filter(Boolean).sort();\n            subjects.value = [...new Set(filteredRecords.map(record => record.subject))].filter(Boolean).sort();\n          }\n          \n          console.log('Loaded sections and subjects:', {\n            availableYears: availableYears.value,\n            sections: sections.value,\n            subjects: subjects.value\n          });\n        } else {\n          console.warn('No class records found or unexpected response format');\n          // Reset all filters and arrays\n          availableYears.value = [];\n          sections.value = [];\n          subjects.value = [];\n        }\n      } catch (error) {\n        console.error('Error fetching teacher sections and subjects:', error)\n        sections.value = []\n        subjects.value = []\n      }\n    }\n\n    const handleYearChange = async () => {\n      // Reset section and subject when year changes\n      selectedSection.value = '';\n      selectedSubject.value = '';\n      \n      // If a year is selected, fetch sections and subjects for that year\n      if (selectedYear.value) {\n        await fetchTeacherSectionsAndSubjects(selectedYear.value);\n      } else {\n        // If no year selected, get all available sections and subjects\n        await fetchTeacherSectionsAndSubjects();\n      }\n      \n      // Update dashboard data with new year selection\n      await fetchDashboardData();\n    }\n\n    const getFilterDisplay = () => {\n      const filters = []\n      if (selectedYear.value) filters.push(selectedYear.value + ' Year')\n      if (selectedSection.value) filters.push(selectedSection.value)\n      if (selectedSubject.value) filters.push(selectedSubject.value)\n      return filters.length > 0 ? filters.join(' - ') : 'Filter View'\n    }\n\n    // Initialize empty data for charts when no data is available\n    const initEmptyCharts = () => {\n      updatePerformanceChart({\n        attendanceDistribution: [0, 0, 0]\n      });\n      \n      updateAssessmentTypeChart({\n        assessmentData: []\n      });\n      \n      updatePerformanceTrendChart([]);\n      \n      updateAssessmentTypePerformanceChart({\n        performanceTrends: []\n      });\n    };\n\n    // Function to apply date filter for a specific chart\n    const applyChartDateFilter = async (chartType, period) => {\n      console.log(`Applying ${period} filter to ${chartType} chart`);\n      \n      // Update the filter period\n      chartFilters.value[chartType].period = period;\n      \n      // Calculate date range based on period\n      const endDate = moment().format('YYYY-MM-DD');\n      let startDate;\n      \n      switch (period) {\n        case 'day':\n          startDate = moment().subtract(1, 'days').format('YYYY-MM-DD');\n          break;\n        case 'week':\n          startDate = moment().subtract(7, 'days').format('YYYY-MM-DD');\n          break;\n        case 'month':\n        default:\n          startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n          break;\n      }\n      \n      // Fetch and update the specific chart\n      await fetchChartData(chartType, startDate, endDate);\n    };\n    \n    // Function to fetch data for a specific chart\n    const fetchChartData = async (chartType, startDate, endDate) => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters with URLSearchParams to ensure proper encoding\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        params.append('startDate', startDate);\n        params.append('endDate', endDate);\n        \n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        \n        console.log(`Fetching ${chartType} data with params:`, Object.fromEntries(params));\n        \n        let endpoint;\n        let url;\n        \n        switch (chartType) {\n          case 'attendance':\n            endpoint = 'attendance/stats';\n            break;\n          case 'assessmentType':\n          case 'performanceTrend':\n          case 'assessmentTypePerformance':\n            endpoint = 'assessments/stats';\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        url = `http://localhost:8000/api/${endpoint}?${params.toString()}`;\n        console.log(`Requesting URL: ${url}`);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log(`${chartType} data received:`, response.data);\n        \n        // Store raw data for export\n        chartData.value[chartType] = response.data;\n        \n        // Update the specific chart\n        switch (chartType) {\n          case 'attendance':\n            if (response.data) {\n              // Format the attendance data for our chart\n              const attendanceStats = response.data;\n              \n              // Ensure we have numbers for the chart\n              const present = parseInt(attendanceStats.present) || 0;\n              const late = parseInt(attendanceStats.late) || 0;\n              const absent = parseInt(attendanceStats.absent) || 0;\n              \n              console.log('Attendance stats for chart:', { present, late, absent });\n              \n              const formattedData = {\n                attendanceDistribution: [present, late, absent]\n              };\n              \n              // Update the attendance data in our main data store too\n              if (data.value) {\n                data.value.attendanceDistribution = formattedData.attendanceDistribution;\n              }\n              \n              updatePerformanceChart(formattedData);\n            }\n            break;\n          case 'assessmentType':\n            if (response.data && response.data.assessmentTypes) {\n              const assessmentData = [];\n              \n              Object.keys(response.data.assessmentTypes).forEach(type => {\n                const typeData = response.data.assessmentTypes[type];\n                if (typeData) {\n                  let avgScore = 0;\n                  if (typeData.scoreCount && typeData.scoreCount > 0) {\n                    avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n                  }\n                  \n                  assessmentData.push({\n                    type: type,\n                    averageScore: avgScore,\n                    count: typeData.count || 0\n                  });\n                }\n              });\n              \n              updateAssessmentTypeChart({ assessmentData });\n            }\n            break;\n          case 'performanceTrend':\n            if (response.data) {\n              // Create performance trends data\n              const performanceTrends = Array.isArray(response.data) ? response.data\n                .filter(a => a.date) // Only include assessments with dates\n                .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n                .map(assessment => {\n                  // Calculate average score for this assessment\n                  let averageScore = 0;\n                  let scoreArray = [];\n                  \n                  if (assessment.scores) {\n                    if (Array.isArray(assessment.scores)) {\n                      scoreArray = assessment.scores;\n                    } else if (typeof assessment.scores === 'object') {\n                      scoreArray = Object.values(assessment.scores);\n                    }\n                    \n                    const validScores = scoreArray.filter(score => typeof score === 'number');\n                    if (validScores.length > 0) {\n                      const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                      averageScore = totalScore / validScores.length;\n                    }\n                  }\n                  \n                  return {\n                    date: assessment.date,\n                    score: averageScore,\n                    name: assessment.name || assessment.title || assessment.type,\n                    type: assessment.type\n                  };\n                }) : [];\n              \n              updatePerformanceTrendChart(performanceTrends);\n            }\n            break;\n          case 'assessmentTypePerformance':\n            if (response.data) {\n              // Create performance trends data for assessment type performance\n              const performanceTrends = Array.isArray(response.data) ? response.data\n                .filter(a => a.date) // Only include assessments with dates\n                .map(assessment => ({\n                  date: assessment.date,\n                  score: assessment.averageScore || 0,\n                  name: assessment.name || assessment.title || assessment.type,\n                  type: assessment.type\n                })) : [];\n              \n              updateAssessmentTypePerformanceChart({\n                performanceTrends\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error(`Error fetching ${chartType} data:`, error);\n        // If the chart type is attendance, ensure we update with empty data\n        if (chartType === 'attendance') {\n          updatePerformanceChart({\n            attendanceDistribution: [0, 0, 0]\n          });\n        }\n      }\n    };\n    \n    // Function to generate and download chart data\n    const generateChartData = async (chartType, format = 'excel') => {\n      try {\n        console.log(`Generating ${format} for ${chartType} chart`);\n        \n        // Get raw data for the chart\n        let dataToExport = [];\n        let fileName = '';\n        \n        switch (chartType) {\n          case 'attendance':\n            fileName = `attendance_data_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format attendance data for export - ensure we have proper data structure\n            const attendanceData = chartData.value[chartType] || {};\n            const present = attendanceData.present || data.value?.attendanceDistribution?.[0] || 0;\n            const late = attendanceData.late || data.value?.attendanceDistribution?.[1] || 0;\n            const absent = attendanceData.absent || data.value?.attendanceDistribution?.[2] || 0;\n            \n            console.log('Attendance data for export:', { present, late, absent });\n            \n            dataToExport = [\n              {\n                'Status': 'Present',\n                'Count': present\n              },\n              {\n                'Status': 'Late',\n                'Count': late\n              },\n              {\n                'Status': 'Absent',\n                'Count': absent\n              }\n            ];\n            break;\n          case 'assessmentType':\n            fileName = `assessment_types_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type data for export\n            if (chartData.value[chartType]?.assessmentTypes) {\n              // Use chartData instead of data\n              const assessmentTypes = chartData.value[chartType].assessmentTypes;\n              Object.keys(assessmentTypes).forEach(type => {\n                const typeData = assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            } else if (data.value?.assessmentTypes) {\n              // Fallback to data.value if needed\n              Object.keys(data.value.assessmentTypes).forEach(type => {\n                const typeData = data.value.assessmentTypes[type];\n                if (typeData) {\n                  dataToExport.push({\n                    'Assessment Type': type,\n                    'Average Score': typeData.averageScore || 0,\n                    'Count': typeData.count || 0\n                  });\n                }\n              });\n            }\n            break;\n          case 'performanceTrend':\n            fileName = `performance_trends_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format performance trend data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData\n                  .filter(assessment => assessment.date)\n                  .map(assessment => ({\n                    'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                    'Assessment': assessment.name || assessment.title || '',\n                    'Type': assessment.type || '',\n                    'Average Score': assessment.averageScore || 0\n                  }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          case 'assessmentTypePerformance':\n            fileName = `assessment_performance_${moment().format('YYYY-MM-DD')}`;\n            \n            // Format assessment type performance data for export\n            if (chartData.value[chartType]?.rawData) {\n              // Use chartData's raw assessment data\n              const rawData = chartData.value[chartType].rawData;\n              if (Array.isArray(rawData)) {\n                dataToExport = rawData\n                  .filter(assessment => assessment.date && assessment.type)\n                  .map(assessment => ({\n                    'Date': moment(assessment.date).format('YYYY-MM-DD'),\n                    'Assessment Type': assessment.type || '',\n                    'Assessment Name': assessment.name || assessment.title || '',\n                    'Average Score': assessment.averageScore || 0\n                  }));\n              }\n            } else if (data.value?.performanceTrends) {\n              // Fallback to data.value if needed\n              dataToExport = data.value.performanceTrends.map(trend => ({\n                'Date': moment(trend.date).format('YYYY-MM-DD'),\n                'Assessment Type': trend.type || '',\n                'Assessment Name': trend.name || trend.title || '',\n                'Average Score': trend.score || trend.averageScore || 0\n              }));\n            }\n            break;\n          default:\n            throw new Error(`Unknown chart type: ${chartType}`);\n        }\n        \n        // Check if we have data to export\n        if (dataToExport.length === 0) {\n          console.warn(`No data to export for ${chartType}`);\n          return;\n        }\n        \n        if (format === 'excel') {\n          // Create and download Excel file\n          const worksheet = XLSX.utils.json_to_sheet(dataToExport);\n          const workbook = XLSX.utils.book_new();\n          XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n          const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n          const excelData = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n          saveAs(excelData, `${fileName}.xlsx`);\n        } else if (format === 'pdf') {\n          // Create and download PDF file\n          try {\n            const doc = new jsPDF();\n            \n            // Add header\n            doc.setFontSize(18);\n            doc.setTextColor(40, 40, 40);\n            \n            // Customize header based on chart type\n            let title = '';\n            switch (chartType) {\n              case 'attendance': \n                title = 'Attendance Distribution Report';\n                break;\n              case 'assessmentType':\n                title = 'Assessment Types Performance Report';\n                break;\n              case 'performanceTrend':\n                title = 'Performance Trends Report';\n                break;\n              case 'assessmentTypePerformance':\n                title = 'Performance by Assessment Type Report';\n                break;\n            }\n            \n            doc.text(title, 14, 22);\n            \n            // Add date and filters info\n            doc.setFontSize(11);\n            doc.setTextColor(100, 100, 100);\n            \n            const dateText = `Generated on: ${moment().format('MMMM D, YYYY')}`;\n            doc.text(dateText, 14, 30);\n            \n            // Add filter info if available\n            let filterText = '';\n            if (selectedYear.value) filterText += `Year: ${selectedYear.value} `;\n            if (selectedSection.value) filterText += `Section: ${selectedSection.value} `;\n            if (selectedSubject.value) filterText += `Subject: ${selectedSubject.value} `;\n            \n            if (filterText) {\n              doc.text(`Filters: ${filterText}`, 14, 38);\n            }\n            \n            // Filter settings\n            const periodText = `Period: ${chartFilters.value[chartType]?.period || 'month'}`;\n            doc.text(periodText, 14, 46);\n            \n            // Convert data to table format\n            const tableColumn = Object.keys(dataToExport[0]);\n            const tableRows = dataToExport.map(item => Object.values(item));\n            \n            // Add table\n            doc.autoTable({\n              startY: 55,\n              head: [tableColumn],\n              body: tableRows,\n              theme: 'striped',\n              headStyles: {\n                fillColor: [0, 51, 102],\n                textColor: 255,\n                fontStyle: 'bold'\n              },\n              styles: {\n                fontSize: 10,\n                cellPadding: 3,\n              },\n              margin: { top: 50 }\n            });\n            \n            // If it's attendance data, add a pie chart visualization\n            if (chartType === 'attendance') {\n              const present = dataToExport.find(i => i.Status === 'Present')?.Count || 0;\n              const late = dataToExport.find(i => i.Status === 'Late')?.Count || 0;\n              const absent = dataToExport.find(i => i.Status === 'Absent')?.Count || 0;\n              const total = present + late + absent;\n              \n              if (total > 0) {\n                // Add attendance summary\n                const presentPercent = ((present / total) * 100).toFixed(1);\n                const latePercent = ((late / total) * 100).toFixed(1);\n                const absentPercent = ((absent / total) * 100).toFixed(1);\n                \n                // Get Y position after table\n                const finalY = doc.lastAutoTable.finalY || 150;\n                \n                doc.setFontSize(12);\n                doc.setTextColor(40, 40, 40);\n                doc.text('Attendance Summary:', 14, finalY + 15);\n                \n                doc.setFontSize(10);\n                doc.setTextColor(100, 100, 100);\n                doc.text(`Total Records: ${total}`, 14, finalY + 25);\n                doc.text(`Present: ${present} (${presentPercent}%)`, 14, finalY + 33);\n                doc.text(`Late: ${late} (${latePercent}%)`, 14, finalY + 41);\n                doc.text(`Absent: ${absent} (${absentPercent}%)`, 14, finalY + 49);\n              }\n            }\n            \n            // Add footer with teacher's name\n            const pageCount = doc.internal.getNumberOfPages();\n            doc.setFontSize(10);\n            doc.setTextColor(100, 100, 100);\n            \n            const teacherName = store.state.auth.user ? \n              `${store.state.auth.user.firstName || ''} ${store.state.auth.user.lastName || ''}`.trim() : \n              'Teacher';\n            \n            for (let i = 1; i <= pageCount; i++) {\n              doc.setPage(i);\n              doc.text(\n                `Generated by: ${teacherName} | Page ${i} of ${pageCount}`,\n                doc.internal.pageSize.width / 2,\n                doc.internal.pageSize.height - 10,\n                { align: 'center' }\n              );\n            }\n            \n            // Save the PDF\n            doc.save(`${fileName}.pdf`);\n            console.log(`PDF generated successfully for ${chartType}`);\n          } catch (pdfError) {\n            console.error('Error generating PDF:', pdfError);\n            alert('Failed to generate PDF report. Please try again.');\n          }\n        }\n        \n        console.log(`Data exported for ${chartType} as ${format}`);\n      } catch (error) {\n        console.error(`Error generating ${chartType} data:`, error);\n        alert(`Error generating report: ${error.message || 'Unknown error'}`);\n      }\n    };\n\n    // Enhanced fetchDashboardData function\n    const fetchDashboardData = async () => {\n      try {\n        loading.value = true;\n        const teacherId = store.state.auth.user._id;\n        \n        if (!teacherId) {\n          console.error('Teacher ID not available');\n          loading.value = false;\n          return;\n        }\n        \n        // Prepare query parameters with URLSearchParams for consistency\n        const params = new URLSearchParams();\n        \n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        if (selectedStartDate.value) params.append('startDate', selectedStartDate.value);\n        if (selectedEndDate.value) params.append('endDate', selectedEndDate.value);\n        \n        console.log('Fetching dashboard data with params:', Object.fromEntries(params));\n        \n        // Fetch dashboard stats\n        const url = `http://localhost:8000/api/dashboard/teacher/${teacherId}/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Dashboard data received:', response.data);\n        \n        // Store complete data for reference\n        data.value = response.data;\n        \n        // Check if we received any meaningful data (indicating valid filters)\n        const hasValidData = \n          (response.data.totalStudents > 0) || \n          (response.data.totalSections > 0) || \n          (Array.isArray(response.data.attendanceDistribution) && response.data.attendanceDistribution.some(val => val > 0)) ||\n          (Array.isArray(response.data.performanceTrends) && response.data.performanceTrends.length > 0);\n        \n        // If no valid data, it means the filter combination doesn't match any records\n        if (!hasValidData && (selectedYear.value || selectedSection.value || selectedSubject.value)) {\n          console.warn('No data found for the selected filters');\n        }\n        \n        // Update stats - only when we have valid data or no filters applied\n        totalStudents.value = response.data.totalStudents || 0;\n        totalSections.value = response.data.totalSections || 0;\n        totalSubjects.value = response.data.totalSubjects || 0;\n        \n        // Debug the class average score from API response\n        console.log('Average score from API:', response.data.averageScore);\n        console.log('Average score type:', typeof response.data.averageScore);\n        \n        // Update class average score from the response\n        if (response.data.hasOwnProperty('averageScore')) {\n          const scoreValue = parseFloat(response.data.averageScore);\n          console.log('Parsed score value:', scoreValue);\n          averageScore.value = isNaN(scoreValue) ? '0.0' : scoreValue.toFixed(1);\n          console.log('Final average score value:', averageScore.value);\n        } else {\n          averageScore.value = '0.0';\n        }\n        \n        // Update activities\n        recentActivities.value = response.data.recentActivities || [];\n        \n        // ALWAYS fetch attendance data separately to ensure we have the latest\n        await fetchAttendanceData();\n        \n        // Fetch assessment data separately\n        await fetchAssessmentData();\n        \n        // After updating the charts, apply the default filter (month) to each chart\n        // This ensures the charts' data is consistent with the filter state\n        const endDate = moment().format('YYYY-MM-DD');\n        const startDate = moment().subtract(30, 'days').format('YYYY-MM-DD');\n        \n        await Promise.all([\n          fetchChartData('attendance', startDate, endDate),\n          fetchChartData('assessmentType', startDate, endDate),\n          fetchChartData('performanceTrend', startDate, endDate),\n          fetchChartData('assessmentTypePerformance', startDate, endDate)\n        ]);\n\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        // Initialize charts with empty data\n        initEmptyCharts();\n        loading.value = false;\n      }\n    };\n\n    // Add a dedicated function to fetch attendance data\n    const fetchAttendanceData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare attendance parameters\n        const params = new URLSearchParams();\n        params.append('teacherId', teacherId);\n        \n        // Add date range - default to last 30 days if not specified\n        params.append('startDate', selectedStartDate.value || moment().subtract(30, 'days').format('YYYY-MM-DD'));\n        params.append('endDate', selectedEndDate.value || moment().format('YYYY-MM-DD'));\n        \n        // Add filters if selected\n        if (selectedYear.value) params.append('year', selectedYear.value);\n        if (selectedSection.value) params.append('section', selectedSection.value);\n        if (selectedSubject.value) params.append('subject', selectedSubject.value);\n        \n        console.log('Fetching attendance data with params:', Object.fromEntries(params));\n        const url = `http://localhost:8000/api/attendance/stats?${params.toString()}`;\n        console.log('Requesting URL:', url);\n        \n        const response = await axios.get(url, {\n          headers: {\n            'Authorization': `Bearer ${store.state.auth.token}`\n          }\n        });\n        \n        console.log('Attendance data received:', response.data);\n        \n        if (response.data) {\n          // Store in chartData for export\n          chartData.value.attendance = response.data;\n          \n          // Parse attendance counts\n          const present = parseInt(response.data.present) || 0;\n          const late = parseInt(response.data.late) || 0;\n          const absent = parseInt(response.data.absent) || 0;\n          \n          // Update main data store\n          if (data.value) {\n            data.value.attendanceDistribution = [present, late, absent];\n          }\n          \n          // Update attendance chart\n          updatePerformanceChart({\n            attendanceDistribution: [present, late, absent]\n          });\n          \n          console.log('Attendance distribution updated:', [present, late, absent]);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Error fetching attendance data:', error);\n        \n        // Initialize with empty data on error\n        if (data.value) {\n          data.value.attendanceDistribution = [0, 0, 0];\n        }\n        \n        updatePerformanceChart({\n          attendanceDistribution: [0, 0, 0]\n        });\n        \n        return false;\n      }\n    };\n\n    const updatePerformanceChart = (data) => {\n      if (!performanceChart.value) return;\n      \n      const ctx = performanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process attendance distribution data\n      // Expected data format: [present, late, absent]\n      const attendanceData = Array.isArray(data.attendanceDistribution) \n        ? data.attendanceDistribution.slice(0, 3) \n        : [0, 0, 0];\n      \n      console.log('Attendance distribution data:', attendanceData);\n\n      // Calculate total attendance records\n      const totalAttendance = attendanceData.reduce((a, b) => a + (b || 0), 0);\n      \n      // Create attendance distribution chart\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Present', 'Late', 'Absent'],\n          datasets: [\n            {\n              data: attendanceData,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for present\n                'rgba(251, 191, 36, 0.8)',  // Yellow for late\n                'rgba(239, 68, 68, 0.8)',   // Red for absent\n              ],\n              borderColor: [\n                'rgb(15, 140, 80)',         // Darker borders for contrast\n                'rgb(220, 160, 20)',\n                'rgb(220, 50, 50)',\n              ],\n              borderWidth: 1,\n              hoverOffset: 15\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          cutout: '60%',\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw || 0;\n                  const total = attendanceData.reduce((a, b) => a + (b || 0), 0);\n                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                  return `${context.label}: ${value} (${percentage}%)`;\n                }\n              },\n              titleFont: {\n                weight: 'bold',\n                size: 14\n              },\n              bodyFont: {\n                size: 13\n              },\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              padding: 12,\n              cornerRadius: 8\n            }\n          },\n          layout: {\n            padding: {\n              top: 10,\n              right: 20,\n              bottom: 10,\n              left: 20\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypeChart = (data) => {\n      if (!assessmentTypeChart.value) return;\n      \n      const ctx = assessmentTypeChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process incoming data to restructure it\n      const assessmentTypes = ['Quiz', 'Activity', 'Performance Task'];\n      \n      // Check if we have valid data\n      if (!data.assessmentData || !Array.isArray(data.assessmentData) || data.assessmentData.length === 0) {\n        // If no assessment data, just return without creating a chart\n        // The \"No data available\" message will be shown by the template\n        console.log('No assessment data available, skipping chart creation');\n        return;\n      }\n      \n        // Process actual data\n      const processedData = {\n        types: [],\n        scores: [],\n        counts: []\n      };\n      \n      // Filter out assessment types with data\n      const availableTypes = [...new Set(data.assessmentData.map(item => item.type))];\n      \n      // For each available type, get the score and count\n      availableTypes.forEach(type => {\n        const typeData = data.assessmentData.find(a => a.type === type);\n        if (typeData) {\n          processedData.types.push(type);\n          processedData.scores.push(parseFloat(typeData.averageScore) || 0);\n          processedData.counts.push(typeData.count || 0);\n        }\n      });\n      \n      console.log('Processed assessment chart data:', processedData);\n      \n      // Create a simple bar chart showing average scores\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: processedData.types,\n          datasets: [\n            {\n              label: 'Average Score (%)',\n              data: processedData.scores,\n              backgroundColor: [\n                'rgba(52, 211, 153, 0.8)',  // Green for Quiz\n                'rgba(59, 130, 246, 0.8)',  // Blue for Activity\n                'rgba(251, 191, 36, 0.8)',  // Yellow for Performance Task\n              ].slice(0, processedData.types.length),\n              borderColor: [\n                'rgb(15, 140, 80)',\n                'rgb(45, 110, 220)',\n                'rgb(220, 160, 20)',\n              ].slice(0, processedData.types.length),\n              borderWidth: 1,\n              borderRadius: 6,\n              barPercentage: 0.6\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              grid: {\n                color: 'rgba(0, 0, 0, 0.05)'\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              },\n              ticks: {\n                font: {\n                  size: 12\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.dataset.label || '';\n                  const value = context.raw || 0;\n                  return `${label}: ${value}%`;\n                },\n                afterLabel: (context) => {\n                  const type = processedData.types[context.dataIndex];\n                  const count = processedData.counts[context.dataIndex] || 0;\n                  return `Total ${type}s: ${count}`;\n                }\n              },\n              titleFont: {\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                size: 13\n              },\n              padding: 12\n            }\n          }\n        }\n      });\n    };\n\n    const updatePerformanceTrendChart = (data) => {\n      if (!performanceTrendChart.value) {\n        console.warn('Performance trend chart reference not found');\n        return;\n      }\n      \n      const ctx = performanceTrendChart.value.getContext('2d');\n      if (!ctx) {\n        console.warn('Could not get 2d context for performance trend chart');\n        return;\n      }\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) {\n        existingChart.destroy();\n      }\n\n      // Ensure data is valid\n      const validData = Array.isArray(data) ? data : [];\n      console.log('Creating performance trend chart with data:', validData);\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: validData.map(d => moment(d.date).format('MMM D, YYYY')),\n          datasets: [{\n            label: 'Average Score',\n            data: validData.map(d => Number(d.score) || 0),\n            borderColor: '#4CAF50',\n            backgroundColor: 'rgba(76, 175, 80, 0.1)',\n            tension: 0.4,\n            fill: true,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const dataPoint = validData[context.dataIndex];\n                  return `${dataPoint.name}: ${(context.raw || 0).toFixed(1)}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              ticks: {\n                stepSize: 20,\n                font: {\n                  size: 12\n                }\n              },\n              title: {\n                display: true,\n                text: 'Average Score (%)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            x: {\n              ticks: {\n                font: {\n                  size: 12\n                },\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const updateAssessmentTypePerformanceChart = (data) => {\n      if (!assessmentTypePerformanceChart.value) return;\n      \n      const ctx = assessmentTypePerformanceChart.value.getContext('2d');\n      if (!ctx) return;\n\n      const existingChart = Chart.getChart(ctx);\n      if (existingChart) existingChart.destroy();\n\n      // Process the performance trends data by assessment type\n      const trendsByType = {\n        Quiz: [],\n        Activity: [],\n        'Performance Task': []\n      };\n\n      // Process performance trends data\n      if (Array.isArray(data.performanceTrends)) {\n        data.performanceTrends.forEach(trend => {\n          const type = trend.type || trend.name;\n          if (type in trendsByType) {\n            trendsByType[type].push({\n              date: new Date(trend.date),\n              score: parseFloat(trend.score) || 0\n            });\n          }\n        });\n      }\n\n      // Sort data points by date for each type\n      Object.keys(trendsByType).forEach(type => {\n        trendsByType[type].sort((a, b) => a.date - b.date);\n      });\n\n      // Get unique dates across all types\n      const allDates = [...new Set(\n        Object.values(trendsByType)\n          .flat()\n          .map(item => item.date)\n      )].sort((a, b) => a - b);\n\n      // Create datasets\n      const datasets = Object.entries(trendsByType).map(([type, data], index) => {\n        const colors = [\n          'rgb(52, 211, 153)',   // Green for Quiz\n          'rgb(59, 130, 246)',   // Blue for Activity\n          'rgb(251, 191, 36)'    // Yellow for Performance Task\n        ];\n        const color = colors[index];\n\n        return {\n          label: type,\n          data: allDates.map(date => {\n            const point = data.find(d => d.date.getTime() === date.getTime());\n            return point ? point.score : null;\n          }),\n          borderColor: color,\n          backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          fill: true,\n          tension: 0.4,\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          spanGaps: true // This will connect points even if there are null values\n        };\n      });\n\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: allDates.map(date => moment(date).format('MMM D, YYYY')),\n          datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          interaction: {\n            intersect: false,\n            mode: 'index'\n          },\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw !== null ? context.raw.toFixed(1) : 'N/A';\n                  return `${context.dataset.label}: ${value}%`;\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100,\n              title: {\n                display: true,\n                text: 'Score (%)'\n              }\n            },\n            x: {\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const formatDate = (date) => {\n      return moment(date).format('MMM D, YYYY')\n    }\n\n    const applyFilters = async () => {\n      // Save selected values to localStorage\n      if (selectedYear.value) {\n        localStorage.setItem('selectedYear', selectedYear.value)\n      } else {\n        localStorage.removeItem('selectedYear')\n      }\n\n      if (selectedSection.value) {\n        localStorage.setItem('selectedSection', selectedSection.value)\n      } else {\n        localStorage.removeItem('selectedSection')\n      }\n\n      if (selectedSubject.value) {\n        localStorage.setItem('selectedSubject', selectedSubject.value)\n      } else {\n        localStorage.removeItem('selectedSubject')\n      }\n\n      await fetchDashboardData()\n    }\n\n    // Watch for filter changes\n    watch(selectedYear, handleYearChange)\n    watch([selectedSection, selectedSubject], applyFilters)\n    watch([selectedStartDate, selectedEndDate], () => {\n      if (selectedStartDate.value && selectedEndDate.value) {\n        // Validate date range\n        const start = moment(selectedStartDate.value);\n        const end = moment(selectedEndDate.value);\n        \n        if (end.isBefore(start)) {\n          selectedEndDate.value = selectedStartDate.value;\n        }\n        \n        fetchDashboardData();\n      }\n    })\n\n    const fetchAssessmentData = async () => {\n      try {\n        const teacherId = getTeacherId();\n        if (!teacherId) return;\n        \n        // Prepare query parameters\n        const params = {\n          teacherId,\n          year: selectedYear.value || '',\n          section: selectedSection.value || '',\n          subject: selectedSubject.value || ''\n        };\n        \n        if (selectedStartDate.value) params.startDate = selectedStartDate.value;\n        if (selectedEndDate.value) params.endDate = selectedEndDate.value;\n        \n        console.log('Fetching assessment data with params:', params);\n        \n        // Try the assessments/stats endpoint first\n        try {\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments/stats', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        } catch (error) {\n          // If the first endpoint fails, try the fallback endpoint\n          console.log('Falling back to /assessments endpoint');\n          const assessmentResponse = await axios.get('http://localhost:8000/api/assessments', {\n            params,\n            headers: {\n              'Authorization': `Bearer ${store.state.auth.token}`\n            }\n          });\n          \n          processAssessmentResponse(assessmentResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching assessment data:', error);\n        // Initialize assessment charts with empty data\n        updateAssessmentTypeChart({ assessmentData: [] });\n        updatePerformanceTrendChart([]);\n        updateAssessmentTypePerformanceChart({\n          performanceTrends: []\n        });\n      }\n    };\n\n    // Helper function to process assessment response data\n    const processAssessmentResponse = (data) => {\n      if (data) {\n        console.log('Assessment data received:', data);\n        \n        // Update assessment type charts with this data\n        if (data.assessmentTypes) {\n          const assessmentData = [];\n          \n          Object.keys(data.assessmentTypes).forEach(type => {\n            const typeData = data.assessmentTypes[type];\n            if (typeData) {\n              let avgScore = 0;\n              if (typeData.scoreCount && typeData.scoreCount > 0) {\n                avgScore = (typeData.totalScore / typeData.scoreCount).toFixed(1);\n              }\n              \n              assessmentData.push({\n                type: type,\n                averageScore: avgScore,\n                count: typeData.count || 0\n              });\n            }\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n        } else if (Array.isArray(data)) {\n          // If data is an array of assessments, process it into the format we need\n          const assessmentTypes = {\n            'Quiz': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Activity': { count: 0, totalScore: 0, scoreCount: 0 },\n            'Performance Task': { count: 0, totalScore: 0, scoreCount: 0 }\n          };\n          \n          // Process raw assessment data\n          data.forEach(assessment => {\n            const type = assessment.type || 'Other';\n            if (assessmentTypes[type]) {\n              assessmentTypes[type].count++;\n              \n              // Process scores if available\n              if (assessment.scores) {\n                // Handle both array and object formats\n                let scoreArray = [];\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                scoreArray.forEach(score => {\n                  if (typeof score === 'number') {\n                    assessmentTypes[type].totalScore += score;\n                    assessmentTypes[type].scoreCount++;\n                  }\n                });\n              }\n            }\n          });\n          \n          // Convert to format for chart\n          const assessmentData = Object.keys(assessmentTypes).map(type => {\n            const typeData = assessmentTypes[type];\n            const averageScore = typeData.scoreCount > 0 \n              ? (typeData.totalScore / typeData.scoreCount).toFixed(1) \n              : 0;\n            \n            return {\n              type,\n              averageScore,\n              count: typeData.count\n            };\n          });\n          \n          updateAssessmentTypeChart({ assessmentData });\n          \n          // Create performance trends data\n          const performanceTrends = data\n            .filter(a => a.date) // Only include assessments with dates\n            .sort((a, b) => new Date(a.date) - new Date(b.date)) // Sort by date\n            .map(assessment => {\n              // Calculate average score for this assessment\n              let averageScore = 0;\n              let scoreArray = [];\n              \n              if (assessment.scores) {\n                if (Array.isArray(assessment.scores)) {\n                  scoreArray = assessment.scores;\n                } else if (typeof assessment.scores === 'object') {\n                  scoreArray = Object.values(assessment.scores);\n                }\n                \n                const validScores = scoreArray.filter(score => typeof score === 'number');\n                if (validScores.length > 0) {\n                  const totalScore = validScores.reduce((sum, score) => sum + score, 0);\n                  averageScore = totalScore / validScores.length;\n                }\n              }\n              \n              return {\n                date: assessment.date,\n                score: averageScore,\n                name: assessment.name || assessment.title || assessment.type,\n                type: assessment.type\n              };\n            });\n          \n          updatePerformanceTrendChart(performanceTrends);\n          updateAssessmentTypePerformanceChart({\n            performanceTrends\n          });\n        }\n      }\n    };\n\n    onMounted(async () => {\n      if (store.state.auth.user?._id && store.state.auth.token) {\n        console.log('Component mounted, initializing...');\n        \n        // Wait for the next tick to ensure DOM elements are rendered\n        await nextTick();\n        \n        try {\n          // Initialize empty charts first\n          console.log('Initializing empty charts...');\n          \n          initEmptyCharts();\n          \n          console.log('Empty charts initialized');\n          \n          // Fetch sections and subjects\n          await fetchTeacherSectionsAndSubjects(selectedYear.value);\n          console.log('Sections and subjects fetched');\n          \n          // Fetch actual dashboard data\n          await fetchDashboardData();\n          console.log('Initial data fetch completed');\n        } catch (error) {\n          console.error('Error during initialization:', error);\n        }\n      } else {\n        console.error('No user ID or token found');\n      }\n      \n      // Add default chart filter periods\n      Object.keys(chartFilters.value).forEach(chartType => {\n        chartFilters.value[chartType].period = 'month';\n      });\n    })\n\n    return {\n      totalStudents,\n      totalSections,\n      totalSubjects,\n      averageScore,\n      performanceChart,\n      recentActivities,\n      sections,\n      subjects,\n      selectedYear,\n      selectedSection,\n      selectedSubject,\n      hasAttendanceData,\n      hasPerformanceData,\n      hasAssessmentData,\n      hasActivity,\n      formatDate,\n      getFilterDisplay,\n      handleYearChange,\n      applyFilters,\n      assessmentTypeChart,\n      performanceTrendChart,\n      assessmentTypePerformanceChart,\n      selectedStartDate,\n      selectedEndDate,\n      today,\n      loading,\n      availableYears,\n      userName,\n      chartFilters,\n      applyChartDateFilter,\n      generateChartData\n    }\n  }\n}\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 2rem;\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n/* Chart Filters */\n.chart-filters {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n\n.date-filter-group {\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.date-filter-group .btn {\n  border-radius: 0;\n  font-size: 0.8rem;\n  padding: 0.3rem 0.75rem;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  background-color: white;\n  transition: all 0.2s ease;\n}\n\n.date-filter-group .btn:first-child {\n  border-radius: 8px 0 0 8px;\n}\n\n.date-filter-group .btn:last-child {\n  border-radius: 0 8px 8px 0;\n}\n\n.date-filter-group .btn.btn-primary {\n  background-color: #003366;\n  color: white;\n  border-color: #003366;\n}\n\n.date-filter-group .btn.btn-outline-primary:hover {\n  background-color: #f8fafc;\n  color: #003366;\n  border-color: #003366;\n}\n\n/* Greeting Section Styles */\n.greeting-section {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.greeting {\n  font-size: 2.25rem;\n  font-weight: 700;\n  color: #003366;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.5px;\n}\n\n.greeting-subtitle {\n  color: #64748b;\n  font-size: 1.125rem;\n  font-weight: 400;\n  margin: 0;\n}\n\n.dashboard-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #2c3e50;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.dashboard-card {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  display: flex;\n  align-items: center;\n  gap: 1.25rem;\n  height: 100%;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.icon-container {\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  background-color: #003366;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.dashboard-card:hover .icon-container {\n  transform: scale(1.05);\n}\n\n.icon-container i {\n  color: white;\n  font-size: 1.5rem;\n}\n\n.card-info {\n  flex: 1;\n}\n\n.stat-title {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n  font-weight: 600;\n  letter-spacing: 0.3px;\n}\n\n.stat-value {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1e293b;\n  line-height: 1.2;\n}\n\n.stat-value.loading {\n  color: #94a3b8;\n  font-size: 1.5rem;\n}\n\n.no-data {\n  color: #94a3b8;\n  font-style: italic;\n  font-size: 0.875rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 10;\n  border-radius: 8px;\n}\n\n.loading-overlay i {\n  font-size: 2rem;\n  color: #003366;\n  margin-bottom: 1rem;\n}\n\n.loading-overlay p {\n  font-size: 0.9rem;\n  color: #64748b;\n}\n\n.chart-card {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n  height: 100%;\n  padding: 1.5rem;\n}\n\n.card-title {\n  font-size: 1.125rem;\n  font-weight: 700;\n  color: #1e293b;\n  margin-bottom: 0.5rem;\n  letter-spacing: -0.3px;\n}\n\n.chart-description {\n  font-size: 0.85rem;\n  color: #64748b;\n  margin-bottom: 1.25rem;\n  font-style: italic;\n}\n\n.no-data-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #94a3b8;\n  font-style: italic;\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  font-weight: 600;\n  color: #475569;\n  border-bottom-width: 1px;\n  padding: 1rem;\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.table td {\n  padding: 1rem;\n  color: #1e293b;\n  vertical-align: middle;\n  font-size: 0.9rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.table tr:last-child td {\n  border-bottom: none;\n}\n\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 1rem;\n  }\n  \n  .dashboard-card {\n    margin-bottom: 1rem;\n  }\n\n  .filter-menu {\n    width: 100%;\n    max-width: 320px;\n  }\n\n  .btn-filter {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Filter and Form Styles */\n.btn-filter {\n  background-color: white;\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem 1.25rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  min-width: 220px;\n  text-align: left;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn-filter:hover {\n  background-color: #f8fafc;\n  border-color: #003366;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-menu {\n  width: 320px;\n  padding: 1.25rem;\n  border: none;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  border-radius: 12px;\n}\n\n.dropdown-header {\n  color: #003366;\n  font-weight: 700;\n  padding: 0;\n  margin-bottom: 1.25rem;\n  font-size: 1rem;\n}\n\n.form-label {\n  font-weight: 600;\n  color: #475569;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-select, .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 0.625rem;\n  font-size: 0.9rem;\n  color: #1e293b;\n  background-color: #fff;\n  transition: all 0.2s ease;\n}\n\n.form-select:hover, .form-control:hover {\n  border-color: #003366;\n}\n\n.form-select:focus, .form-control:focus {\n  border-color: #003366;\n  box-shadow: 0 0 0 2px rgba(0, 51, 102, 0.1);\n}\n\n.form-select:disabled {\n  background-color: #f1f5f9;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.dropdown-divider {\n  margin: 1.25rem 0;\n  border-top: 1px solid #e2e8f0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
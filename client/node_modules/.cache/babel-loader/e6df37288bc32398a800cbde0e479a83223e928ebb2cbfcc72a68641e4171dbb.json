{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  __name: 'CompletedSurveys',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const surveys = ref([]);\n    const loading = ref(true);\n    const searchQuery = ref('');\n\n    // Filter surveys based on search query\n    const filteredSurveys = computed(() => {\n      if (!searchQuery.value) return surveys.value;\n      const query = searchQuery.value.toLowerCase();\n      return surveys.value.filter(survey => survey.studentId.toLowerCase().includes(query) || survey.studentName.toLowerCase().includes(query));\n    });\n\n    // Format date\n    const formatDate = dateString => {\n      return moment(dateString).format('MMM D, YYYY h:mm A');\n    };\n\n    // Fetch all submitted surveys\n    const fetchCompletedSurveys = async () => {\n      try {\n        loading.value = true;\n        const token = store.state.auth.token;\n\n        // Get all completed surveys\n        const response = await axios.get('http://localhost:8000/api/survey/submitted', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.data) {\n          surveys.value = response.data;\n        }\n      } catch (error) {\n        console.error('Error fetching completed surveys:', error);\n        surveys.value = [];\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // View survey results\n    const viewSurveyResults = surveyId => {\n      // Implement view functionality - could open a modal or navigate to details\n      console.log('View survey', surveyId);\n      // You can add detailed view implementation later\n    };\n    onMounted(() => {\n      fetchCompletedSurveys();\n    });\n    const __returned__ = {\n      store,\n      surveys,\n      loading,\n      searchQuery,\n      filteredSurveys,\n      formatDate,\n      fetchCompletedSurveys,\n      viewSurveyResults,\n      ref,\n      computed,\n      onMounted,\n      get useStore() {\n        return useStore;\n      },\n      get axios() {\n        return axios;\n      },\n      get moment() {\n        return moment;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useStore","axios","moment","store","surveys","loading","searchQuery","filteredSurveys","value","query","toLowerCase","filter","survey","studentId","includes","studentName","formatDate","dateString","format","fetchCompletedSurveys","token","state","auth","response","get","headers","data","error","console","viewSurveyResults","surveyId","log"],"sources":["D:/au_dev/client/src/views/CompletedSurveys.vue"],"sourcesContent":["<template>\r\n  <div class=\"completed-surveys\">\r\n    <div class=\"container\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <h2 class=\"page-title\">\r\n          <i class=\"fas fa-clipboard-check me-2\"></i>\r\n          Completed Surveys\r\n        </h2>\r\n\r\n        <div class=\"filters d-flex align-items-center gap-3\">\r\n          <div class=\"search-box\">\r\n            <div class=\"input-group\">\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                placeholder=\"Search student...\" \r\n                v-model=\"searchQuery\"\r\n              >\r\n              <span class=\"input-group-text\">\r\n                <i class=\"fas fa-search\"></i>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading State -->\r\n      <div class=\"text-center my-5\" v-if=\"loading\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n        <p class=\"mt-2\">Loading completed surveys...</p>\r\n      </div>\r\n\r\n      <!-- No Results -->\r\n      <div class=\"card no-results\" v-else-if=\"!loading && filteredSurveys.length === 0\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <i class=\"fas fa-clipboard fa-3x mb-3 text-muted\"></i>\r\n          <h5>No Completed Surveys Found</h5>\r\n          <p class=\"text-muted\">\r\n            {{ searchQuery ? \"No students match your search query.\" : \"No students have completed surveys yet.\" }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Results Table -->\r\n      <div class=\"card\" v-else>\r\n        <div class=\"card-body p-0\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-hover survey-table mb-0\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Student ID</th>\r\n                  <th>Student Name</th>\r\n                  <th>Submission Date</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"survey in filteredSurveys\" :key=\"survey._id\">\r\n                  <td>{{ survey.studentId }}</td>\r\n                  <td>{{ survey.studentName }}</td>\r\n                  <td>{{ formatDate(survey.updatedAt) }}</td>\r\n                  <td>\r\n                    <div class=\"btn-group\">\r\n                      <button \r\n                        class=\"btn btn-sm btn-outline-primary\" \r\n                        @click=\"viewSurveyResults(survey._id)\"\r\n                        title=\"View Survey Responses\"\r\n                      >\r\n                        <i class=\"fas fa-eye\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\nconst store = useStore()\r\nconst surveys = ref([])\r\nconst loading = ref(true)\r\nconst searchQuery = ref('')\r\n\r\n// Filter surveys based on search query\r\nconst filteredSurveys = computed(() => {\r\n  if (!searchQuery.value) return surveys.value\r\n  \r\n  const query = searchQuery.value.toLowerCase()\r\n  return surveys.value.filter(survey => \r\n    survey.studentId.toLowerCase().includes(query) || \r\n    survey.studentName.toLowerCase().includes(query)\r\n  )\r\n})\r\n\r\n// Format date\r\nconst formatDate = (dateString) => {\r\n  return moment(dateString).format('MMM D, YYYY h:mm A')\r\n}\r\n\r\n// Fetch all submitted surveys\r\nconst fetchCompletedSurveys = async () => {\r\n  try {\r\n    loading.value = true\r\n    const token = store.state.auth.token\r\n    \r\n    // Get all completed surveys\r\n    const response = await axios.get('http://localhost:8000/api/survey/submitted', {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    })\r\n    \r\n    if (response.data) {\r\n      surveys.value = response.data\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching completed surveys:', error)\r\n    surveys.value = []\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// View survey results\r\nconst viewSurveyResults = (surveyId) => {\r\n  // Implement view functionality - could open a modal or navigate to details\r\n  console.log('View survey', surveyId)\r\n  // You can add detailed view implementation later\r\n}\r\n\r\nonMounted(() => {\r\n  fetchCompletedSurveys()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.completed-surveys {\r\n  padding: 2rem;\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.page-title {\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  color: #003366;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.search-box .input-group {\r\n  width: 280px;\r\n}\r\n\r\n.search-box .form-control {\r\n  border-right: none;\r\n}\r\n\r\n.search-box .input-group-text {\r\n  background-color: white;\r\n  border-left: none;\r\n}\r\n\r\n.survey-table th {\r\n  font-weight: 600;\r\n  color: #4a5568;\r\n  padding: 1rem;\r\n  white-space: nowrap;\r\n}\r\n\r\n.survey-table td {\r\n  padding: 1rem;\r\n  vertical-align: middle;\r\n}\r\n\r\n.no-results {\r\n  background-color: #fff;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.btn-outline-primary {\r\n  color: #003366;\r\n  border-color: #003366;\r\n}\r\n\r\n.btn-outline-primary:hover {\r\n  background-color: #003366;\r\n  color: white;\r\n}\r\n</style> "],"mappings":";;AAqFA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAK;AAC9C,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,QAAQ;;;;;;;IAE3B,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,OAAO,GAAGP,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMQ,OAAO,GAAGR,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMS,WAAW,GAAGT,GAAG,CAAC,EAAE,CAAC;;IAE3B;IACA,MAAMU,eAAe,GAAGT,QAAQ,CAAC,MAAM;MACrC,IAAI,CAACQ,WAAW,CAACE,KAAK,EAAE,OAAOJ,OAAO,CAACI,KAAK;MAE5C,MAAMC,KAAK,GAAGH,WAAW,CAACE,KAAK,CAACE,WAAW,CAAC,CAAC;MAC7C,OAAON,OAAO,CAACI,KAAK,CAACG,MAAM,CAACC,MAAM,IAChCA,MAAM,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC,IAC9CG,MAAM,CAACG,WAAW,CAACL,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CACjD,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMO,UAAU,GAAIC,UAAU,IAAK;MACjC,OAAOf,MAAM,CAACe,UAAU,CAAC,CAACC,MAAM,CAAC,oBAAoB,CAAC;IACxD,CAAC;;IAED;IACA,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACFd,OAAO,CAACG,KAAK,GAAG,IAAI;QACpB,MAAMY,KAAK,GAAGjB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACF,KAAK;;QAEpC;QACA,MAAMG,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAAC,4CAA4C,EAAE;UAC7EC,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUL,KAAK;UAAG;QAChD,CAAC,CAAC;QAEF,IAAIG,QAAQ,CAACG,IAAI,EAAE;UACjBtB,OAAO,CAACI,KAAK,GAAGe,QAAQ,CAACG,IAAI;QAC/B;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzDvB,OAAO,CAACI,KAAK,GAAG,EAAE;MACpB,CAAC,SAAS;QACRH,OAAO,CAACG,KAAK,GAAG,KAAK;MACvB;IACF,CAAC;;IAED;IACA,MAAMqB,iBAAiB,GAAIC,QAAQ,IAAK;MACtC;MACAF,OAAO,CAACG,GAAG,CAAC,aAAa,EAAED,QAAQ,CAAC;MACpC;IACF,CAAC;IAED/B,SAAS,CAAC,MAAM;MACdoB,qBAAqB,CAAC,CAAC;IACzB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}